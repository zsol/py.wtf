{"name": "packaging", "metadata": {"name": "packaging", "version": "24.2", "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: 3.10", "Programming Language :: Python :: 3.11", "Programming Language :: Python :: 3.12", "Programming Language :: Python :: 3.13", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Typing :: Typed"], "home_page": null, "license": null, "documentation_url": "https://packaging.pypa.io/", "dependencies": [], "summary": "Core utilities for Python packages", "upload_time": 1731059264}, "documentation": ["# packaging\n\n% start-intro\n\nReusable core utilities for various Python Packaging\n[interoperability specifications](https://packaging.python.org/specifications/).\n\nThis library provides utilities that implement the interoperability\nspecifications which have clearly one correct behaviour (eg: {pep}`440`)\nor benefit greatly from having a single shared implementation (eg: {pep}`425`).\n\n% end-intro\n\nThe `packaging` project includes the following: version handling, specifiers,\nmarkers, requirements, tags, utilities.\n\n## Documentation\n\nThe [documentation] provides information and the API for the following:\n\n- Version Handling\n- Specifiers\n- Markers\n- Requirements\n- Tags\n- Utilities\n\n## Installation\n\nUse `pip` to install these utilities:\n\n```\npip install packaging\n```\n\nThe `packaging` library uses calendar-based versioning (`YY.N`).\n\n## Discussion\n\nIf you run into bugs, you can file them in our [issue tracker].\n\nYou can also join `#pypa` on Freenode to ask questions or get involved.\n\n## Code of Conduct\n\nEveryone interacting in the packaging project's codebases, issue trackers, chat\nrooms, and mailing lists is expected to follow the [PSF Code of Conduct].\n\n## Contributing\n\nThe `CONTRIBUTING.rst` file outlines how to contribute to this project as\nwell as how to report a potential security issue. The documentation for this\nproject also covers information about [project development] and [security].\n\n## Project History\n\nPlease review the `CHANGELOG.rst` file or the [Changelog documentation] for\nrecent changes and project history.\n\n[changelog documentation]: https://packaging.pypa.io/en/latest/changelog/\n[documentation]: https://packaging.pypa.io/\n[issue tracker]: https://github.com/pypa/packaging/issues\n[project development]: https://packaging.pypa.io/en/latest/development/\n[psf code of conduct]: https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md\n[security]: https://packaging.pypa.io/en/latest/security/\n"], "modules": [{"name": "packaging.requirements", "documentation": ["This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [], "variables": [], "classes": [{"name": "packaging.requirements.InvalidRequirement", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An invalid requirement was found, users should refer to PEP 508."]}, {"name": "packaging.requirements.Requirement", "bases": [], "methods": [{"name": "packaging.requirements.Requirement.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requirement_string", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["TODO: Can we test whether something is contained within a requirement?", "If so how do we do that? Do we need to test against the _name_ of", "the thing as well as the version? What about the markers?", "TODO: Can we normalize the name and extra name?"]}, {"name": "packaging.requirements.Requirement._iter_parts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.requirements.Requirement.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.requirements.Requirement.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.requirements.Requirement.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.requirements.Requirement.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Parse a requirement.\n\nParse a given requirement string into its parts, such as name, specifier,\nURL, and extras. Raises InvalidRequirement on a badly-formed requirement\nstring."]}], "exports": []}, {"name": "packaging.licenses", "documentation": ["######################################################################################", "Adapted from:", "https://github.com/pypa/hatch/blob/5352e44/backend/src/hatchling/licenses/parse.py", "MIT License", "Copyright (c) 2017-present Ofek Lev <oss@ofek.dev>", "Permission is hereby granted, free of charge, to any person obtaining a copy of this", "software and associated documentation files (the \"Software\"), to deal in the Software", "without restriction, including without limitation the rights to use, copy, modify,", "merge, publish, distribute, sublicense, and/or sell copies of the Software, and to", "permit persons to whom the Software is furnished to do so, subject to the following", "conditions:", "The above copyright notice and this permission notice shall be included in all copies", "or substantial portions of the Software.", "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,", "INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A", "PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT", "HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF", "CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE", "OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "With additional allowance of arbitrary `LicenseRef-` identifiers, not just", "`LicenseRef-Public-Domain` and `LicenseRef-Proprietary`.", "######################################################################################"], "functions": [{"name": "packaging.licenses.canonicalize_license_expression", "asynchronous": false, "params": [{"name": "raw_license_expression", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "NormalizedLicenseExpression", "xref": {"fqname": "NormalizedLicenseExpression", "project": null}, "params": null}, "documentation": []}], "variables": [{"name": "packaging.licenses.license_ref_allowed", "type": null, "documentation": []}, {"name": "packaging.licenses.NormalizedLicenseExpression", "type": null, "documentation": []}], "classes": [{"name": "packaging.licenses.InvalidLicenseExpression", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Raised when a license-expression string is invalid\n\n```pycon\n>>> canonicalize_license_expression(\"invalid\")\nTraceback (most recent call last):\n    ...\npackaging.licenses.InvalidLicenseExpression: Invalid license expression: 'invalid'\n```\n"]}], "exports": [{"name": "packaging.licenses.canonicalize_license_expression", "xref": {"fqname": "packaging.licenses.canonicalize_license_expression", "project": null}}, {"name": "packaging.licenses.InvalidLicenseExpression", "xref": {"fqname": "packaging.licenses.InvalidLicenseExpression", "project": null}}, {"name": "packaging.licenses.NormalizedLicenseExpression", "xref": {"fqname": "packaging.licenses.NormalizedLicenseExpression", "project": null}}]}, {"name": "packaging._structures", "documentation": ["This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [], "variables": [{"name": "packaging._structures.Infinity", "type": null, "documentation": []}, {"name": "packaging._structures.NegativeInfinity", "type": null, "documentation": []}], "classes": [{"name": "packaging._structures.InfinityType", "bases": [], "methods": [{"name": "packaging._structures.InfinityType.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._structures.InfinityType.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._structures.InfinityType.__lt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._structures.InfinityType.__le__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._structures.InfinityType.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._structures.InfinityType.__gt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._structures.InfinityType.__ge__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._structures.InfinityType.__neg__", "asynchronous": false, "params": [{"name": "self", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "NegativeInfinityType", "xref": {"fqname": "NegativeInfinityType", "project": null}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "packaging._structures.NegativeInfinityType", "bases": [], "methods": [{"name": "packaging._structures.NegativeInfinityType.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._structures.NegativeInfinityType.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._structures.NegativeInfinityType.__lt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._structures.NegativeInfinityType.__le__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._structures.NegativeInfinityType.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._structures.NegativeInfinityType.__gt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._structures.NegativeInfinityType.__ge__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._structures.NegativeInfinityType.__neg__", "asynchronous": false, "params": [{"name": "self", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "InfinityType", "xref": {"fqname": "packaging._structures.InfinityType", "project": null}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "packaging._manylinux", "documentation": [], "functions": [{"name": "packaging._manylinux._parse_elf", "asynchronous": false, "params": [{"name": "path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Generator", "xref": {"fqname": "typing.Generator", "project": "--std--"}, "params": [{"name": "ELFFile | None", "xref": null, "params": null}, {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}]}, "documentation": ["`os.PathLike` not a generic type until Python 3.9, so sticking with `str`", "as the type for `path` until then."]}, {"name": "packaging._manylinux._is_linux_armhf", "asynchronous": false, "params": [{"name": "executable", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._manylinux._is_linux_i686", "asynchronous": false, "params": [{"name": "executable", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._manylinux._have_compatible_abi", "asynchronous": false, "params": [{"name": "executable", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "archs", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._manylinux._glibc_version_string_confstr", "asynchronous": false, "params": [], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["Primary implementation of glibc_version_string using os.confstr."]}, {"name": "packaging._manylinux._glibc_version_string_ctypes", "asynchronous": false, "params": [], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["Fallback implementation of glibc_version_string using ctypes."]}, {"name": "packaging._manylinux._glibc_version_string", "asynchronous": false, "params": [], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["Returns glibc version string, or None if not using glibc."]}, {"name": "packaging._manylinux._parse_glibc_version", "asynchronous": false, "params": [{"name": "version_str", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "documentation": ["Parse glibc version.\n\nWe use a regexp instead of str.split because we want to discard any\nrandom junk that might come after the minor version -- this might happen\nin patched/forked versions of glibc (e.g. Linaro's version of glibc\nuses version strings like \"2.20-2014.11\"). See gh-3588."]}, {"name": "packaging._manylinux._get_glibc_version", "asynchronous": false, "params": [], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging._manylinux._is_compatible", "asynchronous": false, "params": [{"name": "arch", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "version", "type": {"name": "_GLibCVersion", "xref": {"fqname": "packaging._manylinux._GLibCVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["From PEP 513, PEP 600"]}, {"name": "packaging._manylinux.platform_tags", "asynchronous": false, "params": [{"name": "archs", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Generate manylinux tags compatible to the current platform.\n\n```\nparam archs\n\nSequence of compatible architectures.\nThe first one shall be the closest to the actual architecture and be the part of\nplatform tag after the linux_ prefix, e.g. x86_64.\nThe linux_ prefix is assumed as a prerequisite for the current platform to\nbe manylinux-compatible.\n\nreturns\n\nAn iterator of compatible manylinux tags.\n```\n"]}], "variables": [{"name": "packaging._manylinux.EF_ARM_ABIMASK", "type": null, "documentation": []}, {"name": "packaging._manylinux.EF_ARM_ABI_VER5", "type": null, "documentation": []}, {"name": "packaging._manylinux.EF_ARM_ABI_FLOAT_HARD", "type": null, "documentation": []}, {"name": "packaging._manylinux._LAST_GLIBC_MINOR", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging._manylinux._LEGACY_MANYLINUX_MAP", "type": null, "documentation": []}], "classes": [{"name": "packaging._manylinux._GLibCVersion", "bases": ["NamedTuple"], "methods": [], "class_variables": [{"name": "packaging._manylinux._GLibCVersion.major", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._manylinux._GLibCVersion.minor", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "packaging.tags", "documentation": ["This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [{"name": "packaging.tags.parse_tag", "asynchronous": false, "params": [{"name": "tag", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "frozenset", "xref": {"fqname": "functions.frozenset", "project": "--std--"}, "params": [{"name": "Tag", "xref": {"fqname": "packaging.tags.Tag", "project": null}, "params": null}]}, "documentation": ["Parses the provided tag (e.g. `py3-none-any`) into a frozenset of Tag instances.\n\nReturning a set is required due to the possibility that the tag is a\ncompressed tag set."]}, {"name": "packaging.tags._get_config_var", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "int | str | None", "xref": null, "params": null}, "documentation": []}, {"name": "packaging.tags._normalize_string", "asynchronous": false, "params": [{"name": "string", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.tags._is_threaded_cpython", "asynchronous": false, "params": [{"name": "abis", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Determine if the ABI corresponds to a threaded (`--disable-gil`) build.\n\nThe threaded builds are indicated by a \"t\" in the abiflags."]}, {"name": "packaging.tags._abi3_applies", "asynchronous": false, "params": [{"name": "python_version", "type": {"name": "PythonVersion", "xref": {"fqname": "PythonVersion", "project": null}, "params": null}, "default": null}, {"name": "threading", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Determine if the Python version supports abi3.\n\nPEP 384 was first implemented in Python 3.2. The threaded (`--disable-gil`)\nbuilds do not support abi3."]}, {"name": "packaging.tags._cpython_abis", "asynchronous": false, "params": [{"name": "py_version", "type": {"name": "PythonVersion", "xref": {"fqname": "PythonVersion", "project": null}, "params": null}, "default": null}, {"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.tags.cpython_tags", "asynchronous": false, "params": [{"name": "python_version", "type": {"name": "PythonVersion | None", "xref": null, "params": null}, "default": "..."}, {"name": "abis", "type": {"name": "Iterable[str] | None", "xref": null, "params": null}, "default": "..."}, {"name": "platforms", "type": {"name": "Iterable[str] | None", "xref": null, "params": null}, "default": "..."}, {"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Tag", "xref": {"fqname": "packaging.tags.Tag", "project": null}, "params": null}]}, "documentation": ["Yields the tags for a CPython interpreter.\n\nThe tags consist of:\n- cp<python_version>-<abi>-<platform>\n- cp<python_version>-abi3-<platform>\n- cp<python_version>-none-<platform>\n- cp<less than python_version>-abi3-<platform>  # Older Python versions down to 3.2.\n\nIf python_version only specifies a major version then user-provided ABIs and\nthe 'none' ABItag will be used.\n\nIf 'abi3' or 'none' are specified in 'abis' then they will be yielded at\ntheir normal position and not at the beginning."]}, {"name": "packaging.tags._generic_abi", "asynchronous": false, "params": [], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Return the ABI tag based on EXT_SUFFIX."]}, {"name": "packaging.tags.generic_tags", "asynchronous": false, "params": [{"name": "interpreter", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "abis", "type": {"name": "Iterable[str] | None", "xref": null, "params": null}, "default": "..."}, {"name": "platforms", "type": {"name": "Iterable[str] | None", "xref": null, "params": null}, "default": "..."}, {"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Tag", "xref": {"fqname": "packaging.tags.Tag", "project": null}, "params": null}]}, "documentation": ["Yields the tags for a generic interpreter.\n\nThe tags consist of:\n- <interpreter>-<abi>-<platform>\n\nThe \"none\" ABI will be added if it was not explicitly provided."]}, {"name": "packaging.tags._py_interpreter_range", "asynchronous": false, "params": [{"name": "py_version", "type": {"name": "PythonVersion", "xref": {"fqname": "PythonVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Yields Python versions in descending order.\n\nAfter the latest version, the major-only version will be yielded, and then\nall previous versions of that major version."]}, {"name": "packaging.tags.compatible_tags", "asynchronous": false, "params": [{"name": "python_version", "type": {"name": "PythonVersion | None", "xref": null, "params": null}, "default": "..."}, {"name": "interpreter", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "platforms", "type": {"name": "Iterable[str] | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Tag", "xref": {"fqname": "packaging.tags.Tag", "project": null}, "params": null}]}, "documentation": ["Yields the sequence of tags that are compatible with a specific version of Python.\n\nThe tags consist of:\n- py*-none-<platform>\n- <interpreter>-none-any  # ... if `interpreter` is provided.\n- py*-none-any"]}, {"name": "packaging.tags._mac_arch", "asynchronous": false, "params": [{"name": "arch", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "is_32bit", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.tags._mac_binary_formats", "asynchronous": false, "params": [{"name": "version", "type": {"name": "AppleVersion", "xref": {"fqname": "AppleVersion", "project": null}, "params": null}, "default": null}, {"name": "cpu_arch", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.tags.mac_platforms", "asynchronous": false, "params": [{"name": "version", "type": {"name": "AppleVersion | None", "xref": null, "params": null}, "default": "..."}, {"name": "arch", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Yields the platform tags for a macOS system.\n\nThe `version` parameter is a two-item tuple specifying the macOS version to\ngenerate platform tags for. The `arch` parameter is the CPU architecture to\ngenerate platform tags for. Both parameters default to the appropriate value\nfor the current system."]}, {"name": "packaging.tags.ios_platforms", "asynchronous": false, "params": [{"name": "version", "type": {"name": "AppleVersion | None", "xref": null, "params": null}, "default": "..."}, {"name": "multiarch", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Yields the platform tags for an iOS system.\n\n```\nparam version\n\nA two-item tuple specifying the iOS version to generate\nplatform tags for. Defaults to the current iOS version.\n\nparam multiarch\n\nThe CPU architecture+ABI to generate platform tags for -\n(the value used by  e.g.,\n or ). Defaults to the current\nmultiarch value.\n```\n"]}, {"name": "packaging.tags._linux_platforms", "asynchronous": false, "params": [{"name": "is_32bit", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.tags._generic_platforms", "asynchronous": false, "params": [], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.tags.platform_tags", "asynchronous": false, "params": [], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Provides the platform tags for this installation."]}, {"name": "packaging.tags.interpreter_name", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Returns the name of the running interpreter.\n\nSome implementations have a reserved, two-letter abbreviation which will\nbe returned when appropriate."]}, {"name": "packaging.tags.interpreter_version", "asynchronous": false, "params": [{"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Returns the version of the running interpreter."]}, {"name": "packaging.tags._version_nodot", "asynchronous": false, "params": [{"name": "version", "type": {"name": "PythonVersion", "xref": {"fqname": "PythonVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.tags.sys_tags", "asynchronous": false, "params": [{"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Tag", "xref": {"fqname": "packaging.tags.Tag", "project": null}, "params": null}]}, "documentation": ["Returns the sequence of tag triples for the running interpreter.\n\nThe order of the sequence corresponds to priority order for the\ninterpreter, from most to least important."]}], "variables": [{"name": "packaging.tags.logger", "type": null, "documentation": []}, {"name": "packaging.tags.PythonVersion", "type": null, "documentation": []}, {"name": "packaging.tags.AppleVersion", "type": null, "documentation": []}, {"name": "packaging.tags.INTERPRETER_SHORT_NAMES", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.tags._32_BIT_INTERPRETER", "type": null, "documentation": []}], "classes": [{"name": "packaging.tags.Tag", "bases": [], "methods": [{"name": "packaging.tags.Tag.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "interpreter", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "abi", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "platform", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.tags.Tag.interpreter", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.tags.Tag.abi", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.tags.Tag.platform", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.tags.Tag.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.tags.Tag.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.tags.Tag.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.tags.Tag.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "packaging.tags.Tag.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A representation of the tag triple for a wheel.\n\nInstances are considered immutable and thus are hashable. Equality checking\nis also supported."]}], "exports": []}, {"name": "packaging.licenses._spdx", "documentation": [], "functions": [], "variables": [{"name": "packaging.licenses._spdx.VERSION", "type": null, "documentation": []}, {"name": "packaging.licenses._spdx.LICENSES", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "SPDXLicense", "xref": {"fqname": "packaging.licenses._spdx.SPDXLicense", "project": null}, "params": null}]}, "documentation": []}, {"name": "packaging.licenses._spdx.EXCEPTIONS", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "SPDXException", "xref": {"fqname": "packaging.licenses._spdx.SPDXException", "project": null}, "params": null}]}, "documentation": []}], "classes": [{"name": "packaging.licenses._spdx.SPDXLicense", "bases": ["TypedDict"], "methods": [], "class_variables": [{"name": "packaging.licenses._spdx.SPDXLicense.id", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.licenses._spdx.SPDXLicense.deprecated", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "packaging.licenses._spdx.SPDXException", "bases": ["TypedDict"], "methods": [], "class_variables": [{"name": "packaging.licenses._spdx.SPDXException.id", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.licenses._spdx.SPDXException.deprecated", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "packaging._elffile", "documentation": ["ELF file parser.\n\nThis provides a class `ELFFile` that parses an ELF executable in a similar\ninterface to `ZipFile`. Only the read interface is implemented.\n\nBased on: <https://gist.github.com/lyssdod/f51579ae8d93c8657a5564aefc2ffbca>\nELF header: <https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html>\n"], "functions": [], "variables": [], "classes": [{"name": "packaging._elffile.ELFInvalid", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "packaging._elffile.EIClass", "bases": ["enum.IntEnum"], "methods": [], "class_variables": [{"name": "packaging._elffile.EIClass.C32", "type": null, "documentation": []}, {"name": "packaging._elffile.EIClass.C64", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "packaging._elffile.EIData", "bases": ["enum.IntEnum"], "methods": [], "class_variables": [{"name": "packaging._elffile.EIData.Lsb", "type": null, "documentation": []}, {"name": "packaging._elffile.EIData.Msb", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "packaging._elffile.EMachine", "bases": ["enum.IntEnum"], "methods": [], "class_variables": [{"name": "packaging._elffile.EMachine.I386", "type": null, "documentation": []}, {"name": "packaging._elffile.EMachine.S390", "type": null, "documentation": []}, {"name": "packaging._elffile.EMachine.Arm", "type": null, "documentation": []}, {"name": "packaging._elffile.EMachine.X8664", "type": null, "documentation": []}, {"name": "packaging._elffile.EMachine.AArc64", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "packaging._elffile.ELFFile", "bases": [], "methods": [{"name": "packaging._elffile.ELFFile.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "f", "type": {"name": "IO", "xref": {"fqname": "typing.IO", "project": "--std--"}, "params": [{"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._elffile.ELFFile._read", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "fmt", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": []}, {"name": "packaging._elffile.ELFFile.interpreter", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["The path recorded in the `PT_INTERP` section header.\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Representation of an ELF executable."]}], "exports": []}, {"name": "packaging.markers", "documentation": ["This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [{"name": "packaging.markers._normalize_extra_values", "asynchronous": false, "params": [{"name": "results", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": ["Normalize extra values."]}, {"name": "packaging.markers._format_marker", "asynchronous": false, "params": [{"name": "marker", "type": {"name": "list[str] | MarkerAtom | str", "xref": null, "params": null}, "default": null}, {"name": "first", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.markers._eval_op", "asynchronous": false, "params": [{"name": "lhs", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "op", "type": {"name": "Op", "xref": {"fqname": "packaging.markers._parser.Op", "project": null}, "params": null}, "default": null}, {"name": "rhs", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.markers._normalize", "asynchronous": false, "params": [{"name": "*values", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "key", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": []}, {"name": "packaging.markers._evaluate_markers", "asynchronous": false, "params": [{"name": "markers", "type": {"name": "MarkerList", "xref": {"fqname": "packaging.markers._parser.MarkerList", "project": null}, "params": null}, "default": null}, {"name": "environment", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.markers.format_full_version", "asynchronous": false, "params": [{"name": "info", "type": {"name": "sys._version_info", "xref": {"fqname": "sys._version_info", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.markers.default_environment", "asynchronous": false, "params": [], "returns": {"name": "Environment", "xref": {"fqname": "packaging.markers.Environment", "project": null}, "params": null}, "documentation": []}, {"name": "packaging.markers._repair_python_full_version", "asynchronous": false, "params": [{"name": "env", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Work around platform.python_version() returning something that is not PEP 440\ncompliant for non-tagged Python builds."]}], "variables": [{"name": "packaging.markers.Operator", "type": null, "documentation": []}, {"name": "packaging.markers._operators", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Operator", "xref": {"fqname": "Operator", "project": null}, "params": null}]}, "documentation": []}], "classes": [{"name": "packaging.markers.InvalidMarker", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An invalid marker was found, users should refer to PEP 508."]}, {"name": "packaging.markers.UndefinedComparison", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An invalid operation was attempted on a value that doesn't support it."]}, {"name": "packaging.markers.UndefinedEnvironmentName", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A name was attempted to be used that does not exist inside of the\nenvironment."]}, {"name": "packaging.markers.Environment", "bases": ["TypedDict"], "methods": [], "class_variables": [{"name": "packaging.markers.Environment.implementation_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The implementation's identifier, e.g. `'cpython'`.\n"]}, {"name": "packaging.markers.Environment.implementation_version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The implementation's version, e.g. `'3.13.0a2'` for CPython 3.13.0a2, or\n`'7.3.13'` for PyPy3.10 v7.3.13.\n"]}, {"name": "packaging.markers.Environment.os_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The value of {py:data}`os.name`. The name of the operating system dependent module\nimported, e.g. `'posix'`.\n"]}, {"name": "packaging.markers.Environment.platform_machine", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Returns the machine type, e.g. `'i386'`.\n\nAn empty string if the value cannot be determined.\n"]}, {"name": "packaging.markers.Environment.platform_release", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The system's release, e.g. `'2.2.0'` or `'NT'`.\n\nAn empty string if the value cannot be determined.\n"]}, {"name": "packaging.markers.Environment.platform_system", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The system/OS name, e.g. `'Linux'`, `'Windows'` or `'Java'`.\n\nAn empty string if the value cannot be determined.\n"]}, {"name": "packaging.markers.Environment.platform_version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The system's release version, e.g. `'#3 on degas'`.\n\nAn empty string if the value cannot be determined.\n"]}, {"name": "packaging.markers.Environment.python_full_version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The Python version as string `'major.minor.patchlevel'`.\n\nNote that unlike the Python {py:data}`sys.version`, this value will always include\nthe patchlevel (it defaults to 0).\n"]}, {"name": "packaging.markers.Environment.platform_python_implementation", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A string identifying the Python implementation, e.g. `'CPython'`.\n"]}, {"name": "packaging.markers.Environment.python_version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The Python version as string `'major.minor'`.\n"]}, {"name": "packaging.markers.Environment.sys_platform", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["This string contains a platform identifier that can be used to append\nplatform-specific components to {py:data}`sys.path`, for instance.\n\nFor Unix systems, except on Linux and AIX, this is the lowercased OS name as\nreturned by `uname -s` with the first part of the version as returned by\n`uname -r` appended, e.g. `'sunos5'` or `'freebsd8'`, at the time when Python\nwas built.\n"]}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "packaging.markers.Marker", "bases": [], "methods": [{"name": "packaging.markers.Marker.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "marker", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.markers.Marker.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.markers.Marker.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.markers.Marker.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.markers.Marker.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.markers.Marker.evaluate", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "environment", "type": {"name": "dict[str, str] | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Evaluate a marker.\n\nReturn the boolean from evaluating the given marker against the\nenvironment. environment is an optional argument to override all or\npart of the determined environment.\n\nThe environment is determined from the current Python process."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": [{"name": "packaging.markers.default_environment", "xref": {"fqname": "packaging.markers.default_environment", "project": null}}, {"name": "packaging.markers.InvalidMarker", "xref": {"fqname": "packaging.markers.InvalidMarker", "project": null}}, {"name": "packaging.markers.Marker", "xref": {"fqname": "packaging.markers.Marker", "project": null}}, {"name": "packaging.markers.UndefinedComparison", "xref": {"fqname": "packaging.markers.UndefinedComparison", "project": null}}, {"name": "packaging.markers.UndefinedEnvironmentName", "xref": {"fqname": "packaging.markers.UndefinedEnvironmentName", "project": null}}]}, {"name": "packaging._musllinux", "documentation": ["PEP 656 support.\n\nThis module implements logic to detect if the currently running Python is\nlinked against musl, and what musl version is used."], "functions": [{"name": "packaging._musllinux._parse_musl_version", "asynchronous": false, "params": [{"name": "output", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "_MuslVersion | None", "xref": null, "params": null}, "documentation": []}, {"name": "packaging._musllinux._get_musl_version", "asynchronous": false, "params": [{"name": "executable", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "_MuslVersion | None", "xref": null, "params": null}, "documentation": ["Detect currently-running musl runtime version.\n\nThis is done by checking the specified executable's dynamic linking\ninformation, and invoking the loader to parse its output for a version\nstring. If the loader is musl, the output would be something like:\n\n```\nmusl libc (x86_64)\nVersion 1.2.2\nDynamic Program Loader\n```\n"]}, {"name": "packaging._musllinux.platform_tags", "asynchronous": false, "params": [{"name": "archs", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Generate musllinux tags compatible to the current platform.\n\n```\nparam archs\n\nSequence of compatible architectures.\nThe first one shall be the closest to the actual architecture and be the part of\nplatform tag after the linux_ prefix, e.g. x86_64.\nThe linux_ prefix is assumed as a prerequisite for the current platform to\nbe musllinux-compatible.\n\nreturns\n\nAn iterator of compatible musllinux tags.\n```\n"]}], "variables": [{"name": "packaging._musllinux.plat", "type": null, "documentation": []}], "classes": [{"name": "packaging._musllinux._MuslVersion", "bases": ["NamedTuple"], "methods": [], "class_variables": [{"name": "packaging._musllinux._MuslVersion.major", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._musllinux._MuslVersion.minor", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "packaging", "documentation": ["This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [], "variables": [{"name": "packaging.__title__", "type": null, "documentation": []}, {"name": "packaging.__summary__", "type": null, "documentation": []}, {"name": "packaging.__uri__", "type": null, "documentation": []}, {"name": "packaging.__version__", "type": null, "documentation": []}, {"name": "packaging.__author__", "type": null, "documentation": []}, {"name": "packaging.__email__", "type": null, "documentation": []}, {"name": "packaging.__license__", "type": null, "documentation": []}, {"name": "packaging.__copyright__", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "packaging._parser", "documentation": ["Handwritten parser of dependency specifiers.\n\nThe docstring for each __parse_* function contains EBNF-inspired grammar representing\nthe implementation."], "functions": [{"name": "packaging._parser.parse_requirement", "asynchronous": false, "params": [{"name": "source", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "ParsedRequirement", "xref": {"fqname": "packaging._parser.ParsedRequirement", "project": null}, "params": null}, "documentation": ["--------------------------------------------------------------------------------------", "Recursive descent parser for dependency specifier", "--------------------------------------------------------------------------------------"]}, {"name": "packaging._parser._parse_requirement", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "ParsedRequirement", "xref": {"fqname": "packaging._parser.ParsedRequirement", "project": null}, "params": null}, "documentation": ["requirement = WS? IDENTIFIER WS? extras WS? requirement_details"]}, {"name": "packaging._parser._parse_requirement_details", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "MarkerList | None", "xref": null, "params": null}]}, "documentation": ["requirement_details = AT URL (WS requirement_marker?)?\n                    | specifier WS? (requirement_marker)?"]}, {"name": "packaging._parser._parse_requirement_marker", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}, {"name": "span_start", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}, {"name": "after", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "MarkerList", "xref": {"fqname": "MarkerList", "project": null}, "params": null}, "documentation": ["requirement_marker = SEMICOLON marker WS?"]}, {"name": "packaging._parser._parse_extras", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["extras = (LEFT_BRACKET wsp* extras_list? wsp* RIGHT_BRACKET)?"]}, {"name": "packaging._parser._parse_extras_list", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["extras_list = identifier (wsp* ',' wsp* identifier)*"]}, {"name": "packaging._parser._parse_specifier", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["specifier = LEFT_PARENTHESIS WS? version_many WS? RIGHT_PARENTHESIS\n          | WS? version_many WS?"]}, {"name": "packaging._parser._parse_version_many", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["version_many = (SPECIFIER (WS? COMMA WS? SPECIFIER)*)?"]}, {"name": "packaging._parser.parse_marker", "asynchronous": false, "params": [{"name": "source", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "MarkerList", "xref": {"fqname": "MarkerList", "project": null}, "params": null}, "documentation": ["--------------------------------------------------------------------------------------", "Recursive descent parser for marker expression", "--------------------------------------------------------------------------------------"]}, {"name": "packaging._parser._parse_full_marker", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "MarkerList", "xref": {"fqname": "MarkerList", "project": null}, "params": null}, "documentation": []}, {"name": "packaging._parser._parse_marker", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "MarkerList", "xref": {"fqname": "MarkerList", "project": null}, "params": null}, "documentation": ["marker = marker_atom (BOOLOP marker_atom)+"]}, {"name": "packaging._parser._parse_marker_atom", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "MarkerAtom", "xref": {"fqname": "MarkerAtom", "project": null}, "params": null}, "documentation": ["marker_atom = WS? LEFT_PARENTHESIS WS? marker WS? RIGHT_PARENTHESIS WS?\n            | WS? marker_item WS?"]}, {"name": "packaging._parser._parse_marker_item", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "MarkerItem", "xref": {"fqname": "MarkerItem", "project": null}, "params": null}, "documentation": ["marker_item = WS? marker_var WS? marker_op WS? marker_var WS?"]}, {"name": "packaging._parser._parse_marker_var", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "MarkerVar", "xref": {"fqname": "MarkerVar", "project": null}, "params": null}, "documentation": ["marker_var = VARIABLE | QUOTED_STRING"]}, {"name": "packaging._parser.process_env_var", "asynchronous": false, "params": [{"name": "env_var", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Variable", "xref": {"fqname": "packaging._parser.Variable", "project": null}, "params": null}, "documentation": []}, {"name": "packaging._parser.process_python_str", "asynchronous": false, "params": [{"name": "python_str", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Value", "xref": {"fqname": "packaging._parser.Value", "project": null}, "params": null}, "documentation": []}, {"name": "packaging._parser._parse_marker_op", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "Op", "xref": {"fqname": "packaging._parser.Op", "project": null}, "params": null}, "documentation": ["marker_op = IN | NOT IN | OP"]}], "variables": [{"name": "packaging._parser.MarkerVar", "type": null, "documentation": []}, {"name": "packaging._parser.MarkerItem", "type": null, "documentation": []}, {"name": "packaging._parser.MarkerAtom", "type": null, "documentation": []}, {"name": "packaging._parser.MarkerList", "type": null, "documentation": []}], "classes": [{"name": "packaging._parser.Node", "bases": [], "methods": [{"name": "packaging._parser.Node.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._parser.Node.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._parser.Node.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._parser.Node.serialize", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "packaging._parser.Variable", "bases": ["Node"], "methods": [{"name": "packaging._parser.Variable.serialize", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "packaging._parser.Value", "bases": ["Node"], "methods": [{"name": "packaging._parser.Value.serialize", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "packaging._parser.Op", "bases": ["Node"], "methods": [{"name": "packaging._parser.Op.serialize", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "packaging._parser.ParsedRequirement", "bases": ["NamedTuple"], "methods": [], "class_variables": [{"name": "packaging._parser.ParsedRequirement.name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._parser.ParsedRequirement.url", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._parser.ParsedRequirement.extras", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging._parser.ParsedRequirement.specifier", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._parser.ParsedRequirement.marker", "type": {"name": "MarkerList | None", "xref": null, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "packaging.utils", "documentation": ["This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [{"name": "packaging.utils.canonicalize_name", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "validate", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "NormalizedName", "xref": {"fqname": "NormalizedName", "project": null}, "params": null}, "documentation": []}, {"name": "packaging.utils.is_normalized_name", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.utils.canonicalize_version", "asynchronous": false, "params": [{"name": "version", "type": {"name": "Version | str", "xref": null, "params": null}, "default": null}, {"name": "strip_trailing_zero", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return a canonical form of a version as a string.\n\n```pycon\n>>> canonicalize_version('1.0.1')\n'1.0.1'\n```\n\nPer PEP 625, versions may have multiple canonical forms, differing\nonly by trailing zeros.\n\n```pycon\n>>> canonicalize_version('1.0.0')\n'1'\n>>> canonicalize_version('1.0.0', strip_trailing_zero=False)\n'1.0.0'\n```\n\nInvalid versions are returned unaltered.\n\n```pycon\n>>> canonicalize_version('foo bar baz')\n'foo bar baz'\n```\n"]}, {"name": "packaging.utils._", "asynchronous": false, "params": [{"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "strip_trailing_zero", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.utils.parse_wheel_filename", "asynchronous": false, "params": [{"name": "filename", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "NormalizedName", "xref": {"fqname": "NormalizedName", "project": null}, "params": null}, {"name": "Version", "xref": {"fqname": "packaging.utils.version.Version", "project": null}, "params": null}, {"name": "BuildTag", "xref": {"fqname": "BuildTag", "project": null}, "params": null}, {"name": "frozenset", "xref": {"fqname": "functions.frozenset", "project": "--std--"}, "params": [{"name": "Tag", "xref": {"fqname": "packaging.utils.tags.Tag", "project": null}, "params": null}]}]}, "documentation": []}, {"name": "packaging.utils.parse_sdist_filename", "asynchronous": false, "params": [{"name": "filename", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "NormalizedName", "xref": {"fqname": "NormalizedName", "project": null}, "params": null}, {"name": "Version", "xref": {"fqname": "packaging.utils.version.Version", "project": null}, "params": null}]}, "documentation": []}], "variables": [{"name": "packaging.utils.BuildTag", "type": null, "documentation": []}, {"name": "packaging.utils.NormalizedName", "type": null, "documentation": []}, {"name": "packaging.utils._validate_regex", "type": null, "documentation": []}, {"name": "packaging.utils._canonicalize_regex", "type": null, "documentation": []}, {"name": "packaging.utils._normalized_regex", "type": null, "documentation": []}, {"name": "packaging.utils._build_tag_regex", "type": null, "documentation": []}], "classes": [{"name": "packaging.utils.InvalidName", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An invalid distribution name; users should refer to the packaging user guide."]}, {"name": "packaging.utils.InvalidWheelFilename", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An invalid wheel filename was found, users should refer to PEP 427."]}, {"name": "packaging.utils.InvalidSdistFilename", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An invalid sdist filename was found, users should refer to the packaging user guide."]}], "exports": []}, {"name": "packaging.version", "documentation": ["```\n.. testsetup::\n\n    from packaging.version import parse, Version\n```\n", "This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [{"name": "packaging.version.parse", "asynchronous": false, "params": [{"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Version", "xref": {"fqname": "Version", "project": null}, "params": null}, "documentation": ["Parse the given version string.\n\n```pycon\n>>> parse('1.0.dev1')\n<Version('1.0.dev1')>\n```\n\n```\nparam version\n\nThe version string to parse.\n\nraises InvalidVersion\n\nWhen the version string is not a valid version.\n```\n"]}, {"name": "packaging.version._parse_letter_version", "asynchronous": false, "params": [{"name": "letter", "type": {"name": "str | None", "xref": null, "params": null}, "default": null}, {"name": "number", "type": {"name": "str | bytes | SupportsInt | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "tuple[str, int] | None", "xref": null, "params": null}, "documentation": []}, {"name": "packaging.version._parse_local_version", "asynchronous": false, "params": [{"name": "local", "type": {"name": "str | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "LocalType | None", "xref": null, "params": null}, "documentation": ["Takes a string like abc.1.twelve and turns it into (\"abc\", 1, \"twelve\")."]}, {"name": "packaging.version._cmpkey", "asynchronous": false, "params": [{"name": "epoch", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}, {"name": "release", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "pre", "type": {"name": "tuple[str, int] | None", "xref": null, "params": null}, "default": null}, {"name": "post", "type": {"name": "tuple[str, int] | None", "xref": null, "params": null}, "default": null}, {"name": "dev", "type": {"name": "tuple[str, int] | None", "xref": null, "params": null}, "default": null}, {"name": "local", "type": {"name": "LocalType | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "CmpKey", "xref": {"fqname": "CmpKey", "project": null}, "params": null}, "documentation": []}], "variables": [{"name": "packaging.version.LocalType", "type": null, "documentation": []}, {"name": "packaging.version.CmpPrePostDevType", "type": null, "documentation": []}, {"name": "packaging.version.CmpLocalType", "type": null, "documentation": []}, {"name": "packaging.version.CmpKey", "type": null, "documentation": []}, {"name": "packaging.version.VersionComparisonMethod", "type": null, "documentation": []}, {"name": "packaging.version._VERSION_PATTERN", "type": null, "documentation": []}, {"name": "packaging.version.VERSION_PATTERN", "type": null, "documentation": ["A string containing the regular expression used to match a valid version.\n\nThe pattern is not anchored at either end, and is intended for embedding in larger\nexpressions (for example, matching a version number as part of a file name). The\nregular expression should be compiled with the `re.VERBOSE` and `re.IGNORECASE`\nflags set.\n\n```\nmeta hide-value\n\n```\n"]}, {"name": "packaging.version._local_version_separators", "type": null, "documentation": []}], "classes": [{"name": "packaging.version._Version", "bases": ["NamedTuple"], "methods": [], "class_variables": [{"name": "packaging.version._Version.epoch", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.version._Version.release", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": []}, {"name": "packaging.version._Version.dev", "type": {"name": "tuple[str, int] | None", "xref": null, "params": null}, "documentation": []}, {"name": "packaging.version._Version.pre", "type": {"name": "tuple[str, int] | None", "xref": null, "params": null}, "documentation": []}, {"name": "packaging.version._Version.post", "type": {"name": "tuple[str, int] | None", "xref": null, "params": null}, "documentation": []}, {"name": "packaging.version._Version.local", "type": {"name": "LocalType | None", "xref": null, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "packaging.version.InvalidVersion", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Raised when a version string is not a valid version.\n\n```pycon\n>>> Version(\"invalid\")\nTraceback (most recent call last):\n    ...\npackaging.version.InvalidVersion: Invalid version: 'invalid'\n```\n"]}, {"name": "packaging.version._BaseVersion", "bases": [], "methods": [{"name": "packaging.version._BaseVersion.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.version._BaseVersion.__lt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "_BaseVersion", "xref": {"fqname": "packaging.version._BaseVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Please keep the duplicated `isinstance` check", "in the six comparisons hereunder", "unless you find a way to avoid adding overhead function calls."]}, {"name": "packaging.version._BaseVersion.__le__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "_BaseVersion", "xref": {"fqname": "packaging.version._BaseVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.version._BaseVersion.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.version._BaseVersion.__ge__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "_BaseVersion", "xref": {"fqname": "packaging.version._BaseVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.version._BaseVersion.__gt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "_BaseVersion", "xref": {"fqname": "packaging.version._BaseVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.version._BaseVersion.__ne__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "packaging.version._BaseVersion._key", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "packaging.version.Version", "bases": ["_BaseVersion"], "methods": [{"name": "packaging.version.Version.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Initialize a Version object.\n\n```\nparam version\n\nThe string representation of a version which will be parsed and normalized\nbefore use.\n\nraises InvalidVersion\n\nIf the version does not conform to PEP 440 in any way then this\nexception will be raised.\n```\n"]}, {"name": "packaging.version.Version.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A representation of the Version that shows all internal state.\n\n```pycon\n>>> Version('1.0.0')\n<Version('1.0.0')>\n```\n"]}, {"name": "packaging.version.Version.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A string representation of the version that can be round-tripped.\n\n```pycon\n>>> str(Version(\"1.0a5\"))\n'1.0a5'\n```\n"]}, {"name": "packaging.version.Version.epoch", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["The epoch of the version.\n\n```pycon\n>>> Version(\"2.0.0\").epoch\n0\n>>> Version(\"1!2.0.0\").epoch\n1\n```\n"]}, {"name": "packaging.version.Version.release", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": ["The components of the \"release\" segment of the version.\n\n```pycon\n>>> Version(\"1.2.3\").release\n(1, 2, 3)\n>>> Version(\"2.0.0\").release\n(2, 0, 0)\n>>> Version(\"1!2.0.0.post0\").release\n(2, 0, 0)\n```\n\nIncludes trailing zeroes but not the epoch or any pre-release / development /\npost-release suffixes.\n"]}, {"name": "packaging.version.Version.pre", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "tuple[str, int] | None", "xref": null, "params": null}, "documentation": ["The pre-release segment of the version.\n\n```pycon\n>>> print(Version(\"1.2.3\").pre)\nNone\n>>> Version(\"1.2.3a1\").pre\n('a', 1)\n>>> Version(\"1.2.3b1\").pre\n('b', 1)\n>>> Version(\"1.2.3rc1\").pre\n('rc', 1)\n```\n"]}, {"name": "packaging.version.Version.post", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int | None", "xref": null, "params": null}, "documentation": ["The post-release number of the version.\n\n```pycon\n>>> print(Version(\"1.2.3\").post)\nNone\n>>> Version(\"1.2.3.post1\").post\n1\n```\n"]}, {"name": "packaging.version.Version.dev", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int | None", "xref": null, "params": null}, "documentation": ["The development number of the version.\n\n```pycon\n>>> print(Version(\"1.2.3\").dev)\nNone\n>>> Version(\"1.2.3.dev1\").dev\n1\n```\n"]}, {"name": "packaging.version.Version.local", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["The local version segment of the version.\n\n```pycon\n>>> print(Version(\"1.2.3\").local)\nNone\n>>> Version(\"1.2.3+abc\").local\n'abc'\n```\n"]}, {"name": "packaging.version.Version.public", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The public portion of the version.\n\n```pycon\n>>> Version(\"1.2.3\").public\n'1.2.3'\n>>> Version(\"1.2.3+abc\").public\n'1.2.3'\n>>> Version(\"1!1.2.3dev1+abc\").public\n'1!1.2.3.dev1'\n```\n"]}, {"name": "packaging.version.Version.base_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The \"base version\" of the version.\n\n```pycon\n>>> Version(\"1.2.3\").base_version\n'1.2.3'\n>>> Version(\"1.2.3+abc\").base_version\n'1.2.3'\n>>> Version(\"1!1.2.3dev1+abc\").base_version\n'1!1.2.3'\n```\n\nThe \"base version\" is the public version of the project without any pre or post\nrelease markers.\n"]}, {"name": "packaging.version.Version.is_prerelease", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Whether this version is a pre-release.\n\n```pycon\n>>> Version(\"1.2.3\").is_prerelease\nFalse\n>>> Version(\"1.2.3a1\").is_prerelease\nTrue\n>>> Version(\"1.2.3b1\").is_prerelease\nTrue\n>>> Version(\"1.2.3rc1\").is_prerelease\nTrue\n>>> Version(\"1.2.3dev1\").is_prerelease\nTrue\n```\n"]}, {"name": "packaging.version.Version.is_postrelease", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Whether this version is a post-release.\n\n```pycon\n>>> Version(\"1.2.3\").is_postrelease\nFalse\n>>> Version(\"1.2.3.post1\").is_postrelease\nTrue\n```\n"]}, {"name": "packaging.version.Version.is_devrelease", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Whether this version is a development release.\n\n```pycon\n>>> Version(\"1.2.3\").is_devrelease\nFalse\n>>> Version(\"1.2.3.dev1\").is_devrelease\nTrue\n```\n"]}, {"name": "packaging.version.Version.major", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["The first item of {attr}`release` or `0` if unavailable.\n\n```pycon\n>>> Version(\"1.2.3\").major\n1\n```\n"]}, {"name": "packaging.version.Version.minor", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["The second item of {attr}`release` or `0` if unavailable.\n\n```pycon\n>>> Version(\"1.2.3\").minor\n2\n>>> Version(\"1\").minor\n0\n```\n"]}, {"name": "packaging.version.Version.micro", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["The third item of {attr}`release` or `0` if unavailable.\n\n```pycon\n>>> Version(\"1.2.3\").micro\n3\n>>> Version(\"1\").micro\n0\n```\n"]}], "class_variables": [{"name": "packaging.version.Version._regex", "type": null, "documentation": []}, {"name": "packaging.version.Version._key", "type": {"name": "CmpKey", "xref": {"fqname": "CmpKey", "project": null}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["This class abstracts handling of a project's versions.\n\nA {class}`Version` instance is comparison aware and can be compared and\nsorted using the standard Python interfaces.\n\n```pycon\n>>> v1 = Version(\"1.0a5\")\n>>> v2 = Version(\"1.0\")\n>>> v1\n<Version('1.0a5')>\n>>> v2\n<Version('1.0')>\n>>> v1 < v2\nTrue\n>>> v1 == v2\nFalse\n>>> v1 > v2\nFalse\n>>> v1 >= v2\nFalse\n>>> v1 <= v2\nTrue\n```\n"]}, {"name": "packaging.version._TrimmedRelease", "bases": ["Version"], "methods": [{"name": "packaging.version._TrimmedRelease.release", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": ["Release segment without any trailing zeros.\n\n```pycon\n>>> _TrimmedRelease('1.0.0').release\n(1,)\n>>> _TrimmedRelease('0.0').release\n(0,)\n```\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": [{"name": "packaging.version.InvalidVersion", "xref": {"fqname": "packaging.version.InvalidVersion", "project": null}}, {"name": "packaging.version.parse", "xref": {"fqname": "packaging.version.parse", "project": null}}, {"name": "packaging.version.Version", "xref": {"fqname": "packaging.version.Version", "project": null}}, {"name": "packaging.version.VERSION_PATTERN", "xref": {"fqname": "packaging.version.VERSION_PATTERN", "project": null}}]}, {"name": "packaging._tokenizer", "documentation": [], "functions": [], "variables": [{"name": "packaging._tokenizer.DEFAULT_RULES", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str | re.Pattern[str]", "xref": null, "params": null}]}, "documentation": []}], "classes": [{"name": "packaging._tokenizer.Token", "bases": [], "methods": [], "class_variables": [{"name": "packaging._tokenizer.Token.name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._tokenizer.Token.text", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._tokenizer.Token.position", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "packaging._tokenizer.ParserSyntaxError", "bases": ["Exception"], "methods": [{"name": "packaging._tokenizer.ParserSyntaxError.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "message", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "source", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "span", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._tokenizer.ParserSyntaxError.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["The provided source text could not be parsed correctly."]}, {"name": "packaging._tokenizer.Tokenizer", "bases": [], "methods": [{"name": "packaging._tokenizer.Tokenizer.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "source", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "rules", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str | re.Pattern[str]", "xref": null, "params": null}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging._tokenizer.Tokenizer.consume", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Move beyond provided token name, if at current position."]}, {"name": "packaging._tokenizer.Tokenizer.check", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "peek", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Check whether the next token has the provided name.\n\nBy default, if the check succeeds, the token *must* be read before\nanother check. If `peek` is set to `True`, the token is not loaded and\nwould need to be checked again."]}, {"name": "packaging._tokenizer.Tokenizer.expect", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "expected", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Token", "xref": {"fqname": "packaging._tokenizer.Token", "project": null}, "params": null}, "documentation": ["Expect a certain token name next, failing with a syntax error otherwise.\n\nThe token is *not* read."]}, {"name": "packaging._tokenizer.Tokenizer.read", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Token", "xref": {"fqname": "packaging._tokenizer.Token", "project": null}, "params": null}, "documentation": ["Consume the next token and return it."]}, {"name": "packaging._tokenizer.Tokenizer.raise_syntax_error", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "message", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "span_start", "type": {"name": "int | None", "xref": null, "params": null}, "default": "..."}, {"name": "span_end", "type": {"name": "int | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "NoReturn", "xref": {"fqname": "typing.NoReturn", "project": "--std--"}, "params": null}, "documentation": ["Raise ParserSyntaxError at the given position."]}, {"name": "packaging._tokenizer.Tokenizer.enclosing_tokens", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "open_token", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "close_token", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "around", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}]}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Context-sensitive token parsing.\n\nProvides methods to examine the input stream to check whether the next token\nmatches."]}], "exports": []}, {"name": "packaging.specifiers", "documentation": ["```\n.. testsetup::\n\n    from packaging.specifiers import Specifier, SpecifierSet, InvalidSpecifier\n    from packaging.version import Version\n```\n", "This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [{"name": "packaging.specifiers._coerce_version", "asynchronous": false, "params": [{"name": "version", "type": {"name": "UnparsedVersion", "xref": {"fqname": "UnparsedVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "Version", "xref": {"fqname": "packaging.specifiers.version.Version", "project": null}, "params": null}, "documentation": []}, {"name": "packaging.specifiers._version_split", "asynchronous": false, "params": [{"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Split version into components.\n\nThe split components are intended for version comparison. The logic does\nnot attempt to retain the original version string, so joining the\ncomponents back with {func}`_version_join` may not produce the original\nversion string.\n"]}, {"name": "packaging.specifiers._version_join", "asynchronous": false, "params": [{"name": "components", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Join split version components into a version string.\n\nThis function assumes the input came from {func}`_version_split`, where the\nfirst component must be the epoch (either empty or numeric), and all other\ncomponents numeric.\n"]}, {"name": "packaging.specifiers._is_not_suffix", "asynchronous": false, "params": [{"name": "segment", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.specifiers._pad_version", "asynchronous": false, "params": [{"name": "left", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "right", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": []}], "variables": [{"name": "packaging.specifiers.UnparsedVersion", "type": null, "documentation": []}, {"name": "packaging.specifiers.UnparsedVersionVar", "type": null, "documentation": []}, {"name": "packaging.specifiers.CallableOperator", "type": null, "documentation": []}, {"name": "packaging.specifiers._prefix_regex", "type": null, "documentation": []}], "classes": [{"name": "packaging.specifiers.InvalidSpecifier", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Raised when attempting to create a {class}`Specifier` with a specifier\nstring that is invalid.\n\n```pycon\n>>> Specifier(\"lolwat\")\nTraceback (most recent call last):\n    ...\npackaging.specifiers.InvalidSpecifier: Invalid specifier: 'lolwat'\n```\n"]}, {"name": "packaging.specifiers.BaseSpecifier", "bases": [], "methods": [{"name": "packaging.specifiers.BaseSpecifier.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Returns the str representation of this Specifier-like object. This\nshould be representative of the Specifier itself."]}, {"name": "packaging.specifiers.BaseSpecifier.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["Returns a hash value for this Specifier-like object."]}, {"name": "packaging.specifiers.BaseSpecifier.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Returns a boolean representing whether or not the two Specifier-like\nobjects are equal.\n\n```\nparam other\n\nThe other object to check against.\n```\n"]}, {"name": "packaging.specifiers.BaseSpecifier.prereleases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool | None", "xref": null, "params": null}, "documentation": ["Whether or not pre-releases as a whole are allowed.\n\nThis can be set to either `True` or `False` to explicitly enable or disable\nprereleases or it can be set to `None` (the default) to use default semantics.\n"]}, {"name": "packaging.specifiers.BaseSpecifier.prereleases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Setter for {attr}`prereleases`.\n\n```\nparam value\n\nThe value to set.\n```\n"]}, {"name": "packaging.specifiers.BaseSpecifier.contains", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "prereleases", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Determines if the given item is contained within this specifier."]}, {"name": "packaging.specifiers.BaseSpecifier.filter", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "iterable", "type": {"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "UnparsedVersionVar", "xref": {"fqname": "UnparsedVersionVar", "project": null}, "params": null}]}, "default": null}, {"name": "prereleases", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "UnparsedVersionVar", "xref": {"fqname": "UnparsedVersionVar", "project": null}, "params": null}]}, "documentation": ["Takes an iterable of items and filters them so that only items which\nare contained within this specifier are allowed in it."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "packaging.specifiers.Specifier", "bases": ["BaseSpecifier"], "methods": [{"name": "packaging.specifiers.Specifier.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "prereleases", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Initialize a Specifier instance.\n\n```\nparam spec\n\nThe string representation of a specifier which will be parsed and\nnormalized before use.\n\nparam prereleases\n\nThis tells the specifier if it should accept prerelease versions if\napplicable or not. The default of None will autodetect it from the\ngiven specifiers.\n\nraises InvalidSpecifier\n\nIf the given specifier is invalid (i.e. bad syntax).\n```\n"]}, {"name": "packaging.specifiers.Specifier.prereleases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["https://github.com/python/mypy/pull/13475#pullrequestreview-1079784515"]}, {"name": "packaging.specifiers.Specifier.prereleases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.specifiers.Specifier.operator", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The operator of this specifier.\n\n```pycon\n>>> Specifier(\"==1.2.3\").operator\n'=='\n```\n"]}, {"name": "packaging.specifiers.Specifier.version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The version of this specifier.\n\n```pycon\n>>> Specifier(\"==1.2.3\").version\n'1.2.3'\n```\n"]}, {"name": "packaging.specifiers.Specifier.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A representation of the Specifier that shows all internal state.\n\n```pycon\n>>> Specifier('>=1.0.0')\n<Specifier('>=1.0.0')>\n>>> Specifier('>=1.0.0', prereleases=False)\n<Specifier('>=1.0.0', prereleases=False)>\n>>> Specifier('>=1.0.0', prereleases=True)\n<Specifier('>=1.0.0', prereleases=True)>\n```\n"]}, {"name": "packaging.specifiers.Specifier.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A string representation of the Specifier that can be round-tripped.\n\n```pycon\n>>> str(Specifier('>=1.0.0'))\n'>=1.0.0'\n>>> str(Specifier('>=1.0.0', prereleases=False))\n'>=1.0.0'\n```\n"]}, {"name": "packaging.specifiers.Specifier._canonical_spec", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.specifiers.Specifier.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.specifiers.Specifier.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Whether or not the two Specifier-like objects are equal.\n\n```\nparam other\n\nThe other object to check against.\n```\n\nThe value of {attr}`prereleases` is ignored.\n\n```pycon\n>>> Specifier(\"==1.2.3\") == Specifier(\"== 1.2.3.0\")\nTrue\n>>> (Specifier(\"==1.2.3\", prereleases=False) ==\n...  Specifier(\"==1.2.3\", prereleases=True))\nTrue\n>>> Specifier(\"==1.2.3\") == \"==1.2.3\"\nTrue\n>>> Specifier(\"==1.2.3\") == Specifier(\"==1.2.4\")\nFalse\n>>> Specifier(\"==1.2.3\") == Specifier(\"~=1.2.3\")\nFalse\n```\n"]}, {"name": "packaging.specifiers.Specifier._get_operator", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "op", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "CallableOperator", "xref": {"fqname": "CallableOperator", "project": null}, "params": null}, "documentation": []}, {"name": "packaging.specifiers.Specifier._compare_compatible", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.specifiers.Specifier._compare_equal", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.specifiers.Specifier._compare_not_equal", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.specifiers.Specifier._compare_less_than_equal", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.specifiers.Specifier._compare_greater_than_equal", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.specifiers.Specifier._compare_less_than", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec_str", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.specifiers.Specifier._compare_greater_than", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec_str", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.specifiers.Specifier._compare_arbitrary", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.specifiers.Specifier.__contains__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "str | Version", "xref": null, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Return whether or not the item is contained in this specifier.\n\n```\nparam item\n\nThe item to check for.\n```\n\nThis is used for the `in` operator and behaves the same as\n{meth}`contains` with no `prereleases` argument passed.\n\n```pycon\n>>> \"1.2.3\" in Specifier(\">=1.2.3\")\nTrue\n>>> Version(\"1.2.3\") in Specifier(\">=1.2.3\")\nTrue\n>>> \"1.0.0\" in Specifier(\">=1.2.3\")\nFalse\n>>> \"1.3.0a1\" in Specifier(\">=1.2.3\")\nFalse\n>>> \"1.3.0a1\" in Specifier(\">=1.2.3\", prereleases=True)\nTrue\n```\n"]}, {"name": "packaging.specifiers.Specifier.contains", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "UnparsedVersion", "xref": {"fqname": "UnparsedVersion", "project": null}, "params": null}, "default": null}, {"name": "prereleases", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Return whether or not the item is contained in this specifier.\n\n```\nparam item\n\nThe item to check for, which can be a version string or a\n instance.\n\nparam prereleases\n\nWhether or not to match prereleases with this Specifier. If set to\nNone (the default), it uses  to determine\nwhether or not prereleases are allowed.\n```\n\n```pycon\n>>> Specifier(\">=1.2.3\").contains(\"1.2.3\")\nTrue\n>>> Specifier(\">=1.2.3\").contains(Version(\"1.2.3\"))\nTrue\n>>> Specifier(\">=1.2.3\").contains(\"1.0.0\")\nFalse\n>>> Specifier(\">=1.2.3\").contains(\"1.3.0a1\")\nFalse\n>>> Specifier(\">=1.2.3\", prereleases=True).contains(\"1.3.0a1\")\nTrue\n>>> Specifier(\">=1.2.3\").contains(\"1.3.0a1\", prereleases=True)\nTrue\n```\n"]}, {"name": "packaging.specifiers.Specifier.filter", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "iterable", "type": {"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "UnparsedVersionVar", "xref": {"fqname": "UnparsedVersionVar", "project": null}, "params": null}]}, "default": null}, {"name": "prereleases", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "UnparsedVersionVar", "xref": {"fqname": "UnparsedVersionVar", "project": null}, "params": null}]}, "documentation": ["Filter items in the given iterable, that match the specifier.\n\n```\nparam iterable\n\nAn iterable that can contain version strings and  instances.\nThe items in the iterable will be filtered according to the specifier.\n\nparam prereleases\n\nWhether or not to allow prereleases in the returned iterator. If set to\nNone (the default), it will be intelligently decide whether to allow\nprereleases or not (based on the  attribute, and\nwhether the only versions matching are prereleases).\n```\n\nThis method is smarter than just `filter(Specifier().contains, [...])`\nbecause it implements the rule from {pep}`440` that a prerelease item\nSHOULD be accepted if no other versions match the given specifier.\n\n```pycon\n>>> list(Specifier(\">=1.2.3\").filter([\"1.2\", \"1.3\", \"1.5a1\"]))\n['1.3']\n>>> list(Specifier(\">=1.2.3\").filter([\"1.2\", \"1.2.3\", \"1.3\", Version(\"1.4\")]))\n['1.2.3', '1.3', <Version('1.4')>]\n>>> list(Specifier(\">=1.2.3\").filter([\"1.2\", \"1.5a1\"]))\n['1.5a1']\n>>> list(Specifier(\">=1.2.3\").filter([\"1.3\", \"1.5a1\"], prereleases=True))\n['1.3', '1.5a1']\n>>> list(Specifier(\">=1.2.3\", prereleases=True).filter([\"1.3\", \"1.5a1\"]))\n['1.3', '1.5a1']\n```\n"]}], "class_variables": [{"name": "packaging.specifiers.Specifier._operator_regex_str", "type": null, "documentation": []}, {"name": "packaging.specifiers.Specifier._version_regex_str", "type": null, "documentation": []}, {"name": "packaging.specifiers.Specifier._regex", "type": null, "documentation": []}, {"name": "packaging.specifiers.Specifier._operators", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["This class abstracts handling of version specifiers.\n\n:::{tip}\nIt is generally not required to instantiate this manually. You should instead\nprefer to work with {class}`SpecifierSet` instead, which can parse\ncomma-separated version specifiers (which is what package metadata contains).\n:::\n"]}, {"name": "packaging.specifiers.SpecifierSet", "bases": ["BaseSpecifier"], "methods": [{"name": "packaging.specifiers.SpecifierSet.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "specifiers", "type": {"name": "str | Iterable[Specifier]", "xref": null, "params": null}, "default": "..."}, {"name": "prereleases", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Initialize a SpecifierSet instance.\n\n```\nparam specifiers\n\nThe string representation of a specifier or a comma-separated list of\nspecifiers which will be parsed and normalized before use.\nMay also be an iterable of Specifier instances, which will be used\nas is.\n\nparam prereleases\n\nThis tells the SpecifierSet if it should accept prerelease versions if\napplicable or not. The default of None will autodetect it from the\ngiven specifiers.\n\nraises InvalidSpecifier\n\nIf the given specifiers are not parseable than this exception will be\nraised.\n```\n"]}, {"name": "packaging.specifiers.SpecifierSet.prereleases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool | None", "xref": null, "params": null}, "documentation": []}, {"name": "packaging.specifiers.SpecifierSet.prereleases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.specifiers.SpecifierSet.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A representation of the specifier set that shows all internal state.\n\nNote that the ordering of the individual specifiers within the set may not\nmatch the input string.\n\n```pycon\n>>> SpecifierSet('>=1.0.0,!=2.0.0')\n<SpecifierSet('!=2.0.0,>=1.0.0')>\n>>> SpecifierSet('>=1.0.0,!=2.0.0', prereleases=False)\n<SpecifierSet('!=2.0.0,>=1.0.0', prereleases=False)>\n>>> SpecifierSet('>=1.0.0,!=2.0.0', prereleases=True)\n<SpecifierSet('!=2.0.0,>=1.0.0', prereleases=True)>\n```\n"]}, {"name": "packaging.specifiers.SpecifierSet.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A string representation of the specifier set that can be round-tripped.\n\nNote that the ordering of the individual specifiers within the set may not\nmatch the input string.\n\n```pycon\n>>> str(SpecifierSet(\">=1.0.0,!=1.0.1\"))\n'!=1.0.1,>=1.0.0'\n>>> str(SpecifierSet(\">=1.0.0,!=1.0.1\", prereleases=False))\n'!=1.0.1,>=1.0.0'\n```\n"]}, {"name": "packaging.specifiers.SpecifierSet.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.specifiers.SpecifierSet.__and__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "SpecifierSet | str", "xref": null, "params": null}, "default": null}], "returns": {"name": "SpecifierSet", "xref": {"fqname": "packaging.specifiers.SpecifierSet", "project": null}, "params": null}, "documentation": ["Return a SpecifierSet which is a combination of the two sets.\n\n```\nparam other\n\nThe other object to combine with.\n```\n\n```pycon\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\") & '<=2.0.0,!=2.0.1'\n<SpecifierSet('!=1.0.1,!=2.0.1,<=2.0.0,>=1.0.0')>\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\") & SpecifierSet('<=2.0.0,!=2.0.1')\n<SpecifierSet('!=1.0.1,!=2.0.1,<=2.0.0,>=1.0.0')>\n```\n"]}, {"name": "packaging.specifiers.SpecifierSet.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Whether or not the two SpecifierSet-like objects are equal.\n\n```\nparam other\n\nThe other object to check against.\n```\n\nThe value of {attr}`prereleases` is ignored.\n\n```pycon\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\") == SpecifierSet(\">=1.0.0,!=1.0.1\")\nTrue\n>>> (SpecifierSet(\">=1.0.0,!=1.0.1\", prereleases=False) ==\n...  SpecifierSet(\">=1.0.0,!=1.0.1\", prereleases=True))\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\") == \">=1.0.0,!=1.0.1\"\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\") == SpecifierSet(\">=1.0.0\")\nFalse\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\") == SpecifierSet(\">=1.0.0,!=1.0.2\")\nFalse\n```\n"]}, {"name": "packaging.specifiers.SpecifierSet.__len__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["Returns the number of specifiers in this specifier set."]}, {"name": "packaging.specifiers.SpecifierSet.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Specifier", "xref": {"fqname": "packaging.specifiers.Specifier", "project": null}, "params": null}]}, "documentation": ["Returns an iterator over all the underlying {class}`Specifier` instances\nin this specifier set.\n\n```pycon\n>>> sorted(SpecifierSet(\">=1.0.0,!=1.0.1\"), key=str)\n[<Specifier('!=1.0.1')>, <Specifier('>=1.0.0')>]\n```\n"]}, {"name": "packaging.specifiers.SpecifierSet.__contains__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "UnparsedVersion", "xref": {"fqname": "UnparsedVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Return whether or not the item is contained in this specifier.\n\n```\nparam item\n\nThe item to check for.\n```\n\nThis is used for the `in` operator and behaves the same as\n{meth}`contains` with no `prereleases` argument passed.\n\n```pycon\n>>> \"1.2.3\" in SpecifierSet(\">=1.0.0,!=1.0.1\")\nTrue\n>>> Version(\"1.2.3\") in SpecifierSet(\">=1.0.0,!=1.0.1\")\nTrue\n>>> \"1.0.1\" in SpecifierSet(\">=1.0.0,!=1.0.1\")\nFalse\n>>> \"1.3.0a1\" in SpecifierSet(\">=1.0.0,!=1.0.1\")\nFalse\n>>> \"1.3.0a1\" in SpecifierSet(\">=1.0.0,!=1.0.1\", prereleases=True)\nTrue\n```\n"]}, {"name": "packaging.specifiers.SpecifierSet.contains", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "UnparsedVersion", "xref": {"fqname": "UnparsedVersion", "project": null}, "params": null}, "default": null}, {"name": "prereleases", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}, {"name": "installed", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Return whether or not the item is contained in this SpecifierSet.\n\n```\nparam item\n\nThe item to check for, which can be a version string or a\n instance.\n\nparam prereleases\n\nWhether or not to match prereleases with this SpecifierSet. If set to\nNone (the default), it uses  to determine\nwhether or not prereleases are allowed.\n```\n\n```pycon\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.2.3\")\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(Version(\"1.2.3\"))\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.0.1\")\nFalse\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.3.0a1\")\nFalse\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\", prereleases=True).contains(\"1.3.0a1\")\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.3.0a1\", prereleases=True)\nTrue\n```\n"]}, {"name": "packaging.specifiers.SpecifierSet.filter", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "iterable", "type": {"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "UnparsedVersionVar", "xref": {"fqname": "UnparsedVersionVar", "project": null}, "params": null}]}, "default": null}, {"name": "prereleases", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "UnparsedVersionVar", "xref": {"fqname": "UnparsedVersionVar", "project": null}, "params": null}]}, "documentation": ["Filter items in the given iterable, that match the specifiers in this set.\n\n```\nparam iterable\n\nAn iterable that can contain version strings and  instances.\nThe items in the iterable will be filtered according to the specifier.\n\nparam prereleases\n\nWhether or not to allow prereleases in the returned iterator. If set to\nNone (the default), it will be intelligently decide whether to allow\nprereleases or not (based on the  attribute, and\nwhether the only versions matching are prereleases).\n```\n\nThis method is smarter than just `filter(SpecifierSet(...).contains, [...])`\nbecause it implements the rule from {pep}`440` that a prerelease item\nSHOULD be accepted if no other versions match the given specifier.\n\n```pycon\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.2\", \"1.3\", \"1.5a1\"]))\n['1.3']\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.2\", \"1.3\", Version(\"1.4\")]))\n['1.3', <Version('1.4')>]\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.2\", \"1.5a1\"]))\n[]\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.3\", \"1.5a1\"], prereleases=True))\n['1.3', '1.5a1']\n>>> list(SpecifierSet(\">=1.2.3\", prereleases=True).filter([\"1.3\", \"1.5a1\"]))\n['1.3', '1.5a1']\n```\n\nAn \"empty\" SpecifierSet will filter items based on the presence of prerelease\nversions in the set.\n\n```pycon\n>>> list(SpecifierSet(\"\").filter([\"1.3\", \"1.5a1\"]))\n['1.3']\n>>> list(SpecifierSet(\"\").filter([\"1.5a1\"]))\n['1.5a1']\n>>> list(SpecifierSet(\"\", prereleases=True).filter([\"1.3\", \"1.5a1\"]))\n['1.3', '1.5a1']\n>>> list(SpecifierSet(\"\").filter([\"1.3\", \"1.5a1\"], prereleases=True))\n['1.3', '1.5a1']\n```\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["This class abstracts handling of a set of version specifiers.\n\nIt can be passed a single specifier (`>=3.0`), a comma-separated list of\nspecifiers (`>=3.0,!=3.1`), or no specifier at all.\n"]}], "exports": []}, {"name": "packaging.metadata", "documentation": [], "functions": [{"name": "packaging.metadata._parse_keywords", "asynchronous": false, "params": [{"name": "data", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Split a string of comma-separated keywords into a list of keywords."]}, {"name": "packaging.metadata._parse_project_urls", "asynchronous": false, "params": [{"name": "data", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Parse a list of label/URL string pairings separated by a comma."]}, {"name": "packaging.metadata._get_payload", "asynchronous": false, "params": [{"name": "msg", "type": {"name": "email.message.Message", "xref": {"fqname": "email.message.Message", "project": "--std--"}, "params": null}, "default": null}, {"name": "source", "type": {"name": "bytes | str", "xref": null, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Get the body of the message."]}, {"name": "packaging.metadata.parse_email", "asynchronous": false, "params": [{"name": "data", "type": {"name": "bytes | str", "xref": null, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "RawMetadata", "xref": {"fqname": "packaging.metadata.RawMetadata", "project": null}, "params": null}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "documentation": ["Parse a distribution's metadata stored as email headers (e.g. from `METADATA`).\n\nThis function returns a two-item tuple of dicts. The first dict is of\nrecognized fields from the core metadata specification. Fields that can be\nparsed and translated into Python's built-in types are converted\nappropriately. All other fields are left as-is. Fields that are allowed to\nappear multiple times are stored as lists.\n\nThe second dict contains all other fields from the metadata. This includes\nany unrecognized fields. It also includes any fields which are expected to\nbe parsed into a built-in type but were not formatted appropriately. Finally,\nany fields that are expected to appear only once but are repeated are\nincluded in this dict.\n"]}], "variables": [{"name": "packaging.metadata.T", "type": null, "documentation": []}, {"name": "packaging.metadata.ExceptionGroup", "type": null, "documentation": []}, {"name": "packaging.metadata._STRING_FIELDS", "type": null, "documentation": []}, {"name": "packaging.metadata._LIST_FIELDS", "type": null, "documentation": []}, {"name": "packaging.metadata._DICT_FIELDS", "type": null, "documentation": []}, {"name": "packaging.metadata._EMAIL_TO_RAW_MAPPING", "type": null, "documentation": []}, {"name": "packaging.metadata._RAW_TO_EMAIL_MAPPING", "type": null, "documentation": []}, {"name": "packaging.metadata._NOT_FOUND", "type": null, "documentation": []}, {"name": "packaging.metadata._VALID_METADATA_VERSIONS", "type": null, "documentation": []}, {"name": "packaging.metadata._MetadataVersion", "type": null, "documentation": []}, {"name": "packaging.metadata._REQUIRED_ATTRS", "type": null, "documentation": []}], "classes": [{"name": "packaging.metadata.ExceptionGroup", "bases": ["Exception"], "methods": [{"name": "packaging.metadata.ExceptionGroup.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "message", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "exceptions", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "Exception", "xref": {"fqname": "functions.Exception", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata.ExceptionGroup.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "packaging.metadata.ExceptionGroup.message", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata.ExceptionGroup.exceptions", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "Exception", "xref": {"fqname": "functions.Exception", "project": "--std--"}, "params": null}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A minimal implementation of {external:exc}`ExceptionGroup` from Python 3.11.\n\nIf {external:exc}`ExceptionGroup` is already defined by Python itself,\nthat version is used instead.\n"]}, {"name": "packaging.metadata.InvalidMetadata", "bases": ["ValueError"], "methods": [{"name": "packaging.metadata.InvalidMetadata.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "field", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "message", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "packaging.metadata.InvalidMetadata.field", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The name of the field that contains invalid data."]}], "instance_variables": [], "inner_classes": [], "documentation": ["A metadata field contains invalid data."]}, {"name": "packaging.metadata.RawMetadata", "bases": ["TypedDict"], "methods": [], "class_variables": [{"name": "packaging.metadata.RawMetadata.metadata_version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.platforms", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.summary", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.description", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.keywords", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.home_page", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.author", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.author_email", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.license", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.supported_platforms", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.download_url", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.classifiers", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.requires", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.provides", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.obsoletes", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.maintainer", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.maintainer_email", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.requires_dist", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.provides_dist", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.obsoletes_dist", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.requires_python", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.requires_external", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.project_urls", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.description_content_type", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.provides_extra", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.dynamic", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.license_expression", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata.RawMetadata.license_files", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A dictionary of raw core metadata.\n\nEach field in core metadata maps to a key of this dictionary (when data is\nprovided). The key is lower-case and underscores are used instead of dashes\ncompared to the equivalent core metadata field. Any core metadata field that\ncan be specified multiple times or can hold multiple values in a single\nfield have a key with a plural name. See {class}`Metadata` whose attributes\nmatch the keys of this dictionary.\n\nCore metadata fields that can be specified multiple times are stored as a\nlist or dict depending on which is appropriate for the field. Any fields\nwhich hold multiple values in a single field are stored as a list.\n", "The RawMetadata class attempts to make as few assumptions about the underlying", "serialization formats as possible. The idea is that as long as a serialization", "formats offer some very basic primitives in *some* way then we can support", "serializing to and from that format."]}, {"name": "packaging.metadata._Validator", "bases": [], "methods": [{"name": "packaging.metadata._Validator.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "added", "type": {"name": "_MetadataVersion", "xref": {"fqname": "_MetadataVersion", "project": null}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata._Validator.__set_name__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "_owner", "type": {"name": "Metadata", "xref": {"fqname": "Metadata", "project": null}, "params": null}, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata._Validator.__get__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "instance", "type": {"name": "Metadata", "xref": {"fqname": "Metadata", "project": null}, "params": null}, "default": null}, {"name": "_owner", "type": {"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": [{"name": "Metadata", "xref": {"fqname": "Metadata", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}, "documentation": []}, {"name": "packaging.metadata._Validator._invalid_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "cause", "type": {"name": "Exception | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "InvalidMetadata", "xref": {"fqname": "packaging.metadata.InvalidMetadata", "project": null}, "params": null}, "documentation": []}, {"name": "packaging.metadata._Validator._process_metadata_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "_MetadataVersion", "xref": {"fqname": "_MetadataVersion", "project": null}, "params": null}, "documentation": []}, {"name": "packaging.metadata._Validator._process_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata._Validator._process_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "version_module.Version", "xref": {"fqname": "packaging.metadata..version.Version", "project": null}, "params": null}, "documentation": []}, {"name": "packaging.metadata._Validator._process_summary", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Check the field contains no newlines."]}, {"name": "packaging.metadata._Validator._process_description_content_type", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata._Validator._process_dynamic", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "packaging.metadata._Validator._process_provides_extra", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "utils.NormalizedName", "xref": {"fqname": "packaging.metadata..utils.NormalizedName", "project": null}, "params": null}]}, "documentation": []}, {"name": "packaging.metadata._Validator._process_requires_python", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "specifiers.SpecifierSet", "xref": {"fqname": "packaging.metadata..specifiers.SpecifierSet", "project": null}, "params": null}, "documentation": []}, {"name": "packaging.metadata._Validator._process_requires_dist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "requirements.Requirement", "xref": {"fqname": "packaging.metadata..requirements.Requirement", "project": null}, "params": null}]}, "documentation": []}, {"name": "packaging.metadata._Validator._process_license_expression", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "NormalizedLicenseExpression | None", "xref": null, "params": null}, "documentation": []}, {"name": "packaging.metadata._Validator._process_license_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}], "class_variables": [{"name": "packaging.metadata._Validator.name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata._Validator.raw_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "packaging.metadata._Validator.added", "type": {"name": "_MetadataVersion", "xref": {"fqname": "_MetadataVersion", "project": null}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Validate a metadata field.\n\nAll \\_process\\_\\*() methods correspond to a core metadata field. The method is\ncalled with the field's raw value. If the raw value is valid it is returned\nin its \"enriched\" form (e.g. `version.Version` for the `Version` field).\nIf the raw value is invalid, {exc}`InvalidMetadata` is raised (with a cause\nas appropriate).\n"]}, {"name": "packaging.metadata.Metadata", "bases": [], "methods": [{"name": "packaging.metadata.Metadata.from_raw", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "data", "type": {"name": "RawMetadata", "xref": {"fqname": "packaging.metadata.RawMetadata", "project": null}, "params": null}, "default": null}, {"name": "validate", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Metadata", "xref": {"fqname": "packaging.metadata.Metadata", "project": null}, "params": null}, "documentation": ["Create an instance from {class}`RawMetadata`.\n\nIf *validate* is true, all metadata will be validated. All exceptions\nrelated to validation will be gathered and raised as an {class}`ExceptionGroup`.\n"]}, {"name": "packaging.metadata.Metadata.from_email", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "data", "type": {"name": "bytes | str", "xref": null, "params": null}, "default": null}, {"name": "validate", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Metadata", "xref": {"fqname": "packaging.metadata.Metadata", "project": null}, "params": null}, "documentation": ["Parse metadata from email headers.\n\nIf *validate* is true, the metadata will be validated. All exceptions\nrelated to validation will be gathered and raised as an {class}`ExceptionGroup`.\n"]}], "class_variables": [{"name": "packaging.metadata.Metadata._raw", "type": {"name": "RawMetadata", "xref": {"fqname": "packaging.metadata.RawMetadata", "project": null}, "params": null}, "documentation": []}, {"name": "packaging.metadata.Metadata.metadata_version", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "_MetadataVersion", "xref": {"fqname": "_MetadataVersion", "project": null}, "params": null}]}, "documentation": ["{external:ref}`core-metadata-metadata-version`\n(required; validated to be a valid metadata version)\n"]}, {"name": "packaging.metadata.Metadata.name", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["{external:ref}`core-metadata-name`\n(required; validated using {func}`~packaging.utils.canonicalize_name` and its\n*validate* parameter)\n"]}, {"name": "packaging.metadata.Metadata.version", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "version_module.Version", "xref": {"fqname": "packaging.metadata..version.Version", "project": null}, "params": null}]}, "documentation": ["{external:ref}`core-metadata-version` (required)\n"]}, {"name": "packaging.metadata.Metadata.dynamic", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-dynamic`\n(validated against core metadata field names and lowercased)\n"]}, {"name": "packaging.metadata.Metadata.platforms", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-platform`\n"]}, {"name": "packaging.metadata.Metadata.supported_platforms", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-supported-platform`\n"]}, {"name": "packaging.metadata.Metadata.summary", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-summary` (validated to contain no newlines)\n"]}, {"name": "packaging.metadata.Metadata.description", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-description`\n", "TODO 2.1: can be in body"]}, {"name": "packaging.metadata.Metadata.description_content_type", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-description-content-type` (validated)\n"]}, {"name": "packaging.metadata.Metadata.keywords", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-keywords`\n"]}, {"name": "packaging.metadata.Metadata.home_page", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-home-page`\n"]}, {"name": "packaging.metadata.Metadata.download_url", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-download-url`\n"]}, {"name": "packaging.metadata.Metadata.author", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-author`\n"]}, {"name": "packaging.metadata.Metadata.author_email", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-author-email`\n"]}, {"name": "packaging.metadata.Metadata.maintainer", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-maintainer`\n"]}, {"name": "packaging.metadata.Metadata.maintainer_email", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-maintainer-email`\n"]}, {"name": "packaging.metadata.Metadata.license", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-license`\n"]}, {"name": "packaging.metadata.Metadata.license_expression", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "NormalizedLicenseExpression | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-license-expression`\n"]}, {"name": "packaging.metadata.Metadata.license_files", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-license-file`\n"]}, {"name": "packaging.metadata.Metadata.classifiers", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-classifier`\n"]}, {"name": "packaging.metadata.Metadata.requires_dist", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "list[requirements.Requirement] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-requires-dist`\n"]}, {"name": "packaging.metadata.Metadata.requires_python", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "specifiers.SpecifierSet | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-requires-python`\n"]}, {"name": "packaging.metadata.Metadata.requires_external", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-requires-external`\n"]}, {"name": "packaging.metadata.Metadata.project_urls", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "dict[str, str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-project-url`\n"]}, {"name": "packaging.metadata.Metadata.provides_extra", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "list[utils.NormalizedName] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-provides-extra`\n"]}, {"name": "packaging.metadata.Metadata.provides_dist", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-provides-dist`\n"]}, {"name": "packaging.metadata.Metadata.obsoletes_dist", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-obsoletes-dist`\n"]}, {"name": "packaging.metadata.Metadata.requires", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["``Requires`` (deprecated)"]}, {"name": "packaging.metadata.Metadata.provides", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["``Provides`` (deprecated)"]}, {"name": "packaging.metadata.Metadata.obsoletes", "type": {"name": "_Validator", "xref": {"fqname": "packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["``Obsoletes`` (deprecated)"]}], "instance_variables": [], "inner_classes": [], "documentation": ["Representation of distribution metadata.\n\nCompared to {class}`RawMetadata`, this class provides objects representing\nmetadata fields instead of only using built-in types. Any invalid metadata\nwill cause {exc}`InvalidMetadata` to be raised (with a\n{py:attr}`~BaseException.__cause__` attribute as appropriate).\n"]}], "exports": []}]}