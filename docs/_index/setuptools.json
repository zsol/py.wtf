{"name": "setuptools", "metadata": {"name": "setuptools", "version": "75.8.2", "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Archiving :: Packaging", "Topic :: System :: Systems Administration", "Topic :: Utilities"], "home_page": null, "license": null, "documentation_url": "https://setuptools.pypa.io/", "dependencies": [], "summary": "Easily download, build, install, upgrade, and uninstall Python packages", "upload_time": 1740602717}, "documentation": ["---\nsubstitutions:\n  codecov-badge: |-\n    ```{image} https://img.shields.io/codecov/c/github/pypa/setuptools/master.svg?logo=codecov&logoColor=white\n    :target: https://codecov.io/gh/pypa/setuptools\n    ```\n  discord-badge: |-\n    ```{image} https://img.shields.io/discord/803025117553754132\n    :alt: Discord\n    :target: https://discord.com/channels/803025117553754132/815945031150993468\n    ```\n  docs-badge: |-\n    ```{image} https://img.shields.io/readthedocs/setuptools/latest.svg\n    :target: https://setuptools.pypa.io\n    ```\n  py-version: |-\n    ```{image} https://img.shields.io/pypi/pyversions/setuptools.svg\n    ```\n  pypi-version: |-\n    ```{image} https://img.shields.io/pypi/v/setuptools.svg\n    :target: https://pypi.org/project/setuptools\n    ```\n  ruff-badge: |-\n    ```{image} https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json\n    :alt: Ruff\n    :target: https://github.com/astral-sh/ruff\n    ```\n  skeleton-badge: |-\n    ```{image} https://img.shields.io/badge/skeleton-2025-informational\n    :target: https://blog.jaraco.com/skeleton\n    ```\n  test-badge: |-\n    ```{image} https://github.com/pypa/setuptools/actions/workflows/main.yml/badge.svg\n    :alt: tests\n    :target: https://github.com/pypa/setuptools/actions?query=workflow%3A%22tests%22\n    ```\n  tidelift-badge: |-\n    ```{image} https://tidelift.com/badges/github/pypa/setuptools?style=flat\n    :target: https://tidelift.com/subscription/pkg/pypi-setuptools?utm_source=pypi-setuptools&utm_medium=readme\n    ```\n---\n\n{{ pypi-version }} {{ py-version }} {{ test-badge }} {{ ruff-badge }} {{ docs-badge }} {{ skeleton-badge }} {{ codecov-badge }} {{ discord-badge }}\n\nSee the [Quickstart](https://setuptools.pypa.io/en/latest/userguide/quickstart.html)\nand the [User's Guide](https://setuptools.pypa.io/en/latest/userguide/) for\ninstructions on how to use Setuptools.\n\nQuestions and comments should be directed to [GitHub Discussions](https://github.com/pypa/setuptools/discussions).\nBug reports and especially tested patches may be\nsubmitted directly to the [bug tracker](https://github.com/pypa/setuptools/issues).\n\n# Code of Conduct\n\nEveryone interacting in the setuptools project's codebases, issue trackers,\nchat rooms, and fora is expected to follow the\n[PSF Code of Conduct](https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md).\n\n# For Enterprise\n\nAvailable as part of the Tidelift Subscription.\n\nSetuptools and the maintainers of thousands of other packages are working with Tidelift to deliver one enterprise subscription that covers all of the open source you use.\n\n[Learn more](https://tidelift.com/subscription/pkg/pypi-setuptools?utm_source=pypi-setuptools&utm_medium=referral&utm_campaign=github).\n"], "modules": [{"name": "pkg_resources.tests.test_markers", "documentation": [], "functions": [{"name": "pkg_resources.tests.test_markers.test_ordering", "asynchronous": false, "params": [{"name": "python_version_mock", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [], "exports": []}, {"name": "pkg_resources.tests.test_integration_zope_interface", "documentation": [], "functions": [{"name": "pkg_resources.tests.test_integration_zope_interface.test_interop_pkg_resources_iter_entry_points", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "venv", "type": null, "default": null}], "returns": null, "documentation": ["Importing pkg_resources.iter_entry_points on console_scripts\nseems to cause trouble with zope-interface, when deprecates installation method\nis used. See #4399.", "For the sake of simplicity this test uses fixtures defined in", "`setuptools.test.fixtures`,", "and it also exercise conditions considered deprecated...", "So if needed this test can be deleted."]}], "variables": [{"name": "pkg_resources.tests.test_integration_zope_interface.pytestmark", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "pkg_resources.tests.test_find_distributions", "documentation": [], "functions": [], "variables": [{"name": "pkg_resources.tests.test_find_distributions.TESTS_DATA_DIR", "type": null, "documentation": []}], "classes": [{"name": "pkg_resources.tests.test_find_distributions.TestFindDistributions", "bases": [], "methods": [{"name": "pkg_resources.tests.test_find_distributions.TestFindDistributions.target_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_find_distributions.TestFindDistributions.test_non_egg_dir_named_egg", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "target_dir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_find_distributions.TestFindDistributions.test_standalone_egg_directory", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "target_dir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_find_distributions.TestFindDistributions.test_zipped_egg", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "target_dir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_find_distributions.TestFindDistributions.test_zipped_sdist_one_level_removed", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "target_dir", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "pkg_resources.tests", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "pkg_resources.tests.test_working_set", "documentation": [], "functions": [{"name": "pkg_resources.tests.test_working_set.strip_comments", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_working_set.parse_distributions", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}], "returns": null, "documentation": ["Parse a series of distribution specs of the form:\n{project_name}-{version}\n   [optional, indented requirements specification]\n\nExample:\n\n    foo-0.2\n    bar-1.0\n      foo>=3.0\n      [feature]\n      baz\n\nyield 2 distributions:\n    - project_name=foo, version=0.2\n    - project_name=bar, version=1.0,\n      requires=['foo>=3.0', 'baz; extra==\"feature\"']"]}, {"name": "pkg_resources.tests.test_working_set.parametrize_test_working_set_resolve", "asynchronous": false, "params": [{"name": "*test_list", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_working_set.test_working_set_resolve", "asynchronous": false, "params": [{"name": "installed_dists", "type": null, "default": null}, {"name": "installable_dists", "type": null, "default": null}, {"name": "requirements", "type": null, "default": null}, {"name": "replace_conflicting", "type": null, "default": null}, {"name": "resolved_dists_or_exception", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "pkg_resources.tests.test_working_set.FakeInstaller", "bases": [], "methods": [{"name": "pkg_resources.tests.test_working_set.FakeInstaller.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "installable_dists", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.tests.test_working_set.FakeInstaller.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "req", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "pkg_resources.tests.test_pkg_resources", "documentation": [], "functions": [{"name": "pkg_resources.tests.test_pkg_resources.make_test_distribution", "asynchronous": false, "params": [{"name": "metadata_path", "type": null, "default": null}, {"name": "metadata", "type": null, "default": null}], "returns": null, "documentation": ["Make a test Distribution object, and return it.\n\n```\nparam metadata_path\n\nthe path to the metadata file that should be\ncreated. This should be inside a distribution directory that should\nalso be created. For example, an argument value might end with\n\"<project>.dist-info/METADATA\".\n\nparam metadata\n\nthe desired contents of the metadata file, as bytes.\n```\n"]}, {"name": "pkg_resources.tests.test_pkg_resources.test_get_metadata__bad_utf8", "asynchronous": false, "params": [{"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Test a metadata file with bytes that can't be decoded as utf-8."]}, {"name": "pkg_resources.tests.test_pkg_resources.make_distribution_no_version", "asynchronous": false, "params": [{"name": "tmpdir", "type": null, "default": null}, {"name": "basename", "type": null, "default": null}], "returns": null, "documentation": ["Create a distribution directory with no file containing the version."]}, {"name": "pkg_resources.tests.test_pkg_resources.test_distribution_version_missing", "asynchronous": false, "params": [{"name": "tmpdir", "type": null, "default": null}, {"name": "suffix", "type": null, "default": null}, {"name": "expected_filename", "type": null, "default": null}, {"name": "expected_dist_type", "type": null, "default": null}], "returns": null, "documentation": ["Test Distribution.version when the \"Version\" header is missing."]}, {"name": "pkg_resources.tests.test_pkg_resources.test_distribution_version_missing_undetected_path", "asynchronous": false, "params": [], "returns": null, "documentation": ["Test Distribution.version when the \"Version\" header is missing and\nthe path can't be detected."]}, {"name": "pkg_resources.tests.test_pkg_resources.test_dist_info_is_not_dir", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "only", "type": null, "default": null}], "returns": null, "documentation": ["Test path containing a file with dist-info extension."]}, {"name": "pkg_resources.tests.test_pkg_resources.test_macos_vers_fallback", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Regression test for pkg_resources._macos_vers"]}], "variables": [], "classes": [{"name": "pkg_resources.tests.test_pkg_resources.EggRemover", "bases": ["str"], "methods": [{"name": "pkg_resources.tests.test_pkg_resources.EggRemover.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "pkg_resources.tests.test_pkg_resources.TestZipProvider", "bases": [], "methods": [{"name": "pkg_resources.tests.test_pkg_resources.TestZipProvider.setup_class", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_pkg_resources.TestZipProvider.teardown_class", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_pkg_resources.TestZipProvider.test_resource_listdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_pkg_resources.TestZipProvider.test_resource_filename_rewrites_on_change", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["If a previous call to get_resource_filename has saved the file, but\nthe file has been subsequently mutated with different file of the\nsame size and modification time, it should not be overwritten on a\nsubsequent call to get_resource_filename."]}], "class_variables": [{"name": "pkg_resources.tests.test_pkg_resources.TestZipProvider.finalizers", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "EggRemover", "xref": {"fqname": "pkg_resources.tests.test_pkg_resources.EggRemover", "project": null}, "params": null}]}, "documentation": []}, {"name": "pkg_resources.tests.test_pkg_resources.TestZipProvider.ref_time", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "pkg_resources.tests.test_pkg_resources.TestResourceManager", "bases": [], "methods": [{"name": "pkg_resources.tests.test_pkg_resources.TestResourceManager.test_get_cache_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_pkg_resources.TestResourceManager.test_get_cache_path_race", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_pkg_resources.TestResourceManager.test_setuptools_not_imported", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["In a separate Python environment, import pkg_resources and assert\nthat action doesn't cause setuptools to be imported."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "pkg_resources.tests.test_pkg_resources.TestDeepVersionLookupDistutils", "bases": [], "methods": [{"name": "pkg_resources.tests.test_pkg_resources.TestDeepVersionLookupDistutils.env", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Create a package environment, similar to a virtualenv,\nin which packages are installed."]}, {"name": "pkg_resources.tests.test_pkg_resources.TestDeepVersionLookupDistutils.create_foo_pkg", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "env", "type": null, "default": null}, {"name": "version", "type": null, "default": null}], "returns": null, "documentation": ["Create a foo package installed (distutils-style) to env.paths['lib']\nas version."]}, {"name": "pkg_resources.tests.test_pkg_resources.TestDeepVersionLookupDistutils.test_version_resolved_from_egg_info", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_pkg_resources.TestDeepVersionLookupDistutils.test_normalize_path_trailing_sep", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "unnormalized", "type": null, "default": null}, {"name": "normalized", "type": null, "default": null}], "returns": null, "documentation": ["Ensure the trailing slash is cleaned for path comparison.\n\nSee pypa/setuptools#1519."]}, {"name": "pkg_resources.tests.test_pkg_resources.TestDeepVersionLookupDistutils.test_normalize_path_normcase", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "unnormalized", "type": null, "default": null}, {"name": "normalized", "type": null, "default": null}], "returns": null, "documentation": ["Ensure mixed case is normalized on case-insensitive filesystems."]}, {"name": "pkg_resources.tests.test_pkg_resources.TestDeepVersionLookupDistutils.test_normalize_path_backslash_sep", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "unnormalized", "type": null, "default": null}, {"name": "expected", "type": null, "default": null}], "returns": null, "documentation": ["Ensure path seps are cleaned on backslash path sep systems."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "pkg_resources.tests.test_pkg_resources.TestWorkdirRequire", "bases": [], "methods": [{"name": "pkg_resources.tests.test_pkg_resources.TestWorkdirRequire.fake_site_packages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "dist_files", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_pkg_resources.TestWorkdirRequire.test_require_non_normalised_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "version", "type": null, "default": null}, {"name": "requirement", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "pkg_resources.tests.test_pkg_resources.TestWorkdirRequire.FILES", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "pkg_resources.tests.data.my-test-package-source.setup", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.wheel", "documentation": ["Wheels support."], "functions": [{"name": "setuptools.wheel._get_supported_tags", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.wheel.unpack", "asynchronous": false, "params": [{"name": "src_dir", "type": null, "default": null}, {"name": "dst_dir", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Move everything under `src_dir` to `dst_dir`, and delete the former."]}, {"name": "setuptools.wheel.disable_info_traces", "asynchronous": false, "params": [], "returns": null, "documentation": ["Temporarily disable info traces."]}], "variables": [{"name": "setuptools.wheel.WHEEL_NAME", "type": null, "documentation": []}, {"name": "setuptools.wheel.NAMESPACE_PACKAGE_INIT", "type": null, "documentation": []}], "classes": [{"name": "setuptools.wheel.Wheel", "bases": [], "methods": [{"name": "setuptools.wheel.Wheel.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.wheel.Wheel.tags", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["List tags (py_version, abi, platform) supported by this wheel."]}, {"name": "setuptools.wheel.Wheel.is_compatible", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Is the wheel compatible with the current platform?"]}, {"name": "setuptools.wheel.Wheel.egg_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.wheel.Wheel.get_dist_info", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "zf", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.wheel.Wheel.install_as_egg", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "destination_eggdir", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Install wheel as an egg directory."]}, {"name": "setuptools.wheel.Wheel._install_as_egg", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "destination_eggdir", "type": null, "default": null}, {"name": "zf", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.wheel.Wheel._convert_metadata", "asynchronous": false, "params": [{"name": "zf", "type": null, "default": null}, {"name": "destination_eggdir", "type": null, "default": null}, {"name": "dist_info", "type": null, "default": null}, {"name": "egg_info", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.wheel.Wheel._move_data_entries", "asynchronous": false, "params": [{"name": "destination_eggdir", "type": null, "default": null}, {"name": "dist_data", "type": null, "default": null}], "returns": null, "documentation": ["Move data entries to their correct location."]}, {"name": "setuptools.wheel.Wheel._fix_namespace_packages", "asynchronous": false, "params": [{"name": "egg_info", "type": null, "default": null}, {"name": "destination_eggdir", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.launch", "documentation": ["Launch the Python script on the command line after\nsetuptools is bootstrapped via import."], "functions": [{"name": "setuptools.launch.run", "asynchronous": false, "params": [], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Run the script in sys.argv[1] as if it had\nbeen invoked naturally."]}], "variables": [], "classes": [], "exports": []}, {"name": "pkg_resources.tests.test_resources", "documentation": [], "functions": [{"name": "pkg_resources.tests.test_resources.pairwise", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["from Python 3.6 docs. Available from itertools on Python 3.10"]}], "variables": [{"name": "pkg_resources.tests.test_resources.dist_from_fn", "type": null, "documentation": []}], "classes": [{"name": "pkg_resources.tests.test_resources.Metadata", "bases": ["pkg_resources.EmptyProvider"], "methods": [{"name": "pkg_resources.tests.test_resources.Metadata.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*pairs", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.tests.test_resources.Metadata.has_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.tests.test_resources.Metadata.get_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.Metadata.get_metadata_lines", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Mock object to return metadata as if from an on-disk distribution"]}, {"name": "pkg_resources.tests.test_resources.TestDistro", "bases": [], "methods": [{"name": "pkg_resources.tests.test_resources.TestDistro.testCollection", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestDistro.checkFooPkg", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "d", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestDistro.testDistroBasics", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestDistro.testDistroParse", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestDistro.testDistroMetadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestDistro.distRequires", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "txt", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestDistro.checkRequires", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}, {"name": "txt", "type": null, "default": null}, {"name": "extras", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestDistro.testDistroDependsSimple", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestDistro.test_distribution_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestDistro.test_distribution_dir_includes_provider_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestDistro.test_distribution_dir_ignores_provider_dir_leading_underscore", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestDistro.testResolve", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestDistro.test_environment_marker_evaluation_negative", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Environment markers are evaluated at resolution time."]}, {"name": "pkg_resources.tests.test_resources.TestDistro.test_environment_marker_evaluation_positive", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestDistro.test_environment_marker_evaluation_called", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["If one package foo requires bar without any extras,\nmarkers should pass for bar without extras."]}, {"name": "pkg_resources.tests.test_resources.TestDistro.test_marker_evaluation_with_extras", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Extras are also evaluated as markers at resolution time."]}, {"name": "pkg_resources.tests.test_resources.TestDistro.test_marker_evaluation_with_extras_normlized", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Extras are also evaluated as markers at resolution time."]}, {"name": "pkg_resources.tests.test_resources.TestDistro.test_marker_evaluation_with_multiple_extras", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestDistro.test_marker_evaluation_with_extras_loop", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestDistro.testDistroDependsOptions", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "pkg_resources.tests.test_resources.TestDistro.needs_object_dir", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestWorkingSet", "bases": [], "methods": [{"name": "pkg_resources.tests.test_resources.TestWorkingSet.test_find_conflicting", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestWorkingSet.test_resolve_conflicts_with_prior", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["A ContextualVersionConflict should be raised when a requirement\nconflicts with a prior requirement for a different package."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestEntryPoints", "bases": [], "methods": [{"name": "pkg_resources.tests.test_resources.TestEntryPoints.assertfields", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "ep", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestEntryPoints.setup_method", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "method", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestEntryPoints.testBasics", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestEntryPoints.testParse", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestEntryPoints.test_reject_spec", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "reject_spec", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestEntryPoints.test_printable_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Allow any printable character in the name."]}, {"name": "pkg_resources.tests.test_resources.TestEntryPoints.checkSubMap", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "m", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestEntryPoints.testParseList", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestEntryPoints.testParseMap", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestEntryPoints.testDeprecationWarnings", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "pkg_resources.tests.test_resources.TestEntryPoints.reject_specs", "type": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestEntryPoints.submap_expect", "type": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestEntryPoints.submap_str", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestRequirements", "bases": [], "methods": [{"name": "pkg_resources.tests.test_resources.TestRequirements.testBasics", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestRequirements.testOrdering", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestRequirements.testBasicContains", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestRequirements.testOptionsAndHashing", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestRequirements.testVersionEquality", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestRequirements.testSetuptoolsProjectName", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["The setuptools project should implement the setuptools package."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestParsing", "bases": [], "methods": [{"name": "pkg_resources.tests.test_resources.TestParsing.testEmptyParse", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestParsing.testYielding", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestParsing.testSplitting", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestParsing.testSafeName", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestParsing.testSafeVersion", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestParsing.testSimpleRequirements", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestParsing.test_requirements_with_markers", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestParsing.test_local_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestParsing.test_spaces_between_multiple_versions", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestParsing.testVersionEquality", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "lower", "type": null, "default": null}, {"name": "upper", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestParsing.testVersionOrdering", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "lower", "type": null, "default": null}, {"name": "upper", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestParsing.testVersionHashable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that our versions stay hashable even though we've subclassed\nthem and added some shim code to them."]}], "class_variables": [{"name": "pkg_resources.tests.test_resources.TestParsing.torture", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestNamespaces", "bases": [], "methods": [{"name": "pkg_resources.tests.test_resources.TestNamespaces.symlinked_tmpdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Where available, return the tempdir as a symlink,\nwhich as revealed in #231 is more fragile than\na natural tempdir."]}, {"name": "pkg_resources.tests.test_resources.TestNamespaces.patched_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Patch sys.path to include the 'site-pkgs' dir. Also\nrestore pkg_resources._namespace_packages to its\nformer state."]}, {"name": "pkg_resources.tests.test_resources.TestNamespaces.test_two_levels_deep", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "symlinked_tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Test nested namespace packages\nCreate namespace packages in the following tree :\n    site-packages-1/pkg1/pkg2\n    site-packages-2/pkg1/pkg2\nCheck both are in the _namespace_packages dict and that their __path__\nis correct"]}, {"name": "pkg_resources.tests.test_resources.TestNamespaces.test_path_order", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "symlinked_tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Test that if multiple versions of the same namespace package subpackage\nare on different sys.path entries, that only the one earliest on\nsys.path is imported, and that the namespace package's __path__ is in\nthe correct order.\n\nRegression test for https://github.com/pypa/setuptools/issues/207"]}], "class_variables": [{"name": "pkg_resources.tests.test_resources.TestNamespaces.ns_str", "type": null, "documentation": []}, {"name": "pkg_resources.tests.test_resources.TestNamespaces.issue591", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.config._apply_pyprojecttoml", "documentation": ["Translation layer between pyproject config and setuptools distribution and\nmetadata objects.\n\nThe distribution and metadata objects are modeled after (an old version of)\ncore metadata, therefore configs in the format specified for `pyproject.toml`\nneed to be processed before being applied.\n\n**PRIVATE MODULE**: API reserved for setuptools internal usage only.\n"], "functions": [{"name": "setuptools.config._apply_pyprojecttoml.apply", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "config", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "default": null}, {"name": "filename", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "documentation": ["Apply configuration dict read with {func}`read_configuration`\n"]}, {"name": "setuptools.config._apply_pyprojecttoml._apply_project_table", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "config", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "default": null}, {"name": "root_dir", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._apply_tool_table", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "config", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "default": null}, {"name": "filename", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._handle_missing_dynamic", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "project_table", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": ["Be temporarily forgiving with `dynamic` fields not listed in `dynamic`\n"]}, {"name": "setuptools.config._apply_pyprojecttoml.json_compatible_key", "asynchronous": false, "params": [{"name": "key", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["As defined in {pep}`566#json-compatible-metadata`\n"]}, {"name": "setuptools.config._apply_pyprojecttoml._set_config", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "field", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._guess_content_type", "asynchronous": false, "params": [{"name": "file", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._long_description", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "val", "type": {"name": "_ProjectReadmeValue", "xref": {"fqname": "_ProjectReadmeValue", "project": null}, "params": null}, "default": null}, {"name": "root_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._license", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "val", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "default": null}, {"name": "root_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._people", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "val", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "_root_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": null}, {"name": "kind", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._project_urls", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "val", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "default": null}, {"name": "_root_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._python_requires", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "val", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "_root_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._dependencies", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "val", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": null}, "default": null}, {"name": "_root_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._optional_dependencies", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "val", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "default": null}, {"name": "_root_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._ext_modules", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "val", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "Extension", "xref": {"fqname": "setuptools.config.extension.Extension", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._noop", "asynchronous": false, "params": [{"name": "_dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "val", "type": {"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}, "default": null}], "returns": {"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._identity", "asynchronous": false, "params": [{"name": "val", "type": {"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}, "default": null}], "returns": {"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._unify_entry_points", "asynchronous": false, "params": [{"name": "project_table", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._copy_command_options", "asynchronous": false, "params": [{"name": "pyproject", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "filename", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._valid_command_options", "asynchronous": false, "params": [{"name": "cmdclass", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "set", "xref": {"fqname": "functions.set", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._load_ep", "asynchronous": false, "params": [{"name": "ep", "type": {"name": "metadata.EntryPoint", "xref": {"fqname": "setuptools._importlib.metadata.EntryPoint", "project": null}, "params": null}, "default": null}], "returns": {"name": "tuple[str, type] | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._normalise_cmd_option_key", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._normalise_cmd_options", "asynchronous": false, "params": [{"name": "desc", "type": {"name": "_OptionsList", "xref": {"fqname": "distutils.dist._OptionsList", "project": null}, "params": null}, "default": null}], "returns": {"name": "set", "xref": {"fqname": "functions.set", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._get_previous_entrypoints", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._get_previous_scripts", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}], "returns": {"name": "list | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._get_previous_gui_scripts", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}], "returns": {"name": "list | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._set_static_list_metadata", "asynchronous": false, "params": [{"name": "attr", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "val", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Apply distutils metadata validation but preserve \"static\" behaviour"]}, {"name": "setuptools.config._apply_pyprojecttoml._attrgetter", "asynchronous": false, "params": [{"name": "attr", "type": null, "default": null}], "returns": null, "documentation": ["Similar to `operator.attrgetter` but returns None if `attr` is not found\n\\>>> from types import SimpleNamespace\n\\>>> obj = SimpleNamespace(a=42, b=SimpleNamespace(c=13))\n\\>>> \\_attrgetter(\"a\")(obj)\n42\n\\>>> \\_attrgetter(\"b.c\")(obj)\n13\n\\>>> \\_attrgetter(\"d\")(obj) is None\nTrue\n"]}, {"name": "setuptools.config._apply_pyprojecttoml._some_attrgetter", "asynchronous": false, "params": [{"name": "*items", "type": null, "default": null}], "returns": null, "documentation": ["Return the first \"truth-y\" attribute or None\n\\>>> from types import SimpleNamespace\n\\>>> obj = SimpleNamespace(a=42, b=SimpleNamespace(c=13))\n\\>>> \\_some_attrgetter(\"d\", \"a\", \"b.c\")(obj)\n42\n\\>>> \\_some_attrgetter(\"d\", \"e\", \"b.c\", \"a\")(obj)\n13\n\\>>> \\_some_attrgetter(\"d\", \"e\", \"f\")(obj) is None\nTrue\n"]}], "variables": [{"name": "setuptools.config._apply_pyprojecttoml.EMPTY", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": null}, "documentation": ["Immutable dict-like"]}, {"name": "setuptools.config._apply_pyprojecttoml._ProjectReadmeValue", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._Correspondence", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._T", "type": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._logger", "type": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._CONTENT_TYPES", "type": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml.PYPROJECT_CORRESPONDENCE", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "_Correspondence", "xref": {"fqname": "_Correspondence", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml.TOOL_TABLE_RENAMES", "type": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml.TOOL_TABLE_REMOVALS", "type": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml.TOOL_TABLE_CORRESPONDENCE", "type": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml.SETUPTOOLS_PATCHES", "type": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._PREPROCESS", "type": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._PREVIOUSLY_DEFINED", "type": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._RESET_PREVIOUSLY_DEFINED", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "documentation": []}], "classes": [{"name": "setuptools.config._apply_pyprojecttoml._MissingDynamic", "bases": ["SetuptoolsWarning"], "methods": [{"name": "setuptools.config._apply_pyprojecttoml._MissingDynamic.details", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "field", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["TODO: Consider removing this check in the future?", "There is a trade-off here between improving \"debug-ability\" and the cost", "of running/testing/maintaining these unnecessary checks..."]}], "class_variables": [{"name": "setuptools.config._apply_pyprojecttoml._MissingDynamic._SUMMARY", "type": null, "documentation": []}, {"name": "setuptools.config._apply_pyprojecttoml._MissingDynamic._DETAILS", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.config", "documentation": ["For backward compatibility, expose main functions from\n``setuptools.config.setupcfg``"], "functions": [{"name": "setuptools.config._deprecation_notice", "asynchronous": false, "params": [{"name": "fn", "type": {"name": "Fn", "xref": {"fqname": "Fn", "project": null}, "params": null}, "default": null}], "returns": {"name": "Fn", "xref": {"fqname": "Fn", "project": null}, "params": null}, "documentation": []}], "variables": [{"name": "setuptools.config.Fn", "type": null, "documentation": []}, {"name": "setuptools.config.read_configuration", "type": null, "documentation": []}, {"name": "setuptools.config.parse_configuration", "type": null, "documentation": []}], "classes": [], "exports": [{"name": "setuptools.config.parse_configuration", "xref": {"fqname": "setuptools.config.parse_configuration", "project": null}}, {"name": "setuptools.config.read_configuration", "xref": {"fqname": "setuptools.config.read_configuration", "project": null}}]}, {"name": "setuptools.msvc", "documentation": ["Environment info about Microsoft Compilers.\n\n```pycon\n>>> getfixture('windows_only')\n>>> ei = EnvironmentInfo('amd64')\n```\n"], "functions": [], "variables": [{"name": "setuptools.msvc.environ", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}], "classes": [{"name": "setuptools.msvc.winreg", "bases": [], "methods": [], "class_variables": [{"name": "setuptools.msvc.winreg.HKEY_USERS", "type": null, "documentation": []}, {"name": "setuptools.msvc.winreg.HKEY_CURRENT_USER", "type": null, "documentation": []}, {"name": "setuptools.msvc.winreg.HKEY_LOCAL_MACHINE", "type": null, "documentation": []}, {"name": "setuptools.msvc.winreg.HKEY_CLASSES_ROOT", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Mock winreg and environ so the module can be imported on this platform."]}, {"name": "setuptools.msvc.PlatformInfo", "bases": [], "methods": [{"name": "setuptools.msvc.PlatformInfo.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "arch", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.msvc.PlatformInfo.target_cpu", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return Target CPU architecture.\n\nReturn\n------\nstr\n    Target CPU"]}, {"name": "setuptools.msvc.PlatformInfo.target_is_x86", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return True if target CPU is x86 32 bits..\n\nReturn\n------\nbool\n    CPU is x86 32 bits"]}, {"name": "setuptools.msvc.PlatformInfo.current_is_x86", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return True if current CPU is x86 32 bits..\n\nReturn\n------\nbool\n    CPU is x86 32 bits"]}, {"name": "setuptools.msvc.PlatformInfo.current_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "hidex86", "type": null, "default": "..."}, {"name": "x64", "type": null, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Current platform specific subfolder.\n\nParameters\n----------\nhidex86: bool\n    return '' and not '\u0086' if architecture is x86.\nx64: bool\n    return 'd' and not '\u0007md64' if architecture is amd64.\n\nReturn\n------\nstr\n    subfolder: '        arget', or '' (see hidex86 parameter)"]}, {"name": "setuptools.msvc.PlatformInfo.target_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "hidex86", "type": null, "default": "..."}, {"name": "x64", "type": null, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Target platform specific subfolder.\n\nParameters\n----------\nhidex86: bool\n    return '' and not '\\x86' if architecture is x86.\nx64: bool\n    return '\\x64' and not '\\amd64' if architecture is amd64.\n\nReturn\n------\nstr\n    subfolder: '\\current', or '' (see hidex86 parameter)"]}, {"name": "setuptools.msvc.PlatformInfo.cross_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "forcex86", "type": null, "default": "..."}], "returns": null, "documentation": ["Cross platform specific subfolder.\n\nParameters\n----------\nforcex86: bool\n    Use 'x86' as current architecture even if current architecture is\n    not x86.\n\nReturn\n------\nstr\n    subfolder: '' if target architecture is current architecture,\n    '\\current_target' if not."]}], "class_variables": [{"name": "setuptools.msvc.PlatformInfo.current_cpu", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Current and Target Architectures information.\n\nParameters\n----------\narch: str\n    Target architecture."]}, {"name": "setuptools.msvc.RegistryInfo", "bases": [], "methods": [{"name": "setuptools.msvc.RegistryInfo.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "platform_info", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.msvc.RegistryInfo.visualstudio", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Microsoft Visual Studio root registry key.\n\nReturn\n------\nstr\n    Registry key"]}, {"name": "setuptools.msvc.RegistryInfo.sxs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Visual Studio SxS registry key.\n\nReturn\n------\nstr\n    Registry key"]}, {"name": "setuptools.msvc.RegistryInfo.vc", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Visual C++ VC7 registry key.\n\nReturn\n------\nstr\n    Registry key"]}, {"name": "setuptools.msvc.RegistryInfo.vs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Visual Studio VS7 registry key.\n\nReturn\n------\nstr\n    Registry key"]}, {"name": "setuptools.msvc.RegistryInfo.vc_for_python", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Microsoft Visual C++ for Python registry key.\n\nReturn\n------\nstr\n    Registry key"]}, {"name": "setuptools.msvc.RegistryInfo.microsoft_sdk", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Microsoft SDK registry key.\n\nReturn\n------\nstr\n    Registry key"]}, {"name": "setuptools.msvc.RegistryInfo.windows_sdk", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Windows/Platform SDK registry key.\n\nReturn\n------\nstr\n    Registry key"]}, {"name": "setuptools.msvc.RegistryInfo.netfx_sdk", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft .NET Framework SDK registry key.\n\nReturn\n------\nstr\n    Registry key"]}, {"name": "setuptools.msvc.RegistryInfo.windows_kits_roots", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Microsoft Windows Kits Roots registry key.\n\nReturn\n------\nstr\n    Registry key"]}, {"name": "setuptools.msvc.RegistryInfo.microsoft", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}, {"name": "x86", "type": null, "default": "..."}], "returns": null, "documentation": ["Return key in Microsoft software registry.\n\nParameters\n----------\nkey: str\n    Registry key path where look.\nx86: str\n    Force x86 software registry.\n\nReturn\n------\nstr\n    Registry key"]}, {"name": "setuptools.msvc.RegistryInfo.lookup", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Look for values in registry in Microsoft software registry.\n\nParameters\n----------\nkey: str\n    Registry key path where look.\nname: str\n    Value name to find.\n\nReturn\n------\nstr\n    value"]}], "class_variables": [{"name": "setuptools.msvc.RegistryInfo.HKEYS", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Microsoft Visual Studio related registry information.\n\nParameters\n----------\nplatform_info: PlatformInfo\n    \"PlatformInfo\" instance."]}, {"name": "setuptools.msvc.SystemInfo", "bases": [], "methods": [{"name": "setuptools.msvc.SystemInfo.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "registry_info", "type": null, "default": null}, {"name": "vc_ver", "type": null, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.msvc.SystemInfo._find_latest_available_vs_ver", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Find the latest VC version\n\nReturn\n------\nfloat\n    version"]}, {"name": "setuptools.msvc.SystemInfo.find_reg_vs_vers", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Find Microsoft Visual Studio versions available in registry.\n\nReturn\n------\nlist of float\n    Versions"]}, {"name": "setuptools.msvc.SystemInfo.find_programdata_vs_vers", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "float", "xref": {"fqname": "functions.float", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Find Visual studio 2017+ versions from information in\n\"C:\\ProgramData\\Microsoft\\VisualStudio\\Packages\\_Instances\".\n\nReturn\n------\ndict\n    float version as key, path as value."]}, {"name": "setuptools.msvc.SystemInfo._as_float_version", "asynchronous": false, "params": [{"name": "version", "type": null, "default": null}], "returns": null, "documentation": ["Return a string version as a simplified float version (major.minor)\n\nParameters\n----------\nversion: str\n    Version.\n\nReturn\n------\nfloat\n    version"]}, {"name": "setuptools.msvc.SystemInfo.VSInstallDir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Visual Studio directory.\n\nReturn\n------\nstr\n    path"]}, {"name": "setuptools.msvc.SystemInfo.VCInstallDir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Visual C++ directory.\n\nReturn\n------\nstr\n    path"]}, {"name": "setuptools.msvc.SystemInfo._guess_vc", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Locate Visual C++ for VS2017+.\n\nReturn\n------\nstr\n    path"]}, {"name": "setuptools.msvc.SystemInfo._guess_vc_legacy", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Locate Visual C++ for versions prior to 2017.\n\nReturn\n------\nstr\n    path"]}, {"name": "setuptools.msvc.SystemInfo.WindowsSdkVersion", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "LiteralString", "xref": {"fqname": "typing_extensions.LiteralString", "project": null}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": ["Microsoft Windows SDK versions for specified MSVC++ version.\n\nReturn\n------\ntuple of str\n    versions"]}, {"name": "setuptools.msvc.SystemInfo.WindowsSdkLastVersion", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Windows SDK last version.\n\nReturn\n------\nstr\n    version"]}, {"name": "setuptools.msvc.SystemInfo.WindowsSdkDir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["Microsoft Windows SDK directory.\n\nReturn\n------\nstr\n    path"]}, {"name": "setuptools.msvc.SystemInfo.WindowsSDKExecutablePath", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Windows SDK executable directory.\n\nReturn\n------\nstr\n    path"]}, {"name": "setuptools.msvc.SystemInfo.FSharpInstallDir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Visual F# directory.\n\nReturn\n------\nstr\n    path"]}, {"name": "setuptools.msvc.SystemInfo.UniversalCRTSdkDir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Universal CRT SDK directory.\n\nReturn\n------\nstr\n    path"]}, {"name": "setuptools.msvc.SystemInfo.UniversalCRTSdkLastVersion", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Universal C Runtime SDK last version.\n\nReturn\n------\nstr\n    version"]}, {"name": "setuptools.msvc.SystemInfo.NetFxSdkVersion", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft .NET Framework SDK versions.\n\nReturn\n------\ntuple of str\n    versions"]}, {"name": "setuptools.msvc.SystemInfo.NetFxSdkDir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft .NET Framework SDK directory.\n\nReturn\n------\nstr\n    path"]}, {"name": "setuptools.msvc.SystemInfo.FrameworkDir32", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft .NET Framework 32bit directory.\n\nReturn\n------\nstr\n    path"]}, {"name": "setuptools.msvc.SystemInfo.FrameworkDir64", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft .NET Framework 64bit directory.\n\nReturn\n------\nstr\n    path"]}, {"name": "setuptools.msvc.SystemInfo.FrameworkVersion32", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": ["Microsoft .NET Framework 32bit versions.\n\nReturn\n------\ntuple of str\n    versions"]}, {"name": "setuptools.msvc.SystemInfo.FrameworkVersion64", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": ["Microsoft .NET Framework 64bit versions.\n\nReturn\n------\ntuple of str\n    versions"]}, {"name": "setuptools.msvc.SystemInfo._find_dot_net_versions", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "bits", "type": null, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": ["Find Microsoft .NET Framework versions.\n\nParameters\n----------\nbits: int\n    Platform number of bits: 32 or 64.\n\nReturn\n------\ntuple of str\n    versions"]}, {"name": "setuptools.msvc.SystemInfo._use_last_dir_name", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}, {"name": "prefix", "type": null, "default": "..."}], "returns": null, "documentation": ["Return name of the last dir in path or '' if no dir found.\n\nParameters\n----------\npath: str\n    Use dirs in this path\nprefix: str\n    Use only dirs starting by this prefix\n\nReturn\n------\nstr\n    name"]}], "class_variables": [{"name": "setuptools.msvc.SystemInfo.WinDir", "type": null, "documentation": []}, {"name": "setuptools.msvc.SystemInfo.ProgramFiles", "type": null, "documentation": []}, {"name": "setuptools.msvc.SystemInfo.ProgramFilesx86", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Microsoft Windows and Visual Studio related system information.\n\nParameters\n----------\nregistry_info: RegistryInfo\n    \"RegistryInfo\" instance.\nvc_ver: float\n    Required Microsoft Visual C++ version."]}, {"name": "setuptools.msvc._EnvironmentDict", "bases": ["TypedDict"], "methods": [], "class_variables": [{"name": "setuptools.msvc._EnvironmentDict.include", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.msvc._EnvironmentDict.lib", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.msvc._EnvironmentDict.libpath", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.msvc._EnvironmentDict.path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.msvc._EnvironmentDict.py_vcruntime_redist", "type": {"name": "NotRequired", "xref": {"fqname": "typing_extensions.NotRequired", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.msvc.EnvironmentInfo", "bases": [], "methods": [{"name": "setuptools.msvc.EnvironmentInfo.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "arch", "type": null, "default": null}, {"name": "vc_ver", "type": null, "default": "..."}, {"name": "vc_min_ver", "type": null, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Variables and properties in this class use originals CamelCase variables", "names from Microsoft source files for more easy comparison."]}, {"name": "setuptools.msvc.EnvironmentInfo.vs_ver", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Visual Studio.\n\nReturn\n------\nfloat\n    version"]}, {"name": "setuptools.msvc.EnvironmentInfo.vc_ver", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Visual C++ version.\n\nReturn\n------\nfloat\n    version"]}, {"name": "setuptools.msvc.EnvironmentInfo.VSTools", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Visual Studio Tools.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo.VCIncludes", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Visual C++ & Microsoft Foundation Class Includes.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo.VCLibraries", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Visual C++ & Microsoft Foundation Class Libraries.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo.VCStoreRefs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Visual C++ store references Libraries.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo.VCTools", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Visual C++ Tools.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo.OSLibraries", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Windows SDK Libraries.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo.OSIncludes", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Windows SDK Include.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo.OSLibpath", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Windows SDK Libraries Paths.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo.SdkTools", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Windows SDK Tools.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo._sdk_tools", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Windows SDK Tools paths generator.\n\nReturn\n------\ngenerator of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo._sdk_subdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Windows SDK version subdir.\n\nReturn\n------\nstr\n    subdir"]}, {"name": "setuptools.msvc.EnvironmentInfo.SdkSetup", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Windows SDK Setup.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo.FxTools", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft .NET Framework Tools.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo.NetFxSDKLibraries", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft .Net Framework SDK Libraries.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo.NetFxSDKIncludes", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft .Net Framework SDK Includes.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo.VsTDb", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Visual Studio Team System Database.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo.MSBuild", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Build Engine.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo.HTMLHelpWorkshop", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft HTML Help Workshop.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo.UCRTLibraries", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Universal C Runtime SDK Libraries.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo.UCRTIncludes", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Universal C Runtime SDK Include.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo._ucrt_subdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Universal C Runtime SDK version subdir.\n\nReturn\n------\nstr\n    subdir"]}, {"name": "setuptools.msvc.EnvironmentInfo.FSharp", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Microsoft Visual F#.\n\nReturn\n------\nlist of str\n    paths"]}, {"name": "setuptools.msvc.EnvironmentInfo.VCRuntimeRedist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["Microsoft Visual C++ runtime redistributable dll.\n\nReturns the first suitable path found or None."]}, {"name": "setuptools.msvc.EnvironmentInfo.return_env", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "_EnvironmentDict", "xref": {"fqname": "setuptools.msvc._EnvironmentDict", "project": null}, "params": null}, "documentation": ["Return environment dict.\n\nParameters\n----------\nexists: bool\n    It True, only return existing paths.\n\nReturn\n------\ndict\n    environment"]}, {"name": "setuptools.msvc.EnvironmentInfo._build_paths", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "spec_path_lists", "type": null, "default": null}, {"name": "exists", "type": null, "default": null}], "returns": null, "documentation": ["Given an environment variable name and specified paths,\nreturn a pathsep-separated string of paths containing\nunique, extant, directories from those paths and from\nthe environment variable. Raise an error if no paths\nare resolved.\n\nParameters\n----------\nname: str\n    Environment variable name\nspec_path_lists: list of str\n    Paths\nexists: bool\n    It True, only return existing paths.\n\nReturn\n------\nstr\n    Pathsep-separated paths"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Return environment variables for specified Microsoft Visual C++ version\nand platform : Lib, Include, Path and libpath.\n\nThis function is compatible with Microsoft Visual C++ 9.0 to 14.X.\n\nScript created by analysing Microsoft environment configuration files like\n\"vcvars[...].bat\", \"SetEnv.Cmd\", \"vcbuildtools.bat\", ...\n\nParameters\n----------\narch: str\n    Target architecture.\nvc_ver: float\n    Required Microsoft Visual C++ version. If not set, autodetect the last\n    version.\nvc_min_ver: float\n    Minimum Microsoft Visual C++ version."]}], "exports": []}, {"name": "setuptools.config.pyprojecttoml", "documentation": ["Load setuptools configuration from `pyproject.toml` files.\n\n**PRIVATE MODULE**: API reserved for setuptools internal usage only.\n\nTo read project metadata, consider using\n`build.util.project_wheel_metadata` (<https://pypi.org/project/build/>).\nFor simple scenarios, you can also try parsing the file directly\nwith the help of `tomllib` or `tomli`.\n"], "functions": [{"name": "setuptools.config.pyprojecttoml.load_file", "asynchronous": false, "params": [{"name": "filepath", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config.pyprojecttoml.validate", "asynchronous": false, "params": [{"name": "config", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "default": null}, {"name": "filepath", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config.pyprojecttoml.apply_configuration", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "filepath", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "ignore_option_errors", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "documentation": ["Apply the configuration from a `pyproject.toml` file into an existing\ndistribution object.\n"]}, {"name": "setuptools.config.pyprojecttoml.read_configuration", "asynchronous": false, "params": [{"name": "filepath", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "expand", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ignore_option_errors", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "dist", "type": {"name": "Distribution | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "documentation": ["Read given configuration file and returns options from it as a dict.\n\n```\nparam str|unicode filepath\n\nPath to configuration file in the pyproject.toml\nformat.\n\nparam bool expand\n\nWhether to expand directives and other computed values\n(i.e. post-process the given configuration)\n\nparam bool ignore_option_errors\n\nWhether to silently ignore\noptions, values of which could not be resolved (e.g. due to exceptions\nin directives such as file:, attr:, etc.).\nIf False exceptions are propagated as expected.\n\nparam Distribution|None\n\nDistribution object to which the configuration refers.\nIf not given a dummy object will be created and discarded after the\nconfiguration is read. This is used for auto-discovery of packages and in the\ncase a dynamic configuration (e.g. attr or cmdclass) is expanded.\nWhen expand=False this object is simply ignored.\n\nrtype\n\ndict\n```\n"]}, {"name": "setuptools.config.pyprojecttoml.expand_configuration", "asynchronous": false, "params": [{"name": "config", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "default": null}, {"name": "root_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": "..."}, {"name": "ignore_option_errors", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "dist", "type": {"name": "Distribution | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "documentation": ["Given a configuration with unresolved fields (e.g. dynamic, cmdclass, ...)\nfind their final values.\n\n```\nparam dict config\n\nDict containing the configuration for the distribution\n\nparam str root_dir\n\nTop-level directory for the distribution/project\n(the same directory where pyproject.toml is place)\n\nparam bool ignore_option_errors\n\nsee \n\nparam Distribution|None\n\nDistribution object to which the configuration refers.\nIf not given a dummy object will be created and discarded after the\nconfiguration is read. Used in the case a dynamic configuration\n(e.g. attr or cmdclass).\n\nrtype\n\ndict\n```\n"]}, {"name": "setuptools.config.pyprojecttoml._parse_requirements_list", "asynchronous": false, "params": [{"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ignore_errors", "asynchronous": false, "params": [{"name": "ignore_option_errors", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.config.pyprojecttoml._logger", "type": null, "documentation": []}], "classes": [{"name": "setuptools.config.pyprojecttoml._ConfigExpander", "bases": [], "methods": [{"name": "setuptools.config.pyprojecttoml._ConfigExpander.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "config", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "default": null}, {"name": "root_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": "..."}, {"name": "ignore_option_errors", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "dist", "type": {"name": "Distribution | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ConfigExpander._ensure_dist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ConfigExpander._process_field", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "container", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "default": null}, {"name": "field", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "fn", "type": {"name": "Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ConfigExpander._canonic_package_data", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "field", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ConfigExpander.expand", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ConfigExpander._expand_packages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ConfigExpander._expand_data_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ConfigExpander._expand_cmdclass", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "package_dir", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ConfigExpander._expand_all_dynamic", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "package_dir", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ConfigExpander._ensure_previously_set", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "field", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ConfigExpander._expand_directive", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "specifier", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "directive", "type": null, "default": null}, {"name": "package_dir", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ConfigExpander._obtain", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "field", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "package_dir", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ConfigExpander._obtain_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "package_dir", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ConfigExpander._obtain_readme", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}], "returns": {"name": "dict[str, str] | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ConfigExpander._obtain_entry_points", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "package_dir", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "dict[str, dict[str, Any]] | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ConfigExpander._obtain_classifiers", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ConfigExpander._obtain_dependencies", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ConfigExpander._obtain_optional_dependencies", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.config.pyprojecttoml._EnsurePackagesDiscovered", "bases": ["_expand.EnsurePackagesDiscovered"], "methods": [{"name": "setuptools.config.pyprojecttoml._EnsurePackagesDiscovered.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "distribution", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "project_cfg", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "default": null}, {"name": "setuptools_cfg", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config.pyprojecttoml._EnsurePackagesDiscovered.__enter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Self", "xref": {"fqname": "typing_extensions.Self", "project": null}, "params": null}, "documentation": ["When entering the context, the values of `packages`, `py_modules` and\n`package_dir` that are missing in `dist` are copied from `setuptools_cfg`.\n"]}, {"name": "setuptools.config.pyprojecttoml._EnsurePackagesDiscovered.__exit__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "exc_type", "type": {"name": "type[BaseException] | None", "xref": null, "params": null}, "default": null}, {"name": "exc_value", "type": {"name": "BaseException | None", "xref": null, "params": null}, "default": null}, {"name": "traceback", "type": {"name": "TracebackType | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["When exiting the context, if values of `packages`, `py_modules` and\n`package_dir` are missing in `setuptools_cfg`, copy from `dist`.\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ExperimentalConfiguration", "bases": ["SetuptoolsWarning"], "methods": [], "class_variables": [{"name": "setuptools.config.pyprojecttoml._ExperimentalConfiguration._SUMMARY", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.config.pyprojecttoml._ToolsTypoInMetadata", "bases": ["SetuptoolsWarning"], "methods": [], "class_variables": [{"name": "setuptools.config.pyprojecttoml._ToolsTypoInMetadata._SUMMARY", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.config._validate_pyproject.error_reporting", "documentation": [], "functions": [{"name": "setuptools.config._validate_pyproject.error_reporting.detailed_errors", "asynchronous": false, "params": [], "returns": {"name": "Generator", "xref": {"fqname": "typing.Generator", "project": "--std--"}, "params": [{"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._separate_terms", "asynchronous": false, "params": [{"name": "word", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["```pycon\n>>> _separate_terms(\"FooBar-foo\")\n['foo', 'bar', 'foo']\n```\n"]}], "variables": [{"name": "setuptools.config._validate_pyproject.error_reporting._logger", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._MESSAGE_REPLACEMENTS", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._SKIP_DETAILS", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._NEED_DETAILS", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._CAMEL_CASE_SPLITTER", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._IDENTIFIER", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._TOML_JARGON", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._FORMATS_HELP", "type": null, "documentation": []}], "classes": [{"name": "setuptools.config._validate_pyproject.error_reporting.ValidationError", "bases": ["JsonSchemaValueException"], "methods": [{"name": "setuptools.config._validate_pyproject.error_reporting.ValidationError._from_jsonschema", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "ex", "type": {"name": "JsonSchemaValueException", "xref": {"fqname": "setuptools.config._validate_pyproject.error_reporting.fastjsonschema_exceptions.JsonSchemaValueException", "project": null}, "params": null}, "default": null}], "returns": {"name": "Self", "xref": {"fqname": "typing.Self", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.config._validate_pyproject.error_reporting.ValidationError.summary", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting.ValidationError.details", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting.ValidationError._original_message", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Report violations of a given JSON schema.\n\nThis class extends {exc}`~fastjsonschema.JsonSchemaValueException`\nby adding the following properties:\n\n- `summary`: an improved version of the `JsonSchemaValueException` error message\n  with only the necessary information)\n- `details`: more contextual information about the error like the failing schema\n  itself and the value that violates the schema.\n\nDepending on the level of the verbosity of the `logging` configuration\nthe exception message will be only `summary` (default) or a combination of\n`summary` and `details` (when the logging level is set to {obj}`logging.DEBUG`).\n"]}, {"name": "setuptools.config._validate_pyproject.error_reporting._ErrorFormatting", "bases": [], "methods": [{"name": "setuptools.config._validate_pyproject.error_reporting._ErrorFormatting.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "ex", "type": {"name": "JsonSchemaValueException", "xref": {"fqname": "setuptools.config._validate_pyproject.error_reporting.fastjsonschema_exceptions.JsonSchemaValueException", "project": null}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._ErrorFormatting.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._ErrorFormatting.summary", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._ErrorFormatting.details", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._ErrorFormatting._simplify_name", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._ErrorFormatting._expand_summary", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._ErrorFormatting._expand_details", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._SummaryWriter", "bases": [], "methods": [{"name": "setuptools.config._validate_pyproject.error_reporting._SummaryWriter.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "jargon", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Dict", "xref": {"fqname": "typing.Dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._SummaryWriter._jargon", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "term", "type": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "default": null}], "returns": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._SummaryWriter.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "schema", "type": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}]}]}, "default": null}, {"name": "prefix", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "_path", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._SummaryWriter._is_unecessary", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._SummaryWriter._filter_unecessary", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "schema", "type": {"name": "Dict", "xref": {"fqname": "typing.Dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "path", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "Dict", "xref": {"fqname": "typing.Dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._SummaryWriter._handle_simple_dict", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "default": null}, {"name": "path", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._SummaryWriter._handle_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "schemas", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": null}, "default": null}, {"name": "prefix", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "path", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._SummaryWriter._is_property", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Check if the given path can correspond to an arbitrarily named property"]}, {"name": "setuptools.config._validate_pyproject.error_reporting._SummaryWriter._label", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._SummaryWriter._value", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "path", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._SummaryWriter._inline_attrs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "schema", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "default": null}, {"name": "path", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.config._validate_pyproject.error_reporting._SummaryWriter._child_prefix", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parent_prefix", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "child_prefix", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.config._validate_pyproject.error_reporting._SummaryWriter._IGNORE", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.config.expand", "documentation": ["Utility functions to expand configuration directives or special values\n(such glob patterns).\n\nWe can split the process of interpreting configuration files into 2 steps:\n\n1. The parsing the file contents from strings to value objects\n   that can be understand by Python (for example a string with a comma\n   separated list of keywords into an actual Python list of strings).\n2. The expansion (or post-processing) of these values according to the\n   semantics `setuptools` assign to them (for example a configuration field\n   with the `file:` directive should be expanded from a list of file paths to\n   a single string with the contents of those files concatenated)\n\nThis module focus on the second step, and therefore allow sharing the expansion\nfunctions among several configuration file formats.\n\n**PRIVATE MODULE**: API reserved for setuptools internal usage only.\n"], "functions": [{"name": "setuptools.config.expand.glob_relative", "asynchronous": false, "params": [{"name": "patterns", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "root_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Expand the list of glob patterns, but preserving relative paths.\n\n```\nparam list[str] patterns\n\nList of glob patterns\n\nparam str root_dir\n\nPath to which globs should be relative\n(current directory by default)\n\nrtype\n\nlist\n```\n"]}, {"name": "setuptools.config.expand.read_files", "asynchronous": false, "params": [{"name": "filepaths", "type": {"name": "StrPath | Iterable[StrPath]", "xref": null, "params": null}, "default": null}, {"name": "root_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return the content of the files concatenated using \\`\\`\n\\`\\` as str\n\n> This function is sandboxed and won't reach anything outside `root_dir`\n>\n> (By default `root_dir` is the current directory).\n"]}, {"name": "setuptools.config.expand._filter_existing_files", "asynchronous": false, "params": [{"name": "filepaths", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools.config.expand._read_file", "asynchronous": false, "params": [{"name": "filepath", "type": {"name": "bytes | StrPath", "xref": null, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config.expand._assert_local", "asynchronous": false, "params": [{"name": "filepath", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "root_dir", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.expand.read_attr", "asynchronous": false, "params": [{"name": "attr_desc", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "package_dir", "type": {"name": "Mapping[str, str] | None", "xref": null, "params": null}, "default": "..."}, {"name": "root_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": ["Reads the value of an attribute from a module.\n\nThis function will try to read the attributed statically first\n(via {func}`ast.literal_eval`), and only evaluate the module if it fails.\n\nExamples:\n\n: read_attr(\"package.attr\")\n  read_attr(\"package.module.attr\")\n\n```\nparam str attr_desc\n\nDot-separated string describing how to reach the\nattribute (see examples above)\n\nparam dict[str, str] package_dir\n\nMapping of package names to their\nlocation in disk (represented by paths relative to root_dir).\n\nparam str root_dir\n\nPath to directory containing all the packages in\npackage_dir (current directory by default).\n\nrtype\n\nstr\n```\n"]}, {"name": "setuptools.config.expand._find_spec", "asynchronous": false, "params": [{"name": "module_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "module_path", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "ModuleSpec", "xref": {"fqname": "importlib.machinery.ModuleSpec", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config.expand._load_spec", "asynchronous": false, "params": [{"name": "spec", "type": {"name": "ModuleSpec", "xref": {"fqname": "importlib.machinery.ModuleSpec", "project": "--std--"}, "params": null}, "default": null}, {"name": "module_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "ModuleType", "xref": {"fqname": "types.ModuleType", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config.expand._find_module", "asynchronous": false, "params": [{"name": "module_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "package_dir", "type": {"name": "Mapping[str, str] | None", "xref": null, "params": null}, "default": null}, {"name": "root_dir", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["Find the path to the module named `module_name`,\nconsidering the `package_dir` in the build configuration and `root_dir`.\n\n```pycon\n>>> tmp = getfixture('tmpdir')\n>>> _ = tmp.ensure(\"a/b/c.py\")\n>>> _ = tmp.ensure(\"a/b/d/__init__.py\")\n>>> r = lambda x: x.replace(str(tmp), \"tmp\").replace(os.sep, \"/\")\n>>> r(_find_module(\"a.b.c\", None, tmp))\n'tmp/a/b/c.py'\n>>> r(_find_module(\"f.g.h\", {\"\": \"1\", \"f\": \"2\", \"f.g\": \"3\", \"f.g.h\": \"a/b/d\"}, tmp))\n'tmp/a/b/d/__init__.py'\n```\n"]}, {"name": "setuptools.config.expand.resolve_class", "asynchronous": false, "params": [{"name": "qualified_class_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "package_dir", "type": {"name": "Mapping[str, str] | None", "xref": null, "params": null}, "default": "..."}, {"name": "root_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": null}, "documentation": ["Given a qualified class name, return the associated class object"]}, {"name": "setuptools.config.expand.cmdclass", "asynchronous": false, "params": [{"name": "values", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "package_dir", "type": {"name": "Mapping[str, str] | None", "xref": null, "params": null}, "default": "..."}, {"name": "root_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": null}]}, "documentation": ["Given a dictionary mapping command names to strings for qualified class\nnames, apply {func}`resolve_class` to the dict values.\n"]}, {"name": "setuptools.config.expand.find_packages", "asynchronous": false, "params": [{"name": "namespaces", "type": null, "default": "..."}, {"name": "fill_package_dir", "type": {"name": "dict[str, str] | None", "xref": null, "params": null}, "default": "..."}, {"name": "root_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": "..."}, {"name": "**kwargs", "type": null, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Works similarly to {func}`setuptools.find_packages`, but with all\narguments given as keyword arguments. Moreover, `where` can be given\nas a list (the results will be simply concatenated).\n\nWhen the additional keyword argument `namespaces` is `True`, it will\nbehave like {func}`setuptools.find_namespace_packages`` (i.e. include\nimplicit namespaces as per {pep}`420`).\n\nThe `where` argument will be considered relative to `root_dir` (or the current\nworking directory when `root_dir` is not given).\n\nIf the `fill_package_dir` argument is passed, this function will consider it as a\nsimilar data structure to the `package_dir` configuration parameter add fill-in\nany missing package location.\n\n```\nrtype\n\nlist\n```\n"]}, {"name": "setuptools.config.expand._nest_path", "asynchronous": false, "params": [{"name": "parent", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "path", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config.expand.version", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Callable | Iterable[str | int] | str", "xref": null, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["When getting the version directly from an attribute,\nit should be normalised to string."]}, {"name": "setuptools.config.expand.canonic_package_data", "asynchronous": false, "params": [{"name": "package_data", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config.expand.canonic_data_files", "asynchronous": false, "params": [{"name": "data_files", "type": {"name": "list | dict", "xref": null, "params": null}, "default": null}, {"name": "root_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "documentation": ["For compatibility with `setup.py`, `data_files` should be a list\nof pairs instead of a dict.\n\nThis function also expands glob patterns.\n"]}, {"name": "setuptools.config.expand.entry_points", "asynchronous": false, "params": [{"name": "text", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "text_source", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": ["Given the contents of entry-points file,\nprocess it into a 2-level dictionary (`dict[str, dict[str, str]]`).\nThe first level keys are entry-point groups, the second level keys are\nentry-point names, and the second level values are references to objects\n(that correspond to the entry-point value).\n"]}], "variables": [{"name": "setuptools.config.expand._K", "type": null, "documentation": []}, {"name": "setuptools.config.expand._V_co", "type": null, "documentation": []}], "classes": [{"name": "setuptools.config.expand.StaticModule", "bases": [], "methods": [{"name": "setuptools.config.expand.StaticModule.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "ModuleSpec", "xref": {"fqname": "importlib.machinery.ModuleSpec", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config.expand.StaticModule._find_assignments", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "ast.AST", "xref": {"fqname": "ast.AST", "project": "--std--"}, "params": null}, {"name": "ast.AST", "xref": {"fqname": "ast.AST", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "setuptools.config.expand.StaticModule.__getattr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "attr", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": ["Attempt to load an attribute \"statically\", via {func}`ast.literal_eval`.\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Proxy to a module object that avoids executing arbitrary code."]}, {"name": "setuptools.config.expand.EnsurePackagesDiscovered", "bases": [], "methods": [{"name": "setuptools.config.expand.EnsurePackagesDiscovered.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "distribution", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config.expand.EnsurePackagesDiscovered.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Trigger the automatic package discovery, if it is still necessary."]}, {"name": "setuptools.config.expand.EnsurePackagesDiscovered.__enter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Self", "xref": {"fqname": "typing_extensions.Self", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.config.expand.EnsurePackagesDiscovered.__exit__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "exc_type", "type": {"name": "type[BaseException] | None", "xref": null, "params": null}, "default": null}, {"name": "exc_value", "type": {"name": "BaseException | None", "xref": null, "params": null}, "default": null}, {"name": "traceback", "type": {"name": "TracebackType | None", "xref": null, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.expand.EnsurePackagesDiscovered._get_package_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.config.expand.EnsurePackagesDiscovered.package_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Proxy to `package_dir` that may trigger auto-discovery when used.\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Some expand functions require all the packages to already be discovered before\nthey run, e.g. {func}`read_attr`, {func}`resolve_class`, {func}`cmdclass`.\n\nTherefore in some cases we will need to run autodiscovery during the evaluation of\nthe configuration. However, it is better to postpone calling package discovery as\nmuch as possible, because some parameters can influence it (e.g. `package_dir`),\nand those might not have been processed yet.\n"]}, {"name": "setuptools.config.expand.LazyMappingProxy", "bases": [], "methods": [{"name": "setuptools.config.expand.LazyMappingProxy.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "obtain_mapping_value", "type": {"name": "Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": [{"name": "", "xref": null, "params": []}, {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "_K", "xref": {"fqname": "_K", "project": null}, "params": null}, {"name": "_V_co", "xref": {"fqname": "_V_co", "project": null}, "params": null}]}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config.expand.LazyMappingProxy._target", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "_K", "xref": {"fqname": "_K", "project": null}, "params": null}, {"name": "_V_co", "xref": {"fqname": "_V_co", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools.config.expand.LazyMappingProxy.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": {"name": "_K", "xref": {"fqname": "_K", "project": null}, "params": null}, "default": null}], "returns": {"name": "_V_co", "xref": {"fqname": "_V_co", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.config.expand.LazyMappingProxy.__len__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config.expand.LazyMappingProxy.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "_K", "xref": {"fqname": "_K", "project": null}, "params": null}]}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Mapping proxy that delays resolving the target object, until really needed.\n\n```pycon\n>>> def obtain_mapping():\n...     print(\"Running expensive function!\")\n...     return {\"key\": \"value\", \"other key\": \"other value\"}\n>>> mapping = LazyMappingProxy(obtain_mapping)\n>>> mapping[\"key\"]\nRunning expensive function!\n'value'\n>>> mapping[\"other key\"]\n'other value'\n```\n"]}], "exports": []}, {"name": "setuptools.config.setupcfg", "documentation": ["Load setuptools configuration from `setup.cfg` files.\n\n**API will be made private in the future**\n\nTo read project metadata, consider using\n`build.util.project_wheel_metadata` (<https://pypi.org/project/build/>).\nFor simple scenarios, you can also try parsing the file directly\nwith the help of `configparser`.\n"], "functions": [{"name": "setuptools.config.setupcfg.read_configuration", "asynchronous": false, "params": [{"name": "filepath", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "find_others", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ignore_option_errors", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "documentation": ["Read given configuration file and returns options from it as a dict.\n\n```\nparam str|unicode filepath\n\nPath to configuration file\nto get options from.\n\nparam bool find_others\n\nWhether to search for other configuration files\nwhich could be on in various places.\n\nparam bool ignore_option_errors\n\nWhether to silently ignore\noptions, values of which could not be resolved (e.g. due to exceptions\nin directives such as file:, attr:, etc.).\nIf False exceptions are propagated as expected.\n\nrtype\n\ndict\n```\n"]}, {"name": "setuptools.config.setupcfg.apply_configuration", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "filepath", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "documentation": ["Apply the configuration from a `setup.cfg` file into an existing\ndistribution object.\n"]}, {"name": "setuptools.config.setupcfg._apply", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "filepath", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "other_files", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}]}, "default": "..."}, {"name": "ignore_option_errors", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "ConfigMetadataHandler", "xref": {"fqname": "ConfigMetadataHandler", "project": null}, "params": null}, {"name": "ConfigOptionsHandler", "xref": {"fqname": "ConfigOptionsHandler", "project": null}, "params": null}]}, "documentation": ["Read configuration from `filepath` and applies to the `dist` object.\n"]}, {"name": "setuptools.config.setupcfg._get_option", "asynchronous": false, "params": [{"name": "target_obj", "type": {"name": "Distribution | DistributionMetadata", "xref": null, "params": null}, "default": null}, {"name": "key", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": ["Given a target object and option key, get that option from\nthe target object, either through a get_{key} method or\nfrom an attribute directly."]}, {"name": "setuptools.config.setupcfg.configuration_to_dict", "asynchronous": false, "params": [{"name": "handlers", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "ConfigHandler[Distribution] | ConfigHandler[DistributionMetadata]", "xref": null, "params": null}]}, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "documentation": ["Returns configuration data gathered by given handlers as a dict.\n\n```\nparam Iterable[ConfigHandler] handlers\n\nHandlers list,\nusually from parse_configuration()\n\nrtype\n\ndict\n```\n"]}, {"name": "setuptools.config.setupcfg.parse_configuration", "asynchronous": false, "params": [{"name": "distribution", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "command_options", "type": {"name": "AllCommandOptions", "xref": {"fqname": "AllCommandOptions", "project": null}, "params": null}, "default": null}, {"name": "ignore_option_errors", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "ConfigMetadataHandler", "xref": {"fqname": "ConfigMetadataHandler", "project": null}, "params": null}, {"name": "ConfigOptionsHandler", "xref": {"fqname": "ConfigOptionsHandler", "project": null}, "params": null}]}, "documentation": ["Performs additional parsing of configuration options\nfor a distribution.\n\nReturns a list of used option handlers.\n\n```\nparam Distribution distribution\n\n\n\nparam dict command_options\n\n\n\nparam bool ignore_option_errors\n\nWhether to silently ignore\noptions, values of which could not be resolved (e.g. due to exceptions\nin directives such as file:, attr:, etc.).\nIf False exceptions are propagated as expected.\n\nrtype\n\nlist\n```\n"]}, {"name": "setuptools.config.setupcfg._warn_accidental_env_marker_misconfig", "asynchronous": false, "params": [{"name": "label", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "orig_value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "parsed", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": ["Because users sometimes misinterpret this configuration:\n\n[options.extras_require]\nfoo = bar;python_version<\"4\"\n\nIt looks like one requirement with an environment marker\nbut because there is no newline, it's parsed as two requirements\nwith a semicolon as separator.\n\nTherefore, if:\n    * input string does not contain a newline AND\n    * parsed result contains two requirements AND\n    * parsing of the two parts from the result (\"<first>;<second>\")\n    leads in a valid Requirement with a valid marker\na UserWarning is shown to inform the user about the possible problem."]}], "variables": [{"name": "setuptools.config.setupcfg.SingleCommandOptions", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": ["Dict that associate the name of the options of a particular command to a\ntuple. The first element of the tuple indicates the origin of the option value\n(e.g. the name of the configuration file where it was read from),\nwhile the second element of the tuple is the option value itself"]}, {"name": "setuptools.config.setupcfg.AllCommandOptions", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": ["cmd name => its options"]}, {"name": "setuptools.config.setupcfg.Target", "type": null, "documentation": []}], "classes": [{"name": "setuptools.config.setupcfg.ConfigHandler", "bases": [], "methods": [{"name": "setuptools.config.setupcfg.ConfigHandler.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "target_obj", "type": {"name": "Target", "xref": {"fqname": "Target", "project": null}, "params": null}, "default": null}, {"name": "options", "type": {"name": "AllCommandOptions", "xref": {"fqname": "AllCommandOptions", "project": null}, "params": null}, "default": null}, {"name": "ignore_option_errors", "type": null, "default": null}, {"name": "ensure_discovered", "type": {"name": "expand.EnsurePackagesDiscovered", "xref": {"fqname": "setuptools.config.setupcfg..expand.EnsurePackagesDiscovered", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config.setupcfg.ConfigHandler._section_options", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "options", "type": {"name": "AllCommandOptions", "xref": {"fqname": "AllCommandOptions", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "SingleCommandOptions", "xref": {"fqname": "SingleCommandOptions", "project": null}, "params": null}]}]}, "documentation": []}, {"name": "setuptools.config.setupcfg.ConfigHandler.parsers", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Metadata item name to parser function mapping."]}, {"name": "setuptools.config.setupcfg.ConfigHandler.__setitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "option_name", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config.setupcfg.ConfigHandler._parse_list", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "value", "type": null, "default": null}, {"name": "separator", "type": null, "default": "..."}], "returns": null, "documentation": ["Represents value as a list.\n\nValue is split either by separator (defaults to comma) or by lines.\n\n```\nparam value\n\n\n\nparam separator\n\nList items separator character.\n\nrtype\n\nlist\n```\n"]}, {"name": "setuptools.config.setupcfg.ConfigHandler._parse_dict", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": ["Represents value as a dict.\n\n```\nparam value\n\n\n\nrtype\n\ndict\n```\n"]}, {"name": "setuptools.config.setupcfg.ConfigHandler._parse_bool", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": ["Represents value as boolean.\n\n```\nparam value\n\n\n\nrtype\n\nbool\n```\n"]}, {"name": "setuptools.config.setupcfg.ConfigHandler._exclude_files_parser", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "key", "type": null, "default": null}], "returns": null, "documentation": ["Returns a parser function to make sure field inputs\nare not files.\n\nParses a value after getting the key so error messages are\nmore informative.\n\n```\nparam key\n\n\n\nrtype\n\ncallable\n```\n"]}, {"name": "setuptools.config.setupcfg.ConfigHandler._parse_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}, {"name": "root_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": null}], "returns": null, "documentation": ["Represents value as a string, allowing including text\nfrom nearest files using `file:` directive.\n\nDirective is sandboxed and won't reach anything outside\ndirectory with setup.py.\n\nExamples:\n\n: file: README.rst, CHANGELOG.md, src/file.txt\n\n```\nparam str value\n\n\n\nrtype\n\nstr\n```\n"]}, {"name": "setuptools.config.setupcfg.ConfigHandler._parse_attr", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}, {"name": "package_dir", "type": null, "default": null}, {"name": "root_dir", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.config._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": null, "documentation": ["Represents value as a module attribute.\n\nExamples:\n\n: attr: package.attr\n  attr: package.module.attr\n\n```\nparam str value\n\n\n\nrtype\n\nstr\n```\n"]}, {"name": "setuptools.config.setupcfg.ConfigHandler._get_parser_compound", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "*parse_methods", "type": null, "default": null}], "returns": null, "documentation": ["Returns parser function to represents value as a list.\n\nParses a value applying given methods one after another.\n\n```\nparam parse_methods\n\n\n\nrtype\n\ncallable\n```\n"]}, {"name": "setuptools.config.setupcfg.ConfigHandler._parse_section_to_dict_with_key", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "section_options", "type": null, "default": null}, {"name": "values_parser", "type": null, "default": null}], "returns": null, "documentation": ["Parses section options into a dictionary.\n\nApplies a given parser to each option in a section.\n\n```\nparam dict section_options\n\n\n\nparam callable values_parser\n\nfunction with 2 args corresponding to key, value\n\nrtype\n\ndict\n```\n"]}, {"name": "setuptools.config.setupcfg.ConfigHandler._parse_section_to_dict", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "section_options", "type": null, "default": null}, {"name": "values_parser", "type": null, "default": "..."}], "returns": null, "documentation": ["Parses section options into a dictionary.\n\nOptionally applies a given parser to each value.\n\n```\nparam dict section_options\n\n\n\nparam callable values_parser\n\nfunction with 1 arg corresponding to option value\n\nrtype\n\ndict\n```\n"]}, {"name": "setuptools.config.setupcfg.ConfigHandler.parse_section", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "section_options", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Parses configuration file section.\n\n:param dict section_options:"]}, {"name": "setuptools.config.setupcfg.ConfigHandler.parse", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Parses configuration file items from one\nor more related sections."]}, {"name": "setuptools.config.setupcfg.ConfigHandler._deprecated_config_handler", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "func", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}, {"name": "**kw", "type": null, "default": null}], "returns": null, "documentation": ["this function will wrap around parameters that are deprecated\n\n```\nparam msg\n\ndeprecation message\n\nparam func\n\nfunction to be wrapped around\n```\n"]}], "class_variables": [{"name": "setuptools.config.setupcfg.ConfigHandler.section_prefix", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Prefix for config sections handled by this handler.\nMust be provided by class heirs."]}, {"name": "setuptools.config.setupcfg.ConfigHandler.aliases", "type": {"name": "ClassVar", "xref": {"fqname": "typing.ClassVar", "project": "--std--"}, "params": [{"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": ["Options aliases.\nFor compatibility with various packages. E.g.: d2to1 and pbr.\nNote: `-` in keys is replaced with `_` by config parser."]}], "instance_variables": [], "inner_classes": [], "documentation": ["Handles metadata supplied in configuration files."]}, {"name": "setuptools.config.setupcfg.ConfigMetadataHandler", "bases": [], "methods": [{"name": "setuptools.config.setupcfg.ConfigMetadataHandler.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "target_obj", "type": {"name": "DistributionMetadata", "xref": {"fqname": "distutils.dist.DistributionMetadata", "project": null}, "params": null}, "default": null}, {"name": "options", "type": {"name": "AllCommandOptions", "xref": {"fqname": "AllCommandOptions", "project": null}, "params": null}, "default": null}, {"name": "ignore_option_errors", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}, {"name": "ensure_discovered", "type": {"name": "expand.EnsurePackagesDiscovered", "xref": {"fqname": "setuptools.config.setupcfg..expand.EnsurePackagesDiscovered", "project": null}, "params": null}, "default": null}, {"name": "package_dir", "type": {"name": "dict | None", "xref": null, "params": null}, "default": "..."}, {"name": "root_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config.setupcfg.ConfigMetadataHandler.parsers", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Metadata item name to parser function mapping."]}, {"name": "setuptools.config.setupcfg.ConfigMetadataHandler._parse_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": ["Parses `version` option value.\n\n```\nparam value\n\n\n\nrtype\n\nstr\n```\n"]}], "class_variables": [{"name": "setuptools.config.setupcfg.ConfigMetadataHandler.section_prefix", "type": null, "documentation": []}, {"name": "setuptools.config.setupcfg.ConfigMetadataHandler.aliases", "type": null, "documentation": []}, {"name": "setuptools.config.setupcfg.ConfigMetadataHandler.strict_mode", "type": null, "documentation": ["We need to keep it loose, to be partially compatible with\n`pbr` and `d2to1` packages which also uses `metadata` section."]}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.config.setupcfg.ConfigOptionsHandler", "bases": [], "methods": [{"name": "setuptools.config.setupcfg.ConfigOptionsHandler.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "target_obj", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "options", "type": {"name": "AllCommandOptions", "xref": {"fqname": "AllCommandOptions", "project": null}, "params": null}, "default": null}, {"name": "ignore_option_errors", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}, {"name": "ensure_discovered", "type": {"name": "expand.EnsurePackagesDiscovered", "xref": {"fqname": "setuptools.config.setupcfg..expand.EnsurePackagesDiscovered", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config.setupcfg.ConfigOptionsHandler._parse_list_semicolon", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.setupcfg.ConfigOptionsHandler._parse_file_in_root", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.setupcfg.ConfigOptionsHandler._parse_requirements_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "label", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.setupcfg.ConfigOptionsHandler.parsers", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Metadata item name to parser function mapping."]}, {"name": "setuptools.config.setupcfg.ConfigOptionsHandler._parse_cmdclass", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.setupcfg.ConfigOptionsHandler._parse_packages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": ["Parses `packages` option value.\n\n```\nparam value\n\n\n\nrtype\n\nlist\n```\n"]}, {"name": "setuptools.config.setupcfg.ConfigOptionsHandler.parse_section_packages__find", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "section_options", "type": null, "default": null}], "returns": null, "documentation": ["Parses `packages.find` configuration file section.\n\nTo be used in conjunction with _parse_packages().\n\n:param dict section_options:"]}, {"name": "setuptools.config.setupcfg.ConfigOptionsHandler.parse_section_entry_points", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "section_options", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Parses `entry_points` configuration file section.\n\n:param dict section_options:"]}, {"name": "setuptools.config.setupcfg.ConfigOptionsHandler._parse_package_data", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "section_options", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config.setupcfg.ConfigOptionsHandler.parse_section_package_data", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "section_options", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Parses `package_data` configuration file section.\n\n:param dict section_options:"]}, {"name": "setuptools.config.setupcfg.ConfigOptionsHandler.parse_section_exclude_package_data", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "section_options", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Parses `exclude_package_data` configuration file section.\n\n:param dict section_options:"]}, {"name": "setuptools.config.setupcfg.ConfigOptionsHandler.parse_section_extras_require", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "section_options", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Parses `extras_require` configuration file section.\n\n:param dict section_options:"]}, {"name": "setuptools.config.setupcfg.ConfigOptionsHandler.parse_section_data_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "section_options", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Parses `data_files` configuration file section.\n\n:param dict section_options:"]}], "class_variables": [{"name": "setuptools.config.setupcfg.ConfigOptionsHandler.section_prefix", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.config.setupcfg._AmbiguousMarker", "bases": ["SetuptoolsDeprecationWarning"], "methods": [{"name": "setuptools.config.setupcfg._AmbiguousMarker.message", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "**kw", "type": null, "default": null}], "returns": null, "documentation": ["TODO: should we include due_date here? Initially introduced in 6 Aug 2022.", "Does this make sense with latest version of packaging?"]}], "class_variables": [{"name": "setuptools.config.setupcfg._AmbiguousMarker._SUMMARY", "type": null, "documentation": []}, {"name": "setuptools.config.setupcfg._AmbiguousMarker._DETAILS", "type": null, "documentation": []}, {"name": "setuptools.config.setupcfg._AmbiguousMarker._SEE_DOCS", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.config.setupcfg._DeprecatedConfig", "bases": ["SetuptoolsDeprecationWarning"], "methods": [], "class_variables": [{"name": "setuptools.config.setupcfg._DeprecatedConfig._SEE_DOCS", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_exceptions", "documentation": [], "functions": [], "variables": [{"name": "setuptools.config._validate_pyproject.fastjsonschema_exceptions.SPLIT_RE", "type": null, "documentation": []}], "classes": [{"name": "setuptools.config._validate_pyproject.fastjsonschema_exceptions.JsonSchemaException", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Base exception of `fastjsonschema` library.\n"]}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_exceptions.JsonSchemaValueException", "bases": ["JsonSchemaException"], "methods": [{"name": "setuptools.config._validate_pyproject.fastjsonschema_exceptions.JsonSchemaValueException.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "message", "type": null, "default": null}, {"name": "value", "type": null, "default": "..."}, {"name": "name", "type": null, "default": "..."}, {"name": "definition", "type": null, "default": "..."}, {"name": "rule", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_exceptions.JsonSchemaValueException.path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_exceptions.JsonSchemaValueException.rule_definition", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Exception raised by validation function. Available properties:\n\n> - `message` containing human-readable information what is wrong (e.g. `data.property[index] must be smaller than or equal to 42`),\n> - invalid `value` (e.g. `60`),\n> - `name` of a path in the data structure (e.g. `data.property[index]`),\n> - `path` as an array in the data structure (e.g. `['data', 'property', 'index']`),\n> - the whole `definition` which the `value` has to fulfil (e.g. `{'type': 'number', 'maximum': 42}`),\n> - `rule` which the `value` is breaking (e.g. `maximum`)\n> - and `rule_definition` (e.g. `42`).\n\n:::{versionchanged} 2.14.0 Added all extra properties.\n:::\n"]}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_exceptions.JsonSchemaDefinitionException", "bases": ["JsonSchemaException"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Exception raised by generator of validation function."]}], "exports": []}, {"name": "setuptools.config._validate_pyproject", "documentation": [], "functions": [{"name": "setuptools.config._validate_pyproject.validate", "asynchronous": false, "params": [{"name": "data", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Validate the given `data` object using JSON Schema\nThis function raises `ValidationError` if `data` is invalid.\n"]}], "variables": [{"name": "setuptools.config._validate_pyproject.FORMAT_FUNCTIONS", "type": {"name": "Dict", "xref": {"fqname": "typing.Dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": [{"name": "", "xref": null, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}]}, "documentation": []}], "classes": [], "exports": [{"name": "setuptools.config._validate_pyproject.EXTRA_VALIDATIONS", "xref": {"fqname": "setuptools.config._validate_pyproject.extra_validations.EXTRA_VALIDATIONS", "project": null}}, {"name": "setuptools.config._validate_pyproject.FORMAT_FUNCTIONS", "xref": {"fqname": "setuptools.config._validate_pyproject.FORMAT_FUNCTIONS", "project": null}}, {"name": "setuptools.config._validate_pyproject.JsonSchemaException", "xref": {"fqname": "setuptools.config._validate_pyproject.fastjsonschema_exceptions.JsonSchemaException", "project": null}}, {"name": "setuptools.config._validate_pyproject.JsonSchemaValueException", "xref": {"fqname": "setuptools.config._validate_pyproject.fastjsonschema_exceptions.JsonSchemaValueException", "project": null}}, {"name": "setuptools.config._validate_pyproject.validate", "xref": {"fqname": "setuptools.config._validate_pyproject.validate", "project": null}}, {"name": "setuptools.config._validate_pyproject.ValidationError", "xref": {"fqname": "setuptools.config._validate_pyproject.error_reporting.ValidationError", "project": null}}]}, {"name": "setuptools.config._validate_pyproject.extra_validations", "documentation": ["The purpose of this module is implement PEP 621 validations that are\ndifficult to express as a JSON Schema (or that are not supported by the current\nJSON Schema library)."], "functions": [{"name": "setuptools.config._validate_pyproject.extra_validations.validate_project_dynamic", "asynchronous": false, "params": [{"name": "pyproject", "type": {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}, "default": null}], "returns": {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}, "documentation": []}], "variables": [{"name": "setuptools.config._validate_pyproject.extra_validations.T", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.extra_validations.EXTRA_VALIDATIONS", "type": null, "documentation": []}], "classes": [{"name": "setuptools.config._validate_pyproject.extra_validations.RedefiningStaticFieldAsDynamic", "bases": ["ValidationError"], "methods": [], "class_variables": [{"name": "setuptools.config._validate_pyproject.extra_validations.RedefiningStaticFieldAsDynamic._DESC", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.extra_validations.RedefiningStaticFieldAsDynamic.__doc__", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.extra_validations.RedefiningStaticFieldAsDynamic._URL", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.windows_support", "documentation": [], "functions": [{"name": "setuptools.windows_support.windows_only", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.windows_support.hide_file", "asynchronous": false, "params": [{"name": "path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Set the hidden attribute on a file or directory.\n\nFrom https://stackoverflow.com/questions/19622133/\n\n`path` must be text."]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.tests.test_bdist_deprecations", "documentation": ["develop tests"], "functions": [{"name": "setuptools.tests.test_bdist_deprecations.test_bdist_rpm_warning", "asynchronous": false, "params": [{"name": "distutils_cmd", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.tests.test_logging", "documentation": [], "functions": [{"name": "setuptools.tests.test_logging.test_verbosity_level", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "flag", "type": null, "default": null}, {"name": "expected_level", "type": null, "default": null}], "returns": null, "documentation": ["Make sure the correct verbosity level is set (issue #3038)"]}, {"name": "setuptools.tests.test_logging.flaky_on_pypy", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_logging.test_patching_does_not_cause_problems", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.tests.test_logging.IS_PYPY", "type": null, "documentation": []}, {"name": "setuptools.tests.test_logging.setup_py", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.tests.test_wheel", "documentation": ["wheel tests"], "functions": [{"name": "setuptools.tests.test_wheel.test_wheel_info", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}, {"name": "info", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_wheel.build_wheel", "asynchronous": false, "params": [{"name": "extra_file_defs", "type": null, "default": "..."}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_wheel.tree_set", "asynchronous": false, "params": [{"name": "root", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_wheel.flatten_tree", "asynchronous": false, "params": [{"name": "tree", "type": null, "default": null}], "returns": null, "documentation": ["Flatten nested dicts and lists into a full list of paths"]}, {"name": "setuptools.tests.test_wheel.format_install_tree", "asynchronous": false, "params": [{"name": "tree", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_wheel._check_wheel_install", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}, {"name": "install_dir", "type": null, "default": null}, {"name": "install_tree_includes", "type": null, "default": null}, {"name": "project_name", "type": null, "default": null}, {"name": "version", "type": null, "default": null}, {"name": "requires_txt", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_wheel.test_wheel_install", "asynchronous": false, "params": [{"name": "params", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_wheel.test_wheel_install_pep_503", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_wheel.test_wheel_no_dist_dir", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_wheel.test_wheel_is_compatible", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_wheel.test_wheel_mode", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.tests.test_wheel.WHEEL_INFO_TESTS", "type": null, "documentation": []}, {"name": "setuptools.tests.test_wheel.WHEEL_INSTALL_TESTS", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, {"name": "...", "xref": null, "params": null}]}, "documentation": []}], "classes": [{"name": "setuptools.tests.test_wheel.Record", "bases": [], "methods": [{"name": "setuptools.tests.test_wheel.Record.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "id", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_wheel.Record.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.config._validate_pyproject.formats", "documentation": ["The functions in this module are used to validate schemas with the\n[format JSON Schema keyword](https://json-schema.org/understanding-json-schema/reference/string#format).\n\nThe correspondence is given by replacing the `_` character in the name of the\nfunction with a `-` to obtain the format name and vice versa.\n"], "functions": [{"name": "setuptools.config._validate_pyproject.formats.pep440", "asynchronous": false, "params": [{"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["See {ref}`PyPA's version specification <pypa:version-specifiers>`\n(initially introduced in {pep}`440`).\n"]}, {"name": "setuptools.config._validate_pyproject.formats.pep508_identifier", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["See {ref}`PyPA's name specification <pypa:name-format>`\n(initially introduced in {pep}`508#names`).\n"]}, {"name": "setuptools.config._validate_pyproject.formats.pep508", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["See {ref}`PyPA's dependency specifiers <pypa:dependency-specifiers>`\n(initially introduced in {pep}`508`).\n"]}, {"name": "setuptools.config._validate_pyproject.formats.pep508", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config._validate_pyproject.formats.pep508_versionspec", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Expression that can be used to specify/lock versions (including ranges)\nSee `versionspec` in {ref}`PyPA's dependency specifiers\n<pypa:dependency-specifiers>` (initially introduced in {pep}`508`).\n"]}, {"name": "setuptools.config._validate_pyproject.formats.pep517_backend_reference", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["See PyPA's specification for defining build-backend references\nintroduced in {pep}`517#source-trees`.\n\nThis is similar to an entry-point reference (e.g., `package.module:object`).\n", "-------------------------------------------------------------------------------------", "PEP 517"]}, {"name": "setuptools.config._validate_pyproject.formats._download_classifiers", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["-------------------------------------------------------------------------------------", "Classifiers - PEP 301"]}, {"name": "setuptools.config._validate_pyproject.formats.trove_classifier", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["See https://pypi.org/classifiers/"]}, {"name": "setuptools.config._validate_pyproject.formats.pep561_stub_name", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Name of a directory containing type stubs.\nIt must follow the name scheme `<package>-stubs` as defined in\n{pep}`561#stub-only-packages`.\n", "-------------------------------------------------------------------------------------", "Stub packages - PEP 561"]}, {"name": "setuptools.config._validate_pyproject.formats.url", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Valid URL (validation uses {obj}`urllib.parse`).\nFor maximum compatibility please make sure to include a `scheme` prefix\nin your URL (e.g. `http://`).\n", "-------------------------------------------------------------------------------------", "Non-PEP related"]}, {"name": "setuptools.config._validate_pyproject.formats.python_identifier", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Can be used as identifier in Python.\n(Validation uses {obj}`str.isidentifier`).\n"]}, {"name": "setuptools.config._validate_pyproject.formats.python_qualified_identifier", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Python \"dotted identifier\", i.e. a sequence of {obj}`python_identifier`\nconcatenated with `\".\"` (e.g.: `package.module.submodule`).\n"]}, {"name": "setuptools.config._validate_pyproject.formats.python_module_name", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Module name that can be used in an `import`-statement in Python.\nSee {obj}`python_qualified_identifier`.\n"]}, {"name": "setuptools.config._validate_pyproject.formats.python_module_name_relaxed", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Similar to {obj}`python_module_name`, but relaxed to also accept\ndash characters (`-`) and cover special cases like `pip-run`.\n\nIt is recommended, however, that beginners avoid dash characters,\nas they require advanced knowledge about Python internals.\n\nThe following are disallowed:\n\n- names starting/ending in dashes,\n- names ending in `-stubs` (potentially collide with {obj}`pep561_stub_name`).\n"]}, {"name": "setuptools.config._validate_pyproject.formats.python_entrypoint_group", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["See `Data model > group` in the {ref}`PyPA's entry-points specification\n<pypa:entry-points>`.\n"]}, {"name": "setuptools.config._validate_pyproject.formats.python_entrypoint_name", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["See `Data model > name` in the {ref}`PyPA's entry-points specification\n<pypa:entry-points>`.\n"]}, {"name": "setuptools.config._validate_pyproject.formats.python_entrypoint_reference", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Reference to a Python object using in the format:\n\n```\nimportable.module:object.attr\n```\n\nSee `Data model >object reference` in the {ref}`PyPA's entry-points specification\n<pypa:entry-points>`.\n"]}, {"name": "setuptools.config._validate_pyproject.formats.uint8", "asynchronous": false, "params": [{"name": "value", "type": {"name": "builtins.int", "xref": {"fqname": "builtins.int", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Unsigned 8-bit integer ($0 \\leq x < 2^8$)\n"]}, {"name": "setuptools.config._validate_pyproject.formats.uint16", "asynchronous": false, "params": [{"name": "value", "type": {"name": "builtins.int", "xref": {"fqname": "builtins.int", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Unsigned 16-bit integer ($0 \\leq x < 2^{16}$)\n"]}, {"name": "setuptools.config._validate_pyproject.formats.uint", "asynchronous": false, "params": [{"name": "value", "type": {"name": "builtins.int", "xref": {"fqname": "builtins.int", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Unsigned 64-bit integer ($0 \\leq x < 2^{64}$)\n"]}, {"name": "setuptools.config._validate_pyproject.formats.int", "asynchronous": false, "params": [{"name": "value", "type": {"name": "builtins.int", "xref": {"fqname": "builtins.int", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Signed 64-bit integer ($-2^{63} \\leq x < 2^{63}$)\n"]}], "variables": [{"name": "setuptools.config._validate_pyproject.formats._logger", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.formats.VERSION_PATTERN", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.formats.VERSION_REGEX", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.formats.PEP508_IDENTIFIER_PATTERN", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.formats.PEP508_IDENTIFIER_REGEX", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.formats.trove_classifier", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.formats.ENTRYPOINT_PATTERN", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.formats.ENTRYPOINT_REGEX", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.formats.RECOMMEDED_ENTRYPOINT_PATTERN", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.formats.RECOMMEDED_ENTRYPOINT_REGEX", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.formats.ENTRYPOINT_GROUP_PATTERN", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.formats.ENTRYPOINT_GROUP_REGEX", "type": null, "documentation": []}], "classes": [{"name": "setuptools.config._validate_pyproject.formats._TroveClassifier", "bases": [], "methods": [{"name": "setuptools.config._validate_pyproject.formats._TroveClassifier.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config._validate_pyproject.formats._TroveClassifier._disable_download", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.config._validate_pyproject.formats._TroveClassifier.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.config._validate_pyproject.formats._TroveClassifier.downloaded", "type": {"name": "typing.Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, {"name": "Literal", "xref": {"fqname": "typing_extensions.Literal", "project": null}, "params": [{"name": "False", "xref": {"fqname": "constants.False", "project": "--std--"}, "params": null}]}, {"name": "typing.Set", "xref": {"fqname": "typing.Set", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["The `trove_classifiers` package is the official way of validating classifiers,\nhowever this package might not be always available.\nAs a workaround we can still download a list from PyPI.\nWe also don't want to be over strict about it, so simply skipping silently is an\noption (classifiers will be validated anyway during the upload to PyPI).\n"]}], "exports": []}, {"name": "setuptools.tests.test_distutils_adoption", "documentation": [], "functions": [{"name": "setuptools.tests.test_distutils_adoption.win_sr", "asynchronous": false, "params": [{"name": "env", "type": null, "default": null}], "returns": null, "documentation": ["On Windows, SYSTEMROOT must be present to avoid\n\n> Fatal Python error: _Py_HashRandomization_Init: failed to\n> get random numbers to initialize Python"]}, {"name": "setuptools.tests.test_distutils_adoption.find_distutils", "asynchronous": false, "params": [{"name": "venv", "type": null, "default": null}, {"name": "imports", "type": null, "default": "..."}, {"name": "env", "type": null, "default": "..."}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_distutils_adoption.count_meta_path", "asynchronous": false, "params": [{"name": "venv", "type": null, "default": null}, {"name": "env", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_distutils_adoption.test_distutils_stdlib", "asynchronous": false, "params": [{"name": "venv", "type": null, "default": null}], "returns": null, "documentation": ["Ensure stdlib distutils is used when appropriate."]}, {"name": "setuptools.tests.test_distutils_adoption.test_distutils_local_with_setuptools", "asynchronous": false, "params": [{"name": "venv", "type": null, "default": null}], "returns": null, "documentation": ["Ensure local distutils is used when appropriate."]}, {"name": "setuptools.tests.test_distutils_adoption.test_distutils_local", "asynchronous": false, "params": [{"name": "venv", "type": null, "default": null}], "returns": null, "documentation": ["Even without importing, the setuptools-local copy of distutils is\npreferred."]}, {"name": "setuptools.tests.test_distutils_adoption.test_pip_import", "asynchronous": false, "params": [{"name": "venv", "type": null, "default": null}], "returns": null, "documentation": ["Ensure pip can be imported.\nRegression test for #3002."]}, {"name": "setuptools.tests.test_distutils_adoption.test_distutils_has_origin", "asynchronous": false, "params": [], "returns": null, "documentation": ["Distutils module spec should have an origin. #2990."]}, {"name": "setuptools.tests.test_distutils_adoption.test_modules_are_not_duplicated_on_import", "asynchronous": false, "params": [{"name": "distutils_version", "type": null, "default": null}, {"name": "imported_module", "type": null, "default": null}, {"name": "venv", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_distutils_adoption.test_log_module_is_not_duplicated_on_import", "asynchronous": false, "params": [{"name": "distutils_version", "type": null, "default": null}, {"name": "venv", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_distutils_adoption.test_consistent_error_from_modified_py", "asynchronous": false, "params": [{"name": "distutils_version", "type": null, "default": null}, {"name": "imported_module", "type": null, "default": null}, {"name": "venv", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.tests.test_distutils_adoption.IS_PYPY", "type": null, "documentation": []}, {"name": "setuptools.tests.test_distutils_adoption._TEXT_KWARGS", "type": null, "documentation": ["For subprocess.run"]}, {"name": "setuptools.tests.test_distutils_adoption.skip_without_stdlib_distutils", "type": null, "documentation": []}, {"name": "setuptools.tests.test_distutils_adoption.ENSURE_IMPORTS_ARE_NOT_DUPLICATED", "type": null, "documentation": []}, {"name": "setuptools.tests.test_distutils_adoption.ENSURE_LOG_IMPORT_IS_NOT_DUPLICATED", "type": null, "documentation": []}, {"name": "setuptools.tests.test_distutils_adoption.ENSURE_CONSISTENT_ERROR_FROM_MODIFIED_PY", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.tests.test_packageindex", "documentation": [], "functions": [{"name": "setuptools.tests.test_packageindex.test_REL_DoS", "asynchronous": false, "params": [], "returns": null, "documentation": ["REL should not hang on a contrived attack string."]}], "variables": [], "classes": [{"name": "setuptools.tests.test_packageindex.TestPackageIndex", "bases": [], "methods": [{"name": "setuptools.tests.test_packageindex.TestPackageIndex.test_regex", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_packageindex.TestPackageIndex.test_bad_url_bad_port", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_packageindex.TestPackageIndex.test_bad_url_typo", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_packageindex.TestPackageIndex.test_bad_url_bad_status_line", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_packageindex.TestPackageIndex.test_bad_url_double_scheme", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["A bad URL with a double scheme should raise a DistutilsError."]}, {"name": "setuptools.tests.test_packageindex.TestPackageIndex.test_url_ok", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_packageindex.TestPackageIndex.test_parse_bdist_wininst", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_packageindex.TestPackageIndex.test__vcs_split_rev_from_url", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Test the basic usage of _vcs_split_rev_from_url"]}, {"name": "setuptools.tests.test_packageindex.TestPackageIndex.test_local_index", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["local_open should be able to read an index from the file system."]}, {"name": "setuptools.tests.test_packageindex.TestPackageIndex.test_egg_fragment", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["EGG fragments must comply to PEP 440"]}, {"name": "setuptools.tests.test_packageindex.TestPackageIndex.test_download_git_with_rev", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "fp", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_packageindex.TestPackageIndex.test_download_git_no_rev", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "fp", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_packageindex.TestPackageIndex.test_download_svn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_packageindex.TestContentCheckers", "bases": [], "methods": [{"name": "setuptools.tests.test_packageindex.TestContentCheckers.test_md5", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_packageindex.TestContentCheckers.test_other_fragment", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_packageindex.TestContentCheckers.test_blank_md5", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_packageindex.TestContentCheckers.test_get_hash_name_md5", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_packageindex.TestContentCheckers.test_report", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_packageindex.TestPyPIConfig", "bases": [], "methods": [{"name": "setuptools.tests.test_packageindex.TestPyPIConfig.test_percent_in_password", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_home_dir", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.config.test_pyprojecttoml_dynamic_deps", "documentation": [], "functions": [{"name": "setuptools.tests.config.test_pyprojecttoml_dynamic_deps.test_dynamic_dependencies", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_pyprojecttoml_dynamic_deps.test_dynamic_optional_dependencies", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_pyprojecttoml_dynamic_deps.test_mixed_dynamic_optional_dependencies", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Test that if PEP 621 was loosened to allow mixing of dynamic and static\nconfigurations in the case of fields containing sub-fields (groups),\nthings would work out."]}, {"name": "setuptools.tests.config.test_pyprojecttoml_dynamic_deps.test_mixed_extras_require_optional_dependencies", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.tests.test_build_py", "documentation": [], "functions": [{"name": "setuptools.tests.test_build_py.test_directories_in_package_data_glob", "asynchronous": false, "params": [{"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": ["Directories matching the glob in package_data should\nnot be included in the package data.\n\nRegression test for #261."]}, {"name": "setuptools.tests.test_build_py.test_recursive_in_package_data_glob", "asynchronous": false, "params": [{"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": ["Files matching recursive globs (**) in package_data should\nbe included in the package data.\n\n#1806"]}, {"name": "setuptools.tests.test_build_py.test_read_only", "asynchronous": false, "params": [{"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": ["Ensure read-only flag is not preserved in copy\nfor package modules and package data, as that\ncauses problems with deleting read-only files on\nWindows.\n\n#1451"]}, {"name": "setuptools.tests.test_build_py.test_executable_data", "asynchronous": false, "params": [{"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": ["Ensure executable bit is preserved in copy for\npackage data, as users rely on it for scripts.\n\n#2041"]}, {"name": "setuptools.tests.test_build_py.test_excluded_subpackages", "asynchronous": false, "params": [{"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_py.test_existing_egg_info", "asynchronous": false, "params": [{"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": ["When provided with the `existing_egg_info_dir` attribute, build_py should not\nattempt to run egg_info again.\n"]}, {"name": "setuptools.tests.test_build_py.test_get_outputs", "asynchronous": false, "params": [{"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_py.get_finalized_build_py", "asynchronous": false, "params": [{"name": "script_name", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_py.get_outputs", "asynchronous": false, "params": [{"name": "build_py", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.tests.test_build_py.EXAMPLE_WITH_MANIFEST", "type": null, "documentation": []}, {"name": "setuptools.tests.test_build_py.EXAMPLE_ARBITRARY_MAPPING", "type": null, "documentation": []}], "classes": [{"name": "setuptools.tests.test_build_py.TestTypeInfoFiles", "bases": [], "methods": [{"name": "setuptools.tests.test_build_py.TestTypeInfoFiles.test_type_files_included_by_default", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "pyproject", "type": null, "default": null}, {"name": "example", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_py.TestTypeInfoFiles.test_type_files_can_be_excluded", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "pyproject", "type": null, "default": null}, {"name": "example", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_py.TestTypeInfoFiles.test_stub_only_package", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.tests.test_build_py.TestTypeInfoFiles.PYPROJECTS", "type": null, "documentation": []}, {"name": "setuptools.tests.test_build_py.TestTypeInfoFiles.EXAMPLES", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.config.test_expand", "documentation": [], "functions": [{"name": "setuptools.tests.config.test_expand.write_files", "asynchronous": false, "params": [{"name": "files", "type": null, "default": null}, {"name": "root_dir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_expand.test_glob_relative", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_expand.test_read_files", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_expand.test_resolve_class", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "package_dir", "type": null, "default": null}, {"name": "file", "type": null, "default": null}, {"name": "module", "type": null, "default": null}, {"name": "return_value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_expand.test_find_packages", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "args", "type": null, "default": null}, {"name": "pkgs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_expand.test_fill_package_dir", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "files", "type": null, "default": null}, {"name": "where", "type": null, "default": null}, {"name": "expected_package_dir", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools.tests.config.test_expand.TestReadAttr", "bases": [], "methods": [{"name": "setuptools.tests.config.test_expand.TestReadAttr.test_read_attr_encoding_cookie", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "example", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_expand.TestReadAttr.test_read_attr", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_expand.TestReadAttr.test_read_annotated_attr", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "example", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_expand.TestReadAttr.test_read_dynamic_attr", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "example", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_expand.TestReadAttr.test_import_order", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Sometimes the import machinery will import the parent package of a nested\nmodule, which triggers side-effects and might create problems (see issue #3176)\n\n`read_attr` should bypass these limitations by resolving modules statically\n(via ast.literal_eval).\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml", "documentation": ["Make sure that applying the configuration from pyproject.toml is equivalent to\napplying a similar configuration from setup.cfg\n\nTo run these tests offline, please have a look on ``./downloads/preload.py``"], "functions": [{"name": "setuptools.tests.config.test_apply_pyprojecttoml.makedist", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}, {"name": "**attrs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.test_apply_pyproject_equivalent_to_setupcfg", "asynchronous": false, "params": [{"name": "url", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml._pep621_example_project", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "readme", "type": null, "default": "..."}, {"name": "pyproject_text", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.test_pep621_example", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Make sure the example in PEP 621 works"]}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.test_readme_content_type", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "readme", "type": null, "default": null}, {"name": "ctype", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.test_undefined_content_type", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.test_no_explicit_content_type_for_missing_extension", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.test_utf8_maintainer_in_metadata", "asynchronous": false, "params": [{"name": "expected_maintainers_meta_value", "type": null, "default": null}, {"name": "pyproject_text", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.core_metadata", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["--- Auxiliary Functions ---"]}], "variables": [{"name": "setuptools.tests.config.test_apply_pyprojecttoml.HERE", "type": null, "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.EXAMPLES_FILE", "type": null, "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.PEP621_EXAMPLE", "type": null, "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.PEP621_INTERNATIONAL_EMAIL_EXAMPLE", "type": null, "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.PEP621_EXAMPLE_SCRIPT", "type": null, "documentation": []}], "classes": [{"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestLicenseFiles", "bases": [], "methods": [{"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestLicenseFiles.base_pyproject", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "additional_text", "type": null, "default": null}], "returns": null, "documentation": ["TODO: After PEP 639 is accepted, we have to move the license-files", "to the `project` table instead of `tool.setuptools`"]}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestLicenseFiles.test_both_license_and_license_files_defined", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestLicenseFiles.test_default_patterns", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestPyModules", "bases": [], "methods": [{"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestPyModules.dist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["https://github.com/pypa/setuptools/issues/4316"]}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestPyModules.test_valid_module_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "module", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestPyModules.test_invalid_module_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "module", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestExtModules", "bases": [], "methods": [{"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestExtModules.test_pyproject_sets_attribute", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestDeprecatedFields", "bases": [], "methods": [{"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestDeprecatedFields.test_namespace_packages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestPresetField", "bases": [], "methods": [{"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestPresetField.pyproject", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "dynamic", "type": null, "default": null}, {"name": "extra_content", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestPresetField.test_not_listed_in_dynamic", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "attr", "type": null, "default": null}, {"name": "field", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": ["Setuptools cannot set a field if not listed in ``dynamic``"]}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestPresetField.test_listed_in_dynamic", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "attr", "type": null, "default": null}, {"name": "field", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestPresetField.test_warning_overwritten_dependencies", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestPresetField.test_optional_dependencies_dont_remove_env_markers", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Internally setuptools converts dependencies with markers to \"extras\".\nIf `install_requires` is given by `setup.py`, we have to ensure that\napplying `optional-dependencies` does not overwrite the mandatory\ndependencies with markers (see #3204).\n"]}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestPresetField.test_scripts_dont_require_dynamic_entry_points", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "field", "type": null, "default": null}, {"name": "group", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestMeta", "bases": [], "methods": [{"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestMeta.test_example_file_in_sdist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "setuptools_sdist", "type": null, "default": null}], "returns": null, "documentation": ["Meta test to ensure tests can run from sdist"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestInteropCommandLineParsing", "bases": [], "methods": [{"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestInteropCommandLineParsing.test_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "capsys", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestStaticConfig", "bases": [], "methods": [{"name": "setuptools.tests.config.test_apply_pyprojecttoml.TestStaticConfig.test_mark_static_fields", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.config", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.tests.config.test_setupcfg", "documentation": [], "functions": [{"name": "setuptools.tests.config.test_setupcfg.make_package_dir", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}, {"name": "base_dir", "type": null, "default": null}, {"name": "ns", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.fake_env", "asynchronous": false, "params": [{"name": "tmpdir", "type": null, "default": null}, {"name": "setup_cfg", "type": null, "default": null}, {"name": "setup_py", "type": null, "default": "..."}, {"name": "encoding", "type": null, "default": "..."}, {"name": "package_path", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.get_dist", "asynchronous": false, "params": [{"name": "tmpdir", "type": null, "default": null}, {"name": "kwargs_initial", "type": null, "default": "..."}, {"name": "parse", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.test_parsers_implemented", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.tests.config.test_setupcfg.saved_dist_init", "type": null, "documentation": []}], "classes": [{"name": "setuptools.tests.config.test_setupcfg.ErrConfigHandler", "bases": [], "methods": [], "class_variables": [{"name": "setuptools.tests.config.test_setupcfg.ErrConfigHandler.section_prefix", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Erroneous handler. Fails to implement required methods."]}, {"name": "setuptools.tests.config.test_setupcfg.TestConfigurationReader", "bases": [], "methods": [{"name": "setuptools.tests.config.test_setupcfg.TestConfigurationReader.test_basic", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestConfigurationReader.test_no_config", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestConfigurationReader.test_ignore_errors", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata", "bases": [], "methods": [{"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_basic", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_license_cfg", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_file_mixed", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_file_sandboxed", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_aliases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_multiline", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_dict", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_version_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_version_with_package_dir_simple", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_version_with_package_dir_rename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_version_with_package_dir_complex", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_unknown_meta_item", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_usupported_section", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_classifiers", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_interpolation", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_non_ascii_1", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_non_ascii_3", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_non_ascii_4", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_not_utf8", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Config files encoded not in UTF-8 will fail"]}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_warn_dash_deprecation", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestMetadata.test_make_option_lowercase", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions", "bases": [], "methods": [{"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_basic", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_multiline", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_package_dir_fail", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_package_data", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_packages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_find_directive", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_find_namespace_directive", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_extras_require", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_raises_accidental_env_marker_misconfig", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "config", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_warn_accidental_env_marker_misconfig", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "config", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_nowarn_accidental_env_marker_misconfig", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "config", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}, {"name": "recwarn", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_dash_preserved_extras_require", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_entry_points", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_case_sensitive_entry_points", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_data_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_data_files_globby", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_python_requires_simple", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_python_requires_compound", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_python_requires_invalid", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_cmdclass", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestOptions.test_requirements_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.config.test_setupcfg.TestExternalSetters", "bases": [], "methods": [{"name": "setuptools.tests.config.test_setupcfg.TestExternalSetters._fake_distribution_init", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}, {"name": "attrs", "type": null, "default": null}], "returns": null, "documentation": ["During creation of the setuptools Distribution() object, we call", "the init of the parent distutils Distribution object via", "_Distribution.__init__ ().", "It's possible distutils calls out to various keyword", "implementations (i.e. distutils.setup_keywords entry points)", "that may set a range of variables.", "This wraps distutil's Distribution.__init__ and simulates", "pbr or something else setting these values."]}, {"name": "setuptools.tests.config.test_setupcfg.TestExternalSetters.test_external_setters", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "mock_parent_init", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "pkg_resources", "documentation": ["# Package resource API\n\nA resource is a logical file contained within a package, or a logical\nsubdirectory thereof. The package resource API expects resource names\nto have their path parts separated with `/`, *not* whatever the local\npath separator is. Do not use os.path operations to manipulate resource\nnames being passed into the API.\n\nThe package resource API is designed to work with normal filesystem packages,\n.egg files, and unpacked .egg files. It can also work in a limited way with\n.zip files and with custom PEP 302 loaders that support the `get_data()`\nmethod.\n\nThis module is deprecated. Users are directed to {mod}`importlib.resources`,\n{mod}`importlib.metadata` and {pypi}`packaging` instead.\n"], "functions": [{"name": "pkg_resources._declare_state", "asynchronous": false, "params": [{"name": "vartype", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "varname", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "initial_value", "type": {"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}, "default": null}], "returns": {"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources.__getstate__", "asynchronous": false, "params": [], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "pkg_resources.__setstate__", "asynchronous": false, "params": [{"name": "state", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "pkg_resources._sget_dict", "asynchronous": false, "params": [{"name": "val", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources._sset_dict", "asynchronous": false, "params": [{"name": "key", "type": null, "default": null}, {"name": "ob", "type": null, "default": null}, {"name": "state", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources._sget_object", "asynchronous": false, "params": [{"name": "val", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources._sset_object", "asynchronous": false, "params": [{"name": "key", "type": null, "default": null}, {"name": "ob", "type": null, "default": null}, {"name": "state", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.get_supported_platform", "asynchronous": false, "params": [], "returns": null, "documentation": ["Return this platform's maximum compatible version.\n\ndistutils.util.get_platform() normally reports the minimum version\nof macOS that would be required to *use* extensions produced by\ndistutils.  But what we want when checking compatibility is to know the\nversion of macOS that we are *running*.  To allow usage of packages that\nexplicitly require a newer version of macOS, we must also know the\ncurrent version of the OS.\n\nIf this condition occurs for any other platform with a version in its\nplatform strings, this function should be extended accordingly."]}, {"name": "pkg_resources.register_loader_type", "asynchronous": false, "params": [{"name": "loader_type", "type": {"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": [{"name": "_ModuleLike", "xref": {"fqname": "_ModuleLike", "project": null}, "params": null}]}, "default": null}, {"name": "provider_factory", "type": {"name": "_ProviderFactoryType", "xref": {"fqname": "_ProviderFactoryType", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Register `provider_factory` to make providers for `loader_type`\n\n`loader_type` is the type or class of a PEP 302 `module.__loader__`,\nand `provider_factory` is a function that, passed a *module* object,\nreturns an `IResourceProvider` for that module.\n"]}, {"name": "pkg_resources.get_provider", "asynchronous": false, "params": [{"name": "moduleOrReq", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "IResourceProvider", "xref": {"fqname": "IResourceProvider", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources.get_provider", "asynchronous": false, "params": [{"name": "moduleOrReq", "type": {"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}, "default": null}], "returns": {"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources.get_provider", "asynchronous": false, "params": [{"name": "moduleOrReq", "type": {"name": "str | Requirement", "xref": null, "params": null}, "default": null}], "returns": {"name": "IResourceProvider | Distribution", "xref": null, "params": null}, "documentation": ["Return an IResourceProvider for the named module or requirement"]}, {"name": "pkg_resources._macos_vers", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "pkg_resources._macos_arch", "asynchronous": false, "params": [{"name": "machine", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.get_build_platform", "asynchronous": false, "params": [], "returns": null, "documentation": ["Return this platform's string for platform-specific distributions\n\nXXX Currently this is the same as `distutils.util.get_platform()`, but it\nneeds some hacks for Linux and macOS.\n"]}, {"name": "pkg_resources.compatible_platforms", "asynchronous": false, "params": [{"name": "provided", "type": {"name": "str | None", "xref": null, "params": null}, "default": null}, {"name": "required", "type": {"name": "str | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Can code for the `provided` platform run on the `required` platform?\n\nReturns true if either platform is `None`, or the platforms are equal.\n\nXXX Needs compatibility checks for Linux and other unixy OSes.\n"]}, {"name": "pkg_resources.get_distribution", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "_DistributionT", "xref": {"fqname": "_DistributionT", "project": null}, "params": null}, "default": null}], "returns": {"name": "_DistributionT", "xref": {"fqname": "_DistributionT", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources.get_distribution", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "_PkgReqType", "xref": {"fqname": "_PkgReqType", "project": null}, "params": null}, "default": null}], "returns": {"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources.get_distribution", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution | _PkgReqType", "xref": null, "params": null}, "default": null}], "returns": {"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}, "documentation": ["Return a current distribution object for a Requirement or string"]}, {"name": "pkg_resources.load_entry_point", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "_EPDistType", "xref": {"fqname": "_EPDistType", "project": null}, "params": null}, "default": null}, {"name": "group", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "_ResolvedEntryPoint", "xref": {"fqname": "_ResolvedEntryPoint", "project": null}, "params": null}, "documentation": ["Return `name` entry point of `group` for `dist` or raise ImportError"]}, {"name": "pkg_resources.get_entry_map", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "_EPDistType", "xref": {"fqname": "_EPDistType", "project": null}, "params": null}, "default": null}, {"name": "group", "type": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "EntryPoint", "xref": {"fqname": "EntryPoint", "project": null}, "params": null}]}]}, "documentation": []}, {"name": "pkg_resources.get_entry_map", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "_EPDistType", "xref": {"fqname": "_EPDistType", "project": null}, "params": null}, "default": null}, {"name": "group", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "EntryPoint", "xref": {"fqname": "EntryPoint", "project": null}, "params": null}]}, "documentation": []}, {"name": "pkg_resources.get_entry_map", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "_EPDistType", "xref": {"fqname": "_EPDistType", "project": null}, "params": null}, "default": null}, {"name": "group", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}], "returns": null, "documentation": ["Return the entry point map for `group`, or the full entry map"]}, {"name": "pkg_resources.get_entry_info", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "_EPDistType", "xref": {"fqname": "_EPDistType", "project": null}, "params": null}, "default": null}, {"name": "group", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "EntryPoint | None", "xref": null, "params": null}, "documentation": ["Return the EntryPoint object for `group`+`name`, or ``None``"]}, {"name": "pkg_resources.get_default_cache", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return the `PYTHON_EGG_CACHE` environment variable\nor a platform-relevant user cache dir for an app\nnamed \"Python-Eggs\".\n"]}, {"name": "pkg_resources.safe_name", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Convert an arbitrary string to a standard distribution name\n\nAny runs of non-alphanumeric/. characters are replaced with a single '-'."]}, {"name": "pkg_resources.safe_version", "asynchronous": false, "params": [{"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Convert an arbitrary string to a standard version string"]}, {"name": "pkg_resources._forgiving_version", "asynchronous": false, "params": [{"name": "version", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Fallback when `safe_version` is not safe enough\n\\>>> parse_version(\\_forgiving_version('0.23ubuntu1'))\n\\<Version('0.23.dev0+sanitized.ubuntu1')>\n\\>>> parse_version(\\_forgiving_version('0.23-'))\n\\<Version('0.23.dev0+sanitized')>\n\\>>> parse_version(\\_forgiving_version('0.-\\_'))\n\\<Version('0.dev0+sanitized')>\n\\>>> parse_version(\\_forgiving_version('42.+?1'))\n\\<Version('42.dev0+sanitized.1')>\n\\>>> parse_version(\\_forgiving_version('hello world'))\n\\<Version('0.dev0+sanitized.hello.world')>\n"]}, {"name": "pkg_resources._safe_segment", "asynchronous": false, "params": [{"name": "segment", "type": null, "default": null}], "returns": null, "documentation": ["Convert an arbitrary string into a safe segment"]}, {"name": "pkg_resources.safe_extra", "asynchronous": false, "params": [{"name": "extra", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Convert an arbitrary string to a standard 'extra' name\n\nAny runs of non-alphanumeric characters are replaced with a single '_',\nand the result is always lowercased."]}, {"name": "pkg_resources.to_filename", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Convert a project or version name to its filename-escaped form\n\nAny '-' characters are currently replaced with '_'."]}, {"name": "pkg_resources.invalid_marker", "asynchronous": false, "params": [{"name": "text", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "SyntaxError | Literal[False]", "xref": null, "params": null}, "documentation": ["Validate text as a PEP 508 environment marker; return an exception\nif invalid or False otherwise."]}, {"name": "pkg_resources.evaluate_marker", "asynchronous": false, "params": [{"name": "text", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "extra", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Evaluate a PEP 508 environment marker.\nReturn a boolean indicating the marker result in this environment.\nRaise SyntaxError if marker is invalid.\n\nThis implementation uses the 'pyparsing' module."]}, {"name": "pkg_resources._parents", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["yield all parents of path including path"]}, {"name": "pkg_resources.register_finder", "asynchronous": false, "params": [{"name": "importer_type", "type": {"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": [{"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}]}, "default": null}, {"name": "distribution_finder", "type": {"name": "_DistFinderType", "xref": {"fqname": "_DistFinderType", "project": null}, "params": [{"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Register `distribution_finder` to find distributions in sys.path items\n\n`importer_type` is the type or class of a PEP 302 \"Importer\" (sys.path item\nhandler), and `distribution_finder` is a callable that, passed a path\nitem and the importer instance, yields `Distribution` instances found on\nthat path item. See `pkg_resources.find_on_path` for an example.\n"]}, {"name": "pkg_resources.find_distributions", "asynchronous": false, "params": [{"name": "path_item", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "only", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}]}, "documentation": ["Yield distributions accessible via `path_item`"]}, {"name": "pkg_resources.find_eggs_in_zip", "asynchronous": false, "params": [{"name": "importer", "type": {"name": "zipimport.zipimporter", "xref": {"fqname": "zipimport.zipimporter", "project": "--std--"}, "params": null}, "default": null}, {"name": "path_item", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "only", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}]}, "documentation": ["Find eggs in zip files; possibly multiple nested eggs."]}, {"name": "pkg_resources.find_nothing", "asynchronous": false, "params": [{"name": "importer", "type": {"name": "object | None", "xref": null, "params": null}, "default": null}, {"name": "path_item", "type": {"name": "str | None", "xref": null, "params": null}, "default": null}, {"name": "only", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": null, "documentation": []}, {"name": "pkg_resources.find_on_path", "asynchronous": false, "params": [{"name": "importer", "type": {"name": "object | None", "xref": null, "params": null}, "default": null}, {"name": "path_item", "type": null, "default": null}, {"name": "only", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield distributions accessible on a sys.path directory"]}, {"name": "pkg_resources.dist_factory", "asynchronous": false, "params": [{"name": "path_item", "type": null, "default": null}, {"name": "entry", "type": null, "default": null}, {"name": "only", "type": null, "default": null}], "returns": null, "documentation": ["Return a dist_factory for the given entry."]}, {"name": "pkg_resources.safe_listdir", "asynchronous": false, "params": [{"name": "path", "type": {"name": "StrOrBytesPath", "xref": {"fqname": "_typeshed.StrOrBytesPath", "project": null}, "params": null}, "default": null}], "returns": null, "documentation": ["Attempt to list contents of path, but suppress some exceptions."]}, {"name": "pkg_resources.distributions_from_metadata", "asynchronous": false, "params": [{"name": "path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.non_empty_lines", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["Yield non-empty lines from file at path"]}, {"name": "pkg_resources.resolve_egg_link", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["Given a path to an .egg-link, resolve distributions\npresent in the referenced path."]}, {"name": "pkg_resources.register_namespace_handler", "asynchronous": false, "params": [{"name": "importer_type", "type": {"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": [{"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}]}, "default": null}, {"name": "namespace_handler", "type": {"name": "_NSHandlerType", "xref": {"fqname": "_NSHandlerType", "project": null}, "params": [{"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Register `namespace_handler` to declare namespace packages\n\n`importer_type` is the type or class of a PEP 302 \"Importer\" (sys.path item\nhandler), and `namespace_handler` is a callable like this:\n\n```\ndef namespace_handler(importer, path_entry, moduleName, module):\n    # return a path_entry to use for child packages\n```\n\nNamespace handlers are only called if the importer object has already\nagreed that it can handle the relevant path item, and they should only\nreturn a subpath if the module \\_\\_path\\_\\_ does not already contain an\nequivalent subpath. For an example namespace handler, see\n`pkg_resources.file_ns_handler`.\n"]}, {"name": "pkg_resources._handle_ns", "asynchronous": false, "params": [{"name": "packageName", "type": null, "default": null}, {"name": "path_item", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that named package includes a subpath of path_item (if needed)"]}, {"name": "pkg_resources._rebuild_mod_path", "asynchronous": false, "params": [{"name": "orig_path", "type": null, "default": null}, {"name": "package_name", "type": null, "default": null}, {"name": "module", "type": {"name": "types.ModuleType", "xref": {"fqname": "types.ModuleType", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Rebuild module.__path__ ensuring that all entries are ordered\ncorresponding to their sys.path order"]}, {"name": "pkg_resources.declare_namespace", "asynchronous": false, "params": [{"name": "packageName", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Declare that package 'packageName' is a namespace package"]}, {"name": "pkg_resources.fixup_namespace_packages", "asynchronous": false, "params": [{"name": "path_item", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "parent", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Ensure that previously-declared namespace packages include path_item"]}, {"name": "pkg_resources.file_ns_handler", "asynchronous": false, "params": [{"name": "importer", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}, {"name": "path_item", "type": {"name": "StrPath", "xref": {"fqname": "_typeshed.StrPath", "project": null}, "params": null}, "default": null}, {"name": "packageName", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "module", "type": {"name": "types.ModuleType", "xref": {"fqname": "types.ModuleType", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": ["Compute an ns-package subpath for a filesystem or zipfile importer"]}, {"name": "pkg_resources.null_ns_handler", "asynchronous": false, "params": [{"name": "importer", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}, {"name": "path_item", "type": {"name": "str | None", "xref": null, "params": null}, "default": null}, {"name": "packageName", "type": {"name": "str | None", "xref": null, "params": null}, "default": null}, {"name": "module", "type": {"name": "_ModuleLike | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.normalize_path", "asynchronous": false, "params": [{"name": "filename", "type": {"name": "StrPath", "xref": {"fqname": "_typeshed.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.normalize_path", "asynchronous": false, "params": [{"name": "filename", "type": {"name": "BytesPath", "xref": {"fqname": "_typeshed.BytesPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.normalize_path", "asynchronous": false, "params": [{"name": "filename", "type": {"name": "StrOrBytesPath", "xref": {"fqname": "_typeshed.StrOrBytesPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "str | bytes", "xref": null, "params": null}, "documentation": ["Normalize a file/dir name for comparison purposes"]}, {"name": "pkg_resources._cygwin_patch", "asynchronous": false, "params": [{"name": "filename", "type": {"name": "StrOrBytesPath", "xref": {"fqname": "_typeshed.StrOrBytesPath", "project": null}, "params": null}, "default": null}], "returns": null, "documentation": ["Contrary to POSIX 2008, on Cygwin, getcwd (3) contains\nsymlink components. Using\nos.path.abspath() works around this limitation. A fix in os.getcwd()\nwould probably better, in Cygwin even more so, except\nthat this seems to be by design..."]}, {"name": "pkg_resources._normalize_cached", "asynchronous": false, "params": [{"name": "filename", "type": {"name": "StrPath", "xref": {"fqname": "_typeshed.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["https://github.com/python/mypy/issues/16261", "https://github.com/python/typeshed/issues/6347"]}, {"name": "pkg_resources._normalize_cached", "asynchronous": false, "params": [{"name": "filename", "type": {"name": "BytesPath", "xref": {"fqname": "_typeshed.BytesPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources._normalize_cached", "asynchronous": false, "params": [{"name": "filename", "type": {"name": "StrOrBytesPath", "xref": {"fqname": "_typeshed.StrOrBytesPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "str | bytes", "xref": null, "params": null}, "documentation": []}, {"name": "pkg_resources._normalize_cached", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources._is_egg_path", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["Determine if given path appears to be an egg."]}, {"name": "pkg_resources._is_zip_egg", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources._is_unpacked_egg", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["Determine if given path appears to be an unpacked egg."]}, {"name": "pkg_resources._set_parent_ns", "asynchronous": false, "params": [{"name": "packageName", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources._version_from_file", "asynchronous": false, "params": [{"name": "lines", "type": null, "default": null}], "returns": null, "documentation": ["Given an iterable of lines from a Metadata file, return\nthe value of the Version field, if present, or None otherwise."]}, {"name": "pkg_resources.issue_warning", "asynchronous": false, "params": [{"name": "*args", "type": null, "default": null}, {"name": "**kw", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.parse_requirements", "asynchronous": false, "params": [{"name": "strs", "type": {"name": "_NestedStr", "xref": {"fqname": "_NestedStr", "project": null}, "params": null}, "default": null}], "returns": {"name": "map", "xref": {"fqname": "functions.map", "project": "--std--"}, "params": [{"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}]}, "documentation": ["Yield `Requirement` objects for each specification in `strs`.\n\n`strs` must be a string, or a (possibly-nested) iterable thereof.\n"]}, {"name": "pkg_resources._always_object", "asynchronous": false, "params": [{"name": "classes", "type": null, "default": null}], "returns": null, "documentation": ["Ensure object appears in the mro even\nfor old-style classes."]}, {"name": "pkg_resources._find_adapter", "asynchronous": false, "params": [{"name": "registry", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": null}, {"name": "_AdapterT", "xref": {"fqname": "_AdapterT", "project": null}, "params": null}]}, "default": null}, {"name": "ob", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "_AdapterT", "xref": {"fqname": "_AdapterT", "project": null}, "params": null}, "documentation": ["Return an adapter factory for `ob` from `registry`"]}, {"name": "pkg_resources.ensure_directory", "asynchronous": false, "params": [{"name": "path", "type": {"name": "StrOrBytesPath", "xref": {"fqname": "_typeshed.StrOrBytesPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Ensure that the parent directory of `path` exists"]}, {"name": "pkg_resources._bypass_ensure_directory", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Sandbox-bypassing version of ensure_directory()"]}, {"name": "pkg_resources.split_sections", "asynchronous": false, "params": [{"name": "s", "type": {"name": "_NestedStr", "xref": {"fqname": "_NestedStr", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str | None", "xref": null, "params": null}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "documentation": ["Split a string or iterable thereof into (section, content) pairs\n\nEach `section` is a stripped version of the section header (\"[section]\")\nand each `content` is a list of stripped lines excluding blank lines and\ncomment-only lines. If there are any such lines before the first section\nheader, they're returned in a first `section` of `None`.\n"]}, {"name": "pkg_resources._mkstemp", "asynchronous": false, "params": [{"name": "*args", "type": null, "default": null}, {"name": "**kw", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources._read_utf8_with_fallback", "asynchronous": false, "params": [{"name": "file", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "fallback_encoding", "type": null, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["See setuptools.unicode_utils._read_utf8_with_fallback", "This must go before calls to `_call_aside`. See https://github.com/pypa/setuptools/pull/4422"]}, {"name": "pkg_resources._call_aside", "asynchronous": false, "params": [{"name": "f", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["from jaraco.functools 1.3"]}, {"name": "pkg_resources._initialize", "asynchronous": false, "params": [{"name": "g", "type": null, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources._initialize_master_working_set", "asynchronous": false, "params": [], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Prepare the master working set and make the `require()`\nAPI available.\n\nThis function has explicit effects on the global state\nof pkg_resources. It is intended to be invoked once at\nthe initialization of this module.\n\nInvocation by other packages is unsupported and done\nat their own risk.\n"]}], "variables": [{"name": "pkg_resources.WRITE_SUPPORT", "type": null, "documentation": []}, {"name": "pkg_resources.WRITE_SUPPORT", "type": null, "documentation": []}, {"name": "pkg_resources._T", "type": null, "documentation": []}, {"name": "pkg_resources._DistributionT", "type": null, "documentation": []}, {"name": "pkg_resources._NestedStr", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources._StrictInstallerType", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources._InstallerType", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources._PkgReqType", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources._EPDistType", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources._MetadataType", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources._ResolvedEntryPoint", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": ["Can be any attribute in the module"]}, {"name": "pkg_resources._ResourceStream", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": ["TODO / Incomplete: A readable file-like object"]}, {"name": "pkg_resources._ModuleLike", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources._ProviderFactoryType", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources._DistFinderType", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources._NSHandlerType", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources._AdapterT", "type": null, "documentation": []}, {"name": "pkg_resources._PEP440_FALLBACK", "type": null, "documentation": []}, {"name": "pkg_resources.parse_version", "type": null, "documentation": []}, {"name": "pkg_resources._state_vars", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "pkg_resources._provider_factories", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": [{"name": "_ModuleLike", "xref": {"fqname": "_ModuleLike", "project": null}, "params": null}]}, {"name": "_ProviderFactoryType", "xref": {"fqname": "_ProviderFactoryType", "project": null}, "params": null}]}, "documentation": []}, {"name": "pkg_resources.PY_MAJOR", "type": null, "documentation": []}, {"name": "pkg_resources.EGG_DIST", "type": null, "documentation": []}, {"name": "pkg_resources.BINARY_DIST", "type": null, "documentation": []}, {"name": "pkg_resources.SOURCE_DIST", "type": null, "documentation": []}, {"name": "pkg_resources.CHECKOUT_DIST", "type": null, "documentation": []}, {"name": "pkg_resources.DEVELOP_DIST", "type": null, "documentation": []}, {"name": "pkg_resources.macosVersionString", "type": null, "documentation": []}, {"name": "pkg_resources.darwinVersionString", "type": null, "documentation": []}, {"name": "pkg_resources.get_platform", "type": null, "documentation": []}, {"name": "pkg_resources.AvailableDistributions", "type": null, "documentation": []}, {"name": "pkg_resources.empty_provider", "type": null, "documentation": []}, {"name": "pkg_resources._distribution_finders", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": null}, {"name": "_DistFinderType", "xref": {"fqname": "_DistFinderType", "project": null}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "pkg_resources._namespace_handlers", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": null}, {"name": "_NSHandlerType", "xref": {"fqname": "_NSHandlerType", "project": null}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "pkg_resources._namespace_packages", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str | None", "xref": null, "params": null}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "pkg_resources.MODULE", "type": null, "documentation": []}, {"name": "pkg_resources.EGG_NAME", "type": null, "documentation": []}, {"name": "pkg_resources._distributionImpl", "type": null, "documentation": []}, {"name": "pkg_resources._LOCALE_ENCODING", "type": null, "documentation": []}, {"name": "pkg_resources.__resource_manager", "type": null, "documentation": ["Won't exist at runtime"]}, {"name": "pkg_resources.resource_exists", "type": null, "documentation": []}, {"name": "pkg_resources.resource_isdir", "type": null, "documentation": []}, {"name": "pkg_resources.resource_filename", "type": null, "documentation": []}, {"name": "pkg_resources.resource_stream", "type": null, "documentation": []}, {"name": "pkg_resources.resource_string", "type": null, "documentation": []}, {"name": "pkg_resources.resource_listdir", "type": null, "documentation": []}, {"name": "pkg_resources.set_extraction_path", "type": null, "documentation": []}, {"name": "pkg_resources.cleanup_resources", "type": null, "documentation": []}, {"name": "pkg_resources.working_set", "type": null, "documentation": []}, {"name": "pkg_resources.require", "type": null, "documentation": []}, {"name": "pkg_resources.iter_entry_points", "type": null, "documentation": []}, {"name": "pkg_resources.add_activation_listener", "type": null, "documentation": []}, {"name": "pkg_resources.run_script", "type": null, "documentation": []}, {"name": "pkg_resources.run_main", "type": null, "documentation": []}], "classes": [{"name": "pkg_resources._ZipLoaderModule", "bases": ["Protocol"], "methods": [], "class_variables": [{"name": "pkg_resources._ZipLoaderModule.__loader__", "type": {"name": "zipimport.zipimporter", "xref": {"fqname": "zipimport.zipimporter", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "pkg_resources.PEP440Warning", "bases": ["RuntimeWarning"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Used when there is an issue with a version or specifier not complying with\nPEP 440."]}, {"name": "pkg_resources.ResolutionError", "bases": ["Exception"], "methods": [{"name": "pkg_resources.ResolutionError.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Abstract base for dependency resolution errors"]}, {"name": "pkg_resources.VersionConflict", "bases": ["ResolutionError"], "methods": [{"name": "pkg_resources.VersionConflict.dist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources.VersionConflict.req", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources.VersionConflict.report", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.VersionConflict.with_context", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "required_by", "type": {"name": "set", "xref": {"fqname": "functions.set", "project": "--std--"}, "params": [{"name": "Distribution | str", "xref": null, "params": null}]}, "default": null}], "returns": {"name": "Self | ContextualVersionConflict", "xref": null, "params": null}, "documentation": ["If required_by is non-empty, return a version of self that is a\nContextualVersionConflict."]}], "class_variables": [{"name": "pkg_resources.VersionConflict._template", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["An already-installed version conflicts with the requested version.\n\nShould be initialized with the installed Distribution and the requested\nRequirement."]}, {"name": "pkg_resources.ContextualVersionConflict", "bases": ["VersionConflict"], "methods": [{"name": "pkg_resources.ContextualVersionConflict.required_by", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "set", "xref": {"fqname": "functions.set", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}], "class_variables": [{"name": "pkg_resources.ContextualVersionConflict._template", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A VersionConflict that accepts a third parameter, the set of the\nrequirements that required the installed Distribution."]}, {"name": "pkg_resources.DistributionNotFound", "bases": ["ResolutionError"], "methods": [{"name": "pkg_resources.DistributionNotFound.req", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources.DistributionNotFound.requirers", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "set[str] | None", "xref": null, "params": null}, "documentation": []}, {"name": "pkg_resources.DistributionNotFound.requirers_str", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.DistributionNotFound.report", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.DistributionNotFound.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "pkg_resources.DistributionNotFound._template", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A requested distribution was not found"]}, {"name": "pkg_resources.UnknownExtra", "bases": ["ResolutionError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Distribution doesn't have an \"extra feature\" of the given name"]}, {"name": "pkg_resources.IMetadataProvider", "bases": ["Protocol"], "methods": [{"name": "pkg_resources.IMetadataProvider.has_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Does the package's distribution contain the named metadata?"]}, {"name": "pkg_resources.IMetadataProvider.get_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The named metadata resource as a string"]}, {"name": "pkg_resources.IMetadataProvider.get_metadata_lines", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Yield named metadata resource as list of non-blank non-comment lines\n\nLeading and trailing whitespace is stripped from each line, and lines\nwith `#` as the first non-blank character are omitted.\n"]}, {"name": "pkg_resources.IMetadataProvider.metadata_isdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Is the named metadata a directory? (like `os.path.isdir()`)\n"]}, {"name": "pkg_resources.IMetadataProvider.metadata_listdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["List of metadata names in the directory (like `os.listdir()`)\n"]}, {"name": "pkg_resources.IMetadataProvider.run_script", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "script_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "namespace", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Execute the named script in the supplied namespace dictionary"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "pkg_resources.IResourceProvider", "bases": ["IMetadataProvider", "Protocol"], "methods": [{"name": "pkg_resources.IResourceProvider.get_resource_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "manager", "type": {"name": "ResourceManager", "xref": {"fqname": "ResourceManager", "project": null}, "params": null}, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return a true filesystem path for `resource_name`\n\n`manager` must be a ``ResourceManager``"]}, {"name": "pkg_resources.IResourceProvider.get_resource_stream", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "manager", "type": {"name": "ResourceManager", "xref": {"fqname": "ResourceManager", "project": null}, "params": null}, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "_ResourceStream", "xref": {"fqname": "_ResourceStream", "project": null}, "params": null}, "documentation": ["Return a readable file-like object for `resource_name`\n\n`manager` must be a ``ResourceManager``"]}, {"name": "pkg_resources.IResourceProvider.get_resource_string", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "manager", "type": {"name": "ResourceManager", "xref": {"fqname": "ResourceManager", "project": null}, "params": null}, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, "documentation": ["Return the contents of `resource_name` as {obj}`bytes`\n\n`manager` must be a `ResourceManager`\n"]}, {"name": "pkg_resources.IResourceProvider.has_resource", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Does the package contain the named resource?"]}, {"name": "pkg_resources.IResourceProvider.resource_isdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Is the named resource a directory? (like `os.path.isdir()`)\n"]}, {"name": "pkg_resources.IResourceProvider.resource_listdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["List of resource names in the directory (like `os.listdir()`)\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An object that provides access to package resources"]}, {"name": "pkg_resources.WorkingSet", "bases": [], "methods": [{"name": "pkg_resources.WorkingSet.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "entries", "type": {"name": "Iterable[str] | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Create working set from list of path entries (default=sys.path)"]}, {"name": "pkg_resources.WorkingSet._build_master", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": null, "documentation": ["Prepare the master working set."]}, {"name": "pkg_resources.WorkingSet._build_from_requirements", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "req_spec", "type": null, "default": null}], "returns": null, "documentation": ["Build a working set from a requirement spec. Rewrites sys.path."]}, {"name": "pkg_resources.WorkingSet.add_entry", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "entry", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Add a path item to `.entries`, finding any distributions on it\n\n`find_distributions(entry, True)` is used to find distributions\ncorresponding to the path entry, and they are added. `entry` is\nalways appended to `.entries`, even if it is already present.\n(This is because `sys.path` can contain the same value more than\nonce, and the `.entries` of the `sys.path` WorkingSet should always\nequal `sys.path`.)\n"]}, {"name": "pkg_resources.WorkingSet.__contains__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["True if `dist` is the active distribution for its project"]}, {"name": "pkg_resources.WorkingSet.find", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "req", "type": {"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}, "default": null}], "returns": {"name": "Distribution | None", "xref": null, "params": null}, "documentation": ["Find a distribution matching requirement `req`\n\nIf there is an active distribution for the requested project, this\nreturns it as long as it meets the version requirement specified by\n`req`. But, if there is an active distribution for the project and it\ndoes *not* meet the `req` requirement, `VersionConflict` is raised.\nIf there is no active distribution for the requested project, `None`\nis returned.\n"]}, {"name": "pkg_resources.WorkingSet.iter_entry_points", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "group", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "name", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "EntryPoint", "xref": {"fqname": "EntryPoint", "project": null}, "params": null}]}, "documentation": ["Yield entry point objects from `group` matching `name`\n\nIf `name` is None, yields all entry points in `group` from all\ndistributions in the working set, otherwise only ones matching\nboth `group` and `name` are yielded (in distribution order)."]}, {"name": "pkg_resources.WorkingSet.run_script", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requires", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "script_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Locate distribution for `requires` and run `script_name` script"]}, {"name": "pkg_resources.WorkingSet.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}]}, "documentation": ["Yield distributions for non-duplicate projects in the working set\n\nThe yield order is the order in which the items' path entries were\nadded to the working set."]}, {"name": "pkg_resources.WorkingSet.add", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}, "default": null}, {"name": "entry", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "insert", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "replace", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Add `dist` to working set, associated with `entry`\n\nIf `entry` is unspecified, it defaults to the `.location` of `dist`.\nOn exit from this routine, `entry` is added to the end of the working\nset's `.entries` (if it wasn't already present).\n\n`dist` is only added to the working set if it's for a project that\ndoesn't already have a distribution in the set, unless `replace=True`.\nIf it's added, any callbacks registered with the `subscribe()` method\nwill be called.\n"]}, {"name": "pkg_resources.WorkingSet.resolve", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requirements", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}]}, "default": null}, {"name": "env", "type": {"name": "Environment | None", "xref": null, "params": null}, "default": null}, {"name": "installer", "type": {"name": "_StrictInstallerType", "xref": {"fqname": "_StrictInstallerType", "project": null}, "params": [{"name": "_DistributionT", "xref": {"fqname": "_DistributionT", "project": null}, "params": null}]}, "default": null}, {"name": "replace_conflicting", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "extras", "type": {"name": "tuple[str, ...] | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "_DistributionT", "xref": {"fqname": "_DistributionT", "project": null}, "params": null}]}, "documentation": []}, {"name": "pkg_resources.WorkingSet.resolve", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requirements", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}]}, "default": null}, {"name": "env", "type": {"name": "Environment | None", "xref": null, "params": null}, "default": "..."}, {"name": "installer", "type": {"name": "_StrictInstallerType", "xref": {"fqname": "_StrictInstallerType", "project": null}, "params": [{"name": "_DistributionT", "xref": {"fqname": "_DistributionT", "project": null}, "params": null}]}, "default": null}, {"name": "replace_conflicting", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "extras", "type": {"name": "tuple[str, ...] | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "_DistributionT", "xref": {"fqname": "_DistributionT", "project": null}, "params": null}]}, "documentation": []}, {"name": "pkg_resources.WorkingSet.resolve", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requirements", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}]}, "default": null}, {"name": "env", "type": {"name": "Environment | None", "xref": null, "params": null}, "default": "..."}, {"name": "installer", "type": {"name": "_InstallerType | None", "xref": null, "params": null}, "default": "..."}, {"name": "replace_conflicting", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "extras", "type": {"name": "tuple[str, ...] | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}]}, "documentation": []}, {"name": "pkg_resources.WorkingSet.resolve", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requirements", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}]}, "default": null}, {"name": "env", "type": {"name": "Environment | None", "xref": null, "params": null}, "default": "..."}, {"name": "installer", "type": {"name": "_InstallerType | None | _StrictInstallerType[_DistributionT]", "xref": null, "params": null}, "default": "..."}, {"name": "replace_conflicting", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "extras", "type": {"name": "tuple[str, ...] | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "list[Distribution] | list[_DistributionT]", "xref": null, "params": null}, "documentation": ["List all distributions needed to (recursively) meet `requirements`\n\n`requirements` must be a sequence of `Requirement` objects. `env`,\nif supplied, should be an `Environment` instance. If\nnot supplied, it defaults to all distributions available within any\nentry or distribution in the working set. `installer`, if supplied,\nwill be invoked with each requirement that cannot be met by an\nalready-installed distribution; it should return a `Distribution` or\n`None`.\n\nUnless `replace_conflicting=True`, raises a VersionConflict exception\nif\nany requirements are found on the path that have the correct name but\nthe wrong version. Otherwise, if an `installer` is supplied it will be\ninvoked to obtain the correct version of the requirement and activate\nit.\n\n`extras` is a list of the extras to be used with these requirements.\nThis is important because extra requirements may look like `my_req;\nextra = \"my_extra\"`, which would otherwise be interpreted as a purely\noptional requirement. Instead, we want to be able to assert that these\nrequirements are truly required.\n"]}, {"name": "pkg_resources.WorkingSet._resolve_dist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "req", "type": null, "default": null}, {"name": "best", "type": null, "default": null}, {"name": "replace_conflicting", "type": null, "default": null}, {"name": "env", "type": null, "default": null}, {"name": "installer", "type": null, "default": null}, {"name": "required_by", "type": null, "default": null}, {"name": "to_activate", "type": null, "default": null}], "returns": {"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources.WorkingSet.find_plugins", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "plugin_env", "type": {"name": "Environment", "xref": {"fqname": "Environment", "project": null}, "params": null}, "default": null}, {"name": "full_env", "type": {"name": "Environment | None", "xref": null, "params": null}, "default": null}, {"name": "installer", "type": {"name": "_StrictInstallerType", "xref": {"fqname": "_StrictInstallerType", "project": null}, "params": [{"name": "_DistributionT", "xref": {"fqname": "_DistributionT", "project": null}, "params": null}]}, "default": null}, {"name": "fallback", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "_DistributionT", "xref": {"fqname": "_DistributionT", "project": null}, "params": null}]}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}, {"name": "Exception", "xref": {"fqname": "functions.Exception", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "pkg_resources.WorkingSet.find_plugins", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "plugin_env", "type": {"name": "Environment", "xref": {"fqname": "Environment", "project": null}, "params": null}, "default": null}, {"name": "full_env", "type": {"name": "Environment | None", "xref": null, "params": null}, "default": "..."}, {"name": "installer", "type": {"name": "_StrictInstallerType", "xref": {"fqname": "_StrictInstallerType", "project": null}, "params": [{"name": "_DistributionT", "xref": {"fqname": "_DistributionT", "project": null}, "params": null}]}, "default": null}, {"name": "fallback", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "_DistributionT", "xref": {"fqname": "_DistributionT", "project": null}, "params": null}]}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}, {"name": "Exception", "xref": {"fqname": "functions.Exception", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "pkg_resources.WorkingSet.find_plugins", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "plugin_env", "type": {"name": "Environment", "xref": {"fqname": "Environment", "project": null}, "params": null}, "default": null}, {"name": "full_env", "type": {"name": "Environment | None", "xref": null, "params": null}, "default": "..."}, {"name": "installer", "type": {"name": "_InstallerType | None", "xref": null, "params": null}, "default": "..."}, {"name": "fallback", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}]}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}, {"name": "Exception", "xref": {"fqname": "functions.Exception", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "pkg_resources.WorkingSet.find_plugins", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "plugin_env", "type": {"name": "Environment", "xref": {"fqname": "Environment", "project": null}, "params": null}, "default": null}, {"name": "full_env", "type": {"name": "Environment | None", "xref": null, "params": null}, "default": "..."}, {"name": "installer", "type": {"name": "_InstallerType | None | _StrictInstallerType[_DistributionT]", "xref": null, "params": null}, "default": "..."}, {"name": "fallback", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "list[Distribution] | list[_DistributionT]", "xref": null, "params": null}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}, {"name": "Exception", "xref": {"fqname": "functions.Exception", "project": "--std--"}, "params": null}]}]}, "documentation": ["Find all activatable distributions in `plugin_env`\n\nExample usage:\n\n```\ndistributions, errors = working_set.find_plugins(\n    Environment(plugin_dirlist)\n)\n# add plugins+libs to sys.path\nmap(working_set.add, distributions)\n# display errors\nprint('Could not load', errors)\n```\n\nThe `plugin_env` should be an `Environment` instance that contains\nonly distributions that are in the project's \"plugin directory\" or\ndirectories. The `full_env`, if supplied, should be an `Environment`\ncontains all currently-available distributions. If `full_env` is not\nsupplied, one is created automatically from the `WorkingSet` this\nmethod is called on, which will typically mean that every directory on\n`sys.path` will be scanned for distributions.\n\n`installer` is a standard installer callback as used by the\n`resolve()` method. The `fallback` flag indicates whether we should\nattempt to resolve older versions of a plugin if the newest version\ncannot be resolved.\n\nThis method returns a 2-tuple: (`distributions`, `error_info`), where\n`distributions` is a list of the distributions found in `plugin_env`\nthat were loadable, along with any other distributions that are needed\nto resolve their dependencies. `error_info` is a dictionary mapping\nunloadable plugin distributions to an exception instance describing the\nerror that occurred. Usually this will be a `DistributionNotFound` or\n`VersionConflict` instance.\n"]}, {"name": "pkg_resources.WorkingSet.require", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*requirements", "type": {"name": "_NestedStr", "xref": {"fqname": "_NestedStr", "project": null}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}]}, "documentation": ["Ensure that distributions matching `requirements` are activated\n\n`requirements` must be a string or a (possibly-nested) sequence\nthereof, specifying the distributions and versions required.  The\nreturn value is a sequence of the distributions that needed to be\nactivated to fulfill the requirements; all relevant distributions are\nincluded, even if they were already activated in this working set."]}, {"name": "pkg_resources.WorkingSet.subscribe", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "callback", "type": {"name": "Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": [{"name": "", "xref": null, "params": [{"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}]}, {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "existing", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Invoke `callback` for all distributions\n\nIf `existing=True` (default),\ncall on all existing ones, as well."]}, {"name": "pkg_resources.WorkingSet._added_new", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.WorkingSet.__getstate__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str | None", "xref": null, "params": null}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}]}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": [{"name": "", "xref": null, "params": [{"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}]}, {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}]}]}]}, "documentation": []}, {"name": "pkg_resources.WorkingSet.__setstate__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "e_k_b_n_c", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A collection of active distributions on sys.path (or a similar list)"]}, {"name": "pkg_resources._ReqExtras", "bases": [], "methods": [{"name": "pkg_resources._ReqExtras.markers_pass", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "req", "type": {"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}, "default": null}, {"name": "extras", "type": {"name": "tuple[str, ...] | None", "xref": null, "params": null}, "default": "..."}], "returns": null, "documentation": ["Evaluate markers for req against each extra that\ndemanded it.\n\nReturn False if the req has a marker and fails\nevaluation. Otherwise, return True."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Map each requirement to the extras that demanded it."]}, {"name": "pkg_resources.Environment", "bases": [], "methods": [{"name": "pkg_resources.Environment.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "search_path", "type": {"name": "Iterable[str] | None", "xref": null, "params": null}, "default": "..."}, {"name": "platform", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "python", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Snapshot distributions available on a search path\n\nAny distributions found on `search_path` are added to the environment.\n`search_path` should be a sequence of `sys.path` items. If not\nsupplied, `sys.path` is used.\n\n`platform` is an optional string specifying the name of the platform\nthat platform-specific distributions must be compatible with. If\nunspecified, it defaults to the current platform. `python` is an\noptional string naming the desired version of Python (e.g. `'3.6'`);\nit defaults to the current version.\n\nYou may explicitly set `platform` (and/or `python`) to `None` if you\nwish to map *all* distributions, not just those compatible with the\nrunning platform or Python version.\n"]}, {"name": "pkg_resources.Environment.can_add", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Is distribution `dist` acceptable for this environment?\n\nThe distribution must match the platform and python version\nrequirements specified when this environment was created, or False\nis returned."]}, {"name": "pkg_resources.Environment.remove", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Remove `dist` from the environment"]}, {"name": "pkg_resources.Environment.scan", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "search_path", "type": {"name": "Iterable[str] | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Scan `search_path` for distributions usable in this environment\n\nAny distributions found are added to the environment.\n`search_path` should be a sequence of `sys.path` items. If not\nsupplied, `sys.path` is used. Only distributions conforming to\nthe platform/python version defined at initialization are added.\n"]}, {"name": "pkg_resources.Environment.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "project_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}]}, "documentation": ["Return a newest-to-oldest list of distributions for `project_name`\n\nUses case-insensitive `project_name` comparison, assuming all the\nproject's distributions use their project's name converted to all\nlowercase as their key."]}, {"name": "pkg_resources.Environment.add", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Add `dist` if we `can_add()` it and it has not already been added\n"]}, {"name": "pkg_resources.Environment.best_match", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "req", "type": {"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}, "default": null}, {"name": "working_set", "type": {"name": "WorkingSet", "xref": {"fqname": "pkg_resources.WorkingSet", "project": null}, "params": null}, "default": null}, {"name": "installer", "type": {"name": "_StrictInstallerType", "xref": {"fqname": "_StrictInstallerType", "project": null}, "params": [{"name": "_DistributionT", "xref": {"fqname": "_DistributionT", "project": null}, "params": null}]}, "default": null}, {"name": "replace_conflicting", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "_DistributionT", "xref": {"fqname": "_DistributionT", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources.Environment.best_match", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "req", "type": {"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}, "default": null}, {"name": "working_set", "type": {"name": "WorkingSet", "xref": {"fqname": "pkg_resources.WorkingSet", "project": null}, "params": null}, "default": null}, {"name": "installer", "type": {"name": "_InstallerType | None", "xref": null, "params": null}, "default": "..."}, {"name": "replace_conflicting", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Distribution | None", "xref": null, "params": null}, "documentation": []}, {"name": "pkg_resources.Environment.best_match", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "req", "type": {"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}, "default": null}, {"name": "working_set", "type": {"name": "WorkingSet", "xref": {"fqname": "pkg_resources.WorkingSet", "project": null}, "params": null}, "default": null}, {"name": "installer", "type": {"name": "_InstallerType | None | _StrictInstallerType[_DistributionT]", "xref": null, "params": null}, "default": "..."}, {"name": "replace_conflicting", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Distribution | None", "xref": null, "params": null}, "documentation": ["Find distribution best matching `req` and usable on `working_set`\n\nThis calls the `find(req)` method of the `working_set` to see if a\nsuitable distribution is already active. (This may raise\n`VersionConflict` if an unsuitable version of the project is already\nactive in the specified `working_set`.) If a suitable distribution\nisn't active, this method returns the newest distribution in the\nenvironment that meets the `Requirement` in `req`. If no suitable\ndistribution is found, and `installer` is supplied, then the result of\ncalling the environment's `obtain(req, installer)` method will be\nreturned.\n"]}, {"name": "pkg_resources.Environment.obtain", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requirement", "type": {"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}, "default": null}, {"name": "installer", "type": {"name": "_StrictInstallerType", "xref": {"fqname": "_StrictInstallerType", "project": null}, "params": [{"name": "_DistributionT", "xref": {"fqname": "_DistributionT", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "_DistributionT", "xref": {"fqname": "_DistributionT", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources.Environment.obtain", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requirement", "type": {"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}, "default": null}, {"name": "installer", "type": {"name": "Callable[[Requirement], None] | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.Environment.obtain", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requirement", "type": {"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}, "default": null}, {"name": "installer", "type": {"name": "_InstallerType | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Distribution | None", "xref": null, "params": null}, "documentation": []}, {"name": "pkg_resources.Environment.obtain", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requirement", "type": {"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}, "default": null}, {"name": "installer", "type": {"name": "Callable[[Requirement], None]\n    | _InstallerType\n    | None\n    | _StrictInstallerType[_DistributionT]", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Distribution | None", "xref": null, "params": null}, "documentation": ["Obtain a distribution matching `requirement` (e.g. via download)\n\nObtain a distro that matches requirement (e.g. via download). In the\nbase `Environment` class, this routine just returns\n`installer(requirement)`, unless `installer` is None, in which case\nNone is returned instead. This method is a hook that allows subclasses\nto attempt other ways of obtaining a distribution before falling back\nto the `installer` argument.\n"]}, {"name": "pkg_resources.Environment.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Yield the unique project names of the available distributions"]}, {"name": "pkg_resources.Environment.__iadd__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "Distribution | Environment", "xref": null, "params": null}, "default": null}], "returns": {"name": "Self", "xref": {"fqname": "typing_extensions.Self", "project": null}, "params": null}, "documentation": ["In-place addition of a distribution or environment"]}, {"name": "pkg_resources.Environment.__add__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "Distribution | Environment", "xref": null, "params": null}, "default": null}], "returns": {"name": "Self", "xref": {"fqname": "typing_extensions.Self", "project": null}, "params": null}, "documentation": ["Add an environment or distribution to an environment"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Searchable snapshot of distributions on a search path"]}, {"name": "pkg_resources.ExtractionError", "bases": ["RuntimeError"], "methods": [], "class_variables": [{"name": "pkg_resources.ExtractionError.manager", "type": {"name": "ResourceManager", "xref": {"fqname": "ResourceManager", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources.ExtractionError.cache_path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.ExtractionError.original_error", "type": {"name": "BaseException | None", "xref": null, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["An error occurred extracting a resource\n\nThe following attributes are available from instances of this exception:\n\nmanager\n    The resource manager that raised this exception\n\ncache_path\n    The base directory for resource extraction\n\noriginal_error\n    The exception instance that caused extraction to fail"]}, {"name": "pkg_resources.ResourceManager", "bases": [], "methods": [{"name": "pkg_resources.ResourceManager.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.ResourceManager.resource_exists", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "package_or_requirement", "type": {"name": "_PkgReqType", "xref": {"fqname": "_PkgReqType", "project": null}, "params": null}, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Does the named resource exist?"]}, {"name": "pkg_resources.ResourceManager.resource_isdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "package_or_requirement", "type": {"name": "_PkgReqType", "xref": {"fqname": "_PkgReqType", "project": null}, "params": null}, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Is the named resource an existing directory?"]}, {"name": "pkg_resources.ResourceManager.resource_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "package_or_requirement", "type": {"name": "_PkgReqType", "xref": {"fqname": "_PkgReqType", "project": null}, "params": null}, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return a true filesystem path for specified resource"]}, {"name": "pkg_resources.ResourceManager.resource_stream", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "package_or_requirement", "type": {"name": "_PkgReqType", "xref": {"fqname": "_PkgReqType", "project": null}, "params": null}, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "_ResourceStream", "xref": {"fqname": "_ResourceStream", "project": null}, "params": null}, "documentation": ["Return a readable file-like object for specified resource"]}, {"name": "pkg_resources.ResourceManager.resource_string", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "package_or_requirement", "type": {"name": "_PkgReqType", "xref": {"fqname": "_PkgReqType", "project": null}, "params": null}, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, "documentation": ["Return specified resource as {obj}`bytes`\n"]}, {"name": "pkg_resources.ResourceManager.resource_listdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "package_or_requirement", "type": {"name": "_PkgReqType", "xref": {"fqname": "_PkgReqType", "project": null}, "params": null}, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["List the contents of the named resource directory"]}, {"name": "pkg_resources.ResourceManager.extraction_error", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "NoReturn", "xref": {"fqname": "typing.NoReturn", "project": "--std--"}, "params": null}, "documentation": ["Give an error message for problems extracting file(s)"]}, {"name": "pkg_resources.ResourceManager.get_cache_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "archive_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "names", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "StrPath", "xref": {"fqname": "_typeshed.StrPath", "project": null}, "params": null}]}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return absolute location in cache for `archive_name` and `names`\n\nThe parent directory of the resulting path will be created if it does\nnot already exist.  `archive_name` should be the base filename of the\nenclosing egg (which may not be the name of the enclosing zipfile!),\nincluding its \".egg\" extension.  `names`, if provided, should be a\nsequence of path name parts \"under\" the egg's extraction location.\n\nThis method should only be called by resource providers that need to\nobtain an extraction location, and only for names they intend to\nextract, as it tracks the generated names for possible cleanup later."]}, {"name": "pkg_resources.ResourceManager._warn_unsafe_extraction_path", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["If the default extraction path is overridden and set to an insecure\nlocation, such as /tmp, it opens up an opportunity for an attacker to\nreplace an extracted file with an unauthorized payload. Warn the user\nif a known insecure location is used.\n\nSee Distribute #375 for more details."]}, {"name": "pkg_resources.ResourceManager.postprocess", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tempname", "type": {"name": "StrOrBytesPath", "xref": {"fqname": "_typeshed.StrOrBytesPath", "project": null}, "params": null}, "default": null}, {"name": "filename", "type": {"name": "StrOrBytesPath", "xref": {"fqname": "_typeshed.StrOrBytesPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Perform any platform-specific postprocessing of `tempname`\n\nThis is where Mac header rewrites should be done; other platforms don't\nhave anything special they should do.\n\nResource providers should call this method ONLY after successfully\nextracting a compressed resource.  They must NOT call it on resources\nthat are already in the filesystem.\n\n`tempname` is the current (temporary) name of the file, and `filename`\nis the name it will be renamed to by the caller after this routine\nreturns."]}, {"name": "pkg_resources.ResourceManager.set_extraction_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Set the base path where resources will be extracted to, if needed.\n\nIf you do not call this routine before any extractions take place, the\npath defaults to the return value of `get_default_cache()`. (Which\nis based on the `PYTHON_EGG_CACHE` environment variable, with various\nplatform-specific fallbacks. See that routine's documentation for more\ndetails.)\n\nResources are extracted to subdirectories of this path based upon\ninformation given by the `IResourceProvider`. You may set this to a\ntemporary directory, but then you must call `cleanup_resources()` to\ndelete the extracted files when done. There is no guarantee that\n`cleanup_resources()` will be able to remove all extracted files.\n\n(Note: you may not change the extraction path for a given resource\nmanager once resources have been extracted, unless you first call\n`cleanup_resources()`.)\n"]}, {"name": "pkg_resources.ResourceManager.cleanup_resources", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "force", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Delete all extracted resource files and directories, returning a list\nof the file and directory names that could not be successfully removed.\nThis function does not have any concurrency protection, so it should\ngenerally only be called when the extraction path is a temporary\ndirectory exclusive to a single process. This method is not\nautomatically called; you must call it explicitly or register it as an\n`atexit` function if you wish to ensure cleanup of a temporary\ndirectory used for extractions.\n"]}], "class_variables": [{"name": "pkg_resources.ResourceManager.extraction_path", "type": {"name": "str | None", "xref": null, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Manage resource extraction and packages"]}, {"name": "pkg_resources.NullProvider", "bases": [], "methods": [{"name": "pkg_resources.NullProvider.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "module", "type": {"name": "_ModuleLike", "xref": {"fqname": "_ModuleLike", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.NullProvider.get_resource_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "manager", "type": {"name": "ResourceManager", "xref": {"fqname": "pkg_resources.ResourceManager", "project": null}, "params": null}, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.NullProvider.get_resource_stream", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "manager", "type": {"name": "ResourceManager", "xref": {"fqname": "pkg_resources.ResourceManager", "project": null}, "params": null}, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "BinaryIO", "xref": {"fqname": "typing.BinaryIO", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.NullProvider.get_resource_string", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "manager", "type": {"name": "ResourceManager", "xref": {"fqname": "pkg_resources.ResourceManager", "project": null}, "params": null}, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.NullProvider.has_resource", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.NullProvider._get_metadata_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.NullProvider.has_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.NullProvider.get_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.NullProvider.get_metadata_lines", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "pkg_resources.NullProvider.resource_isdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.NullProvider.metadata_isdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.NullProvider.resource_listdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "pkg_resources.NullProvider.metadata_listdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "pkg_resources.NullProvider.run_script", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "script_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "namespace", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.NullProvider._has", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.NullProvider._isdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.NullProvider._listdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "pkg_resources.NullProvider._fn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "base", "type": {"name": "str | None", "xref": null, "params": null}, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.NullProvider._validate_resource_path", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Validate the resource paths according to the docs.\n<https://setuptools.pypa.io/en/latest/pkg_resources.html#basic-resource-access>\n\n```pycon\n>>> warned = getfixture('recwarn')\n>>> warnings.simplefilter('always')\n>>> vrp = NullProvider._validate_resource_path\n>>> vrp('foo/bar.txt')\n>>> bool(warned)\nFalse\n>>> vrp('../foo/bar.txt')\n>>> bool(warned)\nTrue\n>>> warned.clear()\n>>> vrp('/foo/bar.txt')\n>>> bool(warned)\nTrue\n>>> vrp('foo/../../bar.txt')\n>>> bool(warned)\nTrue\n>>> warned.clear()\n>>> vrp('foo/f../bar.txt')\n>>> bool(warned)\nFalse\n```\n\nWindows path separators are straight-up disallowed.\n\\>>> vrp(r'foo/bar.txt')\nTraceback (most recent call last):\n...\nValueError: Use of .. or absolute path in a resource path is not allowed.\n\n```pycon\n>>> vrp(r'C:\\foo/bar.txt')\nTraceback (most recent call last):\n...\nValueError: Use of .. or absolute path in a resource path is not allowed.\n```\n\nBlank values are allowed\n\n```pycon\n>>> vrp('')\n>>> bool(warned)\nFalse\n```\n\nNon-string values are not.\n\n```pycon\n>>> vrp(None)\nTraceback (most recent call last):\n...\nAttributeError: ...\n```\n"]}, {"name": "pkg_resources.NullProvider._get", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "pkg_resources.NullProvider.egg_name", "type": {"name": "str | None", "xref": null, "params": null}, "documentation": []}, {"name": "pkg_resources.NullProvider.egg_info", "type": {"name": "str | None", "xref": null, "params": null}, "documentation": []}, {"name": "pkg_resources.NullProvider.loader", "type": {"name": "LoaderProtocol | None", "xref": null, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Try to implement resources and metadata for arbitrary PEP 302 loaders"]}, {"name": "pkg_resources.EggProvider", "bases": ["NullProvider"], "methods": [{"name": "pkg_resources.EggProvider.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "module", "type": {"name": "_ModuleLike", "xref": {"fqname": "_ModuleLike", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.EggProvider._setup_prefix", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.EggProvider._set_egg", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Provider based on a virtual filesystem"]}, {"name": "pkg_resources.DefaultProvider", "bases": ["EggProvider"], "methods": [{"name": "pkg_resources.DefaultProvider._has", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.DefaultProvider._isdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.DefaultProvider._listdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.DefaultProvider.get_resource_stream", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "manager", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "io.BufferedReader", "xref": {"fqname": "io.BufferedReader", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.DefaultProvider._get", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.DefaultProvider._register", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Provides access to package resources in the filesystem"]}, {"name": "pkg_resources.EmptyProvider", "bases": ["NullProvider"], "methods": [{"name": "pkg_resources.EmptyProvider._get", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.EmptyProvider._listdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.EmptyProvider.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "pkg_resources.EmptyProvider.module_path", "type": {"name": "str | None", "xref": null, "params": null}, "documentation": ["type: ignore[assignment]"]}], "instance_variables": [], "inner_classes": [], "documentation": ["Provider that returns nothing for all requests"]}, {"name": "pkg_resources.ZipManifests", "bases": [], "methods": [{"name": "pkg_resources.ZipManifests.build", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "zipfile.ZipInfo", "xref": {"fqname": "zipfile.ZipInfo", "project": "--std--"}, "params": null}]}, "documentation": ["Build a dictionary similar to the zipimport directory\ncaches, except instead of tuples, store ZipInfo objects.\n\nUse a platform-specific path separator (os.sep) for the path keys\nfor compatibility with pypy on Windows.", "`path` could be `StrPath | IO[bytes]` but that violates the LSP for `MemoizedZipManifests.load`"]}], "class_variables": [{"name": "pkg_resources.ZipManifests.load", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["zip manifest builder"]}, {"name": "pkg_resources.MemoizedZipManifests", "bases": ["ZipManifests"], "methods": [{"name": "pkg_resources.MemoizedZipManifests.load", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "zipfile.ZipInfo", "xref": {"fqname": "zipfile.ZipInfo", "project": "--std--"}, "params": null}]}, "documentation": ["Load a manifest at path or return a suitable manifest already loaded."]}], "class_variables": [], "instance_variables": [], "inner_classes": [{"name": "pkg_resources.MemoizedZipManifests.manifest_mod", "bases": ["NamedTuple"], "methods": [], "class_variables": [{"name": "pkg_resources.MemoizedZipManifests.manifest_mod.manifest", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "zipfile.ZipInfo", "xref": {"fqname": "zipfile.ZipInfo", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "pkg_resources.MemoizedZipManifests.manifest_mod.mtime", "type": {"name": "float", "xref": {"fqname": "functions.float", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "documentation": ["Memoized zipfile manifests."]}, {"name": "pkg_resources.ZipProvider", "bases": ["EggProvider"], "methods": [{"name": "pkg_resources.ZipProvider.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "module", "type": {"name": "_ZipLoaderModule", "xref": {"fqname": "pkg_resources._ZipLoaderModule", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.ZipProvider._zipinfo_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "fspath", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.ZipProvider._parts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "zip_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.ZipProvider.zipinfo", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.ZipProvider.get_resource_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "manager", "type": {"name": "ResourceManager", "xref": {"fqname": "pkg_resources.ResourceManager", "project": null}, "params": null}, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.ZipProvider._get_date_and_size", "asynchronous": false, "params": [{"name": "zip_stat", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.ZipProvider._extract_resource", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "manager", "type": {"name": "ResourceManager", "xref": {"fqname": "pkg_resources.ResourceManager", "project": null}, "params": null}, "default": null}, {"name": "zip_path", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["FIXME: 'ZipProvider._extract_resource' is too complex (12)"]}, {"name": "pkg_resources.ZipProvider._is_current", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "file_path", "type": null, "default": null}, {"name": "zip_path", "type": null, "default": null}], "returns": null, "documentation": ["Return True if the file_path is current for this zip_path"]}, {"name": "pkg_resources.ZipProvider._get_eager_resources", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.ZipProvider._index", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.ZipProvider._has", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "fspath", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.ZipProvider._isdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "fspath", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.ZipProvider._listdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "fspath", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.ZipProvider._eager_to_zip", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.ZipProvider._resource_to_zip", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "resource_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "pkg_resources.ZipProvider.eagers", "type": {"name": "list[str] | None", "xref": null, "params": null}, "documentation": []}, {"name": "pkg_resources.ZipProvider._zip_manifests", "type": null, "documentation": []}, {"name": "pkg_resources.ZipProvider.loader", "type": {"name": "zipimport.zipimporter", "xref": {"fqname": "zipimport.zipimporter", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Resource support for zips and eggs"]}, {"name": "pkg_resources.FileMetadata", "bases": ["EmptyProvider"], "methods": [{"name": "pkg_resources.FileMetadata.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": {"name": "StrPath", "xref": {"fqname": "_typeshed.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.FileMetadata._get_metadata_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.FileMetadata.has_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.FileMetadata.get_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.FileMetadata._warn_on_replacement", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "metadata", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.FileMetadata.get_metadata_lines", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Metadata handler for standalone PKG-INFO files\n\nUsage:\n\n```\nmetadata = FileMetadata(\"/path/to/PKG-INFO\")\n```\n\nThis provider rejects all data and metadata requests except for PKG-INFO,\nwhich is treated as existing, and will be the contents of the file at\nthe provided location.\n"]}, {"name": "pkg_resources.PathMetadata", "bases": ["DefaultProvider"], "methods": [{"name": "pkg_resources.PathMetadata.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "egg_info", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Metadata provider for egg directories\n\nUsage:\n\n```\n# Development eggs:\n\negg_info = \"/path/to/PackageName.egg-info\"\nbase_dir = os.path.dirname(egg_info)\nmetadata = PathMetadata(base_dir, egg_info)\ndist_name = os.path.splitext(os.path.basename(egg_info))[0]\ndist = Distribution(basedir, project_name=dist_name, metadata=metadata)\n\n# Unpacked egg directories:\n\negg_path = \"/path/to/PackageName-ver-pyver-etc.egg\"\nmetadata = PathMetadata(egg_path, os.path.join(egg_path,'EGG-INFO'))\ndist = Distribution.from_filename(egg_path, metadata=metadata)\n```\n"]}, {"name": "pkg_resources.EggMetadata", "bases": ["ZipProvider"], "methods": [{"name": "pkg_resources.EggMetadata.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "importer", "type": {"name": "zipimport.zipimporter", "xref": {"fqname": "zipimport.zipimporter", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Create a metadata provider from a zipimporter"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Metadata provider for .egg files"]}, {"name": "pkg_resources.NoDists", "bases": [], "methods": [{"name": "pkg_resources.NoDists.__bool__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Literal", "xref": {"fqname": "typing.Literal", "project": "--std--"}, "params": [{"name": "False", "xref": null, "params": null}]}, "documentation": []}, {"name": "pkg_resources.NoDists.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "fullpath", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["```pycon\n>>> bool(NoDists())\nFalse\n```\n\n```pycon\n>>> list(NoDists()('anything'))\n[]\n```\n"]}, {"name": "pkg_resources.EntryPoint", "bases": [], "methods": [{"name": "pkg_resources.EntryPoint.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "module_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "attrs", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}, {"name": "extras", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}, {"name": "dist", "type": {"name": "Distribution | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.EntryPoint.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.EntryPoint.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.EntryPoint.load", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "require", "type": {"name": "Literal", "xref": {"fqname": "typing.Literal", "project": "--std--"}, "params": [{"name": "True", "xref": null, "params": null}]}, "default": "..."}, {"name": "env", "type": {"name": "Environment | None", "xref": null, "params": null}, "default": "..."}, {"name": "installer", "type": {"name": "_InstallerType | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "_ResolvedEntryPoint", "xref": {"fqname": "_ResolvedEntryPoint", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources.EntryPoint.load", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "require", "type": {"name": "Literal", "xref": {"fqname": "typing.Literal", "project": "--std--"}, "params": [{"name": "False", "xref": null, "params": null}]}, "default": null}, {"name": "*args", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "**kwargs", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "_ResolvedEntryPoint", "xref": {"fqname": "_ResolvedEntryPoint", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources.EntryPoint.load", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "require", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "*args", "type": {"name": "Environment | _InstallerType | None", "xref": null, "params": null}, "default": null}, {"name": "**kwargs", "type": {"name": "Environment | _InstallerType | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "_ResolvedEntryPoint", "xref": {"fqname": "_ResolvedEntryPoint", "project": null}, "params": null}, "documentation": ["Require packages for this EntryPoint, then resolve it."]}, {"name": "pkg_resources.EntryPoint.resolve", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "_ResolvedEntryPoint", "xref": {"fqname": "_ResolvedEntryPoint", "project": null}, "params": null}, "documentation": ["Resolve the entry point from its module and attrs."]}, {"name": "pkg_resources.EntryPoint.require", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "env", "type": {"name": "Environment | None", "xref": null, "params": null}, "default": "..."}, {"name": "installer", "type": {"name": "_InstallerType | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.EntryPoint.parse", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "dist", "type": {"name": "Distribution | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Self", "xref": {"fqname": "typing_extensions.Self", "project": null}, "params": null}, "documentation": ["Parse a single entry point from string `src`\n\nEntry point syntax follows the form:\n\n```\nname = some.module:some.attr [extra1, extra2]\n```\n\nThe entry name and module name are required, but the `:attrs` and\n`[extras]` parts are optional\n"]}, {"name": "pkg_resources.EntryPoint._parse_extras", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "extras_spec", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.EntryPoint.parse_group", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "group", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "lines", "type": {"name": "_NestedStr", "xref": {"fqname": "_NestedStr", "project": null}, "params": null}, "default": null}, {"name": "dist", "type": {"name": "Distribution | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Self", "xref": {"fqname": "typing_extensions.Self", "project": null}, "params": null}]}, "documentation": ["Parse an entry point group"]}, {"name": "pkg_resources.EntryPoint.parse_map", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "data", "type": {"name": "str | Iterable[str] | dict[str, str | Iterable[str]]", "xref": null, "params": null}, "default": null}, {"name": "dist", "type": {"name": "Distribution | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Self", "xref": {"fqname": "typing_extensions.Self", "project": null}, "params": null}]}]}, "documentation": ["Parse a map of entry point groups"]}], "class_variables": [{"name": "pkg_resources.EntryPoint.pattern", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Object representing an advertised importable object"]}, {"name": "pkg_resources.Distribution", "bases": [], "methods": [{"name": "pkg_resources.Distribution.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "location", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "metadata", "type": {"name": "_MetadataType", "xref": {"fqname": "_MetadataType", "project": null}, "params": null}, "default": "..."}, {"name": "project_name", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "py_version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "platform", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "precedence", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.Distribution.from_location", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "location", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "basename", "type": {"name": "StrPath", "xref": {"fqname": "_typeshed.StrPath", "project": null}, "params": null}, "default": null}, {"name": "metadata", "type": {"name": "_MetadataType", "xref": {"fqname": "_MetadataType", "project": null}, "params": null}, "default": "..."}, {"name": "**kw", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Distribution", "xref": {"fqname": "pkg_resources.Distribution", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources.Distribution._reload_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.Distribution.hashcmp", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.Distribution.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.Distribution.__lt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "Distribution", "xref": {"fqname": "pkg_resources.Distribution", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.Distribution.__le__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "Distribution", "xref": {"fqname": "pkg_resources.Distribution", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.Distribution.__gt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "Distribution", "xref": {"fqname": "pkg_resources.Distribution", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.Distribution.__ge__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "Distribution", "xref": {"fqname": "pkg_resources.Distribution", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.Distribution.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.Distribution.__ne__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.Distribution.key", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["These properties have to be lazy so that we don't have to load any", "metadata until/unless it's actually needed.  (i.e., some distributions", "may not know their name or version without loading PKG-INFO)"]}, {"name": "pkg_resources.Distribution.parsed_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.Distribution._forgiving_parsed_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.Distribution.version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.Distribution._dep_map", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["A map of extra to its list of (direct) requirements\nfor this distribution, including the null extra."]}, {"name": "pkg_resources.Distribution._filter_extras", "asynchronous": false, "params": [{"name": "dm", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str | None", "xref": null, "params": null}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}]}]}, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str | None", "xref": null, "params": null}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}]}]}, "documentation": ["Given a mapping of extras to dependencies, strip off\nenvironment markers and filter out any dependencies\nnot matching the markers."]}, {"name": "pkg_resources.Distribution._build_dep_map", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.Distribution.requires", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "extras", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}]}, "documentation": ["List of Requirements needed for this distro if `extras` are used"]}, {"name": "pkg_resources.Distribution._get_metadata_path_for_display", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Return the path to the given metadata file, if available."]}, {"name": "pkg_resources.Distribution._get_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.Distribution._get_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.Distribution.activate", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": {"name": "list[str] | None", "xref": null, "params": null}, "default": "..."}, {"name": "replace", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Ensure distribution is importable on `path` (default=sys.path)"]}, {"name": "pkg_resources.Distribution.egg_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return what this distribution's standard .egg filename should be"]}, {"name": "pkg_resources.Distribution.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.Distribution.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.Distribution.__getattr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "attr", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": ["Delegate all unrecognized public attributes to .metadata provider"]}, {"name": "pkg_resources.Distribution.__dir__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.Distribution.from_filename", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "filename", "type": {"name": "StrPath", "xref": {"fqname": "_typeshed.StrPath", "project": null}, "params": null}, "default": null}, {"name": "metadata", "type": {"name": "_MetadataType", "xref": {"fqname": "_MetadataType", "project": null}, "params": null}, "default": "..."}, {"name": "**kw", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Distribution", "xref": {"fqname": "pkg_resources.Distribution", "project": null}, "params": null}, "documentation": []}, {"name": "pkg_resources.Distribution.as_requirement", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return a `Requirement` that matches this distribution exactly\n"]}, {"name": "pkg_resources.Distribution.load_entry_point", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "group", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "_ResolvedEntryPoint", "xref": {"fqname": "_ResolvedEntryPoint", "project": null}, "params": null}, "documentation": ["Return the `name` entry point of `group` or raise ImportError"]}, {"name": "pkg_resources.Distribution.get_entry_map", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "group", "type": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "EntryPoint", "xref": {"fqname": "pkg_resources.EntryPoint", "project": null}, "params": null}]}]}, "documentation": []}, {"name": "pkg_resources.Distribution.get_entry_map", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "group", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "EntryPoint", "xref": {"fqname": "pkg_resources.EntryPoint", "project": null}, "params": null}]}, "documentation": []}, {"name": "pkg_resources.Distribution.get_entry_map", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "group", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}], "returns": null, "documentation": ["Return the entry point map for `group`, or the full entry map"]}, {"name": "pkg_resources.Distribution.get_entry_info", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "group", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "EntryPoint | None", "xref": null, "params": null}, "documentation": ["Return the EntryPoint object for `group`+`name`, or ``None``"]}, {"name": "pkg_resources.Distribution.insert_on", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "loc", "type": null, "default": "..."}, {"name": "replace", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Ensure self.location is on path\n\nIf replace=False (default):\n    - If location is already in path anywhere, do nothing.\n    - Else:\n      - If it's an egg and its parent directory is on path,\n        insert just ahead of the parent.\n      - Else: add to the end of path.\nIf replace=True:\n    - If location is already on path anywhere (not eggs)\n      or higher priority than its parent (eggs)\n      do nothing.\n    - Else:\n      - If it's an egg and its parent directory is on path,\n        insert just ahead of the parent,\n        removing any lower-priority entries.\n      - Else: add it to the front of path.", "FIXME: 'Distribution.insert_on' is too complex (13)"]}, {"name": "pkg_resources.Distribution.check_version_conflict", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.Distribution.has_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.Distribution.clone", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "**kw", "type": {"name": "str | int | IResourceProvider | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "Self", "xref": {"fqname": "typing_extensions.Self", "project": null}, "params": null}, "documentation": ["Copy this distribution, substituting in any changed keyword args"]}, {"name": "pkg_resources.Distribution.extras", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "pkg_resources.Distribution.PKG_INFO", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Wrap an actual or potential sys.path entry w/metadata"]}, {"name": "pkg_resources.EggInfoDistribution", "bases": ["Distribution"], "methods": [{"name": "pkg_resources.EggInfoDistribution._reload_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Packages installed by distutils (e.g. numpy or scipy),\nwhich uses an old safe_version, and so\ntheir version numbers can get mangled when\nconverted to filenames (e.g., 1.11.0.dev0+2329eae to\n1.11.0.dev0_2329eae). These distributions will not be\nparsed properly\ndownstream by Distribution and safe_version, so\ntake an extra step and try to get the version number from\nthe metadata file itself instead of the filename."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "pkg_resources.DistInfoDistribution", "bases": ["Distribution"], "methods": [{"name": "pkg_resources.DistInfoDistribution._parsed_pkg_info", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Parse and cache metadata"]}, {"name": "pkg_resources.DistInfoDistribution._dep_map", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "pkg_resources.DistInfoDistribution._compute_dependencies", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str | None", "xref": null, "params": null}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "Requirement", "xref": {"fqname": "Requirement", "project": null}, "params": null}]}]}, "documentation": ["Recompute this distribution's dependencies."]}], "class_variables": [{"name": "pkg_resources.DistInfoDistribution.PKG_INFO", "type": null, "documentation": []}, {"name": "pkg_resources.DistInfoDistribution.EQEQ", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Wrap an actual or potential sys.path entry\nw/metadata, .dist-info style."]}, {"name": "pkg_resources.RequirementParseError", "bases": ["packaging.requirements.InvalidRequirement"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "pkg_resources.Requirement", "bases": ["packaging.requirements.Requirement"], "methods": [{"name": "pkg_resources.Requirement.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requirement_string", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["DO NOT CALL THIS UNDOCUMENTED METHOD; use Requirement.parse()!"]}, {"name": "pkg_resources.Requirement.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.Requirement.__ne__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.Requirement.__contains__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "Distribution | packaging.specifiers.UnparsedVersion", "xref": null, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.Requirement.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.Requirement.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "pkg_resources.Requirement.parse", "asynchronous": false, "params": [{"name": "s", "type": {"name": "str | Iterable[str]", "xref": null, "params": null}, "default": null}], "returns": {"name": "Requirement", "xref": {"fqname": "pkg_resources.Requirement", "project": null}, "params": null}, "documentation": []}], "class_variables": [{"name": "pkg_resources.Requirement.extras", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": ["type: ignore[assignment]"]}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "pkg_resources.PkgResourcesDeprecationWarning", "bases": ["Warning"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Base class for warning about deprecations in `pkg_resources`\n\nThis class is not derived from `DeprecationWarning`, and as such is\nvisible by default.\n"]}], "exports": [{"name": "pkg_resources.add_activation_listener", "xref": {"fqname": "pkg_resources.add_activation_listener", "project": null}}, {"name": "pkg_resources.AvailableDistributions", "xref": {"fqname": "pkg_resources.AvailableDistributions", "project": null}}, {"name": "pkg_resources.BINARY_DIST", "xref": {"fqname": "pkg_resources.BINARY_DIST", "project": null}}, {"name": "pkg_resources.CHECKOUT_DIST", "xref": {"fqname": "pkg_resources.CHECKOUT_DIST", "project": null}}, {"name": "pkg_resources.cleanup_resources", "xref": {"fqname": "pkg_resources.cleanup_resources", "project": null}}, {"name": "pkg_resources.compatible_platforms", "xref": {"fqname": "pkg_resources.compatible_platforms", "project": null}}, {"name": "pkg_resources.declare_namespace", "xref": {"fqname": "pkg_resources.declare_namespace", "project": null}}, {"name": "pkg_resources.DefaultProvider", "xref": {"fqname": "pkg_resources.DefaultProvider", "project": null}}, {"name": "pkg_resources.DEVELOP_DIST", "xref": {"fqname": "pkg_resources.DEVELOP_DIST", "project": null}}, {"name": "pkg_resources.Distribution", "xref": {"fqname": "pkg_resources.Distribution", "project": null}}, {"name": "pkg_resources.DistributionNotFound", "xref": {"fqname": "pkg_resources.DistributionNotFound", "project": null}}, {"name": "pkg_resources.EGG_DIST", "xref": {"fqname": "pkg_resources.EGG_DIST", "project": null}}, {"name": "pkg_resources.EggMetadata", "xref": {"fqname": "pkg_resources.EggMetadata", "project": null}}, {"name": "pkg_resources.EggProvider", "xref": {"fqname": "pkg_resources.EggProvider", "project": null}}, {"name": "pkg_resources.empty_provider", "xref": {"fqname": "pkg_resources.empty_provider", "project": null}}, {"name": "pkg_resources.EmptyProvider", "xref": {"fqname": "pkg_resources.EmptyProvider", "project": null}}, {"name": "pkg_resources.ensure_directory", "xref": {"fqname": "pkg_resources.ensure_directory", "project": null}}, {"name": "pkg_resources.EntryPoint", "xref": {"fqname": "pkg_resources.EntryPoint", "project": null}}, {"name": "pkg_resources.Environment", "xref": {"fqname": "pkg_resources.Environment", "project": null}}, {"name": "pkg_resources.evaluate_marker", "xref": {"fqname": "pkg_resources.evaluate_marker", "project": null}}, {"name": "pkg_resources.ExtractionError", "xref": {"fqname": "pkg_resources.ExtractionError", "project": null}}, {"name": "pkg_resources.FileMetadata", "xref": {"fqname": "pkg_resources.FileMetadata", "project": null}}, {"name": "pkg_resources.find_distributions", "xref": {"fqname": "pkg_resources.find_distributions", "project": null}}, {"name": "pkg_resources.fixup_namespace_packages", "xref": {"fqname": "pkg_resources.fixup_namespace_packages", "project": null}}, {"name": "pkg_resources.get_default_cache", "xref": {"fqname": "pkg_resources.get_default_cache", "project": null}}, {"name": "pkg_resources.get_distribution", "xref": {"fqname": "pkg_resources.get_distribution", "project": null}}, {"name": "pkg_resources.get_entry_info", "xref": {"fqname": "pkg_resources.get_entry_info", "project": null}}, {"name": "pkg_resources.get_entry_map", "xref": {"fqname": "pkg_resources.get_entry_map", "project": null}}, {"name": "pkg_resources.get_importer", "xref": {"fqname": "pkgutil.get_importer", "project": null}}, {"name": "pkg_resources.get_platform", "xref": {"fqname": "pkg_resources.get_platform", "project": null}}, {"name": "pkg_resources.get_provider", "xref": {"fqname": "pkg_resources.get_provider", "project": null}}, {"name": "pkg_resources.IMetadataProvider", "xref": {"fqname": "pkg_resources.IMetadataProvider", "project": null}}, {"name": "pkg_resources.invalid_marker", "xref": {"fqname": "pkg_resources.invalid_marker", "project": null}}, {"name": "pkg_resources.IResourceProvider", "xref": {"fqname": "pkg_resources.IResourceProvider", "project": null}}, {"name": "pkg_resources.iter_entry_points", "xref": {"fqname": "pkg_resources.iter_entry_points", "project": null}}, {"name": "pkg_resources.load_entry_point", "xref": {"fqname": "pkg_resources.load_entry_point", "project": null}}, {"name": "pkg_resources.normalize_path", "xref": {"fqname": "pkg_resources.normalize_path", "project": null}}, {"name": "pkg_resources.NullProvider", "xref": {"fqname": "pkg_resources.NullProvider", "project": null}}, {"name": "pkg_resources.parse_requirements", "xref": {"fqname": "pkg_resources.parse_requirements", "project": null}}, {"name": "pkg_resources.parse_version", "xref": {"fqname": "pkg_resources.parse_version", "project": null}}, {"name": "pkg_resources.PathMetadata", "xref": {"fqname": "pkg_resources.PathMetadata", "project": null}}, {"name": "pkg_resources.PEP440Warning", "xref": {"fqname": "pkg_resources.PEP440Warning", "project": null}}, {"name": "pkg_resources.PkgResourcesDeprecationWarning", "xref": {"fqname": "pkg_resources.PkgResourcesDeprecationWarning", "project": null}}, {"name": "pkg_resources.register_finder", "xref": {"fqname": "pkg_resources.register_finder", "project": null}}, {"name": "pkg_resources.register_loader_type", "xref": {"fqname": "pkg_resources.register_loader_type", "project": null}}, {"name": "pkg_resources.register_namespace_handler", "xref": {"fqname": "pkg_resources.register_namespace_handler", "project": null}}, {"name": "pkg_resources.require", "xref": {"fqname": "pkg_resources.require", "project": null}}, {"name": "pkg_resources.Requirement", "xref": {"fqname": "pkg_resources.Requirement", "project": null}}, {"name": "pkg_resources.ResolutionError", "xref": {"fqname": "pkg_resources.ResolutionError", "project": null}}, {"name": "pkg_resources.resource_exists", "xref": {"fqname": "pkg_resources.resource_exists", "project": null}}, {"name": "pkg_resources.resource_filename", "xref": {"fqname": "pkg_resources.resource_filename", "project": null}}, {"name": "pkg_resources.resource_isdir", "xref": {"fqname": "pkg_resources.resource_isdir", "project": null}}, {"name": "pkg_resources.resource_listdir", "xref": {"fqname": "pkg_resources.resource_listdir", "project": null}}, {"name": "pkg_resources.resource_stream", "xref": {"fqname": "pkg_resources.resource_stream", "project": null}}, {"name": "pkg_resources.resource_string", "xref": {"fqname": "pkg_resources.resource_string", "project": null}}, {"name": "pkg_resources.ResourceManager", "xref": {"fqname": "pkg_resources.ResourceManager", "project": null}}, {"name": "pkg_resources.run_main", "xref": {"fqname": "pkg_resources.run_main", "project": null}}, {"name": "pkg_resources.run_script", "xref": {"fqname": "pkg_resources.run_script", "project": null}}, {"name": "pkg_resources.safe_extra", "xref": {"fqname": "pkg_resources.safe_extra", "project": null}}, {"name": "pkg_resources.safe_name", "xref": {"fqname": "pkg_resources.safe_name", "project": null}}, {"name": "pkg_resources.safe_version", "xref": {"fqname": "pkg_resources.safe_version", "project": null}}, {"name": "pkg_resources.set_extraction_path", "xref": {"fqname": "pkg_resources.set_extraction_path", "project": null}}, {"name": "pkg_resources.SOURCE_DIST", "xref": {"fqname": "pkg_resources.SOURCE_DIST", "project": null}}, {"name": "pkg_resources.split_sections", "xref": {"fqname": "pkg_resources.split_sections", "project": null}}, {"name": "pkg_resources.to_filename", "xref": {"fqname": "pkg_resources.to_filename", "project": null}}, {"name": "pkg_resources.UnknownExtra", "xref": {"fqname": "pkg_resources.UnknownExtra", "project": null}}, {"name": "pkg_resources.VersionConflict", "xref": {"fqname": "pkg_resources.VersionConflict", "project": null}}, {"name": "pkg_resources.working_set", "xref": {"fqname": "pkg_resources.working_set", "project": null}}, {"name": "pkg_resources.WorkingSet", "xref": {"fqname": "pkg_resources.WorkingSet", "project": null}}, {"name": "pkg_resources.yield_lines", "xref": {"fqname": "jaraco.text.yield_lines", "project": null}}, {"name": "pkg_resources.ZipProvider", "xref": {"fqname": "pkg_resources.ZipProvider", "project": null}}]}, {"name": "setuptools.tests.config.downloads.preload", "documentation": ["This file can be used to preload files needed for testing.\n\nFor example you can use:\n\n```\ncd setuptools/tests/config\npython -m downloads.preload setupcfg_examples.txt\n```\n\nto make sure the `setup.cfg` examples are downloaded before starting the tests.\n"], "functions": [], "variables": [{"name": "setuptools.tests.config.downloads.preload.urls", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.tests.test_build", "documentation": [], "functions": [{"name": "setuptools.tests.test_build.test_distribution_gives_setuptools_build_obj", "asynchronous": false, "params": [{"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": ["Check that the setuptools Distribution uses the\nsetuptools specific build object."]}], "variables": [], "classes": [{"name": "setuptools.tests.test_build.Subcommand", "bases": ["Command"], "methods": [{"name": "setuptools.tests.test_build.Subcommand.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build.Subcommand.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build.Subcommand.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Dummy command to be used in tests"]}], "exports": []}, {"name": "setuptools.tests.config.downloads", "documentation": [], "functions": [{"name": "setuptools.tests.config.downloads.output_file", "asynchronous": false, "params": [{"name": "url", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "download_dir", "type": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["----------------------------------------------------------------------", "Please update ./preload.py accordingly when modifying this file", "----------------------------------------------------------------------"]}, {"name": "setuptools.tests.config.downloads.retrieve_file", "asynchronous": false, "params": [{"name": "url", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "download_dir", "type": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "wait", "type": {"name": "float", "xref": {"fqname": "functions.float", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.tests.config.downloads.urls_from_file", "asynchronous": false, "params": [{"name": "list_file", "type": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["``list_file`` should be a text file where each line corresponds to a URL to\ndownload."]}, {"name": "setuptools.tests.config.downloads.download", "asynchronous": false, "params": [{"name": "url", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "dest", "type": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.tests.config.downloads.NAME_REMOVE", "type": null, "documentation": []}, {"name": "setuptools.tests.config.downloads.DOWNLOAD_DIR", "type": null, "documentation": []}], "classes": [], "exports": [{"name": "setuptools.tests.config.downloads.DOWNLOAD_DIR", "xref": {"fqname": "setuptools.tests.config.downloads.DOWNLOAD_DIR", "project": null}}, {"name": "setuptools.tests.config.downloads.output_file", "xref": {"fqname": "setuptools.tests.config.downloads.output_file", "project": null}}, {"name": "setuptools.tests.config.downloads.retrieve_file", "xref": {"fqname": "setuptools.tests.config.downloads.retrieve_file", "project": null}}, {"name": "setuptools.tests.config.downloads.urls_from_file", "xref": {"fqname": "setuptools.tests.config.downloads.urls_from_file", "project": null}}]}, {"name": "setuptools.tests.mod_with_constant", "documentation": [], "functions": [], "variables": [{"name": "setuptools.tests.mod_with_constant.value", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.tests.test_depends", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools.tests.test_depends.TestGetModuleConstant", "bases": [], "methods": [{"name": "setuptools.tests.test_depends.TestGetModuleConstant.test_basic", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Invoke get_module_constant on a module in\nthe test package."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.config.test_pyprojecttoml", "documentation": [], "functions": [{"name": "setuptools.tests.config.test_pyprojecttoml.create_example", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}, {"name": "pkg_root", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_pyprojecttoml.verify_example", "asynchronous": false, "params": [{"name": "config", "type": null, "default": null}, {"name": "path", "type": null, "default": null}, {"name": "pkg_root", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_pyprojecttoml.test_read_configuration", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_pyprojecttoml.test_discovered_package_dir_with_attr_directive_in_config", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "pkg_root", "type": null, "default": null}, {"name": "opts", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_pyprojecttoml.test_ignore_unrelated_config", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "example", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_pyprojecttoml.test_invalid_example", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "example", "type": null, "default": null}, {"name": "error_msg", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_pyprojecttoml.test_empty", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "config", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_pyprojecttoml.test_include_package_data_by_default", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "config", "type": null, "default": null}], "returns": null, "documentation": ["Builds with `pyproject.toml` should consider `include-package-data=True` as\ndefault.\n"]}, {"name": "setuptools.tests.config.test_pyprojecttoml.test_include_package_data_in_setuppy", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Builds with `pyproject.toml` should consider `include_package_data` set in\n`setup.py`.\n\nSee <https://github.com/pypa/setuptools/issues/3197#issuecomment-1079023889>\n"]}, {"name": "setuptools.tests.config.test_pyprojecttoml.test_warn_tools_typo", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Test that the common `tools.setuptools` typo in `pyproject.toml` issues a warning\n\nSee <https://github.com/pypa/setuptools/issues/4150>\n"]}], "variables": [{"name": "setuptools.tests.config.test_pyprojecttoml.EXAMPLE", "type": null, "documentation": []}, {"name": "setuptools.tests.config.test_pyprojecttoml.ENTRY_POINTS", "type": null, "documentation": []}], "classes": [{"name": "setuptools.tests.config.test_pyprojecttoml.TestEntryPoints", "bases": [], "methods": [{"name": "setuptools.tests.config.test_pyprojecttoml.TestEntryPoints.write_entry_points", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_pyprojecttoml.TestEntryPoints.pyproject", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dynamic", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_pyprojecttoml.TestEntryPoints.test_all_listed_in_dynamic", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_pyprojecttoml.TestEntryPoints.test_scripts_not_listed_in_dynamic", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "missing_dynamic", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.config.test_pyprojecttoml.TestClassifiers", "bases": [], "methods": [{"name": "setuptools.tests.config.test_pyprojecttoml.TestClassifiers.test_dynamic", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_pyprojecttoml.TestClassifiers.test_dynamic_without_config", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_pyprojecttoml.TestClassifiers.test_dynamic_readme_from_setup_script_args", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.config.test_pyprojecttoml.TestClassifiers.test_dynamic_without_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.test_bdist_egg", "documentation": ["develop tests"], "functions": [{"name": "setuptools.tests.test_bdist_egg.setup_context", "asynchronous": false, "params": [{"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.tests.test_bdist_egg.SETUP_PY", "type": null, "documentation": []}], "classes": [{"name": "setuptools.tests.test_bdist_egg.Test", "bases": [], "methods": [{"name": "setuptools.tests.test_bdist_egg.Test.test_bdist_egg", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_egg.Test.test_exclude_source_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.test_windows_wrappers", "documentation": ["Python Script Wrapper for Windows\n=================================\n\nsetuptools includes wrappers for Python scripts that allows them to be\nexecuted like regular windows programs.  There are 2 wrappers, one\nfor command-line programs, cli.exe, and one for graphical programs,\ngui.exe.  These programs are almost identical, function pretty much\nthe same way, and are generated from the same source file.  The\nwrapper programs are used by copying them to the directory containing\nthe script they are to wrap and with the same name as the script they\nare to wrap."], "functions": [{"name": "setuptools.tests.test_windows_wrappers.win_launcher_exe", "asynchronous": false, "params": [{"name": "prefix", "type": null, "default": null}], "returns": null, "documentation": ["A simple routine to select launcher script based on platform."]}], "variables": [{"name": "setuptools.tests.test_windows_wrappers.pytestmark", "type": null, "documentation": []}], "classes": [{"name": "setuptools.tests.test_windows_wrappers.WrapperTester", "bases": [], "methods": [{"name": "setuptools.tests.test_windows_wrappers.WrapperTester.prep_script", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "template", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_windows_wrappers.WrapperTester.create_script", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Create a simple script, foo-script.py\n\nNote that the script starts with a Unix-style '#!' line saying which\nPython executable to run.  The wrapper will use this line to find the\ncorrect Python executable."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_windows_wrappers.TestCLI", "bases": ["WrapperTester"], "methods": [{"name": "setuptools.tests.test_windows_wrappers.TestCLI.test_basic", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["When the copy of cli.exe, foo.exe in this example, runs, it examines\nthe path name it was run with and computes a Python script path name\nby removing the '.exe' suffix and adding the '-script.py' suffix. (For\nGUI programs, the suffix '-script.pyw' is added.)  This is why we\nnamed out script the way we did.  Now we can run out script by running\nthe wrapper:\n\nThis example was a little pathological in that it exercised windows\n(MS C runtime) quoting rules:\n\n- Strings containing spaces are surrounded by double quotes.\n\n- Double quotes in strings need to be escaped by preceding them with\n  back slashes.\n\n- One or more backslashes preceding double quotes need to be escaped\n  by preceding each of them with back slashes."]}, {"name": "setuptools.tests.test_windows_wrappers.TestCLI.test_symlink", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that symlink for the foo.exe is working correctly."]}, {"name": "setuptools.tests.test_windows_wrappers.TestCLI.test_with_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Specifying Python Command-line Options\n--------------------------------------\n\nYou can specify a single argument on the '#!' line.  This can be used\nto specify Python options like -O, to run in optimized mode or -i\nto start the interactive interpreter.  You can combine multiple\noptions as usual. For example, to run in optimized mode and\nenter the interpreter after running the script, you could use -Oi:"]}], "class_variables": [{"name": "setuptools.tests.test_windows_wrappers.TestCLI.script_name", "type": null, "documentation": []}, {"name": "setuptools.tests.test_windows_wrappers.TestCLI.wrapper_name", "type": null, "documentation": []}, {"name": "setuptools.tests.test_windows_wrappers.TestCLI.wrapper_source", "type": null, "documentation": []}, {"name": "setuptools.tests.test_windows_wrappers.TestCLI.script_tmpl", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_windows_wrappers.TestGUI", "bases": ["WrapperTester"], "methods": [{"name": "setuptools.tests.test_windows_wrappers.TestGUI.test_basic", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Test the GUI version with the simple script, bar-script.py"]}], "class_variables": [{"name": "setuptools.tests.test_windows_wrappers.TestGUI.script_name", "type": null, "documentation": []}, {"name": "setuptools.tests.test_windows_wrappers.TestGUI.wrapper_source", "type": null, "documentation": []}, {"name": "setuptools.tests.test_windows_wrappers.TestGUI.wrapper_name", "type": null, "documentation": []}, {"name": "setuptools.tests.test_windows_wrappers.TestGUI.script_tmpl", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Testing the GUI Version\n-----------------------"]}], "exports": []}, {"name": "setuptools.tests.test_setopt", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools.tests.test_setopt.TestEdit", "bases": [], "methods": [{"name": "setuptools.tests.test_setopt.TestEdit.parse_config", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setopt.TestEdit.write_text", "asynchronous": false, "params": [{"name": "file", "type": null, "default": null}, {"name": "content", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setopt.TestEdit.test_utf8_encoding_retained", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["When editing a file, non-ASCII characters encoded in\nUTF-8 should be retained."]}, {"name": "setuptools.tests.test_setopt.TestEdit.test_case_retained", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["When editing a file, case of keys should be retained."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.fixtures", "documentation": [], "functions": [{"name": "setuptools.tests.fixtures.user_override", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": ["Override site.USER_BASE and site.USER_SITE with temporary directories in\na context."]}, {"name": "setuptools.tests.fixtures.tmpdir_cwd", "asynchronous": false, "params": [{"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.fixtures.workaround_xdist_376", "asynchronous": false, "params": [{"name": "request", "type": null, "default": null}], "returns": null, "documentation": ["Workaround pytest-dev/pytest-xdist#376\n\n`pytest-xdist` tends to inject '' into `sys.path`,\nwhich may break certain isolation expectations.\nRemove the entry so the import\nmachinery behaves the same irrespective of xdist.\n"]}, {"name": "setuptools.tests.fixtures.sample_project", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Clone the 'sampleproject' and return a path to it."]}, {"name": "setuptools.tests.fixtures._build_distributions", "asynchronous": false, "params": [{"name": "tmp_path_factory", "type": null, "default": null}, {"name": "request", "type": null, "default": null}], "returns": null, "documentation": ["sdist and wheel artifacts should be stable across a round of tests", "so we can build them once per session and use the files as \"readonly\"", "In the case of setuptools, building the wheel without sdist may cause", "it to contain the `build` directory, and therefore create situations with", "`setuptools/build/lib/build/lib/...`. To avoid that, build both artifacts at once."]}, {"name": "setuptools.tests.fixtures.setuptools_sdist", "asynchronous": false, "params": [{"name": "tmp_path_factory", "type": null, "default": null}, {"name": "request", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.fixtures.setuptools_wheel", "asynchronous": false, "params": [{"name": "tmp_path_factory", "type": null, "default": null}, {"name": "request", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.fixtures.venv", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "setuptools_wheel", "type": null, "default": null}], "returns": null, "documentation": ["Virtual env with the version of setuptools under test installed"]}, {"name": "setuptools.tests.fixtures.venv_without_setuptools", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Virtual env without any version of setuptools installed"]}, {"name": "setuptools.tests.fixtures.bare_venv", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Virtual env without any common packages installed"]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.tests.test_namespaces", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools.tests.test_namespaces.TestNamespaces", "bases": [], "methods": [{"name": "setuptools.tests.test_namespaces.TestNamespaces.test_mixed_site_and_non_site", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Installing two packages sharing the same namespace, one installed\nto a site dir and the other installed just to a path on PYTHONPATH\nshould leave the namespace in tact and both packages reachable by\nimport."]}, {"name": "setuptools.tests.test_namespaces.TestNamespaces.test_pkg_resources_import", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that a namespace package doesn't break on import\nof pkg_resources."]}, {"name": "setuptools.tests.test_namespaces.TestNamespaces.test_namespace_package_installed_and_cwd", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Installing a namespace packages but also having it in the current\nworking directory, only one version should take precedence."]}, {"name": "setuptools.tests.test_namespaces.TestNamespaces.test_packages_in_the_same_namespace_installed_and_cwd", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Installing one namespace package and also have another in the same\nnamespace in the current working directory, both of them must be\nimportable."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.test_virtualenv", "documentation": [], "functions": [{"name": "setuptools.tests.test_virtualenv.pytest_virtualenv_works", "asynchronous": false, "params": [{"name": "venv", "type": null, "default": null}], "returns": null, "documentation": ["pytest_virtualenv may not work. if it doesn't, skip these\ntests. See #1284."]}, {"name": "setuptools.tests.test_virtualenv.test_clean_env_install", "asynchronous": false, "params": [{"name": "venv_without_setuptools", "type": null, "default": null}, {"name": "setuptools_wheel", "type": null, "default": null}], "returns": null, "documentation": ["Check setuptools can be installed in a clean environment."]}, {"name": "setuptools.tests.test_virtualenv.access_pypi", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_virtualenv.test_pip_upgrade_from_source", "asynchronous": false, "params": [{"name": "pip_version", "type": null, "default": null}, {"name": "venv_without_setuptools", "type": null, "default": null}, {"name": "setuptools_wheel", "type": null, "default": null}, {"name": "setuptools_sdist", "type": null, "default": null}], "returns": null, "documentation": ["Check pip can upgrade setuptools from source."]}, {"name": "setuptools.tests.test_virtualenv.test_no_missing_dependencies", "asynchronous": false, "params": [{"name": "bare_venv", "type": null, "default": null}, {"name": "request", "type": null, "default": null}], "returns": null, "documentation": ["Quick and dirty test to ensure all external dependencies are vendored."]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.tests.integration.test_pip_install_sdist", "documentation": ["Integration tests for setuptools that focus on building packages via pip.\n\nThe idea behind these tests is not to exhaustively check all the possible\ncombinations of packages, operating systems, supporting libraries, etc, but\nrather check a limited number of popular packages and how they interact with\nthe exposed public API. This way if any change in API is introduced, we hope to\nidentify backward compatibility problems before publishing a release.\n\nThe number of tested packages is purposefully kept small, to minimise duration\nand the associated maintenance cost (changes in the way these packages define\ntheir build process may require changes in the tests).", "https://github.com/python/mypy/issues/16936", "mypy: disable-error-code=\"has-type\""], "functions": [{"name": "setuptools.tests.integration.test_pip_install_sdist.venv_python", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["The downside of `--no-build-isolation` is that pip will not download build", "dependencies. The test script will have to also handle that."]}, {"name": "setuptools.tests.integration.test_pip_install_sdist._prepare", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "venv_python", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.integration.test_pip_install_sdist.test_install_sdist", "asynchronous": false, "params": [{"name": "package", "type": null, "default": null}, {"name": "version", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "venv_python", "type": null, "default": null}, {"name": "setuptools_wheel", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.integration.test_pip_install_sdist.retrieve_sdist", "asynchronous": false, "params": [{"name": "package", "type": null, "default": null}, {"name": "version", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Either use cached sdist file or download it from PyPI", "---- Helper Functions ----"]}, {"name": "setuptools.tests.integration.test_pip_install_sdist.retrieve_pypi_sdist_metadata", "asynchronous": false, "params": [{"name": "package", "type": null, "default": null}, {"name": "version", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.integration.test_pip_install_sdist.download", "asynchronous": false, "params": [{"name": "url", "type": null, "default": null}, {"name": "dest", "type": null, "default": null}, {"name": "md5_digest", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.integration.test_pip_install_sdist.build_deps", "asynchronous": false, "params": [{"name": "package", "type": null, "default": null}, {"name": "sdist_file", "type": null, "default": null}], "returns": null, "documentation": ["Find out what are the build dependencies for a package.\n\n\"Manually\" install them, since pip will not install build\ndeps with `--no-build-isolation`."]}, {"name": "setuptools.tests.integration.test_pip_install_sdist._read_pyproject", "asynchronous": false, "params": [{"name": "archive", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.tests.integration.test_pip_install_sdist.pytestmark", "type": null, "documentation": []}, {"name": "setuptools.tests.integration.test_pip_install_sdist.EXAMPLES", "type": null, "documentation": []}, {"name": "setuptools.tests.integration.test_pip_install_sdist.EXTRA_BUILD_DEPS", "type": null, "documentation": []}, {"name": "setuptools.tests.integration.test_pip_install_sdist.EXTRA_ENV_VARS", "type": null, "documentation": []}, {"name": "setuptools.tests.integration.test_pip_install_sdist.IMPORT_NAME", "type": null, "documentation": []}, {"name": "setuptools.tests.integration.test_pip_install_sdist.VIRTUALENV", "type": null, "documentation": []}, {"name": "setuptools.tests.integration.test_pip_install_sdist.INSTALL_OPTIONS", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.tests.integration", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.tests.integration.helpers", "documentation": ["Reusable functions and classes for different types of integration tests.\n\nFor example `Archive` can be used to check the contents of distribution built\nwith setuptools, and `run` will always try to be as verbose as possible to\nfacilitate debugging.\n"], "functions": [{"name": "setuptools.tests.integration.helpers.run", "asynchronous": false, "params": [{"name": "cmd", "type": null, "default": null}, {"name": "env", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.tests.integration.helpers.get_sdist_members", "asynchronous": false, "params": [{"name": "sdist_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.integration.helpers.get_wheel_members", "asynchronous": false, "params": [{"name": "wheel_path", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools.tests.integration.helpers.Archive", "bases": [], "methods": [{"name": "setuptools.tests.integration.helpers.Archive.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.integration.helpers.Archive.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.integration.helpers.Archive.get_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "zip_or_tar_info", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.integration.helpers.Archive.get_content", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "zip_or_tar_info", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Compatibility layer for ZipFile/Info and TarFile/Info"]}], "exports": []}, {"name": "setuptools.tests.test_archive_util", "documentation": [], "functions": [{"name": "setuptools.tests.test_archive_util.tarfile_with_unicode", "asynchronous": false, "params": [{"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Create a tarfile containing only a file whose name is\na zero byte file called testima\u0308ge.png."]}, {"name": "setuptools.tests.test_archive_util.test_unicode_files", "asynchronous": false, "params": [{"name": "tarfile_with_unicode", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.tests.script-with-bom", "documentation": [], "functions": [], "variables": [{"name": "setuptools.tests.script-with-bom.result", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.tests.test_unicode_utils", "documentation": [], "functions": [{"name": "setuptools.tests.test_unicode_utils.test_filesys_decode_fs_encoding_is_None", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": ["Test filesys_decode does not raise TypeError when\ngetfilesystemencoding returns None."]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.tests.test_sdist", "documentation": ["sdist tests"], "functions": [{"name": "setuptools.tests.test_sdist.quiet", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.posix", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["Convert to POSIX path"]}, {"name": "setuptools.tests.test_sdist.decompose", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["HFS Plus uses decomposed UTF-8"]}, {"name": "setuptools.tests.test_sdist.read_all_bytes", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.latin1_fail", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.touch", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.symlink_or_skip_test", "asynchronous": false, "params": [{"name": "src", "type": null, "default": null}, {"name": "dst", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.test_default_revctrl", "asynchronous": false, "params": [], "returns": null, "documentation": ["When _default_revctrl was removed from the `setuptools.command.sdist`\nmodule in 10.0, it broke some systems which keep an old install of\nsetuptools (Distribute) around. Those old versions require that the\nsetuptools package continue to implement that interface, so this\nfunction provides that interface, stubbed. See #320 for details.\n\nThis interface must be maintained until Ubuntu 12.04 is no longer\nsupported (by Setuptools)."]}, {"name": "setuptools.tests.test_sdist.run_sdist", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}, {"name": "project", "type": null, "default": null}], "returns": null, "documentation": ["Given a project directory, run the sdist and return its contents"]}, {"name": "setuptools.tests.test_sdist.test_sanity_check_setuptools_own_sdist", "asynchronous": false, "params": [{"name": "setuptools_sdist", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.tests.test_sdist.SETUP_ATTRS", "type": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.SETUP_PY", "type": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.EXTENSION", "type": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.EXTENSION_SOURCES", "type": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.fail_on_latin1_encoded_filenames", "type": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.skip_under_xdist", "type": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.skip_under_stdlib_distutils", "type": null, "documentation": []}], "classes": [{"name": "setuptools.tests.test_sdist.TestSdistTest", "bases": [], "methods": [{"name": "setuptools.tests.test_sdist.TestSdistTest.source_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestSdistTest.assert_package_data_in_manifest", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "cmd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestSdistTest.setup_with_extension", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_package_data_in_sdist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Regression test for pull request #4: ensures that files listed in\npackage_data are included in the manifest even if they're not added to\nversion control."]}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_package_data_and_include_package_data_in_sdist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Ensure package_data and include_package_data work\ntogether."]}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_extension_sources_in_sdist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that the files listed in Extension.sources and Extension.depends\nare automatically included in the manifest."]}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_missing_extension_sources", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Similar to test_extension_sources_in_sdist but the referenced files don't exist.\nMissing files should not be included in distribution (with no error raised)."]}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_symlinked_extension_sources", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Similar to test_extension_sources_in_sdist but the referenced files are\ninstead symbolic links to project-local files. Referenced file paths\nshould be included. Symlink targets themselves should NOT be included."]}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_invalid_extension_depends", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "reason", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": ["Due to backwards compatibility reasons, `Extension.depends` should accept\ninvalid/weird paths, but then ignore them when building a sdist.\n\nThis test verifies that the source distribution is still built\nsuccessfully with such paths, but that instead of adding these paths to\nthe manifest, we emit an informational message, notifying the user that\nthe invalid path won't be automatically included."]}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_custom_build_py", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Ensure projects defining custom build_py don't break\nwhen creating sdists (issue #2849)"]}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_setup_py_exists", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_setup_py_missing", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_setup_py_excluded", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_defaults_case_sensitivity", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "source_dir", "type": null, "default": null}], "returns": null, "documentation": ["Make sure default files (README.*, etc.) are added in a case-sensitive\nway to avoid problems with packages built on Windows."]}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_exclude_dev_only_cache_folders", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "source_dir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_manifest_is_written_with_utf8_encoding", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_write_manifest_allows_utf8_filenames", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_write_manifest_skips_non_utf8_filenames", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Files that cannot be encoded to UTF-8 (specifically, those that\nweren't originally successfully decoded and have surrogate\nescapes) should be omitted from the manifest.\nSee https://bitbucket.org/tarek/distribute/issue/303 for history."]}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_manifest_is_read_with_utf8_encoding", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_read_manifest_skips_non_utf8_filenames", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_sdist_with_utf8_encoded_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestSdistTest.make_strings", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "item", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_sdist_with_latin1_encoded_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_add_files_referenced_by_config_directives", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "source_dir", "type": null, "default": null}, {"name": "config", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_pyproject_toml_in_sdist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "source_dir", "type": null, "default": null}], "returns": null, "documentation": ["Check if pyproject.toml is included in source distribution if present"]}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_pyproject_toml_excluded", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "source_dir", "type": null, "default": null}], "returns": null, "documentation": ["Check that pyproject.toml can excluded even if present"]}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_build_subcommand_source_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "source_dir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestSdistTest.test_build_base_pathlib", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "source_dir", "type": null, "default": null}], "returns": null, "documentation": ["Ensure if build_base is a pathlib.Path, the build still succeeds."]}], "class_variables": [{"name": "setuptools.tests.test_sdist.TestSdistTest._INVALID_PATHS", "type": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestSdistTest._EXAMPLE_DIRECTIVES", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_sdist.TestRegressions", "bases": [], "methods": [{"name": "setuptools.tests.test_sdist.TestRegressions.files_for_symlink_in_extension_depends", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "dep_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestRegressions.test_symlink_in_extension_depends", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "dep_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestRegressions.files_for_external_path_in_extension_depends", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "dep_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sdist.TestRegressions.test_external_path_in_extension_depends", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "dep_path", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Can be removed/changed if the project decides to change how it handles symlinks\nor external files."]}], "exports": []}, {"name": "setuptools.tests.test_find_py_modules", "documentation": ["Tests for automatic discovery of modules"], "functions": [], "variables": [], "classes": [{"name": "setuptools.tests.test_find_py_modules.TestModuleFinder", "bases": [], "methods": [{"name": "setuptools.tests.test_find_py_modules.TestModuleFinder.find", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_find_py_modules.TestModuleFinder.test_finder", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "example", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_find_py_modules.TestModuleFinder.test_symlinked_packages_are_included", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.tests.test_find_py_modules.TestModuleFinder.EXAMPLES", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_find_py_modules.TestFlatLayoutModuleFinder", "bases": [], "methods": [{"name": "setuptools.tests.test_find_py_modules.TestFlatLayoutModuleFinder.find", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_find_py_modules.TestFlatLayoutModuleFinder.test_unwanted_files_not_included", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "example", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.tests.test_find_py_modules.TestFlatLayoutModuleFinder.EXAMPLES", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.test_extern", "documentation": [], "functions": [{"name": "setuptools.tests.test_extern.test_reimport_extern", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_extern.test_distribution_picklable", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.tests.test_warnings", "documentation": [], "functions": [{"name": "setuptools.tests.test_warnings.test_formatting", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}, {"name": "example_name", "type": null, "default": null}], "returns": null, "documentation": ["It should automatically handle indentation, interpolation and things like due date."]}, {"name": "setuptools.tests.test_warnings.test_due_date_enforcement", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_warnings._get_message", "asynchronous": false, "params": [{"name": "warn_info", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.tests.test_warnings._EXAMPLES", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.tests.compat", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.tests.compat.py39", "documentation": [], "functions": [], "variables": [{"name": "setuptools.tests.compat.py39.os_helper", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.tests.test_glob", "documentation": [], "functions": [{"name": "setuptools.tests.test_glob.test_glob", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}, {"name": "tree", "type": null, "default": null}, {"name": "pattern", "type": null, "default": null}, {"name": "matches", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.tests.test_editable_install", "documentation": [], "functions": [{"name": "setuptools.tests.test_editable_install.editable_opts", "asynchronous": false, "params": [{"name": "request", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.test_editable_with_pyproject", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "venv", "type": null, "default": null}, {"name": "files", "type": null, "default": null}, {"name": "editable_opts", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.test_editable_with_flat_layout", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "venv", "type": null, "default": null}, {"name": "editable_opts", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.test_editable_with_single_module", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "venv", "type": null, "default": null}, {"name": "editable_opts", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.test_editable_with_prefix", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "sample_project", "type": null, "default": null}, {"name": "editable_opts", "type": null, "default": null}], "returns": null, "documentation": ["Editable install to a prefix should be discoverable."]}, {"name": "setuptools.tests.test_editable_install.test_pkg_roots", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["This test focus in getting a particular implementation detail right.\nIf at some point in time the implementation is changed for something different,\nthis test can be modified or even excluded."]}, {"name": "setuptools.tests.test_editable_install.test_compat_install", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "venv", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.test_pbr_integration", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "venv", "type": null, "default": null}, {"name": "editable_opts", "type": null, "default": null}], "returns": null, "documentation": ["Ensure editable installs work with pbr, issue #3500"]}, {"name": "setuptools.tests.test_editable_install.test_debugging_tips", "asynchronous": false, "params": [{"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": ["Make sure to display useful debugging tips to the user."]}, {"name": "setuptools.tests.test_editable_install.test_encode_pth", "asynchronous": false, "params": [], "returns": null, "documentation": ["Ensure _encode_pth function does not produce encoding warnings"]}, {"name": "setuptools.tests.test_editable_install.install_project", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}, {"name": "venv", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "files", "type": null, "default": null}, {"name": "*opts", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install._addsitedirs", "asynchronous": false, "params": [{"name": "new_dirs", "type": null, "default": null}], "returns": null, "documentation": ["To use this function, it is necessary to insert new_dir in front of sys.path.\nThe Python process will try to import a `sitecustomize` module on startup.\nIf we manipulate sys.path/PYTHONPATH, we can force it to run our code,\nwhich invokes `addsitedir` and ensure `.pth` files are loaded.\n"]}, {"name": "setuptools.tests.test_editable_install.assert_path", "asynchronous": false, "params": [{"name": "pkg", "type": null, "default": null}, {"name": "expected", "type": null, "default": null}], "returns": null, "documentation": ["---- Assertion Helpers ----"]}, {"name": "setuptools.tests.test_editable_install.assert_link_to", "asynchronous": false, "params": [{"name": "file", "type": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "default": null}, {"name": "other", "type": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.tests.test_editable_install.comparable_path", "asynchronous": false, "params": [{"name": "str_with_path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "variables": [{"name": "setuptools.tests.test_editable_install.EXAMPLE", "type": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.SETUP_SCRIPT_STUB", "type": null, "documentation": []}], "classes": [{"name": "setuptools.tests.test_editable_install.TestLegacyNamespaces", "bases": [], "methods": [{"name": "setuptools.tests.test_editable_install.TestLegacyNamespaces.test_nspkg_file_is_unique", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": ["legacy => pkg_resources.declare_namespace(...) + setup(namespace_packages=...)"]}, {"name": "setuptools.tests.test_editable_install.TestLegacyNamespaces.test_namespace_package_importable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "venv", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "ns", "type": null, "default": null}, {"name": "impl", "type": null, "default": null}, {"name": "editable_opts", "type": null, "default": null}], "returns": null, "documentation": ["Installing two packages sharing the same namespace, one installed\nnaturally using pip or `--single-version-externally-managed`\nand the other installed in editable mode should leave the namespace\nintact and both packages reachable by import.\n(Ported from test_develop)."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestPep420Namespaces", "bases": [], "methods": [{"name": "setuptools.tests.test_editable_install.TestPep420Namespaces.test_namespace_package_importable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "venv", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "editable_opts", "type": null, "default": null}], "returns": null, "documentation": ["Installing two packages sharing the same namespace, one installed\nnormally using pip and the other installed in editable mode\nshould allow importing both packages."]}, {"name": "setuptools.tests.test_editable_install.TestPep420Namespaces.test_namespace_created_via_package_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "venv", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "editable_opts", "type": null, "default": null}], "returns": null, "documentation": ["Currently users can create a namespace by tweaking `package_dir`"]}, {"name": "setuptools.tests.test_editable_install.TestPep420Namespaces.test_namespace_accidental_config_in_lenient_mode", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "venv", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Sometimes users might specify an `include` pattern that ignores parent\npackages. In a normal installation this would ignore all modules inside the\nparent packages, and make them namespaces (reported in issue #3504),\nso the editable mode should preserve this behaviour.\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestFinderTemplate", "bases": [], "methods": [{"name": "setuptools.tests.test_editable_install.TestFinderTemplate.install_finder", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "finder", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestFinderTemplate.test_packages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestFinderTemplate.test_namespace", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestFinderTemplate.test_combine_namespaces", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestFinderTemplate.test_combine_namespaces_nested", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Users may attempt to combine namespace packages in a nested way via\n`package_dir` as shown in pypa/setuptools#4248.\n"]}, {"name": "setuptools.tests.test_editable_install.TestFinderTemplate.test_dynamic_path_computation", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestFinderTemplate.test_no_recursion", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestFinderTemplate.test_similar_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestFinderTemplate.test_case_sensitivity", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestFinderTemplate.test_namespace_case_sensitivity", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestFinderTemplate.test_intermediate_packages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["The finder should not import `fullname` if the intermediate segments\ndon't exist (see pypa/setuptools#4019).\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["This test focus in getting a particular implementation detail right.\nIf at some point in time the implementation is changed for something different,\nthis test can be modified or even excluded."]}, {"name": "setuptools.tests.test_editable_install.TestOverallBehaviour", "bases": [], "methods": [{"name": "setuptools.tests.test_editable_install.TestOverallBehaviour.test_editable_install", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "venv", "type": null, "default": null}, {"name": "layout", "type": null, "default": null}, {"name": "editable_opts", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.tests.test_editable_install.TestOverallBehaviour.PYPROJECT", "type": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestOverallBehaviour.FLAT_LAYOUT", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestOverallBehaviour.EXAMPLES", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestLinkTree", "bases": [], "methods": [{"name": "setuptools.tests.test_editable_install.TestLinkTree.test_generated_tree", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestLinkTree.test_strict_install", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "venv", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.tests.test_editable_install.TestLinkTree.FILES", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestCustomBuildPy", "bases": [], "methods": [{"name": "setuptools.tests.test_editable_install.TestCustomBuildPy.test_safeguarded_from_errors", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "venv", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that errors in custom build_py are reported as warnings"]}], "class_variables": [{"name": "setuptools.tests.test_editable_install.TestCustomBuildPy.FILES", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Issue #3501 indicates that some plugins/customizations might rely on:\n\n1. `build_py` not running\n2. `build_py` always copying files to `build_lib`\n\nDuring the transition period setuptools should prevent potential errors from\nhappening due to those assumptions.\n"]}, {"name": "setuptools.tests.test_editable_install.TestCustomBuildWheel", "bases": [], "methods": [{"name": "setuptools.tests.test_editable_install.TestCustomBuildWheel.install_custom_build_wheel", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestCustomBuildWheel.test_access_plat_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestCustomBuildExt", "bases": [], "methods": [{"name": "setuptools.tests.test_editable_install.TestCustomBuildExt.install_custom_build_ext_distutils", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_editable_install.TestCustomBuildExt.test_distutils_leave_inplace_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.test_core_metadata", "documentation": [], "functions": [{"name": "setuptools.tests.test_core_metadata.test_rfc822_unescape", "asynchronous": false, "params": [{"name": "content", "type": null, "default": null}, {"name": "result", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_core_metadata.__read_test_cases", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_core_metadata.test_read_metadata", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}, {"name": "attrs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_core_metadata.__maintainer_test_cases", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_core_metadata.test_maintainer_author", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}, {"name": "attrs", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_core_metadata._makedist", "asynchronous": false, "params": [{"name": "**attrs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_core_metadata._assert_roundtrip_message", "asynchronous": false, "params": [{"name": "metadata", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Emulate the way wheel.bdist_wheel parses and regenerates the message,\nthen ensures the metadata generated by setuptools is compatible."]}, {"name": "setuptools.tests.test_core_metadata._normalize_metadata", "asynchronous": false, "params": [{"name": "msg", "type": {"name": "Message", "xref": {"fqname": "email.message.Message", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Allow equivalent metadata to be compared directly"]}, {"name": "setuptools.tests.test_core_metadata._normalize_req", "asynchronous": false, "params": [{"name": "req", "type": {"name": "Requirement", "xref": {"fqname": "packaging.requirements.Requirement", "project": null}, "params": null}, "default": null}, {"name": "extras", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Allow equivalent requirement objects to be compared directly"]}, {"name": "setuptools.tests.test_core_metadata._get_pkginfo", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_core_metadata._get_metadata", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution | None", "xref": null, "params": null}, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_core_metadata._valid_metadata", "asynchronous": false, "params": [{"name": "text", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "variables": [{"name": "setuptools.tests.test_core_metadata.EXAMPLE_BASE_INFO", "type": null, "documentation": []}], "classes": [{"name": "setuptools.tests.test_core_metadata.TestParityWithMetadataFromPyPaWheel", "bases": [], "methods": [{"name": "setuptools.tests.test_core_metadata.TestParityWithMetadataFromPyPaWheel.base_example", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_core_metadata.TestParityWithMetadataFromPyPaWheel.test_requires_dist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_core_metadata.TestParityWithMetadataFromPyPaWheel.dist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "request", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Example of distribution with arbitrary configuration"]}, {"name": "setuptools.tests.test_core_metadata.TestParityWithMetadataFromPyPaWheel.test_equivalent_output", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}], "returns": null, "documentation": ["Ensure output from setuptools is equivalent to the one from `pypa/wheel`"]}], "class_variables": [{"name": "setuptools.tests.test_core_metadata.TestParityWithMetadataFromPyPaWheel.HERE", "type": null, "documentation": []}, {"name": "setuptools.tests.test_core_metadata.TestParityWithMetadataFromPyPaWheel.EXAMPLES_FILE", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_core_metadata.TestPEP643", "bases": [], "methods": [{"name": "setuptools.tests.test_core_metadata.TestPEP643.test_static_config_has_no_dynamic", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "file", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_core_metadata.TestPEP643.test_modified_fields_marked_as_dynamic", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "file", "type": null, "default": null}, {"name": "fields", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.tests.test_core_metadata.TestPEP643.STATIC_CONFIG", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.contexts", "documentation": [], "functions": [{"name": "setuptools.tests.contexts.tempdir", "asynchronous": false, "params": [{"name": "cd", "type": null, "default": "..."}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.contexts.environment", "asynchronous": false, "params": [{"name": "**replacements", "type": null, "default": null}], "returns": null, "documentation": ["In a context, patch the environment with replacements. Pass None values\nto clear the values."]}, {"name": "setuptools.tests.contexts.quiet", "asynchronous": false, "params": [], "returns": null, "documentation": ["Redirect stdout/stderr to StringIO objects to prevent console output from\ndistutils commands."]}, {"name": "setuptools.tests.contexts.save_user_site_setting", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.tests.contexts.save_pkg_resources_state", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.tests.contexts.suppress_exceptions", "asynchronous": false, "params": [{"name": "*excs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.contexts.multiproc", "asynchronous": false, "params": [{"name": "request", "type": null, "default": null}], "returns": null, "documentation": ["Return True if running under xdist and multiple\nworkers are used."]}, {"name": "setuptools.tests.contexts.session_locked_tmp_dir", "asynchronous": false, "params": [{"name": "request", "type": null, "default": null}, {"name": "tmp_path_factory", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Uses a file lock to guarantee only one worker can access a temp dir"]}, {"name": "setuptools.tests.contexts.save_paths", "asynchronous": false, "params": [], "returns": null, "documentation": ["Make sure `sys.path`, `sys.meta_path` and `sys.path_hooks` are preserved\n"]}, {"name": "setuptools.tests.contexts.save_sys_modules", "asynchronous": false, "params": [], "returns": null, "documentation": ["Make sure initial `sys.modules` is preserved\n"]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.tests.text", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools.tests.text.Filenames", "bases": [], "methods": [], "class_variables": [{"name": "setuptools.tests.text.Filenames.unicode", "type": null, "documentation": []}, {"name": "setuptools.tests.text.Filenames.latin_1", "type": null, "documentation": []}, {"name": "setuptools.tests.text.Filenames.utf_8", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.environment", "documentation": [], "functions": [{"name": "setuptools.tests.environment._which_dirs", "asynchronous": false, "params": [{"name": "cmd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.environment.run_setup_py", "asynchronous": false, "params": [{"name": "cmd", "type": null, "default": null}, {"name": "pypath", "type": null, "default": "..."}, {"name": "path", "type": null, "default": "..."}, {"name": "data_stream", "type": null, "default": "..."}, {"name": "env", "type": null, "default": "..."}], "returns": null, "documentation": ["Execution command for tests, separate from those used by the\ncode directly to prevent accidental behavior issues"]}], "variables": [], "classes": [{"name": "setuptools.tests.environment.VirtualEnv", "bases": ["jaraco.envs.VirtualEnv"], "methods": [{"name": "setuptools.tests.environment.VirtualEnv.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "cmd", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.tests.environment.VirtualEnv.name", "type": null, "documentation": []}, {"name": "setuptools.tests.environment.VirtualEnv.create_opts", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.test_shutil_wrapper", "documentation": [], "functions": [{"name": "setuptools.tests.test_shutil_wrapper.test_rmtree_readonly", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Verify onerr works as expected"]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.tests.test_bdist_wheel", "documentation": [], "functions": [{"name": "setuptools.tests.test_bdist_wheel.bdist_wheel_cmd", "asynchronous": false, "params": [{"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["Run command in the same process so that it is easier to collect coverage"]}, {"name": "setuptools.tests.test_bdist_wheel.mkexample", "asynchronous": false, "params": [{"name": "tmp_path_factory", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.wheel_paths", "asynchronous": false, "params": [{"name": "tmp_path_factory", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.dummy_dist", "asynchronous": false, "params": [{"name": "tmp_path_factory", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_no_scripts", "asynchronous": false, "params": [{"name": "wheel_paths", "type": null, "default": null}], "returns": null, "documentation": ["Make sure entry point scripts are not generated."]}, {"name": "setuptools.tests.test_bdist_wheel.test_unicode_record", "asynchronous": false, "params": [{"name": "wheel_paths", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_preserve_unicode_metadata", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_licenses_default", "asynchronous": false, "params": [{"name": "dummy_dist", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_licenses_deprecated", "asynchronous": false, "params": [{"name": "dummy_dist", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_licenses_override", "asynchronous": false, "params": [{"name": "dummy_dist", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "config_file", "type": null, "default": null}, {"name": "config", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_licenses_disabled", "asynchronous": false, "params": [{"name": "dummy_dist", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_build_number", "asynchronous": false, "params": [{"name": "dummy_dist", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_universal_deprecated", "asynchronous": false, "params": [{"name": "dummy_dist", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_limited_abi", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "tmp_path_factory", "type": null, "default": null}], "returns": null, "documentation": ["Test that building a binary wheel with the limited ABI works."]}, {"name": "setuptools.tests.test_bdist_wheel.test_build_from_readonly_tree", "asynchronous": false, "params": [{"name": "dummy_dist", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_compression", "asynchronous": false, "params": [{"name": "dummy_dist", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "option", "type": null, "default": null}, {"name": "compress_type", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_wheelfile_line_endings", "asynchronous": false, "params": [{"name": "wheel_paths", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_unix_epoch_timestamps", "asynchronous": false, "params": [{"name": "dummy_dist", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_get_abi_tag_windows", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_get_abi_tag_pypy_old", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_get_abi_tag_pypy_new", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_get_abi_tag_graalpy", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_get_abi_tag_fallback", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_platform_with_space", "asynchronous": false, "params": [{"name": "dummy_dist", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": ["Ensure building on platforms with a space in the name succeed."]}, {"name": "setuptools.tests.test_bdist_wheel.test_data_dir_with_tag_build", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Setuptools allow authors to set PEP 440's local version segments\nusing `egg_info.tag_build`. This should be reflected not only in the\n`.whl` file name, but also in the `.dist-info` and `.data` dirs.\nSee pypa/setuptools#3997.\n"]}, {"name": "setuptools.tests.test_bdist_wheel.test_platform_linux32", "asynchronous": false, "params": [{"name": "reported", "type": null, "default": null}, {"name": "expected", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_no_ctypes", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.test_dist_info_provided", "asynchronous": false, "params": [{"name": "dummy_dist", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.tests.test_bdist_wheel.DEFAULT_FILES", "type": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.DEFAULT_LICENSE_FILES", "type": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.OTHER_IGNORED_FILES", "type": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.SETUPPY_EXAMPLE", "type": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.EXAMPLES", "type": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.UTF8_PKG_INFO", "type": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.EXTENSION_EXAMPLE", "type": null, "documentation": []}, {"name": "setuptools.tests.test_bdist_wheel.EXTENSION_SETUPPY", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.tests", "documentation": [], "functions": [], "variables": [{"name": "setuptools.tests.locale_encoding", "type": null, "documentation": []}, {"name": "setuptools.tests.locale_encoding", "type": null, "documentation": []}, {"name": "setuptools.tests.is_ascii", "type": null, "documentation": []}, {"name": "setuptools.tests.fail_on_ascii", "type": null, "documentation": []}], "classes": [], "exports": [{"name": "setuptools.tests.fail_on_ascii", "xref": {"fqname": "setuptools.tests.fail_on_ascii", "project": null}}]}, {"name": "setuptools.tests.test_config_discovery", "documentation": [], "functions": [{"name": "setuptools.tests.test_config_discovery.test_compatible_with_numpy_configuration", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.test_name_discovery_doesnt_break_cli", "asynchronous": false, "params": [{"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.test_preserve_explicit_name_with_dynamic_version", "asynchronous": false, "params": [{"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": ["According to #3545 it seems that `name` discovery is running,\neven when the project already explicitly sets it.\nThis seems to be related to parsing of dynamic versions (via `attr` directive),\nwhich requires the auto-discovery of `package_dir`.\n"]}, {"name": "setuptools.tests.test_config_discovery._populate_project_dir", "asynchronous": false, "params": [{"name": "root", "type": null, "default": null}, {"name": "files", "type": null, "default": null}, {"name": "options", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery._write_setupcfg", "asynchronous": false, "params": [{"name": "root", "type": null, "default": null}, {"name": "options", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery._run_build", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}, {"name": "*flags", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery._get_dist", "asynchronous": false, "params": [{"name": "dist_path", "type": null, "default": null}, {"name": "attrs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery._run_sdist_programatically", "asynchronous": false, "params": [{"name": "dist_path", "type": null, "default": null}, {"name": "attrs", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools.tests.test_config_discovery.TestFindParentPackage", "bases": [], "methods": [{"name": "setuptools.tests.test_config_discovery.TestFindParentPackage.test_single_package", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestFindParentPackage.test_multiple_toplevel", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestDiscoverPackagesAndPyModules", "bases": [], "methods": [{"name": "setuptools.tests.test_config_discovery.TestDiscoverPackagesAndPyModules._get_info", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "circumstance", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestDiscoverPackagesAndPyModules.test_sdist_filelist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "circumstance", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestDiscoverPackagesAndPyModules.test_project", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "circumstance", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestDiscoverPackagesAndPyModules.test_purposefully_empty", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "config_file", "type": null, "default": null}, {"name": "param", "type": null, "default": null}, {"name": "circumstance", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestDiscoverPackagesAndPyModules.test_flat_layout_with_extra_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "extra_files", "type": null, "default": null}, {"name": "pkgs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestDiscoverPackagesAndPyModules.test_flat_layout_with_dangerous_extra_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "extra_files", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestDiscoverPackagesAndPyModules.test_flat_layout_with_single_module", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestDiscoverPackagesAndPyModules.test_flat_layout_with_multiple_modules", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestDiscoverPackagesAndPyModules.test_py_modules_when_wheel_dir_is_cwd", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Regression for issue 3692"]}], "class_variables": [{"name": "setuptools.tests.test_config_discovery.TestDiscoverPackagesAndPyModules.OPTIONS", "type": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestDiscoverPackagesAndPyModules.FILES", "type": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestDiscoverPackagesAndPyModules.PURPOSEFULLY_EMPY", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Make sure discovered values for `packages` and `py_modules` work\nsimilarly to explicit configuration for the simple scenarios.\n"]}, {"name": "setuptools.tests.test_config_discovery.TestNoConfig", "bases": [], "methods": [{"name": "setuptools.tests.test_config_discovery.TestNoConfig.test_discover_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "example", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestNoConfig.test_build_with_discovered_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.tests.test_config_discovery.TestNoConfig.DEFAULT_VERSION", "type": null, "documentation": ["Default version given by setuptools"]}, {"name": "setuptools.tests.test_config_discovery.TestNoConfig.EXAMPLES", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestWithAttrDirective", "bases": [], "methods": [{"name": "setuptools.tests.test_config_discovery.TestWithAttrDirective.test_setupcfg_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "folder", "type": null, "default": null}, {"name": "opts", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestWithAttrDirective.test_pyproject_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestWithCExtension", "bases": [], "methods": [{"name": "setuptools.tests.test_config_discovery.TestWithCExtension._simulate_package_with_extension", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestWithCExtension.test_skip_discovery_with_setupcfg_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that auto-discovery is not triggered when the project is based on\nC-extensions only, for backward compatibility."]}, {"name": "setuptools.tests.test_config_discovery.TestWithCExtension.test_dont_skip_discovery_with_pyproject_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["When opting-in to pyproject.toml metadata, auto-discovery will be active if\nthe package lists C-extensions, but does not configure py-modules or packages.\n\nThis way we ensure users with complex package layouts that would lead to the\ndiscovery of multiple top-level modules/packages see errors and are forced to\nexplicitly set `packages` or `py-modules`.\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestWithPackageData", "bases": [], "methods": [{"name": "setuptools.tests.test_config_discovery.TestWithPackageData._simulate_package_with_data_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "src_root", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestWithPackageData.test_include_package_data", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "src_root", "type": null, "default": null}, {"name": "files", "type": null, "default": null}], "returns": null, "documentation": ["Make sure auto-discovery does not affect package include_package_data.\nSee issue #3196."]}], "class_variables": [{"name": "setuptools.tests.test_config_discovery.TestWithPackageData.EXAMPLE_SETUPCFG", "type": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestWithPackageData.EXAMPLE_PYPROJECT", "type": null, "documentation": []}, {"name": "setuptools.tests.test_config_discovery.TestWithPackageData.PYPROJECT_PACKAGE_DIR", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.test_find_packages", "documentation": ["Tests for automatic package discovery"], "functions": [{"name": "setuptools.tests.test_find_packages.ensure_files", "asynchronous": false, "params": [{"name": "root_path", "type": null, "default": null}, {"name": "files", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools.tests.test_find_packages.TestFindPackages", "bases": [], "methods": [{"name": "setuptools.tests.test_find_packages.TestFindPackages.setup_method", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "method", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_find_packages.TestFindPackages.teardown_method", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "method", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_find_packages.TestFindPackages._make_pkg_structure", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Make basic package structure.\n\ndist/\n    docs/\n        conf.py\n    pkg/\n        __pycache__/\n        nspkg/\n            mod.py\n        subpkg/\n            assets/\n                asset\n            __init__.py\n    setup.py"]}, {"name": "setuptools.tests.test_find_packages.TestFindPackages._mkdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}, {"name": "parent_dir", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_find_packages.TestFindPackages._touch", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}, {"name": "dir_", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_find_packages.TestFindPackages.test_regular_package", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_find_packages.TestFindPackages.test_exclude", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_find_packages.TestFindPackages.test_exclude_recursive", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Excluding a parent package should not exclude child packages as well."]}, {"name": "setuptools.tests.test_find_packages.TestFindPackages.test_include_excludes_other", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["If include is specified, other packages should be excluded."]}, {"name": "setuptools.tests.test_find_packages.TestFindPackages.test_dir_with_dot_is_skipped", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_find_packages.TestFindPackages.test_dir_with_packages_in_subdir_is_excluded", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that a package in a non-package such as build/pkg/__init__.py\nis excluded."]}, {"name": "setuptools.tests.test_find_packages.TestFindPackages.test_symlinked_packages_are_included", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["A symbolically-linked directory should be treated like any other\ndirectory when matched as a package.\n\nCreate a link from lpkg -> pkg."]}, {"name": "setuptools.tests.test_find_packages.TestFindPackages._assert_packages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "actual", "type": null, "default": null}, {"name": "expected", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_find_packages.TestFindPackages.test_pep420_ns_package", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_find_packages.TestFindPackages.test_pep420_ns_package_no_includes", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_find_packages.TestFindPackages.test_pep420_ns_package_no_includes_or_excludes", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_find_packages.TestFindPackages.test_regular_package_with_nested_pep420_ns_packages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_find_packages.TestFindPackages.test_pep420_ns_package_no_non_package_dirs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_find_packages.TestFlatLayoutPackageFinder", "bases": [], "methods": [{"name": "setuptools.tests.test_find_packages.TestFlatLayoutPackageFinder.test_unwanted_directories_not_included", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "example", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.tests.test_find_packages.TestFlatLayoutPackageFinder.EXAMPLES", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.test_manifest", "documentation": ["sdist tests"], "functions": [{"name": "setuptools.tests.test_manifest.make_local_path", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}], "returns": null, "documentation": ["Converts '/' in a string to os.sep"]}, {"name": "setuptools.tests.test_manifest.quiet", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.touch", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.pattern_match", "asynchronous": false, "params": [{"name": "request", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.pattern_mismatch", "asynchronous": false, "params": [{"name": "request", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.test_translated_pattern_match", "asynchronous": false, "params": [{"name": "pattern_match", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.test_translated_pattern_mismatch", "asynchronous": false, "params": [{"name": "pattern_mismatch", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.tests.test_manifest.IS_PYPY", "type": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.SETUP_ATTRS", "type": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.SETUP_PY", "type": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.default_files", "type": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.translate_specs", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "documentation": ["A spec of inputs for 'translate_pattern' and matches and mismatches\nfor that input."]}, {"name": "setuptools.tests.test_manifest.match_params", "type": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.mismatch_params", "type": null, "documentation": []}], "classes": [{"name": "setuptools.tests.test_manifest.TempDirTestCase", "bases": [], "methods": [{"name": "setuptools.tests.test_manifest.TempDirTestCase.setup_method", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "method", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.TempDirTestCase.teardown_method", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "method", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_manifest.TestManifestTest", "bases": ["TempDirTestCase"], "methods": [{"name": "setuptools.tests.test_manifest.TestManifestTest.setup_method", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "method", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.TestManifestTest.make_manifest", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "contents", "type": null, "default": null}], "returns": null, "documentation": ["Write a MANIFEST.in."]}, {"name": "setuptools.tests.test_manifest.TestManifestTest.get_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Run egg_info and get all the files to include, as a set"]}, {"name": "setuptools.tests.test_manifest.TestManifestTest.test_no_manifest", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Check a missing MANIFEST.in includes only the standard files."]}, {"name": "setuptools.tests.test_manifest.TestManifestTest.test_empty_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Check an empty MANIFEST.in includes only the standard files."]}, {"name": "setuptools.tests.test_manifest.TestManifestTest.test_include", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Include extra rst files in the project root."]}, {"name": "setuptools.tests.test_manifest.TestManifestTest.test_exclude", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Include everything in app/ except the text files"]}, {"name": "setuptools.tests.test_manifest.TestManifestTest.test_include_multiple", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Include with multiple patterns."]}, {"name": "setuptools.tests.test_manifest.TestManifestTest.test_graft", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Include the whole app/static/ directory."]}, {"name": "setuptools.tests.test_manifest.TestManifestTest.test_graft_glob_syntax", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Include the whole app/static/ directory."]}, {"name": "setuptools.tests.test_manifest.TestManifestTest.test_graft_global_exclude", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Exclude all *.map files in the project."]}, {"name": "setuptools.tests.test_manifest.TestManifestTest.test_global_include", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Include all *.rst, *.js, and *.css files in the whole tree."]}, {"name": "setuptools.tests.test_manifest.TestManifestTest.test_graft_prune", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Include all files in app/, except for the whole app/static/ dir."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_manifest.TestFileListTest", "bases": ["TempDirTestCase"], "methods": [{"name": "setuptools.tests.test_manifest.TestFileListTest._compat_record_logs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": ["Account for stdlib compatibility"]}, {"name": "setuptools.tests.test_manifest.TestFileListTest.get_records", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}, {"name": "*levels", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.TestFileListTest.assertNoWarnings", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.TestFileListTest.assertWarnings", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.TestFileListTest.make_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "files", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.TestFileListTest.test_process_template_line", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.TestFileListTest.test_exclude_pattern", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.TestFileListTest.test_include_pattern", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.TestFileListTest.test_process_template_line_invalid", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.TestFileListTest.test_include", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.TestFileListTest.test_exclude", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.TestFileListTest.test_global_include", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.TestFileListTest.test_global_exclude", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.TestFileListTest.test_recursive_include", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.TestFileListTest.test_recursive_exclude", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.TestFileListTest.test_graft", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_manifest.TestFileListTest.test_prune", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A copy of the relevant bits of distutils/tests/test_filelist.py,\nto ensure setuptools' version of FileList keeps parity with distutils."]}], "exports": []}, {"name": "setuptools.tests.test_build_ext", "documentation": [], "functions": [{"name": "setuptools.tests.test_build_ext.test_build_ext_config_handling", "asynchronous": false, "params": [{"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.tests.test_build_ext.IS_PYPY", "type": null, "documentation": []}], "classes": [{"name": "setuptools.tests.test_build_ext.TestBuildExt", "bases": [], "methods": [{"name": "setuptools.tests.test_build_ext.TestBuildExt.test_get_ext_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Setuptools needs to give back the same\nresult as distutils, even if the fullname\nis not in ext_map."]}, {"name": "setuptools.tests.test_build_ext.TestBuildExt.test_abi3_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Filename needs to be loadable by several versions\nof Python 3 if 'is_abi3' is truthy on Extension()"]}, {"name": "setuptools.tests.test_build_ext.TestBuildExt.test_ext_suffix_override", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["SETUPTOOLS_EXT_SUFFIX variable always overrides\ndefault extension options."]}, {"name": "setuptools.tests.test_build_ext.TestBuildExt.dist_with_example", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_ext.TestBuildExt.test_get_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_ext.TestBuildExt.test_get_output_mapping_with_stub", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_build_ext.TestBuildExtInplace", "bases": [], "methods": [{"name": "setuptools.tests.test_build_ext.TestBuildExtInplace.get_build_ext_cmd", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "optional", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}, {"name": "**opts", "type": null, "default": null}], "returns": {"name": "build_ext", "xref": {"fqname": "setuptools.command.build_ext.build_ext", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.tests.test_build_ext.TestBuildExtInplace.get_log_messages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}, {"name": "capsys", "type": null, "default": null}], "returns": null, "documentation": ["Historically, distutils \"logged\" by printing to sys.std*.\nLater versions adopted the logging framework. Grab\nmessages regardless of how they were captured."]}, {"name": "setuptools.tests.test_build_ext.TestBuildExtInplace.test_optional", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}, {"name": "capsys", "type": null, "default": null}], "returns": null, "documentation": ["If optional extensions fail to build, setuptools should show the error\nin the logs but not fail to build"]}, {"name": "setuptools.tests.test_build_ext.TestBuildExtInplace.test_non_optional", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.test_setuptools", "documentation": ["Tests for the 'setuptools' package"], "functions": [{"name": "setuptools.tests.test_setuptools.isolated_dir", "asynchronous": false, "params": [{"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setuptools.makeSetup", "asynchronous": false, "params": [{"name": "**args", "type": null, "default": null}], "returns": null, "documentation": ["Return distribution from 'setup(**args)', without executing commands"]}, {"name": "setuptools.tests.test_setuptools.example_source", "asynchronous": false, "params": [{"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setuptools.test_findall", "asynchronous": false, "params": [{"name": "example_source", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setuptools.test_findall_curdir", "asynchronous": false, "params": [{"name": "example_source", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setuptools.can_symlink", "asynchronous": false, "params": [{"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Skip if cannot create a symbolic link"]}, {"name": "setuptools.tests.test_setuptools.test_findall_missing_symlink", "asynchronous": false, "params": [{"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setuptools.test_its_own_wheel_does_not_contain_tests", "asynchronous": false, "params": [{"name": "setuptools_wheel", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setuptools.test_wheel_includes_cli_scripts", "asynchronous": false, "params": [{"name": "setuptools_wheel", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setuptools.test_wheel_includes_vendored_metadata", "asynchronous": false, "params": [{"name": "setuptools_wheel", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.tests.test_setuptools.needs_bytecode", "type": null, "documentation": []}], "classes": [{"name": "setuptools.tests.test_setuptools.TestDepends", "bases": [], "methods": [{"name": "setuptools.tests.test_setuptools.TestDepends.testExtractConst", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setuptools.TestDepends.testFindModule", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setuptools.TestDepends.testModuleExtract", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setuptools.TestDepends.testRequire", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setuptools.TestDepends.test_require_present", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_setuptools.TestDistro", "bases": [], "methods": [{"name": "setuptools.tests.test_setuptools.TestDistro.setup_method", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "method", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setuptools.TestDistro.testDistroType", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setuptools.TestDistro.testExcludePackage", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setuptools.TestDistro.testIncludeExclude", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setuptools.TestDistro.testExcludePackages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setuptools.TestDistro.testEmpty", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setuptools.TestDistro.testContents", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_setuptools.TestDistro.testInvalidIncludeExclude", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.test_develop", "documentation": ["develop tests"], "functions": [{"name": "setuptools.tests.test_develop.temp_user", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_develop.test_env", "asynchronous": false, "params": [{"name": "tmpdir", "type": null, "default": null}, {"name": "temp_user", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.tests.test_develop.SETUP_PY", "type": null, "documentation": []}, {"name": "setuptools.tests.test_develop.INIT_PY", "type": null, "documentation": []}], "classes": [{"name": "setuptools.tests.test_develop.TestDevelop", "bases": [], "methods": [{"name": "setuptools.tests.test_develop.TestDevelop.test_console_scripts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Test that console scripts are installed and that they reference\nonly the project by name and not the current version."]}, {"name": "setuptools.tests.test_develop.TestDevelop.test_egg_link_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.tests.test_develop.TestDevelop.in_virtualenv", "type": null, "documentation": []}, {"name": "setuptools.tests.test_develop.TestDevelop.in_venv", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_develop.TestResolver", "bases": [], "methods": [{"name": "setuptools.tests.test_develop.TestResolver.test_resolve_setup_path_cwd", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_develop.TestResolver.test_resolve_setup_path_one_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_develop.TestResolver.test_resolve_setup_path_one_dir_trailing_slash", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["TODO: These tests were written with a minimal understanding\nof what _resolve_setup_path is intending to do. Come up with\nmore meaningful cases that look like real-world scenarios."]}, {"name": "setuptools.tests.test_develop.TestNamespaces", "bases": [], "methods": [{"name": "setuptools.tests.test_develop.TestNamespaces.install_develop", "asynchronous": false, "params": [{"name": "src_dir", "type": null, "default": null}, {"name": "target", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_develop.TestNamespaces.test_namespace_package_importable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Installing two packages sharing the same namespace, one installed\nnaturally using pip or `--single-version-externally-managed`\nand the other installed using `develop` should leave the namespace\nin tact and both packages reachable by import."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.test_dist_info", "documentation": ["Test .dist-info style distributions."], "functions": [{"name": "setuptools.tests.test_dist_info.run_command_inner", "asynchronous": false, "params": [{"name": "*cmd", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_dist_info.run_command", "asynchronous": false, "params": [{"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.tests.test_dist_info.read", "type": null, "documentation": []}], "classes": [{"name": "setuptools.tests.test_dist_info.TestDistInfo", "bases": [], "methods": [{"name": "setuptools.tests.test_dist_info.TestDistInfo.build_metadata", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_dist_info.TestDistInfo.metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_dist_info.TestDistInfo.test_distinfo", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "metadata", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_dist_info.TestDistInfo.test_conditional_dependencies", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "metadata", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_dist_info.TestDistInfo.test_invalid_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Supplying an invalid version crashes dist_info."]}, {"name": "setuptools.tests.test_dist_info.TestDistInfo.test_tag_arguments", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_dist_info.TestDistInfo.test_output_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "keep_egg_info", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.tests.test_dist_info.TestDistInfo.metadata_base", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_dist_info.TestWheelCompatibility", "bases": [], "methods": [{"name": "setuptools.tests.test_dist_info.TestWheelCompatibility.test_dist_info_is_the_same_as_in_wheel", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "version", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "suffix", "type": null, "default": null}, {"name": "cfg", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.tests.test_dist_info.TestWheelCompatibility.SETUPCFG", "type": null, "documentation": []}, {"name": "setuptools.tests.test_dist_info.TestWheelCompatibility.EGG_INFO_OPTS", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Make sure the .dist-info directory produced with the `dist_info` command\nis the same as the one produced by `bdist_wheel`.\n"]}], "exports": []}, {"name": "setuptools.tests.namespaces", "documentation": [], "functions": [{"name": "setuptools.tests.namespaces.iter_namespace_pkgs", "asynchronous": false, "params": [{"name": "namespace", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.namespaces.build_namespace_package", "asynchronous": false, "params": [{"name": "tmpdir", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "version", "type": null, "default": "..."}, {"name": "impl", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.tests.namespaces.build_pep420_namespace_package", "asynchronous": false, "params": [{"name": "tmpdir", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.namespaces.make_site_dir", "asynchronous": false, "params": [{"name": "target", "type": null, "default": null}], "returns": null, "documentation": ["Add a sitecustomize.py module in target to cause\ntarget to be added to site dirs such that .pth files\nare processed there."]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.tests.server", "documentation": ["Basic http server for tests to simulate PyPI or custom indexes"], "functions": [{"name": "setuptools.tests.server.path_to_url", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}, {"name": "authority", "type": null, "default": "..."}], "returns": null, "documentation": ["Convert a path to a file: URL."]}], "variables": [], "classes": [{"name": "setuptools.tests.server.IndexServer", "bases": ["http.server.HTTPServer"], "methods": [{"name": "setuptools.tests.server.IndexServer.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "server_address", "type": null, "default": "..."}, {"name": "RequestHandlerClass", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.tests.server.IndexServer.start", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.server.IndexServer.stop", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.server.IndexServer.base_url", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Basic single-threaded http server simulating a package index\n\nYou can use this server in unittest like this::\n\n: s = IndexServer()\n  s.start()\n  index_url = s.base_url() + 'mytestindex'\n  \\# do some test requests to the index\n  \\# The index files should be located in setuptools/tests/indexes\n  s.stop()\n"]}, {"name": "setuptools.tests.server.RequestRecorder", "bases": ["http.server.BaseHTTPRequestHandler"], "methods": [{"name": "setuptools.tests.server.RequestRecorder.do_GET", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.server.MockServer", "bases": ["http.server.HTTPServer", "threading.Thread"], "methods": [{"name": "setuptools.tests.server.MockServer.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "server_address", "type": null, "default": "..."}, {"name": "RequestHandlerClass", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.tests.server.MockServer.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.server.MockServer.netloc", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.server.MockServer.url", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A simple HTTP Server that records the requests made to it."]}], "exports": []}, {"name": "setuptools.tests.test_build_meta", "documentation": [], "functions": [{"name": "setuptools.tests.test_build_meta.test_legacy_editable_install", "asynchronous": false, "params": [{"name": "venv", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.test_sys_exit_0_in_setuppy", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Setuptools should be resilient to setup.py with `sys.exit(0)` (#3973).\n"]}, {"name": "setuptools.tests.test_build_meta.test_system_exit_in_setuppy", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.tests.test_build_meta.SETUP_SCRIPT_STUB", "type": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TIMEOUT", "type": null, "documentation": ["in seconds"]}, {"name": "setuptools.tests.test_build_meta.IS_PYPY", "type": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.pytestmark", "type": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.defns", "type": null, "documentation": []}], "classes": [{"name": "setuptools.tests.test_build_meta.BuildBackendBase", "bases": [], "methods": [{"name": "setuptools.tests.test_build_meta.BuildBackendBase.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "cwd", "type": null, "default": "..."}, {"name": "env", "type": null, "default": "..."}, {"name": "backend_name", "type": null, "default": "..."}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_build_meta.BuildBackend", "bases": ["BuildBackendBase"], "methods": [{"name": "setuptools.tests.test_build_meta.BuildBackend.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.BuildBackend.__getattr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": [{"name": "...", "xref": null, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "documentation": ["Handles arbitrary function invocations on the build backend."]}, {"name": "setuptools.tests.test_build_meta.BuildBackend._kill", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pid", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["PEP 517 Build Backend"]}, {"name": "setuptools.tests.test_build_meta.BuildBackendCaller", "bases": ["BuildBackendBase"], "methods": [{"name": "setuptools.tests.test_build_meta.BuildBackendCaller.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.BuildBackendCaller.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kw", "type": null, "default": null}], "returns": null, "documentation": ["Handles arbitrary function invocations on the build backend."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend", "bases": [], "methods": [{"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.get_build_backend", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.build_backend", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}, {"name": "request", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_get_requires_for_build_wheel", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "build_backend", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_get_requires_for_build_sdist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "build_backend", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_build_wheel", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "build_backend", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_build_with_existing_file_present", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "build_type", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_build_with_pyproject_config", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}, {"name": "setup_script", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_static_metadata_in_pyproject_config", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_build_sdist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "build_backend", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_prepare_metadata_for_build_wheel", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "build_backend", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_prepare_metadata_inplace", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "build_backend", "type": null, "default": null}], "returns": null, "documentation": ["Some users might pass metadata_directory pre-populated with `.tox` or `.venv`.\nSee issue #3523."]}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_build_sdist_explicit_dist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "build_backend", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_build_sdist_version_change", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "build_backend", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_build_sdist_pyproject_toml_exists", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_build_sdist_setup_py_exists", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_build_sdist_setup_py_manifest_excluded", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_build_sdist_builds_targz_even_if_zip_indicated", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_build_sdist_relative_path_import", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend._assert_link_tree", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parent_dir", "type": null, "default": null}], "returns": null, "documentation": ["All files in the directory should be either links or hard links"]}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_editable_without_config_settings", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": ["Sanity check to ensure tests with --mode=strict are different from the ones\nwithout --mode.\n\n--mode=strict should create a local directory with a package tree.\nThe directory should not get created otherwise."]}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_build_wheel_inplace", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_editable_with_config_settings", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "config_settings", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_setup_requires", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "setup_literal", "type": null, "default": null}, {"name": "requirements", "type": null, "default": null}, {"name": "use_wheel", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_setup_requires_with_auto_discovery", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_dont_install_setup_requires", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_sys_argv_passthrough", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_setup_py_file_abspath", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.test_build_with_empty_setuppy", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "build_backend", "type": null, "default": null}, {"name": "build_hook", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend.backend_name", "type": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend._relative_path_import_files", "type": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend._simple_pyproject_example", "type": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend._sys_argv_0_passthrough", "type": null, "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaBackend._setup_py_file_abspath", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaLegacyBackend", "bases": ["TestBuildMetaBackend"], "methods": [{"name": "setuptools.tests.test_build_meta.TestBuildMetaLegacyBackend.test_build_sdist_relative_path_import", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": ["build_meta_legacy-specific tests"]}, {"name": "setuptools.tests.test_build_meta.TestBuildMetaLegacyBackend.test_sys_argv_passthrough", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.tests.test_build_meta.TestBuildMetaLegacyBackend.backend_name", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.test_sandbox", "documentation": ["develop tests"], "functions": [], "variables": [], "classes": [{"name": "setuptools.tests.test_sandbox.TestSandbox", "bases": [], "methods": [{"name": "setuptools.tests.test_sandbox.TestSandbox.test_devnull", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sandbox.TestSandbox._file_writer", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sandbox.TestSandbox.test_setup_py_with_BOM", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["It should be possible to execute a setup.py with a Byte Order Mark"]}, {"name": "setuptools.tests.test_sandbox.TestSandbox.test_setup_py_with_CRLF", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_sandbox.TestExceptionSaver", "bases": [], "methods": [{"name": "setuptools.tests.test_sandbox.TestExceptionSaver.test_exception_trapped", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sandbox.TestExceptionSaver.test_exception_resumed", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sandbox.TestExceptionSaver.test_exception_reconstructed", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sandbox.TestExceptionSaver.test_no_exception_passes_quietly", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sandbox.TestExceptionSaver.test_unpickleable_exception", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_sandbox.TestExceptionSaver.test_unpickleable_exception_when_hiding_setuptools", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["As revealed in #440, an infinite recursion can occur if an unpickleable\nexception while setuptools is hidden. Ensure this doesn't happen."]}, {"name": "setuptools.tests.test_sandbox.TestExceptionSaver.test_sandbox_violation_raised_hiding_setuptools", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["When in a sandbox with setuptools hidden, a SandboxViolation\nshould reflect a proper exception and not be wrapped in\nan UnpickleableException."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.textwrap", "documentation": [], "functions": [{"name": "setuptools.tests.textwrap.DALS", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.tests.test_build_clib", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools.tests.test_build_clib.TestBuildCLib", "bases": [], "methods": [{"name": "setuptools.tests.test_build_clib.TestBuildCLib.test_build_libraries", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "mock_newer", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_build_clib.TestBuildCLib.test_build_libraries_reproducible", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "mock_newer", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.test_dist", "documentation": [], "functions": [{"name": "setuptools.tests.test_dist.test_dist_fetch_build_egg", "asynchronous": false, "params": [{"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Check multiple calls to `Distribution.fetch_build_egg` work as expected."]}, {"name": "setuptools.tests.test_dist.test_provides_extras_deterministic_order", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_dist.test_check_package_data", "asynchronous": false, "params": [{"name": "package_data", "type": null, "default": null}, {"name": "expected_message", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_dist.test_check_specifier", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_dist.test_metadata_name", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_dist.test_dist_default_py_modules", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "dist_name", "type": null, "default": null}, {"name": "py_module", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_dist.test_dist_default_packages", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "dist_name", "type": null, "default": null}, {"name": "package_dir", "type": null, "default": null}, {"name": "package_files", "type": null, "default": null}, {"name": "packages", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_dist.test_dist_default_name", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "dist_name", "type": null, "default": null}, {"name": "package_dir", "type": null, "default": null}, {"name": "package_files", "type": null, "default": null}], "returns": null, "documentation": ["Make sure dist.name is discovered from packages/py_modules"]}], "variables": [{"name": "setuptools.tests.test_dist.EXAMPLE_BASE_INFO", "type": null, "documentation": []}, {"name": "setuptools.tests.test_dist.CHECK_PACKAGE_DATA_TESTS", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.tests.test_install_scripts", "documentation": ["install_scripts tests"], "functions": [], "variables": [], "classes": [{"name": "setuptools.tests.test_install_scripts.TestInstallScripts", "bases": [], "methods": [{"name": "setuptools.tests.test_install_scripts.TestInstallScripts._run_install_scripts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "install_dir", "type": null, "default": null}, {"name": "executable", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_install_scripts.TestInstallScripts.test_sys_executable_escaping_unix", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that shebang is not quoted on Unix when getting the Python exe\nfrom sys.executable."]}, {"name": "setuptools.tests.test_install_scripts.TestInstallScripts.test_sys_executable_escaping_win32", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that shebang is quoted on Windows when getting the Python exe\nfrom sys.executable and it contains a space."]}, {"name": "setuptools.tests.test_install_scripts.TestInstallScripts.test_executable_with_spaces_escaping_unix", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that shebang on Unix is not quoted, even when\na value with spaces\nis specified using --executable."]}, {"name": "setuptools.tests.test_install_scripts.TestInstallScripts.test_executable_arg_escaping_win32", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that shebang on Windows is quoted when\ngetting a path with spaces\nfrom --executable, that is itself properly quoted."]}], "class_variables": [{"name": "setuptools.tests.test_install_scripts.TestInstallScripts.settings", "type": null, "documentation": []}, {"name": "setuptools.tests.test_install_scripts.TestInstallScripts.unix_exe", "type": null, "documentation": []}, {"name": "setuptools.tests.test_install_scripts.TestInstallScripts.unix_spaces_exe", "type": null, "documentation": []}, {"name": "setuptools.tests.test_install_scripts.TestInstallScripts.win32_exe", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.test_easy_install", "documentation": ["Easy install Tests"], "functions": [{"name": "setuptools.tests.test_easy_install.pip_disable_index", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": ["Important: Disable the default index for pip to avoid\nquerying packages in the index and potentially resolving\nand installing packages there."]}, {"name": "setuptools.tests.test_easy_install.setup_context", "asynchronous": false, "params": [{"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.distutils_package", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.mock_index", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.make_trivial_sdist", "asynchronous": false, "params": [{"name": "dist_path", "type": null, "default": null}, {"name": "distname", "type": null, "default": null}, {"name": "version", "type": null, "default": null}], "returns": null, "documentation": ["Create a simple sdist tarball at dist_path, containing just a simple\nsetup.py."]}, {"name": "setuptools.tests.test_easy_install.make_nspkg_sdist", "asynchronous": false, "params": [{"name": "dist_path", "type": null, "default": null}, {"name": "distname", "type": null, "default": null}, {"name": "version", "type": null, "default": null}], "returns": null, "documentation": ["Make an sdist tarball with distname and version which also contains one\npackage with the same name as distname.  The top-level package is\ndesignated a namespace package)."]}, {"name": "setuptools.tests.test_easy_install.make_python_requires_sdist", "asynchronous": false, "params": [{"name": "dist_path", "type": null, "default": null}, {"name": "distname", "type": null, "default": null}, {"name": "version", "type": null, "default": null}, {"name": "python_requires", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.make_sdist", "asynchronous": false, "params": [{"name": "dist_path", "type": null, "default": null}, {"name": "files", "type": null, "default": null}], "returns": null, "documentation": ["Create a simple sdist tarball at dist_path, containing the files\nlisted in `files` as `(filename, content)` tuples.\n"]}, {"name": "setuptools.tests.test_easy_install.create_setup_requires_package", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}, {"name": "distname", "type": null, "default": "..."}, {"name": "version", "type": null, "default": "..."}, {"name": "make_package", "type": null, "default": "..."}, {"name": "setup_py_template", "type": null, "default": "..."}, {"name": "setup_attrs", "type": null, "default": "..."}, {"name": "use_setup_cfg", "type": null, "default": "..."}], "returns": null, "documentation": ["Creates a source tree under path for a trivial test package that has a\nsingle requirement in setup_requires--a tarball for that requirement is\nalso created and added to the dependency_links argument.\n\n`distname` and `version` refer to the name/version of the package that\nthe test package requires via `setup_requires`. The name of the test\npackage itself is just 'test_pkg'.\n"]}, {"name": "setuptools.tests.test_easy_install.test_use_correct_python_version_string", "asynchronous": false, "params": [{"name": "tmpdir", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.test_editable_user_and_build_isolation", "asynchronous": false, "params": [{"name": "setup_context", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["`setup.py develop` should honor `--user` even under build isolation"]}], "variables": [{"name": "setuptools.tests.test_easy_install.SETUP_PY", "type": null, "documentation": []}], "classes": [{"name": "setuptools.tests.test_easy_install.FakeDist", "bases": [], "methods": [{"name": "setuptools.tests.test_easy_install.FakeDist.get_entry_map", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "group", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.FakeDist.as_requirement", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestEasyInstallTest", "bases": [], "methods": [{"name": "setuptools.tests.test_easy_install.TestEasyInstallTest.test_get_script_args", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestEasyInstallTest.test_no_find_links", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestEasyInstallTest.test_write_exception", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Test that `cant_write_to_target` is rendered as a DistutilsError."]}, {"name": "setuptools.tests.test_easy_install.TestEasyInstallTest.test_all_site_dirs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": ["get_site_dirs should always return site dirs reported by\nsite.getsitepackages."]}, {"name": "setuptools.tests.test_easy_install.TestEasyInstallTest.test_all_site_dirs_works_without_getsitepackages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestEasyInstallTest.sdist_unicode", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestEasyInstallTest.test_unicode_filename_in_sdist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "sdist_unicode", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": ["The install command should execute correctly even if\nthe package has unicode filenames."]}, {"name": "setuptools.tests.test_easy_install.TestEasyInstallTest.sdist_unicode_in_script", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestEasyInstallTest.test_unicode_content_in_sdist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "sdist_unicode_in_script", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": ["The install command should execute correctly even if\nthe package has unicode in scripts."]}, {"name": "setuptools.tests.test_easy_install.TestEasyInstallTest.sdist_script", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestEasyInstallTest.test_script_install", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "sdist_script", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": ["Check scripts are installed."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestPTHFileWriter", "bases": [], "methods": [{"name": "setuptools.tests.test_easy_install.TestPTHFileWriter.test_add_from_cwd_site_sets_dirty", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["a pth file manager should set dirty\nif a distribution is in site but also the cwd"]}, {"name": "setuptools.tests.test_easy_install.TestPTHFileWriter.test_add_from_site_is_ignored", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestPTHFileWriter.test_many_pth_distributions_merge_together", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["If the pth file is modified under the hood, then PthDistribution\nwill refresh its content before saving, merging contents when\nnecessary."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestUserInstallTest", "bases": [], "methods": [{"name": "setuptools.tests.test_easy_install.TestUserInstallTest.test_user_install_not_implied_user_site_enabled", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["simulate setuptools installed in user site packages"]}, {"name": "setuptools.tests.test_easy_install.TestUserInstallTest.test_user_install_not_implied_user_site_disabled", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestUserInstallTest.assert_not_user_site", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestUserInstallTest.test_multiproc_atexit", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestUserInstallTest.foo_package", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestUserInstallTest.install_target", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestUserInstallTest.test_local_index", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "foo_package", "type": null, "default": null}, {"name": "install_target", "type": null, "default": null}], "returns": null, "documentation": ["The local index must be used when easy_install locates installed\npackages."]}, {"name": "setuptools.tests.test_easy_install.TestUserInstallTest.user_install_setup_context", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["Wrap sandbox.setup_context to patch easy_install in that context to\nappear as user-installed."]}, {"name": "setuptools.tests.test_easy_install.TestUserInstallTest.patched_setup_context", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.tests.test_easy_install.TestUserInstallTest.prev_sp_write", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestDistutilsPackage", "bases": [], "methods": [{"name": "setuptools.tests.test_easy_install.TestDistutilsPackage.test_bdist_egg_available_on_distutils_pkg", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestInstallRequires", "bases": [], "methods": [{"name": "setuptools.tests.test_easy_install.TestInstallRequires.test_setup_install_includes_dependencies", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "mock_index", "type": null, "default": null}], "returns": null, "documentation": ["When `python setup.py install` is called directly, it will use easy_install\nto fetch dependencies.\n"]}, {"name": "setuptools.tests.test_easy_install.TestInstallRequires.create_project", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "root", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestSetupRequires", "bases": [], "methods": [{"name": "setuptools.tests.test_easy_install.TestSetupRequires.test_setup_requires_honors_fetch_params", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "mock_index", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": ["When easy_install installs a source distribution which specifies\nsetup_requires, it should honor the fetch parameters (such as\nindex-url, and find-links)."]}, {"name": "setuptools.tests.test_easy_install.TestSetupRequires.create_sdist", "asynchronous": false, "params": [], "returns": null, "documentation": ["Return an sdist with a setup_requires dependency (of something that\ndoesn't exist)"]}, {"name": "setuptools.tests.test_easy_install.TestSetupRequires.test_setup_requires_overrides_version_conflict", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "use_setup_cfg", "type": null, "default": null}], "returns": null, "documentation": ["Regression test for distribution issue 323:\nhttps://bitbucket.org/tarek/distribute/issues/323\n\nEnsures that a distribution's setup_requires requirements can still be\ninstalled and used locally even if a conflicting version of that\nrequirement is already on the path."]}, {"name": "setuptools.tests.test_easy_install.TestSetupRequires.test_setup_requires_override_nspkg", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "use_setup_cfg", "type": null, "default": null}], "returns": null, "documentation": ["Like `test_setup_requires_overrides_version_conflict` but where the\n`setup_requires` package is part of a namespace package that has\n*already* been imported.\n"]}, {"name": "setuptools.tests.test_easy_install.TestSetupRequires.test_setup_requires_with_attr_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "use_setup_cfg", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestSetupRequires.test_setup_requires_honors_pip_env", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "mock_index", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestSetupRequires.test_setup_requires_with_pep508_url", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "mock_index", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestSetupRequires.test_setup_requires_with_allow_hosts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "mock_index", "type": null, "default": null}], "returns": null, "documentation": ["The `allow-hosts` option in not supported anymore."]}, {"name": "setuptools.tests.test_easy_install.TestSetupRequires.test_setup_requires_with_python_requires", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Check `python_requires` is honored."]}, {"name": "setuptools.tests.test_easy_install.TestSetupRequires.test_setup_requires_with_find_links_in_setup_cfg", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "with_dependency_links_in_setup_py", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestSetupRequires.test_setup_requires_with_transitive_extra_dependency", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": ["Use case: installing a package with a build dependency on\nan already installed `dep[extra]`, which in turn depends\non `extra_dep` (whose is not already installed)."]}, {"name": "setuptools.tests.test_easy_install.TestSetupRequires.test_setup_requires_with_distutils_command_dep", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": ["Use case: ensure build requirements' extras\nare properly installed and activated."]}], "class_variables": [{"name": "setuptools.tests.test_easy_install.TestSetupRequires.use_setup_cfg", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestScriptHeader", "bases": [], "methods": [{"name": "setuptools.tests.test_easy_install.TestScriptHeader.test_get_script_header", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestScriptHeader.test_get_script_header_args", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestScriptHeader.test_get_script_header_non_ascii_exe", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestScriptHeader.test_get_script_header_exe_with_spaces", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.tests.test_easy_install.TestScriptHeader.non_ascii_exe", "type": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestScriptHeader.exe_with_spaces", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestCommandSpec", "bases": [], "methods": [{"name": "setuptools.tests.test_easy_install.TestCommandSpec.test_custom_launch_command", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Show how a custom CommandSpec could be used to specify a #! executable\nwhich takes parameters."]}, {"name": "setuptools.tests.test_easy_install.TestCommandSpec.test_from_param_for_CommandSpec_is_passthrough", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["from_param should return an instance of a CommandSpec"]}, {"name": "setuptools.tests.test_easy_install.TestCommandSpec.test_from_environment_with_spaces_in_executable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestCommandSpec.test_from_simple_string_uses_shlex", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["In order to support `executable = /usr/bin/env my-python`, make sure\nfrom_param invokes shlex on that input."]}, {"name": "setuptools.tests.test_easy_install.TestCommandSpec.test_from_param_raises_expected_error", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["from_param should raise its own TypeError when the argument's type is unsupported"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_easy_install.TestWindowsScriptWriter", "bases": [], "methods": [{"name": "setuptools.tests.test_easy_install.TestWindowsScriptWriter.test_header", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_easy_install.VersionStub", "bases": ["NamedTuple"], "methods": [], "class_variables": [{"name": "setuptools.tests.test_easy_install.VersionStub.major", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.tests.test_easy_install.VersionStub.minor", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.tests.test_easy_install.VersionStub.micro", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.tests.test_easy_install.VersionStub.releaselevel", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.tests.test_easy_install.VersionStub.serial", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.tests.test_egg_info", "documentation": [], "functions": [{"name": "setuptools.tests.test_egg_info.env", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools.tests.test_egg_info.Environment", "bases": ["str"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo", "bases": [], "methods": [{"name": "setuptools.tests.test_egg_info.TestEggInfo._create_project", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo._extract_mv_version", "asynchronous": false, "params": [{"name": "pkg_info_lines", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_egg_info_save_version_info_setup_empty", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": ["When the egg_info section is empty or not present, running\nsave_version_info should add the settings to the setup.cfg\nin a deterministic order."]}, {"name": "setuptools.tests.test_egg_info.TestEggInfo._validate_content_order", "asynchronous": false, "params": [{"name": "content", "type": null, "default": null}, {"name": "expected", "type": null, "default": null}], "returns": null, "documentation": ["Assert that the strings in expected appear in content\nin order."]}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_egg_info_save_version_info_setup_defaults", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": ["When running save_version_info on an existing setup.cfg\nwith the 'default' values present from a previous run,\nthe file should remain unchanged."]}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_expected_files_produced", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_handling_utime_error", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_license_is_a_string", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_rebuilt", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": ["Ensure timestamps are updated when the command is re-run."]}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_manifest_template_is_read", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo._setup_script_with_requires", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requires", "type": null, "default": null}, {"name": "use_setup_cfg", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_requires", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}, {"name": "requires", "type": null, "default": null}, {"name": "use_setup_cfg", "type": null, "default": null}, {"name": "expected_requires", "type": null, "default": null}, {"name": "install_cmd_kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_install_requires_unordered_disallowed", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": ["Packages that pass unordered install_requires sequences\nshould be rejected as they produce non-deterministic\nbuilds. See #458."]}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_extras_require_with_invalid_marker", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_extras_require_with_invalid_marker_in_req", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_provides_extra", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_doesnt_provides_extra", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_setup_cfg_license_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}, {"name": "files", "type": null, "default": null}, {"name": "license_in_sources", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_setup_cfg_license_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}, {"name": "files", "type": null, "default": null}, {"name": "incl_licenses", "type": null, "default": null}, {"name": "excl_licenses", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_setup_cfg_license_file_license_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}, {"name": "files", "type": null, "default": null}, {"name": "incl_licenses", "type": null, "default": null}, {"name": "excl_licenses", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_license_file_attr_pkg_info", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": ["All matched license files should have a corresponding License-File."]}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_metadata_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": ["Make sure latest metadata version is used by default."]}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_long_description_content_type", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_long_description", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_project_urls", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_license", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": ["Test single line license."]}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_license_escape", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": ["Test license is escaped correctly if longer than one line."]}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_python_requires_egg_info", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_manifest_maker_warning_suppression", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_egg_info_includes_setup_py", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo._run_egg_info_command", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}, {"name": "cmd", "type": null, "default": "..."}, {"name": "output", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.test_egg_info_tag_only_once", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.tests.test_egg_info.TestEggInfo.setup_script", "type": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.mismatch_marker", "type": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.mismatch_marker_alternate", "type": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestEggInfo.invalid_marker", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [{"name": "setuptools.tests.test_egg_info.TestEggInfo.RequiresTestHelper", "bases": [], "methods": [{"name": "setuptools.tests.test_egg_info.TestEggInfo.RequiresTestHelper.parametrize", "asynchronous": false, "params": [{"name": "*test_list", "type": null, "default": null}, {"name": "**format_dict", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestWriteEntries", "bases": [], "methods": [{"name": "setuptools.tests.test_egg_info.TestWriteEntries.test_invalid_entry_point", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.tests.test_egg_info.TestWriteEntries.test_valid_entry_point", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir_cwd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._entry_points", "documentation": [], "functions": [{"name": "setuptools._entry_points.ensure_valid", "asynchronous": false, "params": [{"name": "ep", "type": null, "default": null}], "returns": null, "documentation": ["Exercise one of the dynamic properties to trigger\nthe pattern match."]}, {"name": "setuptools._entry_points.load_group", "asynchronous": false, "params": [{"name": "value", "type": null, "default": null}, {"name": "group", "type": null, "default": null}], "returns": null, "documentation": ["Given a value of an entry point or series of entry points,\nreturn each as an EntryPoint."]}, {"name": "setuptools._entry_points.by_group_and_name", "asynchronous": false, "params": [{"name": "ep", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._entry_points.validate", "asynchronous": false, "params": [{"name": "eps", "type": {"name": "metadata.EntryPoints", "xref": {"fqname": "setuptools._entry_points._importlib.metadata.EntryPoints", "project": null}, "params": null}, "default": null}], "returns": null, "documentation": ["Ensure entry points are unique by group and name and validate each."]}, {"name": "setuptools._entry_points.load", "asynchronous": false, "params": [{"name": "eps", "type": null, "default": null}], "returns": null, "documentation": ["Given a Distribution.entry_points, produce EntryPoints."]}, {"name": "setuptools._entry_points._", "asynchronous": false, "params": [{"name": "eps", "type": null, "default": null}], "returns": null, "documentation": ["```pycon\n>>> ep, = load('[console_scripts]\\nfoo=bar')\n>>> ep.group\n'console_scripts'\n>>> ep.name\n'foo'\n>>> ep.value\n'bar'\n```\n"]}, {"name": "setuptools._entry_points.render", "asynchronous": false, "params": [{"name": "eps", "type": {"name": "metadata.EntryPoints", "xref": {"fqname": "setuptools._entry_points._importlib.metadata.EntryPoints", "project": null}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._entry_points.render_items", "asynchronous": false, "params": [{"name": "eps", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.logging", "documentation": [], "functions": [{"name": "setuptools.logging._not_warning", "asynchronous": false, "params": [{"name": "record", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.logging.configure", "asynchronous": false, "params": [], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Configure logging to emit warning and above to stderr\nand everything else to stdout. This behavior is provided\nfor compatibility with distutils.log but may change in\nthe future."]}, {"name": "setuptools.logging.set_threshold", "asynchronous": false, "params": [{"name": "level", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._static", "documentation": [], "functions": [{"name": "setuptools._static._prevent_modification", "asynchronous": false, "params": [{"name": "target", "type": {"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": null}, "default": null}, {"name": "method", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "copying", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Because setuptools is very flexible we cannot fully prevent\nplugins and user customisations from modifying static values that were\nparsed from config files.\nBut we can attempt to block \"in-place\" mutations and identify when they\nwere done."]}, {"name": "setuptools._static.noop", "asynchronous": false, "params": [{"name": "value", "type": {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}, "default": null}], "returns": {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}, "documentation": ["```pycon\n>>> noop(42)\n42\n```\n"]}, {"name": "setuptools._static.attempt_conversion", "asynchronous": false, "params": [{"name": "value", "type": {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}, "default": null}], "returns": {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}, "documentation": ["```pycon\n>>> is_static(attempt_conversion(\"hello\"))\nTrue\n>>> is_static(object())\nFalse\n```\n"]}, {"name": "setuptools._static.is_static", "asynchronous": false, "params": [{"name": "value", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["```pycon\n>>> is_static(a := Dict({'a': 1}))\nTrue\n>>> is_static(dict(a))\nFalse\n>>> is_static(b := List([1, 2, 3]))\nTrue\n>>> is_static(list(b))\nFalse\n```\n"]}], "variables": [{"name": "setuptools._static.T", "type": null, "documentation": []}, {"name": "setuptools._static._CONVERSIONS", "type": null, "documentation": []}, {"name": "setuptools._static.EMPTY_LIST", "type": null, "documentation": []}, {"name": "setuptools._static.EMPTY_DICT", "type": null, "documentation": []}], "classes": [{"name": "setuptools._static.Static", "bases": [], "methods": [], "class_variables": [{"name": "setuptools._static.Static._mutated_", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["TODO: Remove after deprecation warning is solved"]}], "instance_variables": [], "inner_classes": [], "documentation": ["Wrapper for built-in object types that are allow setuptools to identify\nstatic core metadata (in opposition to `Dynamic`, as defined {pep}`643`).\n\nThe trick is to mark values with {class}`Static` when they come from\n`pyproject.toml` or `setup.cfg`, so if any plugin overwrite the value\nwith a built-in, setuptools will be able to recognise the change.\n\nWe inherit from built-in classes, so that we don't need to change the existing\ncode base to deal with the new types.\nWe also should strive for immutability objects to avoid changes after the\ninitial parsing.\n"]}, {"name": "setuptools._static.Str", "bases": ["str", "Static"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._static.Tuple", "bases": ["tuple", "Static"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._static.List", "bases": ["list", "Static"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["---\nmeta private: true\n---\n\n```pycon\n>>> x = List([1, 2, 3])\n>>> is_static(x)\nTrue\n>>> x += [0]  # doctest: +IGNORE_EXCEPTION_DETAIL\nTraceback (most recent call last):\nSetuptoolsDeprecationWarning: Direct modification ...\n>>> is_static(x)  # no longer static after modification\nFalse\n>>> y = list(x)\n>>> y.clear()\n>>> y\n[]\n>>> y == x\nFalse\n>>> is_static(List(y))\nTrue\n```\n"]}, {"name": "setuptools._static.Dict", "bases": ["dict", "Static"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["---\nmeta private: true\n---\n\n```pycon\n>>> x = Dict({'a': 1, 'b': 2})\n>>> is_static(x)\nTrue\n>>> x['c'] = 0  # doctest: +IGNORE_EXCEPTION_DETAIL\nTraceback (most recent call last):\nSetuptoolsDeprecationWarning: Direct modification ...\n>>> x._mutated_\nTrue\n>>> is_static(x)  # no longer static after modification\nFalse\n>>> y = dict(x)\n>>> y.popitem()\n('b', 2)\n>>> y == x\nFalse\n>>> is_static(Dict(y))\nTrue\n```\n"]}, {"name": "setuptools._static.SpecifierSet", "bases": ["packaging.specifiers.SpecifierSet", "Static"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Not exactly a built-in type but useful for ``requires-python``"]}], "exports": []}, {"name": "setuptools.sandbox", "documentation": [], "functions": [{"name": "setuptools.sandbox._execfile", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}, {"name": "globals", "type": null, "default": null}, {"name": "locals", "type": null, "default": "..."}], "returns": null, "documentation": ["Python 3 implementation of execfile."]}, {"name": "setuptools.sandbox.save_argv", "asynchronous": false, "params": [{"name": "repl", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.sandbox.save_path", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.sandbox.override_temp", "asynchronous": false, "params": [{"name": "replacement", "type": null, "default": null}], "returns": null, "documentation": ["Monkey-patch tempfile.tempdir with replacement, ensuring it exists"]}, {"name": "setuptools.sandbox.pushd", "asynchronous": false, "params": [{"name": "target", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.sandbox.save_modules", "asynchronous": false, "params": [], "returns": null, "documentation": ["Context in which imported modules are saved.\n\nTranslates exceptions internal to the context into the equivalent exception\noutside the context."]}, {"name": "setuptools.sandbox._clear_modules", "asynchronous": false, "params": [{"name": "module_names", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.sandbox.save_pkg_resources_state", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.sandbox.setup_context", "asynchronous": false, "params": [{"name": "setup_dir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.sandbox._needs_hiding", "asynchronous": false, "params": [{"name": "mod_name", "type": null, "default": null}], "returns": null, "documentation": ["```pycon\n>>> _needs_hiding('setuptools')\nTrue\n>>> _needs_hiding('pkg_resources')\nTrue\n>>> _needs_hiding('setuptools_plugin')\nFalse\n>>> _needs_hiding('setuptools.__init__')\nTrue\n>>> _needs_hiding('distutils')\nTrue\n>>> _needs_hiding('os')\nFalse\n>>> _needs_hiding('Cython')\nTrue\n```\n"]}, {"name": "setuptools.sandbox.hide_setuptools", "asynchronous": false, "params": [], "returns": null, "documentation": ["Remove references to setuptools' modules from sys.modules to allow the\ninvocation to import the most appropriate setuptools. This technique is\nnecessary to avoid issues such as #315 where setuptools upgrading itself\nwould fail to find a function declared in the metadata."]}, {"name": "setuptools.sandbox.run_setup", "asynchronous": false, "params": [{"name": "setup_script", "type": null, "default": null}, {"name": "args", "type": null, "default": null}], "returns": null, "documentation": ["Run a distutils setup script, sandboxed in its directory"]}], "variables": [{"name": "setuptools.sandbox._os", "type": null, "documentation": []}, {"name": "setuptools.sandbox._open", "type": null, "documentation": []}, {"name": "setuptools.sandbox._MODULES_TO_HIDE", "type": null, "documentation": []}, {"name": "setuptools.sandbox._EXCEPTIONS", "type": null, "documentation": []}, {"name": "setuptools.sandbox._EXCEPTIONS", "type": null, "documentation": []}, {"name": "setuptools.sandbox.WRITE_FLAGS", "type": null, "documentation": []}], "classes": [{"name": "setuptools.sandbox.UnpickleableException", "bases": ["Exception"], "methods": [{"name": "setuptools.sandbox.UnpickleableException.dump", "asynchronous": false, "params": [{"name": "type", "type": null, "default": null}, {"name": "exc", "type": null, "default": null}], "returns": null, "documentation": ["Always return a dumped (pickled) type and exc. If exc can't be pickled,\nwrap it in UnpickleableException first."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An exception representing another Exception that could not be pickled."]}, {"name": "setuptools.sandbox.ExceptionSaver", "bases": [], "methods": [{"name": "setuptools.sandbox.ExceptionSaver.__enter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Self", "xref": {"fqname": "typing_extensions.Self", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.sandbox.ExceptionSaver.__exit__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "type", "type": {"name": "type[BaseException] | None", "xref": null, "params": null}, "default": null}, {"name": "exc", "type": {"name": "BaseException | None", "xref": null, "params": null}, "default": null}, {"name": "tb", "type": {"name": "TracebackType | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.sandbox.ExceptionSaver.resume", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A Context Manager that will save an exception, serialize, and restore it\nlater."]}, {"name": "setuptools.sandbox.AbstractSandbox", "bases": [], "methods": [{"name": "setuptools.sandbox.AbstractSandbox.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.sandbox.AbstractSandbox._copy", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "source", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.sandbox.AbstractSandbox.__enter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.sandbox.AbstractSandbox.__exit__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "exc_type", "type": {"name": "type[BaseException] | None", "xref": null, "params": null}, "default": null}, {"name": "exc_value", "type": {"name": "BaseException | None", "xref": null, "params": null}, "default": null}, {"name": "traceback", "type": {"name": "TracebackType | None", "xref": null, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.sandbox.AbstractSandbox.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "func", "type": null, "default": null}], "returns": null, "documentation": ["Run 'func' under os sandboxing"]}, {"name": "setuptools.sandbox.AbstractSandbox._mk_dual_path_wrapper", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.sandbox.AbstractSandbox._mk_single_path_wrapper", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "original", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.sandbox.AbstractSandbox._mk_single_with_return", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.sandbox.AbstractSandbox._mk_query", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.sandbox.AbstractSandbox._validate_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["Called to remap or validate any path, whether input or output"]}, {"name": "setuptools.sandbox.AbstractSandbox._remap_input", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "operation", "type": null, "default": null}, {"name": "path", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kw", "type": null, "default": null}], "returns": null, "documentation": ["Called for path inputs"]}, {"name": "setuptools.sandbox.AbstractSandbox._remap_output", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "operation", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["Called for path outputs"]}, {"name": "setuptools.sandbox.AbstractSandbox._remap_pair", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "operation", "type": null, "default": null}, {"name": "src", "type": null, "default": null}, {"name": "dst", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kw", "type": null, "default": null}], "returns": null, "documentation": ["Called for path pairs like rename, link, and symlink operations"]}, {"name": "setuptools.sandbox.AbstractSandbox.__getattribute__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": ["This is a catch-all for all the dynamically created attributes.", "This isn't public API anyway"]}], "class_variables": [{"name": "setuptools.sandbox.AbstractSandbox._active", "type": null, "documentation": []}, {"name": "setuptools.sandbox.AbstractSandbox._open", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Wrap 'os' module and 'open()' builtin for virtualizing setup scripts"]}, {"name": "setuptools.sandbox.DirectorySandbox", "bases": ["AbstractSandbox"], "methods": [{"name": "setuptools.sandbox.DirectorySandbox.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "sandbox", "type": null, "default": null}, {"name": "exceptions", "type": null, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.sandbox.DirectorySandbox._violation", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "operation", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kw", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.sandbox.DirectorySandbox._open", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}, {"name": "mode", "type": null, "default": "..."}, {"name": "*args", "type": null, "default": null}, {"name": "**kw", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.sandbox.DirectorySandbox.tmpnam", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.sandbox.DirectorySandbox._ok", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.sandbox.DirectorySandbox._exempted", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "filepath", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.sandbox.DirectorySandbox._remap_input", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "operation", "type": null, "default": null}, {"name": "path", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kw", "type": null, "default": null}], "returns": null, "documentation": ["Called for path inputs"]}, {"name": "setuptools.sandbox.DirectorySandbox._remap_pair", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "operation", "type": null, "default": null}, {"name": "src", "type": null, "default": null}, {"name": "dst", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kw", "type": null, "default": null}], "returns": null, "documentation": ["Called for path pairs like rename, link, and symlink operations"]}, {"name": "setuptools.sandbox.DirectorySandbox.open", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "file", "type": null, "default": null}, {"name": "flags", "type": null, "default": null}, {"name": "mode", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "*args", "type": null, "default": null}, {"name": "**kw", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["Called for low-level os.open()"]}], "class_variables": [{"name": "setuptools.sandbox.DirectorySandbox.write_ops", "type": {"name": "ClassVar", "xref": {"fqname": "typing.ClassVar", "project": "--std--"}, "params": [{"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "setuptools.sandbox.DirectorySandbox._exception_patterns", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str | re.Pattern", "xref": null, "params": null}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Restrict operations to a single subdirectory - pseudo-chroot"]}, {"name": "setuptools.sandbox.SandboxViolation", "bases": ["DistutilsError"], "methods": [{"name": "setuptools.sandbox.SandboxViolation.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.sandbox.SandboxViolation.tmpl", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A setup script attempted to modify the filesystem outside the sandbox"]}], "exports": [{"name": "setuptools.sandbox.AbstractSandbox", "xref": {"fqname": "setuptools.sandbox.AbstractSandbox", "project": null}}, {"name": "setuptools.sandbox.DirectorySandbox", "xref": {"fqname": "setuptools.sandbox.DirectorySandbox", "project": null}}, {"name": "setuptools.sandbox.run_setup", "xref": {"fqname": "setuptools.sandbox.run_setup", "project": null}}, {"name": "setuptools.sandbox.SandboxViolation", "xref": {"fqname": "setuptools.sandbox.SandboxViolation", "project": null}}]}, {"name": "setuptools._distutils.versionpredicate", "documentation": ["Module for parsing and testing package version predicate strings."], "functions": [{"name": "setuptools._distutils.versionpredicate.splitUp", "asynchronous": false, "params": [{"name": "pred", "type": null, "default": null}], "returns": null, "documentation": ["Parse a single version comparison.\n\nReturn (comparison string, StrictVersion)", "(comp) (version)"]}, {"name": "setuptools._distutils.versionpredicate.split_provision", "asynchronous": false, "params": [{"name": "value", "type": null, "default": null}], "returns": null, "documentation": ["Return the name and optional version number of a provision.\n\nThe version number, if given, will be returned as a `StrictVersion`\ninstance, otherwise it will be `None`.\n\n```pycon\n>>> split_provision('mypkg')\n('mypkg', None)\n>>> split_provision(' mypkg( 1.2 ) ')\n('mypkg', StrictVersion ('1.2'))\n```\n"]}], "variables": [{"name": "setuptools._distutils.versionpredicate.re_validPackage", "type": null, "documentation": []}, {"name": "setuptools._distutils.versionpredicate.re_paren", "type": null, "documentation": ["(list) inside of parentheses"]}, {"name": "setuptools._distutils.versionpredicate.re_splitComparison", "type": null, "documentation": []}, {"name": "setuptools._distutils.versionpredicate.compmap", "type": null, "documentation": []}, {"name": "setuptools._distutils.versionpredicate._provision_rx", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.versionpredicate.VersionPredicate", "bases": [], "methods": [{"name": "setuptools._distutils.versionpredicate.VersionPredicate.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "versionPredicateStr", "type": null, "default": null}], "returns": null, "documentation": ["Parse a version predicate string."]}, {"name": "setuptools._distutils.versionpredicate.VersionPredicate.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.versionpredicate.VersionPredicate.satisfied_by", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "version", "type": null, "default": null}], "returns": null, "documentation": ["True if version is compatible with all the predicates in self.\nThe parameter version must be acceptable to the StrictVersion\nconstructor.  It may be either a string or StrictVersion."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Parse and test package version predicates.\n\n```pycon\n>>> v = VersionPredicate('pyepat.abc (>1.0, <3333.3a1, !=1555.1b3)')\n```\n\nThe `name` attribute provides the full dotted name that is given:\n\n```\n>>> v.name\n```\n\n'pyepat.abc'\n\nThe str() of a `VersionPredicate` provides a normalized\nhuman-readable version of the expression:\n\n```\n>>> print(v)\n```\n\npyepat.abc (> 1.0, < 3333.3a1, != 1555.1b3)\n\nThe `satisfied_by()` method can be used to determine with a given\nversion number is included in the set described by the version\nrestrictions:\n\n```\n>>> v.satisfied_by('1.1')\n```\n\nTrue\n\\>>> v.satisfied_by('1.4')\nTrue\n\\>>> v.satisfied_by('1.0')\nFalse\n\\>>> v.satisfied_by('4444.4')\nFalse\n\\>>> v.satisfied_by('1555.1b3')\nFalse\n\n`VersionPredicate` is flexible in accepting extra whitespace:\n\n```\n>>> v = VersionPredicate(' pat( ==  0.1  )  ')\n>>> v.name\n```\n\n'pat'\n\\>>> v.satisfied_by('0.1')\nTrue\n\\>>> v.satisfied_by('0.2')\nFalse\n\nIf any version numbers passed in do not conform to the\nrestrictions of `StrictVersion`, a `ValueError` is raised:\n\n```\n>>> v = VersionPredicate('p1.p2.p3.p4(>=1.0, <=1.3a1, !=1.2zb3)')\n```\n\nTraceback (most recent call last):\n\n: ...\n\nValueError: invalid version number '1.2zb3'\n\nIt the module or package name given does not conform to what's\nallowed as a legal module or package name, `ValueError` is\nraised:\n\n```\n>>> v = VersionPredicate('foo-bar')\n```\n\nTraceback (most recent call last):\n\n: ...\n\nValueError: expected parenthesized list: '-bar'\n\n```pycon\n>>> v = VersionPredicate('foo bar (12.21)')\nTraceback (most recent call last):\n  ...\nValueError: expected parenthesized list: 'bar (12.21)'\n```\n"]}], "exports": []}, {"name": "setuptools._distutils.file_util", "documentation": ["distutils.file_util\n\nUtility functions for operating on single files."], "functions": [{"name": "setuptools._distutils.file_util._copy_file_contents", "asynchronous": false, "params": [{"name": "src", "type": null, "default": null}, {"name": "dst", "type": null, "default": null}, {"name": "buffer_size", "type": null, "default": "..."}], "returns": null, "documentation": ["Copy the file 'src' to 'dst'; both must be filenames.  Any error\nopening either file, reading from 'src', or writing to 'dst', raises\nDistutilsFileError.  Data is read/written in chunks of 'buffer_size'\nbytes (default 16k).  No attempt is made to handle anything apart from\nregular files."]}, {"name": "setuptools._distutils.file_util.copy_file", "asynchronous": false, "params": [{"name": "src", "type": null, "default": null}, {"name": "dst", "type": null, "default": null}, {"name": "preserve_mode", "type": null, "default": "..."}, {"name": "preserve_times", "type": null, "default": "..."}, {"name": "update", "type": null, "default": "..."}, {"name": "link", "type": null, "default": "..."}, {"name": "verbose", "type": null, "default": "..."}, {"name": "dry_run", "type": null, "default": "..."}], "returns": null, "documentation": ["Copy a file 'src' to 'dst'.  If 'dst' is a directory, then 'src' is\ncopied there with the same name; otherwise, it must be a filename.  (If\nthe file exists, it will be ruthlessly clobbered.)  If 'preserve_mode'\nis true (the default), the file's mode (type and permission bits, or\nwhatever is analogous on the current platform) is copied.  If\n'preserve_times' is true (the default), the last-modified and\nlast-access times are copied as well.  If 'update' is true, 'src' will\nonly be copied if 'dst' does not exist, or if 'dst' does exist but is\nolder than 'src'.\n\n'link' allows you to make hard links (os.link) or symbolic links\n(os.symlink) instead of copying: set it to \"hard\" or \"sym\"; if it is\nNone (the default), files are copied.  Don't set 'link' on systems that\ndon't support it: 'copy_file()' doesn't check if hard or symbolic\nlinking is available. If hardlink fails, falls back to\n_copy_file_contents().\n\nUnder Mac OS, uses the native file copy function in macostools; on\nother systems, uses '_copy_file_contents()' to copy file contents.\n\nReturn a tuple (dest_name, copied): 'dest_name' is the actual name of\nthe output file, and 'copied' is true if the file was copied (or would\nhave been copied, if 'dry_run' true)."]}, {"name": "setuptools._distutils.file_util.move_file", "asynchronous": false, "params": [{"name": "src", "type": null, "default": null}, {"name": "dst", "type": null, "default": null}, {"name": "verbose", "type": null, "default": "..."}, {"name": "dry_run", "type": null, "default": "..."}], "returns": null, "documentation": ["Move a file 'src' to 'dst'.  If 'dst' is a directory, the file will\nbe moved into it with the same name; otherwise, 'src' is just renamed\nto 'dst'.  Return the new full name of the file.\n\nHandles cross-device moves on Unix using 'copy_file()'.  What about\nother systems???", "XXX I suspect this is Unix-specific -- need porting help!"]}, {"name": "setuptools._distutils.file_util.write_file", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}, {"name": "contents", "type": null, "default": null}], "returns": null, "documentation": ["Create a file with the specified name and write 'contents' (a\nsequence of strings without line terminators) to it."]}], "variables": [{"name": "setuptools._distutils.file_util._copy_action", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._distutils.tests.test_text_file", "documentation": ["Tests for distutils.text_file."], "functions": [], "variables": [{"name": "setuptools._distutils.tests.test_text_file.TEST_DATA", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.tests.test_text_file.TestTextFile", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_text_file.TestTextFile.test_class", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.cygwinccompiler", "documentation": ["distutils.cygwinccompiler\n\nProvides the CygwinCCompiler class, a subclass of UnixCCompiler that\nhandles the Cygwin port of the GNU C compiler to Windows.  It also contains\nthe Mingw32CCompiler class which handles the mingw32 port of GCC (same as\ncygwin in no-cygwin mode)."], "functions": [{"name": "setuptools._distutils.cygwinccompiler.get_msvcr", "asynchronous": false, "params": [], "returns": null, "documentation": ["No longer needed, but kept for backward compatibility."]}, {"name": "setuptools._distutils.cygwinccompiler.check_config_h", "asynchronous": false, "params": [], "returns": null, "documentation": ["Check if the current Python installation appears amenable to building\nextensions with GCC.\n\nReturns a tuple (status, details), where 'status' is one of the following\nconstants:\n\n- CONFIG_H_OK: all is well, go ahead and compile\n- CONFIG_H_NOTOK: doesn't look good\n- CONFIG_H_UNCERTAIN: not sure -- unable to read pyconfig.h\n\n'details' is a human-readable string explaining the situation.\n\nNote there are two ways to conclude \"OK\": either 'sys.version' contains\nthe string \"GCC\" (implying that this Python was built with GCC), or the\ninstalled \"pyconfig.h\" contains the string \"__GNUC__\"."]}, {"name": "setuptools._distutils.cygwinccompiler.is_cygwincc", "asynchronous": false, "params": [{"name": "cc", "type": null, "default": null}], "returns": null, "documentation": ["Try to determine if the compiler that would be used is from cygwin."]}], "variables": [{"name": "setuptools._distutils.cygwinccompiler._runtime_library_dirs_msg", "type": null, "documentation": []}, {"name": "setuptools._distutils.cygwinccompiler.CONFIG_H_OK", "type": null, "documentation": []}, {"name": "setuptools._distutils.cygwinccompiler.CONFIG_H_NOTOK", "type": null, "documentation": []}, {"name": "setuptools._distutils.cygwinccompiler.CONFIG_H_UNCERTAIN", "type": null, "documentation": []}, {"name": "setuptools._distutils.cygwinccompiler.get_versions", "type": null, "documentation": ["A stand-in for the previous get_versions() function to prevent failures\nwhen monkeypatched. See pypa/setuptools#2969."]}], "classes": [{"name": "setuptools._distutils.cygwinccompiler.CygwinCCompiler", "bases": ["UnixCCompiler"], "methods": [{"name": "setuptools._distutils.cygwinccompiler.CygwinCCompiler.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "verbose", "type": null, "default": "..."}, {"name": "dry_run", "type": null, "default": "..."}, {"name": "force", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.cygwinccompiler.CygwinCCompiler.gcc_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.cygwinccompiler.CygwinCCompiler._compile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "obj", "type": null, "default": null}, {"name": "src", "type": null, "default": null}, {"name": "ext", "type": null, "default": null}, {"name": "cc_args", "type": null, "default": null}, {"name": "extra_postargs", "type": null, "default": null}, {"name": "pp_opts", "type": null, "default": null}], "returns": null, "documentation": ["Compiles the source by spawning GCC and windres if needed."]}, {"name": "setuptools._distutils.cygwinccompiler.CygwinCCompiler.link", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "target_desc", "type": null, "default": null}, {"name": "objects", "type": null, "default": null}, {"name": "output_filename", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": "..."}, {"name": "libraries", "type": null, "default": "..."}, {"name": "library_dirs", "type": null, "default": "..."}, {"name": "runtime_library_dirs", "type": null, "default": "..."}, {"name": "export_symbols", "type": null, "default": "..."}, {"name": "debug", "type": null, "default": "..."}, {"name": "extra_preargs", "type": null, "default": "..."}, {"name": "extra_postargs", "type": null, "default": "..."}, {"name": "build_temp", "type": null, "default": "..."}, {"name": "target_lang", "type": null, "default": "..."}], "returns": null, "documentation": ["Link the objects."]}, {"name": "setuptools._distutils.cygwinccompiler.CygwinCCompiler.runtime_library_dir_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.cygwinccompiler.CygwinCCompiler._make_out_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": null}, {"name": "strip_dir", "type": null, "default": null}, {"name": "src_name", "type": null, "default": null}], "returns": null, "documentation": ["-- Miscellaneous methods -----------------------------------------"]}, {"name": "setuptools._distutils.cygwinccompiler.CygwinCCompiler.out_extensions", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Add support for rc and res files."]}], "class_variables": [{"name": "setuptools._distutils.cygwinccompiler.CygwinCCompiler.compiler_type", "type": null, "documentation": []}, {"name": "setuptools._distutils.cygwinccompiler.CygwinCCompiler.obj_extension", "type": null, "documentation": []}, {"name": "setuptools._distutils.cygwinccompiler.CygwinCCompiler.static_lib_extension", "type": null, "documentation": []}, {"name": "setuptools._distutils.cygwinccompiler.CygwinCCompiler.shared_lib_extension", "type": null, "documentation": []}, {"name": "setuptools._distutils.cygwinccompiler.CygwinCCompiler.dylib_lib_extension", "type": null, "documentation": []}, {"name": "setuptools._distutils.cygwinccompiler.CygwinCCompiler.static_lib_format", "type": null, "documentation": []}, {"name": "setuptools._distutils.cygwinccompiler.CygwinCCompiler.shared_lib_format", "type": null, "documentation": []}, {"name": "setuptools._distutils.cygwinccompiler.CygwinCCompiler.dylib_lib_format", "type": null, "documentation": []}, {"name": "setuptools._distutils.cygwinccompiler.CygwinCCompiler.exe_extension", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Handles the Cygwin port of the GNU C compiler to Windows."]}, {"name": "setuptools._distutils.cygwinccompiler.Mingw32CCompiler", "bases": ["CygwinCCompiler"], "methods": [{"name": "setuptools._distutils.cygwinccompiler.Mingw32CCompiler.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "verbose", "type": null, "default": "..."}, {"name": "dry_run", "type": null, "default": "..."}, {"name": "force", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.cygwinccompiler.Mingw32CCompiler.runtime_library_dir_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dir", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.cygwinccompiler.Mingw32CCompiler.compiler_type", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Handles the Mingw32 port of the GNU C compiler to Windows.", "the same as cygwin plus some additional parameters"]}], "exports": []}, {"name": "setuptools._distutils.text_file", "documentation": ["text_file\n\nprovides the TextFile class, which gives an interface to text files\nthat (optionally) takes care of stripping comments, ignoring blank\nlines, and joining lines with backslashes."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.text_file.TextFile", "bases": [], "methods": [{"name": "setuptools._distutils.text_file.TextFile.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "filename", "type": null, "default": "..."}, {"name": "file", "type": null, "default": "..."}, {"name": "**options", "type": null, "default": null}], "returns": null, "documentation": ["Construct a new TextFile object.  At least one of 'filename'\n(a string) and 'file' (a file-like object) must be supplied.\nThey keyword argument options are described above and affect\nthe values returned by 'readline()'."]}, {"name": "setuptools._distutils.text_file.TextFile.open", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": null, "documentation": ["Open a new file named 'filename'.  This overrides both the\n'filename' and 'file' arguments to the constructor."]}, {"name": "setuptools._distutils.text_file.TextFile.close", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Close the current file and forget everything we know about it\n(filename, current line number)."]}, {"name": "setuptools._distutils.text_file.TextFile.gen_error", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}, {"name": "line", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.text_file.TextFile.error", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}, {"name": "line", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.text_file.TextFile.warn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}, {"name": "line", "type": null, "default": "..."}], "returns": null, "documentation": ["Print (to stderr) a warning message tied to the current logical\nline in the current file.  If the current logical line in the\nfile spans multiple physical lines, the warning refers to the\nwhole range, eg. \"lines 3-5\".  If 'line' supplied, it overrides\nthe current line number; it may be a list or tuple to indicate a\nrange of physical lines, or an integer for a single physical\nline."]}, {"name": "setuptools._distutils.text_file.TextFile.readline", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Read and return a single logical line from the current file (or\nfrom an internal buffer if lines have previously been \"unread\"\nwith 'unreadline()').  If the 'join_lines' option is true, this\nmay involve reading multiple physical lines concatenated into a\nsingle string.  Updates the current line number, so calling\n'warn()' after 'readline()' emits a warning about the physical\nline(s) just read.  Returns None on end-of-file, since the empty\nstring can occur if 'rstrip_ws' is true but 'strip_blanks' is\nnot."]}, {"name": "setuptools._distutils.text_file.TextFile.readlines", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Read and return the list of all logical lines remaining in the\ncurrent file."]}, {"name": "setuptools._distutils.text_file.TextFile.unreadline", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "line", "type": null, "default": null}], "returns": null, "documentation": ["Push 'line' (a string) onto an internal buffer that will be\nchecked by future 'readline()' calls.  Handy for implementing\na parser with line-at-a-time lookahead."]}], "class_variables": [{"name": "setuptools._distutils.text_file.TextFile.default_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Provides a file-like object that takes care of all the things you\ncommonly want to do when processing a text file that has some\nline-by-line syntax: strip comments (as long as \"#\" is your\ncomment character), skip blank lines, join adjacent lines by\nescaping the newline (ie. backslash at end of line), strip\nleading and/or trailing whitespace.  All of these are optional\nand independently controllable.\n\nProvides a 'warn()' method so you can generate warning messages that\nreport physical line number, even if the logical line in question\nspans multiple physical lines.  Also provides 'unreadline()' for\nimplementing line-at-a-time lookahead.\n\nConstructor is called as:\n\n    TextFile (filename=None, file=None, **options)\n\nIt bombs (RuntimeError) if both 'filename' and 'file' are None;\n'filename' should be a string, and 'file' a file object (or\nsomething that provides 'readline()' and 'close()' methods).  It is\nrecommended that you supply at least 'filename', so that TextFile\ncan include it in warning messages.  If 'file' is not supplied,\nTextFile creates its own using 'io.open()'.\n\nThe options are all boolean, and affect the value returned by\n'readline()':\n  strip_comments [default: true]\n    strip from \"#\" to end-of-line, as well as any whitespace\n    leading up to the \"#\" -- unless it is escaped by a backslash\n  lstrip_ws [default: false]\n    strip leading whitespace from each line before returning it\n  rstrip_ws [default: true]\n    strip trailing whitespace (including line terminator!) from\n    each line before returning it\n  skip_blanks [default: true}\n    skip lines that are empty *after* stripping comments and\n    whitespace.  (If both lstrip_ws and rstrip_ws are false,\n    then some lines may consist of solely whitespace: these will\n    *not* be skipped, even if 'skip_blanks' is true.)\n  join_lines [default: false]\n    if a backslash is the last non-newline character on a line\n    after stripping comments and whitespace, join the following line\n    to it to form one \"logical line\"; if N consecutive lines end\n    with a backslash, then N+1 physical lines will be joined to\n    form one logical line.\n  collapse_join [default: false]\n    strip leading whitespace from lines that are joined to their\n    predecessor; only matters if (join_lines and not lstrip_ws)\n  errors [default: 'strict']\n    error handler used to decode the file content\n\nNote that since 'rstrip_ws' can strip the trailing newline, the\nsemantics of 'readline()' must differ from those of the builtin file\nobject's 'readline()' method!  In particular, 'readline()' returns\nNone for end-of-file: an empty string might just be a blank line (or\nan all-whitespace line), if 'rstrip_ws' is true but 'skip_blanks' is\nnot."]}], "exports": []}, {"name": "setuptools._distutils.tests.test_bdist_rpm", "documentation": ["Tests for distutils.command.bdist_rpm."], "functions": [{"name": "setuptools._distutils.tests.test_bdist_rpm.sys_executable_encodable", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [{"name": "setuptools._distutils.tests.test_bdist_rpm.SETUP_PY", "type": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_bdist_rpm.mac_woes", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.tests.test_bdist_rpm.TestBuildRpm", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_bdist_rpm.TestBuildRpm.test_quiet", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_bdist_rpm.TestBuildRpm.test_no_optimize_flag", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_build_py", "documentation": ["Tests for distutils.command.build_py."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_build_py.TestBuildPy", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_build_py.TestBuildPy.test_package_data", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_py.TestBuildPy.test_empty_package_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_py.TestBuildPy.test_byte_compile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_py.TestBuildPy.test_byte_compile_optimized", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_py.TestBuildPy.test_dir_in_package_data", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["A directory in package_data should not be added to the filelist."]}, {"name": "setuptools._distutils.tests.test_build_py.TestBuildPy.test_dont_write_bytecode", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_py.TestBuildPy.test_namespace_package_does_not_warn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": ["Originally distutils implementation did not account for PEP 420\nand included warns for package directories that did not contain\n`__init__.py` files.\nAfter the acceptance of PEP 420, these warnings don't make more sense\nso we want to ensure there are not displayed to not confuse the users.\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_unixccompiler", "documentation": ["Tests for distutils.unixccompiler."], "functions": [{"name": "setuptools._distutils.tests.test_unixccompiler.save_values", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_unixccompiler.compiler_wrapper", "asynchronous": false, "params": [{"name": "request", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_unixccompiler.TestUnixCCompiler", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_unixccompiler.TestUnixCCompiler.test_runtime_libdir_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_unixccompiler.TestUnixCCompiler.test_cc_overrides_ldshared", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_unixccompiler.TestUnixCCompiler.test_cc_overrides_ldshared_for_cxx_correctly", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that setting CC env variable also changes default linker\ncorrectly when building C++ extensions.\n\npypa/distutils#126"]}, {"name": "setuptools._distutils.tests.test_unixccompiler.TestUnixCCompiler.test_explicit_ldshared", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_unixccompiler.TestUnixCCompiler.test_has_function", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_unixccompiler.TestUnixCCompiler.test_find_library_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_build", "documentation": ["Tests for distutils.command.build."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_build.TestBuild", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_build.TestBuild.test_finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_install_lib", "documentation": ["Tests for distutils.command.install_data."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_install_lib.TestInstallLib", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_install_lib.TestInstallLib.test_finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_install_lib.TestInstallLib.test_byte_compile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_install_lib.TestInstallLib.test_get_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_install_lib.TestInstallLib.test_get_inputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_install_lib.TestInstallLib.test_dont_write_bytecode", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_versionpredicate", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._distutils.tests.test_filelist", "documentation": ["Tests for distutils.filelist."], "functions": [{"name": "setuptools._distutils.tests.test_filelist.make_local_path", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}], "returns": null, "documentation": ["Converts '/' in a string to os.sep"]}], "variables": [{"name": "setuptools._distutils.tests.test_filelist.MANIFEST_IN", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.tests.test_filelist.TestFileList", "bases": [], "methods": [{"name": "setuptools._distutils.tests.test_filelist.TestFileList.assertNoWarnings", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_filelist.TestFileList.assertWarnings", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_filelist.TestFileList.test_glob_to_re", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_filelist.TestFileList.test_process_template_line", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_filelist.TestFileList.test_debug_print", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "capsys", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_filelist.TestFileList.test_set_allfiles", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_filelist.TestFileList.test_remove_duplicates", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_filelist.TestFileList.test_translate_pattern", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_filelist.TestFileList.test_exclude_pattern", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_filelist.TestFileList.test_include_pattern", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_filelist.TestFileList.test_process_template", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._distutils.tests.test_filelist.TestFindAll", "bases": [], "methods": [{"name": "setuptools._distutils.tests.test_filelist.TestFindAll.test_missing_symlink", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "temp_cwd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_filelist.TestFindAll.test_basic_discovery", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "temp_cwd", "type": null, "default": null}], "returns": null, "documentation": ["When findall is called with no parameters or with\n'.' as the parameter, the dot should be omitted from\nthe results."]}, {"name": "setuptools._distutils.tests.test_filelist.TestFindAll.test_non_local_discovery", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["When findall is called with another path, the full\npath name should be returned."]}, {"name": "setuptools._distutils.tests.test_filelist.TestFindAll.test_symlink_loop", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_bdist_dumb", "documentation": ["Tests for distutils.command.bdist_dumb."], "functions": [], "variables": [{"name": "setuptools._distutils.tests.test_bdist_dumb.SETUP_PY", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.tests.test_bdist_dumb.TestBuildDumb", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_bdist_dumb.TestBuildDumb.test_simple_built", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_install_data", "documentation": ["Tests for distutils.command.install_data."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_install_data.TestInstallData", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_install_data.TestInstallData.test_simple_run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_check", "documentation": ["Tests for distutils.command.check."], "functions": [], "variables": [{"name": "setuptools._distutils.tests.test_check.pygments", "type": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_check.HERE", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.tests.test_check.TestCheck", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_check.TestCheck._run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "metadata", "type": null, "default": "..."}, {"name": "cwd", "type": null, "default": "..."}, {"name": "**options", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_check.TestCheck.test_check_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_check.TestCheck.test_check_author_maintainer", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_check.TestCheck.test_check_document", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_check.TestCheck.test_check_restructuredtext", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_check.TestCheck.test_check_restructuredtext_with_syntax_highlight", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_check.TestCheck.test_check_all", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_sdist", "documentation": ["Tests for distutils.command.sdist."], "functions": [{"name": "setuptools._distutils.tests.test_sdist.project_dir", "asynchronous": false, "params": [{"name": "request", "type": null, "default": null}, {"name": "distutils_managed_tempdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sdist.clean_lines", "asynchronous": false, "params": [{"name": "filepath", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools._distutils.tests.test_sdist.SETUP_PY", "type": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sdist.MANIFEST", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.tests.test_sdist.TestSDist", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_sdist.TestSDist.get_cmd", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "metadata", "type": null, "default": "..."}], "returns": null, "documentation": ["Returns a cmd"]}, {"name": "setuptools._distutils.tests.test_sdist.TestSDist.test_prune_file_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sdist.TestSDist.test_make_distribution", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sdist.TestSDist.test_add_defaults", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sdist.TestSDist.warnings", "asynchronous": false, "params": [{"name": "messages", "type": null, "default": null}, {"name": "prefix", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sdist.TestSDist.test_metadata_check_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sdist.TestSDist.test_show_formats", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "capsys", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sdist.TestSDist.test_finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sdist.TestSDist._check_template", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "content", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": ["the following tests make sure there is a nice error message instead", "of a traceback when parsing an invalid manifest template"]}, {"name": "setuptools._distutils.tests.test_sdist.TestSDist.test_invalid_template_unknown_command", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sdist.TestSDist.test_invalid_template_wrong_arguments", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sdist.TestSDist.test_invalid_template_wrong_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sdist.TestSDist.test_get_file_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sdist.TestSDist.test_manifest_marker", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sdist.TestSDist.test_manifest_comments", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sdist.TestSDist.test_manual_manifest", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sdist.TestSDist.test_make_distribution_owner_group", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_msvccompiler", "documentation": ["Tests for distutils._msvccompiler."], "functions": [], "variables": [{"name": "setuptools._distutils.tests.test_msvccompiler.needs_winreg", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.tests.test_msvccompiler.Testmsvccompiler", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_msvccompiler.Testmsvccompiler.test_no_compiler", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_msvccompiler.Testmsvccompiler.test_cross_platform_compilation_paths", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "plat_name", "type": null, "default": null}, {"name": "expected", "type": null, "default": null}], "returns": null, "documentation": ["Ensure a specified target platform is passed to _get_vcvars_spec."]}, {"name": "setuptools._distutils.tests.test_msvccompiler.Testmsvccompiler.test_get_vc_env_unicode", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_msvccompiler.Testmsvccompiler.test_get_vc", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "ver", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._distutils.tests.test_msvccompiler.CheckThread", "bases": ["threading.Thread"], "methods": [{"name": "setuptools._distutils.tests.test_msvccompiler.CheckThread.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_msvccompiler.CheckThread.__bool__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.tests.test_msvccompiler.CheckThread.exc_info", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._distutils.tests.test_msvccompiler.TestSpawn", "bases": [], "methods": [{"name": "setuptools._distutils.tests.test_msvccompiler.TestSpawn.test_concurrent_safe", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Concurrent calls to spawn should have consistent results."]}, {"name": "setuptools._distutils.tests.test_msvccompiler.TestSpawn.test_concurrent_safe_fallback", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["If CCompiler.spawn has been monkey-patched without support\nfor an env, it should still execute."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_build_scripts", "documentation": ["Tests for distutils.command.build_scripts."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_build_scripts.TestBuildScripts", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_build_scripts.TestBuildScripts.test_default_settings", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_scripts.TestBuildScripts.test_build", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_scripts.TestBuildScripts.get_build_scripts_cmd", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "target", "type": null, "default": null}, {"name": "scripts", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_scripts.TestBuildScripts.write_sample_scripts", "asynchronous": false, "params": [{"name": "dir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_scripts.TestBuildScripts.test_version_int", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_file_util", "documentation": ["Tests for distutils.file_util."], "functions": [{"name": "setuptools._distutils.tests.test_file_util.stuff", "asynchronous": false, "params": [{"name": "request", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_file_util.TestFileUtil", "bases": [], "methods": [{"name": "setuptools._distutils.tests.test_file_util.TestFileUtil.test_move_file_verbosity", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_file_util.TestFileUtil.test_move_file_exception_unpacking_rename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_file_util.TestFileUtil.test_move_file_exception_unpacking_unlink", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_file_util.TestFileUtil.test_copy_file_hard_link", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_file_util.TestFileUtil.test_copy_file_hard_link_failure", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.unix_compat", "documentation": [], "functions": [], "variables": [{"name": "setuptools._distutils.tests.unix_compat.UNIX_ID_SUPPORT", "type": null, "documentation": []}, {"name": "setuptools._distutils.tests.unix_compat.UID_0_SUPPORT", "type": null, "documentation": []}, {"name": "setuptools._distutils.tests.unix_compat.require_unix_id", "type": null, "documentation": []}, {"name": "setuptools._distutils.tests.unix_compat.require_uid_0", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._distutils.tests.test_archive_util", "documentation": ["Tests for distutils.archive_util."], "functions": [{"name": "setuptools._distutils.tests.test_archive_util.can_fs_encode", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}], "returns": null, "documentation": ["Return True if the filename can be saved in the file system."]}, {"name": "setuptools._distutils.tests.test_archive_util.all_equal", "asynchronous": false, "params": [{"name": "values", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.same_drive", "asynchronous": false, "params": [{"name": "*paths", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase.test_make_tarball", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase.test_make_tarball_gzip", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase.test_make_tarball_bzip2", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase.test_make_tarball_xz", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase.test_make_tarball_latin1", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Mirror test_make_tarball, except filename contains latin characters."]}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase.test_make_tarball_extended", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Mirror test_make_tarball, except filename contains extended\ncharacters outside the latin charset."]}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase._make_tarball", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}, {"name": "target_name", "type": null, "default": null}, {"name": "suffix", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase._tarinfo", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase._create_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase.test_tarfile_vs_tar", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase.test_make_zipfile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase.test_make_zipfile_no_zlib", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase.test_check_archive_formats", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase.test_make_archive", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase.test_make_archive_cwd", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase.test_make_archive_tar", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase.test_make_archive_gztar", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase.test_make_archive_bztar", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase.test_make_archive_xztar", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase.test_make_archive_owner_group", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase.test_tarfile_root_owner", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase._zip_created_files", "type": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_archive_util.ArchiveUtilTestCase._created_files", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.compat", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._distutils.tests.test_ccompiler", "documentation": [], "functions": [{"name": "setuptools._distutils.tests.test_ccompiler._make_strs", "asynchronous": false, "params": [{"name": "paths", "type": null, "default": null}], "returns": null, "documentation": ["Convert paths to strings for legacy compatibility."]}, {"name": "setuptools._distutils.tests.test_ccompiler.c_file", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_ccompiler.test_set_include_dirs", "asynchronous": false, "params": [{"name": "c_file", "type": null, "default": null}], "returns": null, "documentation": ["Extensions should build even if set_include_dirs is invoked.\nIn particular, compiler-specific paths should not be overridden."]}, {"name": "setuptools._distutils.tests.test_ccompiler.test_has_function_prototype", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_ccompiler.test_include_dirs_after_multiple_compile_calls", "asynchronous": false, "params": [{"name": "c_file", "type": null, "default": null}], "returns": null, "documentation": ["Calling compile multiple times should not change the include dirs\n(regression test for setuptools issue #3591)."]}], "variables": [{"name": "setuptools._distutils.tests.test_ccompiler.pytestmark", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._distutils.tests.compat.py39", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._distutils.tests.test_extension", "documentation": ["Tests for distutils.extension."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_extension.TestExtension", "bases": [], "methods": [{"name": "setuptools._distutils.tests.test_extension.TestExtension.test_read_setup_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_extension.TestExtension.test_extension_init", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_cygwinccompiler", "documentation": ["Tests for distutils.cygwinccompiler."], "functions": [{"name": "setuptools._distutils.tests.test_cygwinccompiler.stuff", "asynchronous": false, "params": [{"name": "request", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "distutils_managed_tempdir", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_cygwinccompiler.TestCygwinCCompiler", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_cygwinccompiler.TestCygwinCCompiler._get_config_h_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_cygwinccompiler.TestCygwinCCompiler.test_find_library_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_cygwinccompiler.TestCygwinCCompiler.test_runtime_library_dir_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_cygwinccompiler.TestCygwinCCompiler.test_check_config_h", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_cygwinccompiler.TestCygwinCCompiler.test_get_msvcr", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_cygwinccompiler.TestCygwinCCompiler.test_dll_libraries_not_none", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_cmd", "documentation": ["Tests for distutils.cmd."], "functions": [{"name": "setuptools._distutils.tests.test_cmd.cmd", "asynchronous": false, "params": [{"name": "request", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_cmd.MyCmd", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.tests.test_cmd.MyCmd.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._distutils.tests.test_cmd.TestCommand", "bases": [], "methods": [{"name": "setuptools._distutils.tests.test_cmd.TestCommand.test_ensure_string_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "cmd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_cmd.TestCommand.test_make_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "cmd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_cmd.TestCommand.test_dump_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "cmd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_cmd.TestCommand.test_ensure_string", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "cmd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_cmd.TestCommand.test_ensure_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "cmd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_cmd.TestCommand.test_ensure_dirname", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "cmd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_cmd.TestCommand.test_debug_print", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "cmd", "type": null, "default": null}, {"name": "capsys", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests", "documentation": ["Test suite for distutils.\n\nTests for the command classes in the distutils.command package are\nincluded in distutils.tests as well, instead of using a separate\ndistutils.command.tests package, since command identification is done\nby import rather than matching pre-defined names."], "functions": [{"name": "setuptools._distutils.tests.missing_compiler_executable", "asynchronous": false, "params": [{"name": "cmd_names", "type": {"name": "Sequence", "xref": {"fqname": "collections.abc.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": null, "documentation": ["Check if the compiler components used to build the interpreter exist.\n\nCheck for the existence of the compiler executables whose names are listed\nin 'cmd_names' or all the compiler executables when 'cmd_names' is empty\nand return the first missing executable or None when none is found\nmissing."]}], "variables": [], "classes": [], "exports": [{"name": "setuptools._distutils.tests.Sequence", "xref": {"fqname": "collections.abc.Sequence", "project": null}}]}, {"name": "setuptools._distutils.tests.test_install_headers", "documentation": ["Tests for distutils.command.install_headers."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_install_headers.TestInstallHeaders", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_install_headers.TestInstallHeaders.test_simple_run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_bdist", "documentation": ["Tests for distutils.command.bdist."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_bdist.TestBuild", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_bdist.TestBuild.test_formats", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_bdist.TestBuild.test_skip_build", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_config_cmd", "documentation": ["Tests for distutils.command.config."], "functions": [{"name": "setuptools._distutils.tests.test_config_cmd.info_log", "asynchronous": false, "params": [{"name": "request", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_config_cmd.TestConfig", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_config_cmd.TestConfig._info", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_config_cmd.TestConfig.test_dump_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_config_cmd.TestConfig.test_search_cpp", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_config_cmd.TestConfig.test_finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_config_cmd.TestConfig.test_clean", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_core", "documentation": ["Tests for distutils.core."], "functions": [{"name": "setuptools._distutils.tests.test_core.save_stdout", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_core.temp_file", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools._distutils.tests.test_core.setup_using___file__", "type": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_core.setup_prints_cwd", "type": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_core.setup_does_nothing", "type": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_core.setup_defines_subclass", "type": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_core.setup_within_if_main", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.tests.test_core.TestCore", "bases": [], "methods": [{"name": "setuptools._distutils.tests.test_core.TestCore.test_run_setup_provides_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "temp_file", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_core.TestCore.test_run_setup_preserves_sys_argv", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "temp_file", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_core.TestCore.test_run_setup_defines_subclass", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "temp_file", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_core.TestCore.test_run_setup_uses_current_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Test that the setup script is run with the current directory\nas its own current directory."]}, {"name": "setuptools._distutils.tests.test_core.TestCore.test_run_setup_within_if_main", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "temp_file", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_core.TestCore.test_run_commands", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "temp_file", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_core.TestCore.test_debug_mode", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "capsys", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_clean", "documentation": ["Tests for distutils.command.clean."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_clean.TestClean", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_clean.TestClean.test_simple_run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_util", "documentation": ["Tests for distutils.util."], "functions": [{"name": "setuptools._distutils.tests.test_util.environment", "asynchronous": false, "params": [{"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_util.TestUtil", "bases": [], "methods": [{"name": "setuptools._distutils.tests.test_util.TestUtil.test_get_host_platform", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_util.TestUtil.test_get_platform", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_util.TestUtil.test_convert_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_util.TestUtil.test_change_root", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_util.TestUtil.test_check_environ", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_util.TestUtil.test_check_environ_getpwuid", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_util.TestUtil.test_split_quoted", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_util.TestUtil.test_strtobool", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_util.TestUtil.test_rfc822_escape", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "given", "type": null, "default": null}, {"name": "wanted", "type": null, "default": null}], "returns": null, "documentation": ["We want to ensure a multi-line header parses correctly.\n\nFor interoperability, the escaped value should also \"round-trip\" over\n`email.generator.Generator.flatten` and `email.message_from_*`\n(see pypa/setuptools#4033).\n\nThe main issue is that internally `email.policy.EmailPolicy` uses\n`splitlines` which will split on some control chars. If all the new lines\nare not prefixed with spaces, the parser will interrupt reading\nthe current header and produce an incomplete value, while\nincorrectly interpreting the rest of the headers as part of the payload."]}, {"name": "setuptools._distutils.tests.test_util.TestUtil.test_dont_write_bytecode", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_util.TestUtil.test_grok_environment_error", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.tests.test_util.TestUtil.indent", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_build_ext", "documentation": [], "functions": [{"name": "setuptools._distutils.tests.test_build_ext.user_site_dir", "asynchronous": false, "params": [{"name": "request", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.safe_extension_import", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.extension_redirect", "asynchronous": false, "params": [{"name": "mod", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["Tests will fail to tear down an extension module if it's been imported.\n\nBefore importing, copy the file to a temporary directory that won't\nbe cleaned up. Yield the new path."]}], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_build_ext.TestBuildExt", "bases": ["TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_build_ext.TestBuildExt.build_ext", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.TestBuildExt.test_build_ext", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.TestBuildExt._test_xx", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.TestBuildExt.test_solaris_enable_shared", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.TestBuildExt.test_user_site", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.TestBuildExt.test_optional_extension", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.TestBuildExt.test_finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.TestBuildExt.test_check_extensions_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.TestBuildExt.test_get_source_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.TestBuildExt.test_unicode_module_names", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.TestBuildExt.test_compiler_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.TestBuildExt.test_get_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.TestBuildExt.test_ext_fullpath", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.TestBuildExt.test_deployment_target_default", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.TestBuildExt.test_deployment_target_too_low", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.TestBuildExt.test_deployment_target_higher_ok", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.TestBuildExt._try_compile_deployment_target", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "operator", "type": null, "default": null}, {"name": "target", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._distutils.tests.test_build_ext.TestParallelBuildExt", "bases": ["TestBuildExt"], "methods": [{"name": "setuptools._distutils.tests.test_build_ext.TestParallelBuildExt.build_ext", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_mingwccompiler", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_mingwccompiler.TestMingw32CCompiler", "bases": [], "methods": [{"name": "setuptools._distutils.tests.test_mingwccompiler.TestMingw32CCompiler.test_compiler_type", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_mingwccompiler.TestMingw32CCompiler.test_set_executables", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_mingwccompiler.TestMingw32CCompiler.test_runtime_library_dir_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_mingwccompiler.TestMingw32CCompiler.test_cygwincc_error", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_mingwccompiler.TestMingw32CCompiler.test_customize_compiler_with_msvc_python", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_sysconfig", "documentation": ["Tests for distutils.sysconfig."], "functions": [{"name": "setuptools._distutils.tests.test_sysconfig._gen_makefile", "asynchronous": false, "params": [{"name": "root", "type": null, "default": null}, {"name": "contents", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig", "bases": [], "methods": [{"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.test_get_config_h_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.test_get_makefile_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.test_get_python_lib", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.test_get_config_vars", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.test_srcdir_simple", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.test_srcdir_python_build", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.test_srcdir_independent_of_cwd", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["srcdir should be independent of the current working directory"]}, {"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.customize_compiler", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.test_customize_compiler", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.test_parse_makefile_base", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.test_parse_makefile_literal_dollar", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.test_sysconfig_module", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.test_sysconfig_compiler_vars", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["On macOS, binary installers support extension module building on", "various levels of the operating system with differing Xcode", "configurations, requiring customization of some of the", "compiler configuration directives to suit the environment on", "the installed machine. Some of these customizations may require", "running external programs and are thus deferred until needed by", "the first extension module build. Only", "the Distutils version of sysconfig is used for extension module", "builds, which happens earlier in the Distutils tests. This may", "cause the following tests to fail since no tests have caused", "the global version of sysconfig to call the customization yet.", "The solution for now is to simply skip this test in this case.", "The longer-term solution is to only have one version of sysconfig."]}, {"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.test_SO_deprecation", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.test_customize_compiler_before_get_config_vars", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.test_parse_config_h", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.test_win_ext_suffix", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.test_win_build_venv_from_source_tree", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Ensure distutils.sysconfig detects venvs from source tree builds."]}, {"name": "setuptools._distutils.tests.test_sysconfig.TestSysconfig.test_get_python_inc_missing_config_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": ["In portable Python installations, the sysconfig will be broken,\npointing to the directories where the installation was built and\nnot where it currently is. In this case, ensure that the missing\ndirectory isn't used for get_python_inc.\n\nSee pypa/distutils#178."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_install", "documentation": ["Tests for distutils.command.install."], "functions": [{"name": "setuptools._distutils.tests.test_install._make_ext_name", "asynchronous": false, "params": [{"name": "modname", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_install.TestInstall", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_install.TestInstall.test_home_installation_scheme", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_install.TestInstall.test_user_site", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_install.TestInstall.test_handle_extra_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_install.TestInstall.test_finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_install.TestInstall.test_record", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_install.TestInstall.test_record_extensions", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_install.TestInstall.test_debug_mode", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_modified", "documentation": ["Tests for distutils._modified."], "functions": [{"name": "setuptools._distutils.tests.test_modified.groups_target", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Set up some older sources, a target, and newer sources.\n\nReturns a simple namespace with these values."]}, {"name": "setuptools._distutils.tests.test_modified.test_newer_pairwise_group", "asynchronous": false, "params": [{"name": "groups_target", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_modified.test_newer_group_no_sources_no_target", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Consider no sources and no target \"newer\"."]}], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_modified.TestDepUtil", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_modified.TestDepUtil.test_newer", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_modified.TestDepUtil._setup_1234", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_modified.TestDepUtil.test_newer_pairwise", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_modified.TestDepUtil.test_newer_pairwise_mismatch", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_modified.TestDepUtil.test_newer_pairwise_empty", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_modified.TestDepUtil.test_newer_pairwise_fresh", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_modified.TestDepUtil.test_newer_group", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_validations", "documentation": ["noqa", "ruff: noqa", "flake8: noqa", "pylint: skip-file", "mypy: ignore-errors", "yapf: disable", "pylama:skip=1", "*** PLEASE DO NOT MODIFY DIRECTLY: Automatically generated code *** "], "functions": [{"name": "setuptools.config._validate_pyproject.fastjsonschema_validations.validate", "asynchronous": false, "params": [{"name": "data", "type": null, "default": null}, {"name": "custom_formats", "type": null, "default": "..."}, {"name": "name_prefix", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_validations.validate_https___packaging_python_org_en_latest_specifications_declaring_build_dependencies", "asynchronous": false, "params": [{"name": "data", "type": null, "default": null}, {"name": "custom_formats", "type": null, "default": "..."}, {"name": "name_prefix", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_validations.validate_https___setuptools_pypa_io_en_latest_userguide_pyproject_config_html", "asynchronous": false, "params": [{"name": "data", "type": null, "default": null}, {"name": "custom_formats", "type": null, "default": "..."}, {"name": "name_prefix", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_validations.validate_https___setuptools_pypa_io_en_latest_userguide_pyproject_config_html__definitions_file_directive_properties_file", "asynchronous": false, "params": [{"name": "data", "type": null, "default": null}, {"name": "custom_formats", "type": null, "default": "..."}, {"name": "name_prefix", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_validations.validate_https___setuptools_pypa_io_en_latest_userguide_pyproject_config_html__definitions_file_directive_for_dependencies", "asynchronous": false, "params": [{"name": "data", "type": null, "default": null}, {"name": "custom_formats", "type": null, "default": "..."}, {"name": "name_prefix", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_validations.validate_https___setuptools_pypa_io_en_latest_userguide_pyproject_config_html__definitions_file_directive", "asynchronous": false, "params": [{"name": "data", "type": null, "default": null}, {"name": "custom_formats", "type": null, "default": "..."}, {"name": "name_prefix", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_validations.validate_https___setuptools_pypa_io_en_latest_userguide_pyproject_config_html__definitions_attr_directive", "asynchronous": false, "params": [{"name": "data", "type": null, "default": null}, {"name": "custom_formats", "type": null, "default": "..."}, {"name": "name_prefix", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_validations.validate_https___setuptools_pypa_io_en_latest_userguide_pyproject_config_html__definitions_ext_module", "asynchronous": false, "params": [{"name": "data", "type": null, "default": null}, {"name": "custom_formats", "type": null, "default": "..."}, {"name": "name_prefix", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_validations.validate_https___setuptools_pypa_io_en_latest_userguide_pyproject_config_html__definitions_find_directive", "asynchronous": false, "params": [{"name": "data", "type": null, "default": null}, {"name": "custom_formats", "type": null, "default": "..."}, {"name": "name_prefix", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_validations.validate_https___setuptools_pypa_io_en_latest_userguide_pyproject_config_html__definitions_package_name", "asynchronous": false, "params": [{"name": "data", "type": null, "default": null}, {"name": "custom_formats", "type": null, "default": "..."}, {"name": "name_prefix", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_validations.validate_https___setuptools_pypa_io_en_latest_deprecated_distutils_configfile_html", "asynchronous": false, "params": [{"name": "data", "type": null, "default": null}, {"name": "custom_formats", "type": null, "default": "..."}, {"name": "name_prefix", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_validations.validate_https___packaging_python_org_en_latest_specifications_pyproject_toml", "asynchronous": false, "params": [{"name": "data", "type": null, "default": null}, {"name": "custom_formats", "type": null, "default": "..."}, {"name": "name_prefix", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_validations.validate_https___packaging_python_org_en_latest_specifications_pyproject_toml___definitions_dependency", "asynchronous": false, "params": [{"name": "data", "type": null, "default": null}, {"name": "custom_formats", "type": null, "default": "..."}, {"name": "name_prefix", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_validations.validate_https___packaging_python_org_en_latest_specifications_pyproject_toml___definitions_entry_point_group", "asynchronous": false, "params": [{"name": "data", "type": null, "default": null}, {"name": "custom_formats", "type": null, "default": "..."}, {"name": "name_prefix", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_validations.validate_https___packaging_python_org_en_latest_specifications_pyproject_toml___definitions_author", "asynchronous": false, "params": [{"name": "data", "type": null, "default": null}, {"name": "custom_formats", "type": null, "default": "..."}, {"name": "name_prefix", "type": null, "default": "..."}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.config._validate_pyproject.fastjsonschema_validations.VERSION", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_validations.REGEX_PATTERNS", "type": null, "documentation": []}, {"name": "setuptools.config._validate_pyproject.fastjsonschema_validations.NoneType", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._distutils.tests.test_log", "documentation": ["Tests for distutils.log"], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_log.TestLog", "bases": [], "methods": [{"name": "setuptools._distutils.tests.test_log.TestLog.test_non_ascii", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.support", "documentation": ["Support code for distutils test cases."], "functions": [{"name": "setuptools._distutils.tests.support.copy_xxmodule_c", "asynchronous": false, "params": [{"name": "directory", "type": null, "default": null}], "returns": null, "documentation": ["Helper for tests that need the xxmodule.c source file.\n\nExample use:\n\n    def test_compile(self):\n        copy_xxmodule_c(self.tmpdir)\n        self.assertIn('xxmodule.c', os.listdir(self.tmpdir))\n\nIf the source file can be found, it will be copied to *directory*.  If not,\nthe test will be skipped.  Errors during copy are not caught."]}, {"name": "setuptools._distutils.tests.support._get_xxmodule_path", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.support.fixup_build_ext", "asynchronous": false, "params": [{"name": "cmd", "type": null, "default": null}], "returns": null, "documentation": ["Function needed to make build_ext tests pass.\n\nWhen Python was built with --enable-shared on Unix, -L. is not enough to\nfind libpython<blah>.so, because regrtest runs in a tempdir, not in the\nsource directory where the .so lives.\n\nWhen Python was built with in debug mode on Windows, build_ext commands\nneed their debug attribute set, and it is not done automatically for\nsome reason.\n\nThis function handles both of these things.  Example use:\n\n    cmd = build_ext(dist)\n    support.fixup_build_ext(cmd)\n    cmd.ensure_finalized()\n\nUnlike most other Unix platforms, Mac OS X embeds absolute paths\nto shared libraries into executables, so the fixup is not needed there."]}, {"name": "setuptools._distutils.tests.support.combine_markers", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": null, "documentation": ["pytest will honor markers as found on the class, but when\nmarkers are on multiple subclasses, only one appears. Use\nthis decorator to combine those markers."]}], "variables": [], "classes": [{"name": "setuptools._distutils.tests.support.TempdirManager", "bases": [], "methods": [{"name": "setuptools._distutils.tests.support.TempdirManager.mkdtemp", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Create a temporary directory that will be cleaned up.\n\nReturns the path of the directory."]}, {"name": "setuptools._distutils.tests.support.TempdirManager.write_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}, {"name": "content", "type": null, "default": "..."}], "returns": null, "documentation": ["Writes a file in the given path.\n\npath can be a string or a sequence."]}, {"name": "setuptools._distutils.tests.support.TempdirManager.create_dist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pkg_name", "type": null, "default": "..."}, {"name": "**kw", "type": null, "default": null}], "returns": null, "documentation": ["Will generate a test environment.\n\nThis function creates:\n - a Distribution instance using keywords\n - a temporary directory with a package structure\n\nIt returns the package directory and the distribution\ninstance."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Mix-in class that handles temporary directories for test cases."]}, {"name": "setuptools._distutils.tests.support.DummyCommand", "bases": [], "methods": [{"name": "setuptools._distutils.tests.support.DummyCommand.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.support.DummyCommand.ensure_finalized", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Class to store options for retrieval via set_undefined_options()."]}], "exports": []}, {"name": "setuptools._distutils.tests.test_spawn", "documentation": ["Tests for distutils.spawn."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_spawn.TestSpawn", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_spawn.TestSpawn.test_spawn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_spawn.TestSpawn.test_find_executable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_spawn.TestSpawn._make_executable", "asynchronous": false, "params": [{"name": "tmp_path", "type": null, "default": null}, {"name": "ext", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_spawn.TestSpawn.test_spawn_missing_exe", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_build_clib", "documentation": ["Tests for distutils.command.build_clib."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_build_clib.TestBuildCLib", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_build_clib.TestBuildCLib.test_check_library_dist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_clib.TestBuildCLib.test_get_source_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_clib.TestBuildCLib.test_build_libraries", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_clib.TestBuildCLib.test_finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_build_clib.TestBuildCLib.test_run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_version", "documentation": ["Tests for distutils.version."], "functions": [{"name": "setuptools._distutils.tests.test_version.suppress_deprecation", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_version.TestVersion", "bases": [], "methods": [{"name": "setuptools._distutils.tests.test_version.TestVersion.test_prerelease", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_version.TestVersion.test_cmp_strict", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_version.TestVersion.test_cmp", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_install_scripts", "documentation": ["Tests for distutils.command.install_scripts."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_install_scripts.TestInstallScripts", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_install_scripts.TestInstallScripts.test_default_settings", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_install_scripts.TestInstallScripts.test_installation", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.tests.test_dir_util", "documentation": ["Tests for distutils.dir_util."], "functions": [{"name": "setuptools._distutils.tests.test_dir_util.stuff", "asynchronous": false, "params": [{"name": "request", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "distutils_managed_tempdir", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools._distutils.tests.test_dir_util.TestDirUtil", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_dir_util.TestDirUtil.test_mkpath_remove_tree_verbosity", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dir_util.TestDirUtil.test_mkpath_with_custom_mode", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dir_util.TestDirUtil.test_create_tree_verbosity", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dir_util.TestDirUtil.test_copy_tree_verbosity", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dir_util.TestDirUtil.test_copy_tree_skips_nfs_temp_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dir_util.TestDirUtil.test_ensure_relative", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dir_util.TestDirUtil.test_copy_tree_exception_in_listdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["An exception in listdir should raise a DistutilsFileError"]}, {"name": "setuptools._distutils.tests.test_dir_util.TestDirUtil.test_mkpath_exception_uncached", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": ["Caching should not remember failed attempts.\n\npypa/distutils#304"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.log", "documentation": ["A simple log mechanism styled after PEP 282.\n\nRetained for compatibility and should not be used."], "functions": [{"name": "setuptools._distutils.log.set_threshold", "asynchronous": false, "params": [{"name": "level", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.log.set_verbosity", "asynchronous": false, "params": [{"name": "v", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools._distutils.log.DEBUG", "type": null, "documentation": []}, {"name": "setuptools._distutils.log.INFO", "type": null, "documentation": []}, {"name": "setuptools._distutils.log.WARN", "type": null, "documentation": []}, {"name": "setuptools._distutils.log.ERROR", "type": null, "documentation": []}, {"name": "setuptools._distutils.log.FATAL", "type": null, "documentation": []}, {"name": "setuptools._distutils.log.log", "type": null, "documentation": []}, {"name": "setuptools._distutils.log.debug", "type": null, "documentation": []}, {"name": "setuptools._distutils.log.info", "type": null, "documentation": []}, {"name": "setuptools._distutils.log.warn", "type": null, "documentation": []}, {"name": "setuptools._distutils.log.error", "type": null, "documentation": []}, {"name": "setuptools._distutils.log.fatal", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.log.Log", "bases": ["logging.Logger"], "methods": [{"name": "setuptools._distutils.log.Log.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "threshold", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.log.Log.threshold", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.log.Log.threshold", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "level", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.log.Log.warn", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["distutils.log.Log is deprecated, please use an alternative from `logging`."]}], "exports": []}, {"name": "setuptools._distutils._macos_compat", "documentation": [], "functions": [{"name": "setuptools._distutils._macos_compat.bypass_compiler_fixup", "asynchronous": false, "params": [{"name": "cmd", "type": null, "default": null}, {"name": "args", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools._distutils._macos_compat.compiler_fixup", "type": null, "documentation": []}, {"name": "setuptools._distutils._macos_compat.compiler_fixup", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._distutils._modified", "documentation": ["Timestamp comparison of files and groups of files."], "functions": [{"name": "setuptools._distutils._modified._newer", "asynchronous": false, "params": [{"name": "source", "type": null, "default": null}, {"name": "target", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils._modified.newer", "asynchronous": false, "params": [{"name": "source", "type": null, "default": null}, {"name": "target", "type": null, "default": null}], "returns": null, "documentation": ["Is source modified more recently than target.\n\nReturns True if 'source' is modified more recently than\n'target' or if 'target' does not exist.\n\nRaises DistutilsFileError if 'source' does not exist."]}, {"name": "setuptools._distutils._modified.newer_pairwise", "asynchronous": false, "params": [{"name": "sources", "type": null, "default": null}, {"name": "targets", "type": null, "default": null}, {"name": "newer", "type": null, "default": "..."}], "returns": null, "documentation": ["Filter filenames where sources are newer than targets.\n\nWalk two filename iterables in parallel, testing if each source is newer\nthan its corresponding target.  Returns a pair of lists (sources,\ntargets) where source is newer than target, according to the semantics\nof 'newer()'."]}, {"name": "setuptools._distutils._modified.newer_group", "asynchronous": false, "params": [{"name": "sources", "type": null, "default": null}, {"name": "target", "type": null, "default": null}, {"name": "missing", "type": null, "default": "..."}], "returns": null, "documentation": ["Is target out-of-date with respect to any file in sources.\n\nReturn True if 'target' is out-of-date with respect to any file\nlisted in 'sources'. In other words, if 'target' exists and is newer\nthan every file in 'sources', return False; otherwise return True.\n`missing` controls how to handle a missing source file:\n\n- error (default): allow the `stat()` call to fail.\n- ignore: silently disregard any missing source files.\n- newer: treat missing source files as \"target out of date\". This\n  mode is handy in \"dry-run\" mode: it will pretend to carry out\n  commands that wouldn't work because inputs are missing, but\n  that doesn't matter because dry-run won't run the commands.\n"]}], "variables": [{"name": "setuptools._distutils._modified.newer_pairwise_group", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._distutils.errors", "documentation": ["Exceptions used by the Distutils modules.\n\nDistutils modules may raise these or standard exceptions,\nincluding {exc}`SystemExit`.\n"], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.errors.DistutilsError", "bases": ["Exception"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["The root of all Distutils evil."]}, {"name": "setuptools._distutils.errors.DistutilsModuleError", "bases": ["DistutilsError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Unable to load an expected module, or to find an expected class\nwithin some module (in particular, command modules and classes)."]}, {"name": "setuptools._distutils.errors.DistutilsClassError", "bases": ["DistutilsError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Some command class (or possibly distribution class, if anyone\nfeels a need to subclass Distribution) is found not to be holding\nup its end of the bargain, ie. implementing some part of the\n\"command \"interface."]}, {"name": "setuptools._distutils.errors.DistutilsGetoptError", "bases": ["DistutilsError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["The option table provided to 'fancy_getopt()' is bogus."]}, {"name": "setuptools._distutils.errors.DistutilsArgError", "bases": ["DistutilsError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Raised by fancy_getopt in response to getopt.error -- ie. an\nerror in the command line usage."]}, {"name": "setuptools._distutils.errors.DistutilsFileError", "bases": ["DistutilsError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Any problems in the filesystem: expected file not found, etc.\nTypically this is for problems that we detect before OSError\ncould be raised."]}, {"name": "setuptools._distutils.errors.DistutilsOptionError", "bases": ["DistutilsError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Syntactic/semantic errors in command options, such as use of\nmutually conflicting options, or inconsistent options,\nbadly-spelled values, etc.  No distinction is made between option\nvalues originating in the setup script, the command line, config\nfiles, or what-have-you -- but if we *know* something originated in\nthe setup script, we'll raise DistutilsSetupError instead."]}, {"name": "setuptools._distutils.errors.DistutilsSetupError", "bases": ["DistutilsError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["For errors that can be definitely blamed on the setup script,\nsuch as invalid keyword arguments to 'setup()'."]}, {"name": "setuptools._distutils.errors.DistutilsPlatformError", "bases": ["DistutilsError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["We don't know how to do something on the current platform (but\nwe do know how to do it on some platform) -- eg. trying to compile\nC files on a platform not supported by a CCompiler subclass."]}, {"name": "setuptools._distutils.errors.DistutilsExecError", "bases": ["DistutilsError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Any problems executing an external program (such as the C\ncompiler, when compiling C files)."]}, {"name": "setuptools._distutils.errors.DistutilsInternalError", "bases": ["DistutilsError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Internal inconsistencies or impossibilities (obviously, this\nshould never be seen if the code is working!)."]}, {"name": "setuptools._distutils.errors.DistutilsTemplateError", "bases": ["DistutilsError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Syntax error in a file list template."]}, {"name": "setuptools._distutils.errors.DistutilsByteCompileError", "bases": ["DistutilsError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Byte compile error."]}, {"name": "setuptools._distutils.errors.CCompilerError", "bases": ["Exception"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Some compile/link operation failed.", "Exception classes used by the CCompiler implementation classes"]}, {"name": "setuptools._distutils.errors.PreprocessError", "bases": ["CCompilerError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Failure to preprocess one or more C/C++ files."]}, {"name": "setuptools._distutils.errors.CompileError", "bases": ["CCompilerError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Failure to compile one or more C/C++ source files."]}, {"name": "setuptools._distutils.errors.LibError", "bases": ["CCompilerError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Failure to create a static library from one or more C/C++ object\nfiles."]}, {"name": "setuptools._distutils.errors.LinkError", "bases": ["CCompilerError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Failure to link one or more C/C++ object files into an executable\nor shared library file."]}, {"name": "setuptools._distutils.errors.UnknownFileError", "bases": ["CCompilerError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Attempt to process an unknown file type."]}], "exports": []}, {"name": "setuptools._distutils.version", "documentation": ["Provides classes to represent module version numbers (one class for\neach style of version numbering).  There are currently two such classes\nimplemented: StrictVersion and LooseVersion.\n\nEvery version number class implements the following interface:\n  * the 'parse' method takes a string and parses it to some internal\n    representation; if the string is an invalid version number,\n    'parse' raises a ValueError exception\n  * the class constructor takes an optional string argument which,\n    if supplied, is passed to 'parse'\n  * __str__ reconstructs the string that was passed to 'parse' (or\n    an equivalent string -- ie. one that will generate an equivalent\n    version number instance)\n  * __repr__ generates Python code to recreate the version number instance\n  * _cmp compares the current instance with either another instance\n    of the same class or a string (which will be parsed to an instance\n    of the same class, thus must follow the same rules)", "distutils/version.py", "Implements multiple version numbering conventions for the", "Python Module Distribution Utilities.", "$Id$"], "functions": [{"name": "setuptools._distutils.version.suppress_known_deprecation", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools._distutils.version.Version", "bases": [], "methods": [{"name": "setuptools._distutils.version.Version.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "vstring", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.version.Version.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.version.Version.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.version.Version.__lt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.version.Version.__le__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.version.Version.__gt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.version.Version.__ge__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Abstract base class for version numbering classes.  Just provides\nconstructor (__init__) and reproducer (__repr__), because those\nseem to be the same for all version numbering classes; and route\nrich comparisons to _cmp."]}, {"name": "setuptools._distutils.version.StrictVersion", "bases": ["Version"], "methods": [{"name": "setuptools._distutils.version.StrictVersion.parse", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "vstring", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.version.StrictVersion.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.version.StrictVersion._cmp", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.version.StrictVersion._cmp_prerelease", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": ["case 1: self has prerelease, other doesn't; other is greater\ncase 2: self doesn't have prerelease, other does: self is greater\ncase 3: both or neither have prerelease: compare them!"]}], "class_variables": [{"name": "setuptools._distutils.version.StrictVersion.version_re", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Version numbering for anal retentives and software idealists.\nImplements the standard interface for version number classes as\ndescribed above.  A version number consists of two or three\ndot-separated numeric components, with an optional \"pre-release\" tag\non the end.  The pre-release tag consists of the letter 'a' or 'b'\nfollowed by a number.  If the numeric components of two version\nnumbers are equal, then one with a pre-release tag will always\nbe deemed earlier (lesser) than one without.\n\nThe following are valid version numbers (shown in the order that\nwould be obtained by sorting according to the supplied cmp function):\n\n    0.4       0.4.0  (these two are equivalent)\n    0.4.1\n    0.5a1\n    0.5b3\n    0.5\n    0.9.6\n    1.0\n    1.0.4a3\n    1.0.4b1\n    1.0.4\n\nThe following are examples of invalid version numbers:\n\n    1\n    2.7.2.2\n    1.3.a4\n    1.3pl1\n    1.3c4\n\nThe rationale for this version numbering system will be explained\nin the distutils documentation.", "Interface for version-number classes -- must be implemented", "by the following classes (the concrete ones -- Version should", "be treated as an abstract class).", "__init__ (string) - create and take same action as 'parse'", "(string parameter is optional)", "parse (string)    - convert a string representation to whatever", "internal representation is appropriate for", "this style of version numbering", "__str__ (self)    - convert back to a string; should be very similar", "(if not identical to) the string supplied to parse", "__repr__ (self)   - generate Python code to recreate", "the instance", "_cmp (self, other) - compare two version numbers ('other' may", "be an unparsed version string, or another", "instance of your version class)"]}, {"name": "setuptools._distutils.version.LooseVersion", "bases": ["Version"], "methods": [{"name": "setuptools._distutils.version.LooseVersion.parse", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "vstring", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.version.LooseVersion.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.version.LooseVersion.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.version.LooseVersion._cmp", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.version.LooseVersion.component_re", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Version numbering for anarchists and software realists.\nImplements the standard interface for version number classes as\ndescribed above.  A version number consists of a series of numbers,\nseparated by either periods or strings of letters.  When comparing\nversion numbers, the numeric components will be compared\nnumerically, and the alphabetic components lexically.  The following\nare all valid version numbers, in no particular order:\n\n    1.5.1\n    1.5.2b2\n    161\n    3.10a\n    8.02\n    3.4j\n    1996.07.12\n    3.2.pl0\n    3.1.1.6\n    2g6\n    11g\n    0.960923\n    2.2beta29\n    1.13++\n    5.5.kw\n    2.0b1pl0\n\nIn fact, there is no such thing as an invalid version number under\nthis scheme; the rules for comparison are simple and predictable,\nbut may not always give the results you want (for some definition\nof \"want\").", "end class StrictVersion", "The rules according to Greg Stein:", "1) a version number has 1 or more numbers separated by a period or by", "sequences of letters. If only periods, then these are compared", "left-to-right to determine an ordering.", "2) sequences of letters are part of the tuple for comparison and are", "compared lexicographically", "3) recognize the numeric components may have leading zeroes", "The LooseVersion class below implements these rules: a version number", "string is split up into a tuple of integer and string components, and", "comparison is a simple tuple comparison.  This means that version", "numbers behave in a predictable and obvious way, but a way that might", "not necessarily be how people *want* version numbers to behave.  There", "wouldn't be a problem if people could stick to purely numeric version", "numbers: just split on period and compare the numbers as tuples.", "However, people insist on putting letters into their version numbers;", "the most common purpose seems to be:", "- indicating a \"pre-release\" version", "('alpha', 'beta', 'a', 'b', 'pre', 'p')", "- indicating a post-release patch ('p', 'pl', 'patch')", "but of course this can't cover all version number schemes, and there's", "no way to know what a programmer means without asking him.", "The problem is what to do with letters (and other non-numeric", "characters) in a version number.  The current implementation does the", "obvious and predictable thing: keep them as strings and compare", "lexically within a tuple comparison.  This has the desired effect if", "an appended letter sequence implies something \"post-release\":", "eg. \"0.99\" < \"0.99pl14\" < \"1.0\", and \"5.001\" < \"5.001m\" < \"5.002\".", "However, if letters in a version number imply a pre-release version,", "the \"obvious\" thing isn't correct.  Eg. you would expect that", "\"1.5.1\" < \"1.5.2a2\" < \"1.5.2\", but under the tuple/lexical comparison", "implemented here, this just isn't so.", "Two possible solutions come to mind.  The first is to tie the", "comparison algorithm to a particular set of semantic rules, as has", "been done in the StrictVersion class above.  This works great as long", "as everyone can go along with bondage and discipline.  Hopefully a", "(large) subset of Python module programmers will agree that the", "particular flavour of bondage and discipline provided by StrictVersion", "provides enough benefit to be worth using, and will submit their", "version numbering scheme to its domination.  The free-thinking", "anarchists in the lot will never give in, though, and something needs", "to be done to accommodate them.", "Perhaps a \"moderately strict\" version class could be implemented that", "lets almost anything slide (syntactically), and makes some heuristic", "assumptions about non-digits in version number strings.  This could", "sink into special-case-hell, though; if I was as talented and", "idiosyncratic as Larry Wall, I'd go ahead and implement a class that", "somehow knows that \"1.2.1\" < \"1.2.2a2\" < \"1.2.2\" < \"1.2.2pl3\", and is", "just as happy dealing with things like \"2g6\" and \"1.13++\".  I don't", "think I'm smart enough to do it right though.", "In any case, I've coded the test suite for this module (see", "../test/test_version.py) specifically to fail on things like comparing", "\"1.2a2\" and \"1.2\".  That's not because the *code* is doing anything", "wrong, it's because the simple, obvious design doesn't match my", "complicated, hairy expectations for real-world version numbers.  It", "would be a snap to fix the test suite to say, \"Yep, LooseVersion does", "the Right Thing\" (ie. the code matches the conception).  But I'd rather", "have a conception that matches common notions about version numbers."]}], "exports": []}, {"name": "setuptools._distutils.cmd", "documentation": ["distutils.cmd\n\nProvides the Command class, the base class for the command classes\nin the distutils.command package."], "functions": [], "variables": [{"name": "setuptools._distutils.cmd._CommandT", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.cmd.Command", "bases": [], "methods": [{"name": "setuptools._distutils.cmd.Command.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}], "returns": null, "documentation": ["Create and initialize a new Command object.  Most importantly,\ninvokes the 'initialize_options()' method, which is the real\ninitializer and depends on the actual command being\ninstantiated.", "-- Creation/initialization methods -------------------------------"]}, {"name": "setuptools._distutils.cmd.Command.__getattr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "attr", "type": null, "default": null}], "returns": null, "documentation": ["XXX A more explicit way to customize dry_run would be better."]}, {"name": "setuptools._distutils.cmd.Command.ensure_finalized", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.cmd.Command.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Set default values for all the options that this command\nsupports.  Note that these defaults may be overridden by other\ncommands, by the setup script, by config files, or by the\ncommand-line.  Thus, this is not the place to code dependencies\nbetween options; generally, 'initialize_options()' implementations\nare just a bunch of \"self.foo = None\" assignments.\n\nThis method must be implemented by all command classes.", "Subclasses must define:", "initialize_options()", "provide default values for all options; may be customized by", "setup script, by options from config file(s), or by command-line", "options", "finalize_options()", "decide on the final values for all options; this is called", "after all possible intervention from the outside world", "(command-line, option file, etc.) has been processed", "run()", "run the command: do whatever it is we're here to do,", "controlled by the command's various option values"]}, {"name": "setuptools._distutils.cmd.Command.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Set final values for all the options that this command supports.\nThis is always called as late as possible, ie.  after any option\nassignments from the command-line or from other commands have been\ndone.  Thus, this is the place to code option dependencies: if\n'foo' depends on 'bar', then it is safe to set 'foo' from 'bar' as\nlong as 'foo' still has the same value it was assigned in\n'initialize_options()'.\n\nThis method must be implemented by all command classes."]}, {"name": "setuptools._distutils.cmd.Command.dump_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "header", "type": null, "default": "..."}, {"name": "indent", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.cmd.Command.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["A command's raison d'etre: carry out the action it exists to\nperform, controlled by the options initialized in\n'initialize_options()', customized by other commands, the setup\nscript, the command-line, and config files, and finalized in\n'finalize_options()'.  All terminal output and filesystem\ninteraction should be done by 'run()'.\n\nThis method must be implemented by all command classes."]}, {"name": "setuptools._distutils.cmd.Command.announce", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}, {"name": "level", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.cmd.Command.debug_print", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}], "returns": null, "documentation": ["Print 'msg' to stdout if the global DEBUG (taken from the\nDISTUTILS_DEBUG environment variable) flag is true."]}, {"name": "setuptools._distutils.cmd.Command._ensure_stringlike", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "option", "type": null, "default": null}, {"name": "what", "type": null, "default": null}, {"name": "default", "type": null, "default": "..."}], "returns": null, "documentation": ["-- Option validation methods -------------------------------------", "(these are very handy in writing the 'finalize_options()' method)", "NB. the general philosophy here is to ensure that a particular option", "value meets certain type and value constraints.  If not, we try to", "force it into conformance (eg. if we expect a list but have a string,", "split the string on comma and/or whitespace).  If we can't force the", "option into conformance, raise DistutilsOptionError.  Thus, command", "classes need do nothing more than (eg.)", "self.ensure_string_list('foo')", "and they can be guaranteed that thereafter, self.foo will be", "a list of strings."]}, {"name": "setuptools._distutils.cmd.Command.ensure_string", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "option", "type": null, "default": null}, {"name": "default", "type": null, "default": "..."}], "returns": null, "documentation": ["Ensure that 'option' is a string; if not defined, set it to\n'default'."]}, {"name": "setuptools._distutils.cmd.Command.ensure_string_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "option", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that 'option' is a list of strings.  If 'option' is\ncurrently a string, we split it either on /,\\s*/ or /\\s+/, so\n\"foo bar baz\", \"foo,bar,baz\", and \"foo,   bar baz\" all become\n[\"foo\", \"bar\", \"baz\"]."]}, {"name": "setuptools._distutils.cmd.Command._ensure_tested_string", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "option", "type": null, "default": null}, {"name": "tester", "type": null, "default": null}, {"name": "what", "type": null, "default": null}, {"name": "error_fmt", "type": null, "default": null}, {"name": "default", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.cmd.Command.ensure_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "option", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that 'option' is the name of an existing file."]}, {"name": "setuptools._distutils.cmd.Command.ensure_dirname", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "option", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.cmd.Command.get_command_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["-- Convenience methods for commands ------------------------------"]}, {"name": "setuptools._distutils.cmd.Command.set_undefined_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "src_cmd", "type": null, "default": null}, {"name": "*option_pairs", "type": null, "default": null}], "returns": null, "documentation": ["Set the values of any \"undefined\" options from corresponding\noption values in some other command object.  \"Undefined\" here means\n\"is None\", which is the convention used to indicate that an option\nhas not been changed between 'initialize_options()' and\n'finalize_options()'.  Usually called from 'finalize_options()' for\noptions that depend on some other command rather than another\noption of the same command.  'src_cmd' is the other command from\nwhich option values will be taken (a command object will be created\nfor it if necessary); the remaining arguments are\n'(src_option,dst_option)' tuples which mean \"take the value of\n'src_option' in the 'src_cmd' command object, and copy it to\n'dst_option' in the current command object\"."]}, {"name": "setuptools._distutils.cmd.Command.get_finalized_command", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": null, "default": null}, {"name": "create", "type": null, "default": "..."}], "returns": null, "documentation": ["Wrapper around Distribution's 'get_command_obj()' method: find\n(create if necessary and 'create' is true) the command object for\n'command', call its 'ensure_finalized()' method, and return the\nfinalized command object."]}, {"name": "setuptools._distutils.cmd.Command.reinitialize_command", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "reinit_subcommands", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Command", "xref": {"fqname": "setuptools._distutils.cmd.Command", "project": null}, "params": null}, "documentation": ["XXX rename to 'get_reinitialized_command()'? (should do the", "same in dist.py, if so)"]}, {"name": "setuptools._distutils.cmd.Command.reinitialize_command", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": {"name": "_CommandT", "xref": {"fqname": "_CommandT", "project": null}, "params": null}, "default": null}, {"name": "reinit_subcommands", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "_CommandT", "xref": {"fqname": "_CommandT", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._distutils.cmd.Command.reinitialize_command", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": {"name": "str | Command", "xref": null, "params": null}, "default": null}, {"name": "reinit_subcommands", "type": null, "default": "..."}], "returns": {"name": "Command", "xref": {"fqname": "setuptools._distutils.cmd.Command", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._distutils.cmd.Command.run_command", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": null, "default": null}], "returns": null, "documentation": ["Run some other command: uses the 'run_command()' method of\nDistribution, which creates and finalizes the command object if\nnecessary and then invokes its 'run()' method."]}, {"name": "setuptools._distutils.cmd.Command.get_sub_commands", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Determine the sub-commands that are relevant in the current\ndistribution (ie., that need to be run).  This is based on the\n'sub_commands' class attribute: each tuple in that list may include\na method that we call to determine if the subcommand needs to be\nrun for the current distribution.  Return a list of command names."]}, {"name": "setuptools._distutils.cmd.Command.warn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}], "returns": null, "documentation": ["-- External world manipulation -----------------------------------"]}, {"name": "setuptools._distutils.cmd.Command.execute", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "func", "type": null, "default": null}, {"name": "args", "type": null, "default": null}, {"name": "msg", "type": null, "default": "..."}, {"name": "level", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.cmd.Command.mkpath", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "mode", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.cmd.Command.copy_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "infile", "type": null, "default": null}, {"name": "outfile", "type": null, "default": null}, {"name": "preserve_mode", "type": null, "default": "..."}, {"name": "preserve_times", "type": null, "default": "..."}, {"name": "link", "type": null, "default": "..."}, {"name": "level", "type": null, "default": "..."}], "returns": null, "documentation": ["Copy a file respecting verbose, dry-run and force flags.  (The\nformer two default to whatever is in the Distribution object, and\nthe latter defaults to false for commands that don't define it.)"]}, {"name": "setuptools._distutils.cmd.Command.copy_tree", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "infile", "type": null, "default": null}, {"name": "outfile", "type": null, "default": null}, {"name": "preserve_mode", "type": null, "default": "..."}, {"name": "preserve_times", "type": null, "default": "..."}, {"name": "preserve_symlinks", "type": null, "default": "..."}, {"name": "level", "type": null, "default": "..."}], "returns": null, "documentation": ["Copy an entire directory tree respecting verbose, dry-run,\nand force flags."]}, {"name": "setuptools._distutils.cmd.Command.move_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "src", "type": null, "default": null}, {"name": "dst", "type": null, "default": null}, {"name": "level", "type": null, "default": "..."}], "returns": null, "documentation": ["Move a file respecting dry-run flag."]}, {"name": "setuptools._distutils.cmd.Command.spawn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "cmd", "type": null, "default": null}, {"name": "search_path", "type": null, "default": "..."}, {"name": "level", "type": null, "default": "..."}], "returns": null, "documentation": ["Spawn an external command respecting dry-run flag."]}, {"name": "setuptools._distutils.cmd.Command.make_archive", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "base_name", "type": null, "default": null}, {"name": "format", "type": null, "default": null}, {"name": "root_dir", "type": null, "default": "..."}, {"name": "base_dir", "type": null, "default": "..."}, {"name": "owner", "type": null, "default": "..."}, {"name": "group", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.cmd.Command.make_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "infiles", "type": null, "default": null}, {"name": "outfile", "type": null, "default": null}, {"name": "func", "type": null, "default": null}, {"name": "args", "type": null, "default": null}, {"name": "exec_msg", "type": null, "default": "..."}, {"name": "skip_msg", "type": null, "default": "..."}, {"name": "level", "type": null, "default": "..."}], "returns": null, "documentation": ["Special case of 'execute()' for operations that process one or\nmore input files and generate one output file.  Works just like\n'execute()', except the operation is skipped and a different\nmessage printed if 'outfile' already exists and is newer than all\nfiles listed in 'infiles'.  If the command defined 'self.force',\nand it is true, then the command is unconditionally run -- does no\ntimestamp checks."]}], "class_variables": [{"name": "setuptools._distutils.cmd.Command.sub_commands", "type": {"name": "ClassVar", "xref": {"fqname": "typing.ClassVar", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Callable[[Any], bool] | None", "xref": null, "params": null}]}]}]}, "documentation": []}, {"name": "setuptools._distutils.cmd.Command.user_options", "type": {"name": "ClassVar", "xref": {"fqname": "typing.ClassVar", "project": "--std--"}, "params": [{"name": "list[tuple[str, str, str]] | list[tuple[str, str | None, str]]", "xref": null, "params": null}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Abstract base class for defining command classes, the \"worker bees\"\nof the Distutils.  A useful analogy for command classes is to think of\nthem as subroutines with local variables called \"options\".  The options\nare \"declared\" in 'initialize_options()' and \"defined\" (given their\nfinal values, aka \"finalized\") in 'finalize_options()', both of which\nmust be defined by every command class.  The distinction between the\ntwo is necessary because option values might come from the outside\nworld (command line, config file, ...), and any options dependent on\nother options must be computed *after* these outside influences have\nbeen processed -- hence 'finalize_options()'.  The \"body\" of the\nsubroutine, where it does all its work based on the values of its\noptions, is the 'run()' method, which must also be implemented by every\ncommand class."]}], "exports": []}, {"name": "setuptools._distutils.command.build_clib", "documentation": ["distutils.command.build_clib\n\nImplements the Distutils 'build_clib' command, to build a C/C++ library\nthat is included in the module distribution and needed by an extension\nmodule."], "functions": [{"name": "setuptools._distutils.command.build_clib.show_compilers", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools._distutils.command.build_clib.build_clib", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.command.build_clib.build_clib.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_clib.build_clib.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_clib.build_clib.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_clib.build_clib.check_library_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "libraries", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that the list of libraries is valid.\n\n`library` is presumably provided as a command option 'libraries'.\nThis method checks that it is a list of 2-tuples, where the tuples\nare (library_name, build_info_dict).\n\nRaise DistutilsSetupError if the structure is invalid anywhere;\njust returns otherwise."]}, {"name": "setuptools._distutils.command.build_clib.build_clib.get_library_names", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_clib.build_clib.get_source_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_clib.build_clib.build_libraries", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "libraries", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.command.build_clib.build_clib.description", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.build_clib.build_clib.user_options", "type": {"name": "ClassVar", "xref": {"fqname": "typing.ClassVar", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "documentation": []}, {"name": "setuptools._distutils.command.build_clib.build_clib.boolean_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.build_clib.build_clib.help_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.core", "documentation": ["distutils.core\n\nThe only module that needs to be imported to use the Distutils; provides\nthe 'setup' function (which is to be called from the setup script).  Also\nindirectly provides the Distribution and Command classes, although they are\nreally defined in distutils.dist and distutils.cmd."], "functions": [{"name": "setuptools._distutils.core.gen_usage", "asynchronous": false, "params": [{"name": "script_name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.core.setup", "asynchronous": false, "params": [{"name": "**attrs", "type": null, "default": null}], "returns": null, "documentation": ["The gateway to the Distutils: do everything your setup script needs\nto do, in a highly flexible and user-driven way.  Briefly: create a\nDistribution instance; find and parse config files; parse the command\nline; run each Distutils command found there, customized by the options\nsupplied to 'setup()' (as keyword arguments), in config files, and on\nthe command line.\n\nThe Distribution instance might be an instance of a class supplied via\nthe 'distclass' keyword argument to 'setup'; if no such class is\nsupplied, then the Distribution class (in dist.py) is instantiated.\nAll other arguments to 'setup' (except for 'cmdclass') are used to set\nattributes of the Distribution instance.\n\nThe 'cmdclass' argument, if supplied, is a dictionary mapping command\nnames to command classes.  Each command encountered on the command line\nwill be turned into a command class, which is in turn instantiated; any\nclass found in 'cmdclass' is used in place of the default, which is\n(for command 'foo_bar') class 'foo_bar' in module\n'distutils.command.foo_bar'.  The command class must provide a\n'user_options' attribute which is a list of option specifiers for\n'distutils.fancy_getopt'.  Any command-line options between the current\nand the next command are used to set attributes of the current command\nobject.\n\nWhen the entire command-line has been successfully parsed, calls the\n'run()' method on each command object in turn.  This method will be\ndriven entirely by the Distribution object (which each command object\nhas a reference to, thanks to its constructor), and the\ncommand-specific options that became attributes of each command\nobject."]}, {"name": "setuptools._distutils.core.run_commands", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}], "returns": null, "documentation": ["Given a Distribution object run all the commands,\nraising `SystemExit` errors in the case of failure.\n\nThis function assumes that either `sys.argv` or `dist.script_args`\nis already set accordingly.\n", "setup ()"]}, {"name": "setuptools._distutils.core.run_setup", "asynchronous": false, "params": [{"name": "script_name", "type": null, "default": null}, {"name": "script_args", "type": {"name": "Iterable[str] | None", "xref": null, "params": null}, "default": "..."}, {"name": "stop_after", "type": null, "default": "..."}], "returns": null, "documentation": ["Run a setup script in a somewhat controlled environment, and\nreturn the Distribution instance that drives things.  This is useful\nif you need to find out the distribution meta-data (passed as\nkeyword args from 'script' to 'setup()', or the contents of the\nconfig files or command-line.\n\n'script_name' is a file that will be read and run with 'exec()';\n'sys.argv[0]' will be replaced with 'script' for the duration of the\ncall.  'script_args' is a list of strings; if supplied,\n'sys.argv[1:]' will be replaced by 'script_args' for the duration of\nthe call.\n\n'stop_after' tells 'setup()' when to stop processing; possible\nvalues:\n  init\n    stop after the Distribution instance has been created and\n    populated with the keyword arguments to 'setup()'\n  config\n    stop after config files have been parsed (and their data\n    stored in the Distribution instance)\n  commandline\n    stop after the command-line ('sys.argv[1:]' or 'script_args')\n    have been parsed (and the data stored in the Distribution)\n  run [default]\n    stop after all commands have been run (the same as if 'setup()'\n    had been called in the usual way\n\nReturns the Distribution instance, which provides all information\nused to drive the Distutils."]}], "variables": [{"name": "setuptools._distutils.core.USAGE", "type": null, "documentation": []}, {"name": "setuptools._distutils.core._setup_stop_after", "type": null, "documentation": []}, {"name": "setuptools._distutils.core._setup_distribution", "type": null, "documentation": []}, {"name": "setuptools._distutils.core.setup_keywords", "type": null, "documentation": []}, {"name": "setuptools._distutils.core.extension_keywords", "type": null, "documentation": []}], "classes": [], "exports": [{"name": "setuptools._distutils.core.Command", "xref": {"fqname": "setuptools._distutils.core.cmd.Command", "project": null}}, {"name": "setuptools._distutils.core.Distribution", "xref": {"fqname": "setuptools._distutils.core.dist.Distribution", "project": null}}, {"name": "setuptools._distutils.core.Extension", "xref": {"fqname": "setuptools._distutils.core.extension.Extension", "project": null}}, {"name": "setuptools._distutils.core.setup", "xref": {"fqname": "setuptools._distutils.core.setup", "project": null}}]}, {"name": "setuptools._distutils.tests.test_dist", "documentation": ["Tests for distutils.dist."], "functions": [{"name": "setuptools._distutils.tests.test_dist.clear_argv", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [{"name": "setuptools._distutils.tests.test_dist.pydistutils_cfg", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.tests.test_dist.test_dist", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.tests.test_dist.test_dist.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.tests.test_dist.test_dist.user_options", "type": {"name": "ClassVar", "xref": {"fqname": "typing.ClassVar", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Sample distutils extension command."]}, {"name": "setuptools._distutils.tests.test_dist.TestDistribution", "bases": ["Distribution"], "methods": [{"name": "setuptools._distutils.tests.test_dist.TestDistribution.find_config_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Distribution subclasses that avoids the default search for\nconfiguration files.\n\nThe ._config_files attribute must be set before\n.parse_config_files() is called."]}, {"name": "setuptools._distutils.tests.test_dist.TestDistributionBehavior", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_dist.TestDistributionBehavior.create_distribution", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "configfiles", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestDistributionBehavior.test_command_packages_unspecified", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "clear_argv", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestDistributionBehavior.test_command_packages_cmdline", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "clear_argv", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestDistributionBehavior.test_venv_install_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "clear_argv", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestDistributionBehavior.test_command_packages_configfile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}, {"name": "clear_argv", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestDistributionBehavior.test_empty_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "request", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestDistributionBehavior.test_finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestDistributionBehavior.test_get_command_packages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestDistributionBehavior.test_announce", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestDistributionBehavior.test_find_config_files_disable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "temp_home", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestDistributionBehavior.test_script_args_list_coercion", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestDistributionBehavior.test_find_config_files_permission_error", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "fake_home", "type": null, "default": null}], "returns": null, "documentation": ["Finding config files should not fail when directory is inaccessible."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata", "bases": ["support.TempdirManager"], "methods": [{"name": "setuptools._distutils.tests.test_dist.TestMetadata.format_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_simple_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_provides", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_provides_illegal", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_requires", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_requires_illegal", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_requires_to_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_obsoletes", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_obsoletes_illegal", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_obsoletes_to_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_classifier", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_classifier_invalid_type", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_keywords", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_keywords_invalid_type", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_platforms", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_platforms_invalid_types", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "caplog", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_download_url", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_long_description", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_custom_pydistutils", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "temp_home", "type": null, "default": null}], "returns": null, "documentation": ["pydistutils.cfg is found"]}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_extra_pydistutils", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "monkeypatch", "type": null, "default": null}, {"name": "tmp_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_fix_help_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_show_help", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "request", "type": null, "default": null}, {"name": "capsys", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_read_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.tests.test_dist.TestMetadata.test_round_trip_through_email_generator", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["In pypa/setuptools#4033, it was shown that once PKG-INFO is\nre-generated using `email.generator.Generator`, some control\ncharacters might cause problems.\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.command.install_egg_info", "documentation": ["distutils.command.install_egg_info\n\nImplements the Distutils 'install_egg_info' command, for installing\na package's PKG-INFO metadata."], "functions": [{"name": "setuptools._distutils.command.install_egg_info.safe_name", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Convert an arbitrary string to a standard distribution name\n\nAny runs of non-alphanumeric/. characters are replaced with a single '-'.", "The following routines are taken from setuptools' pkg_resources module and", "can be replaced by importing them from pkg_resources once it is included", "in the stdlib."]}, {"name": "setuptools._distutils.command.install_egg_info.safe_version", "asynchronous": false, "params": [{"name": "version", "type": null, "default": null}], "returns": null, "documentation": ["Convert an arbitrary string to a standard version string\n\nSpaces become dots, and all other non-alphanumeric characters become\ndashes, with runs of multiple dashes condensed to a single dash."]}, {"name": "setuptools._distutils.command.install_egg_info.to_filename", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Convert a project or version name to its filename-escaped form\n\nAny '-' characters are currently replaced with '_'."]}], "variables": [], "classes": [{"name": "setuptools._distutils.command.install_egg_info.install_egg_info", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.command.install_egg_info.install_egg_info.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_egg_info.install_egg_info.basename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Allow basename to be overridden by child class.\nRef pypa/distutils#2."]}, {"name": "setuptools._distutils.command.install_egg_info.install_egg_info.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_egg_info.install_egg_info.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_egg_info.install_egg_info.get_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.command.install_egg_info.install_egg_info.description", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.install_egg_info.install_egg_info.user_options", "type": {"name": "ClassVar", "xref": {"fqname": "typing.ClassVar", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Install an .egg-info file for the package"]}], "exports": []}, {"name": "setuptools._distutils.command.bdist", "documentation": ["distutils.command.bdist\n\nImplements the Distutils 'bdist' command (create a built [binary]\ndistribution)."], "functions": [{"name": "setuptools._distutils.command.bdist.show_formats", "asynchronous": false, "params": [], "returns": null, "documentation": ["Print list of available formats (arguments to \"--format\" option)."]}], "variables": [], "classes": [{"name": "setuptools._distutils.command.bdist.ListCompat", "bases": [], "methods": [{"name": "setuptools._distutils.command.bdist.ListCompat.append", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": null, "default": null}], "returns": null, "documentation": ["adapter to allow for Setuptools compatibility in format_commands"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._distutils.command.bdist.bdist", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.command.bdist.bdist.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist.bdist.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist.bdist.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.command.bdist.bdist.description", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist.bdist.user_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist.bdist.boolean_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist.bdist.help_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist.bdist.no_format_option", "type": {"name": "ClassVar", "xref": {"fqname": "typing.ClassVar", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}]}, "documentation": []}, {"name": "setuptools._distutils.command.bdist.bdist.default_format", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist.bdist.format_commands", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist.bdist.format_command", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.command.check", "documentation": ["distutils.command.check\n\nImplements the Distutils 'check' command."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.command.check.SilentReporter", "bases": ["docutils.utils.Reporter"], "methods": [{"name": "setuptools._distutils.command.check.SilentReporter.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "source", "type": null, "default": null}, {"name": "report_level", "type": null, "default": null}, {"name": "halt_level", "type": null, "default": null}, {"name": "stream", "type": null, "default": "..."}, {"name": "debug", "type": null, "default": "..."}, {"name": "encoding", "type": null, "default": "..."}, {"name": "error_handler", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.check.SilentReporter.system_message", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "level", "type": null, "default": null}, {"name": "message", "type": null, "default": null}, {"name": "*children", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._distutils.command.check.check", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.command.check.check.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Sets default values for options."]}, {"name": "setuptools._distutils.command.check.check.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.check.check.warn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}], "returns": null, "documentation": ["Counts the number of warnings that occurs."]}, {"name": "setuptools._distutils.command.check.check.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Runs the command."]}, {"name": "setuptools._distutils.command.check.check.check_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Ensures that all required elements of meta-data are supplied.\n\nRequired fields:\n    name, version\n\nWarns if any are missing."]}, {"name": "setuptools._distutils.command.check.check.check_restructuredtext", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Checks if the long string fields are reST-compliant."]}, {"name": "setuptools._distutils.command.check.check._check_rst_data", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "data", "type": null, "default": null}], "returns": null, "documentation": ["Returns warnings when the provided data doesn't compile."]}], "class_variables": [{"name": "setuptools._distutils.command.check.check.description", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.check.check.user_options", "type": {"name": "ClassVar", "xref": {"fqname": "typing.ClassVar", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "documentation": []}, {"name": "setuptools._distutils.command.check.check.boolean_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["This command checks the meta-data of the package."]}], "exports": []}, {"name": "setuptools._distutils.command.build", "documentation": ["distutils.command.build\n\nImplements the Distutils 'build' command."], "functions": [{"name": "setuptools._distutils.command.build.show_compilers", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools._distutils.command.build.build", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.command.build.build.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build.build.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build.build.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build.build.has_pure_modules", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["-- Predicates for the sub-command list ---------------------------"]}, {"name": "setuptools._distutils.command.build.build.has_c_libraries", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build.build.has_ext_modules", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build.build.has_scripts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.command.build.build.description", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.build.build.user_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.build.build.boolean_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.build.build.help_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.build.build.sub_commands", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.command.bdist_dumb", "documentation": ["distutils.command.bdist_dumb\n\nImplements the Distutils 'bdist_dumb' command (create a \"dumb\" built\ndistribution -- i.e., just an archive to be unpacked under $prefix or\n$exec_prefix)."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.command.bdist_dumb.bdist_dumb", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.command.bdist_dumb.bdist_dumb.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist_dumb.bdist_dumb.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist_dumb.bdist_dumb.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.command.bdist_dumb.bdist_dumb.description", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist_dumb.bdist_dumb.user_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist_dumb.bdist_dumb.boolean_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist_dumb.bdist_dumb.default_format", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.command.install_scripts", "documentation": ["distutils.command.install_scripts\n\nImplements the Distutils 'install_scripts' command, for installing\nPython scripts."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.command.install_scripts.install_scripts", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.command.install_scripts.install_scripts.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_scripts.install_scripts.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_scripts.install_scripts.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_scripts.install_scripts.get_inputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_scripts.install_scripts.get_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.command.install_scripts.install_scripts.description", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.install_scripts.install_scripts.user_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.install_scripts.install_scripts.boolean_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.command._framework_compat", "documentation": ["Backward compatibility for homebrew builds on macOS."], "functions": [{"name": "setuptools._distutils.command._framework_compat.enabled", "asynchronous": false, "params": [], "returns": null, "documentation": ["Only enabled for Python 3.9 framework homebrew builds\nexcept ensurepip and venv."]}, {"name": "setuptools._distutils.command._framework_compat.vars", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command._framework_compat.scheme", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Override the selected scheme for posix_prefix."]}], "variables": [{"name": "setuptools._distutils.command._framework_compat.schemes", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._distutils.command.install_data", "documentation": ["distutils.command.install_data\n\nImplements the Distutils 'install_data' command, for installing\nplatform-independent data files."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.command.install_data.install_data", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.command.install_data.install_data.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_data.install_data.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_data.install_data.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_data.install_data._copy", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "f", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str | os.PathLike", "xref": null, "params": null}, {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "str | os.PathLike", "xref": null, "params": null}]}]}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_data.install_data._", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "f", "type": {"name": "str | os.PathLike", "xref": null, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_data.install_data.get_inputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_data.install_data.get_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.command.install_data.install_data.description", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.install_data.install_data.user_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.install_data.install_data.boolean_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.command", "documentation": ["distutils.command\n\nPackage containing implementation of all the standard Distutils\ncommands."], "functions": [], "variables": [], "classes": [], "exports": [{"name": "setuptools._distutils.command.bdist", "xref": {"fqname": "setuptools._distutils.command.bdist", "project": null}}, {"name": "setuptools._distutils.command.bdist_dumb", "xref": {"fqname": "setuptools._distutils.command.bdist_dumb", "project": null}}, {"name": "setuptools._distutils.command.bdist_rpm", "xref": {"fqname": "setuptools._distutils.command.bdist_rpm", "project": null}}, {"name": "setuptools._distutils.command.build", "xref": {"fqname": "setuptools._distutils.command.build", "project": null}}, {"name": "setuptools._distutils.command.build_clib", "xref": {"fqname": "setuptools._distutils.command.build_clib", "project": null}}, {"name": "setuptools._distutils.command.build_ext", "xref": {"fqname": "setuptools._distutils.command.build_ext", "project": null}}, {"name": "setuptools._distutils.command.build_py", "xref": {"fqname": "setuptools._distutils.command.build_py", "project": null}}, {"name": "setuptools._distutils.command.build_scripts", "xref": {"fqname": "setuptools._distutils.command.build_scripts", "project": null}}, {"name": "setuptools._distutils.command.check", "xref": {"fqname": "setuptools._distutils.command.check", "project": null}}, {"name": "setuptools._distutils.command.clean", "xref": {"fqname": "setuptools._distutils.command.clean", "project": null}}, {"name": "setuptools._distutils.command.install", "xref": {"fqname": "setuptools._distutils.command.install", "project": null}}, {"name": "setuptools._distutils.command.install_data", "xref": {"fqname": "setuptools._distutils.command.install_data", "project": null}}, {"name": "setuptools._distutils.command.install_headers", "xref": {"fqname": "setuptools._distutils.command.install_headers", "project": null}}, {"name": "setuptools._distutils.command.install_lib", "xref": {"fqname": "setuptools._distutils.command.install_lib", "project": null}}, {"name": "setuptools._distutils.command.install_scripts", "xref": {"fqname": "setuptools._distutils.command.install_scripts", "project": null}}, {"name": "setuptools._distutils.command.sdist", "xref": {"fqname": "setuptools._distutils.command.sdist", "project": null}}]}, {"name": "setuptools._distutils.command.config", "documentation": ["distutils.command.config\n\nImplements the Distutils 'config' command, a (mostly) empty command class\nthat exists mainly to be sub-classed by specific module distributions and\napplications.  The idea is that while every \"config\" command is different,\nat least they're all named the same, and users always see \"config\" in the\nlist of standard commands.  Also, this is a good place to put common\nconfigure-like tasks: \"try to compile this C code\", or \"figure out where\nthis header file lives\"."], "functions": [{"name": "setuptools._distutils.command.config.dump_file", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}, {"name": "head", "type": null, "default": "..."}], "returns": null, "documentation": ["Dumps a file content into log.info.\n\nIf head is not None, will be dumped before the file content."]}], "variables": [{"name": "setuptools._distutils.command.config.LANG_EXT", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.command.config.config", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.command.config.config.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["The three standard command methods: since the \"config\" command", "does nothing by default, these are empty."]}, {"name": "setuptools._distutils.command.config.config.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.config.config.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.config.config._check_compiler", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Check that 'self.compiler' really is a CCompiler object;\nif not, make it one.", "Utility methods for actual \"config\" commands.  The interfaces are", "loosely based on Autoconf macros of similar names.  Sub-classes", "may use these freely."]}, {"name": "setuptools._distutils.command.config.config._gen_temp_sourcefile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "body", "type": null, "default": null}, {"name": "headers", "type": null, "default": null}, {"name": "lang", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.config.config._preprocess", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "body", "type": null, "default": null}, {"name": "headers", "type": null, "default": null}, {"name": "include_dirs", "type": null, "default": null}, {"name": "lang", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.config.config._compile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "body", "type": null, "default": null}, {"name": "headers", "type": null, "default": null}, {"name": "include_dirs", "type": null, "default": null}, {"name": "lang", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.config.config._link", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "body", "type": null, "default": null}, {"name": "headers", "type": null, "default": null}, {"name": "include_dirs", "type": null, "default": null}, {"name": "libraries", "type": null, "default": null}, {"name": "library_dirs", "type": null, "default": null}, {"name": "lang", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.config.config._clean", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*filenames", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.config.config.try_cpp", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "body", "type": null, "default": "..."}, {"name": "headers", "type": null, "default": "..."}, {"name": "include_dirs", "type": null, "default": "..."}, {"name": "lang", "type": null, "default": "..."}], "returns": null, "documentation": ["Construct a source file from 'body' (a string containing lines\nof C/C++ code) and 'headers' (a list of header files to include)\nand run it through the preprocessor.  Return true if the\npreprocessor succeeded, false if there were any errors.\n('body' probably isn't of much use, but what the heck.)", "XXX these ignore the dry-run flag: what to do, what to do? even if", "you want a dry-run build, you still need some sort of configuration", "info.  My inclination is to make it up to the real config command to", "consult 'dry_run', and assume a default (minimal) configuration if", "true.  The problem with trying to do it here is that you'd have to", "return either true or false from all the 'try' methods, neither of", "which is correct.", "XXX need access to the header search path and maybe default macros."]}, {"name": "setuptools._distutils.command.config.config.search_cpp", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pattern", "type": null, "default": null}, {"name": "body", "type": null, "default": "..."}, {"name": "headers", "type": null, "default": "..."}, {"name": "include_dirs", "type": null, "default": "..."}, {"name": "lang", "type": null, "default": "..."}], "returns": null, "documentation": ["Construct a source file (just like 'try_cpp()'), run it through\nthe preprocessor, and return true if any line of the output matches\n'pattern'.  'pattern' should either be a compiled regex object or a\nstring containing a regex.  If both 'body' and 'headers' are None,\npreprocesses an empty file -- which can be useful to determine the\nsymbols the preprocessor and compiler set by default."]}, {"name": "setuptools._distutils.command.config.config.try_compile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "body", "type": null, "default": null}, {"name": "headers", "type": null, "default": "..."}, {"name": "include_dirs", "type": null, "default": "..."}, {"name": "lang", "type": null, "default": "..."}], "returns": null, "documentation": ["Try to compile a source file built from 'body' and 'headers'.\nReturn true on success, false otherwise."]}, {"name": "setuptools._distutils.command.config.config.try_link", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "body", "type": null, "default": null}, {"name": "headers", "type": null, "default": "..."}, {"name": "include_dirs", "type": null, "default": "..."}, {"name": "libraries", "type": null, "default": "..."}, {"name": "library_dirs", "type": null, "default": "..."}, {"name": "lang", "type": null, "default": "..."}], "returns": null, "documentation": ["Try to compile and link a source file, built from 'body' and\n'headers', to executable form.  Return true on success, false\notherwise."]}, {"name": "setuptools._distutils.command.config.config.try_run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "body", "type": null, "default": null}, {"name": "headers", "type": null, "default": "..."}, {"name": "include_dirs", "type": null, "default": "..."}, {"name": "libraries", "type": null, "default": "..."}, {"name": "library_dirs", "type": null, "default": "..."}, {"name": "lang", "type": null, "default": "..."}], "returns": null, "documentation": ["Try to compile, link to an executable, and run a program\nbuilt from 'body' and 'headers'.  Return true on success, false\notherwise."]}, {"name": "setuptools._distutils.command.config.config.check_func", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "func", "type": null, "default": null}, {"name": "headers", "type": null, "default": "..."}, {"name": "include_dirs", "type": null, "default": "..."}, {"name": "libraries", "type": null, "default": "..."}, {"name": "library_dirs", "type": null, "default": "..."}, {"name": "decl", "type": null, "default": "..."}, {"name": "call", "type": null, "default": "..."}], "returns": null, "documentation": ["Determine if function 'func' is available by constructing a\nsource file that refers to 'func', and compiles and links it.\nIf everything succeeds, returns true; otherwise returns false.\n\nThe constructed source file starts out by including the header\nfiles listed in 'headers'.  If 'decl' is true, it then declares\n'func' (as \"int func()\"); you probably shouldn't supply 'headers'\nand set 'decl' true in the same call, or you might get errors about\na conflicting declarations for 'func'.  Finally, the constructed\n'main()' function either references 'func' or (if 'call' is true)\ncalls it.  'libraries' and 'library_dirs' are used when\nlinking.", "-- High-level methods --------------------------------------------", "(these are the ones that are actually likely to be useful", "when implementing a real-world config command!)"]}, {"name": "setuptools._distutils.command.config.config.check_lib", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "library", "type": null, "default": null}, {"name": "library_dirs", "type": null, "default": "..."}, {"name": "headers", "type": null, "default": "..."}, {"name": "include_dirs", "type": null, "default": "..."}, {"name": "other_libraries", "type": {"name": "Sequence", "xref": {"fqname": "collections.abc.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": null, "documentation": ["Determine if 'library' is available to be linked against,\nwithout actually checking that any particular symbols are provided\nby it.  'headers' will be used in constructing the source file to\nbe compiled, but the only effect of this is to check if all the\nheader files listed are available.  Any libraries listed in\n'other_libraries' will be included in the link, in case 'library'\nhas symbols that depend on other libraries."]}, {"name": "setuptools._distutils.command.config.config.check_header", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "header", "type": null, "default": null}, {"name": "include_dirs", "type": null, "default": "..."}, {"name": "library_dirs", "type": null, "default": "..."}, {"name": "lang", "type": null, "default": "..."}], "returns": null, "documentation": ["Determine if the system header file named by 'header_file'\nexists and can be found by the preprocessor; return true if so,\nfalse otherwise."]}], "class_variables": [{"name": "setuptools._distutils.command.config.config.description", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.config.config.user_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.command.install_lib", "documentation": ["distutils.command.install_lib\n\nImplements the Distutils 'install_lib' command\n(install all Python modules)."], "functions": [], "variables": [{"name": "setuptools._distutils.command.install_lib.PYTHON_SOURCE_EXTENSION", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.command.install_lib.install_lib", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.command.install_lib.install_lib.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_lib.install_lib.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_lib.install_lib.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_lib.install_lib.build", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["-- Top-level worker functions ------------------------------------", "(called from 'run()')"]}, {"name": "setuptools._distutils.command.install_lib.install_lib.install", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_lib.install_lib.byte_compile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "files", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_lib.install_lib._mutate_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "has_any", "type": null, "default": null}, {"name": "build_cmd", "type": null, "default": null}, {"name": "cmd_option", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": null}], "returns": null, "documentation": ["-- Utility methods -----------------------------------------------"]}, {"name": "setuptools._distutils.command.install_lib.install_lib._bytecode_filenames", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "py_filenames", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_lib.install_lib.get_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return the list of files that would be installed if this command\nwere actually run.  Not affected by the \"dry-run\" flag or whether\nmodules have actually been built yet.", "-- External interface --------------------------------------------", "(called by outsiders)"]}, {"name": "setuptools._distutils.command.install_lib.install_lib.get_inputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Get the list of files that are input to this command, ie. the\nfiles that get installed as they are named in the build tree.\nThe files in this list correspond one-to-one to the output\nfilenames returned by 'get_outputs()'."]}], "class_variables": [{"name": "setuptools._distutils.command.install_lib.install_lib.description", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.install_lib.install_lib.user_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.install_lib.install_lib.boolean_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.install_lib.install_lib.negative_opt", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.command.sdist", "documentation": ["distutils.command.sdist\n\nImplements the Distutils 'sdist' command (create a source distribution)."], "functions": [{"name": "setuptools._distutils.command.sdist.show_formats", "asynchronous": false, "params": [], "returns": null, "documentation": ["Print all possible values for the 'formats' option (used by\nthe \"--help-formats\" command-line option)."]}, {"name": "setuptools._distutils.command.sdist.is_comment", "asynchronous": false, "params": [{"name": "line", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools._distutils.command.sdist.sdist", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.command.sdist.sdist.checking_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Callable used for the check sub-command.\n\nPlaced here so user_options can view it"]}, {"name": "setuptools._distutils.command.sdist.sdist.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.sdist.sdist.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.sdist.sdist.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.sdist.sdist.get_file_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Figure out the list of files to include in the source\ndistribution, and put it in 'self.filelist'.  This might involve\nreading the manifest template (and writing the manifest), or just\nreading the manifest, or just using the default file set -- it all\ndepends on the user's options."]}, {"name": "setuptools._distutils.command.sdist.sdist.add_defaults", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Add all the default files to self.filelist:\n  - README or README.txt\n  - setup.py\n  - tests/test*.py and test/test*.py\n  - all pure Python modules mentioned in setup script\n  - all files pointed by package_data (build_py)\n  - all files defined in data_files.\n  - all files defined as scripts.\n  - all C sources listed as part of extensions or C libraries\n    in the setup script (doesn't catch C headers!)\nWarns if (README or README.txt) or setup.py are missing; everything\nelse is optional."]}, {"name": "setuptools._distutils.command.sdist.sdist._cs_path_exists", "asynchronous": false, "params": [{"name": "fspath", "type": null, "default": null}], "returns": null, "documentation": ["Case-sensitive path existence check\n\n```pycon\n>>> sdist._cs_path_exists(__file__)\nTrue\n>>> sdist._cs_path_exists(__file__.upper())\nFalse\n```\n"]}, {"name": "setuptools._distutils.command.sdist.sdist._add_defaults_standards", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.sdist.sdist._add_defaults_optional", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.sdist.sdist._add_defaults_python", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.sdist.sdist._add_defaults_data_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.sdist.sdist._add_defaults_ext", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.sdist.sdist._add_defaults_c_libs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.sdist.sdist._add_defaults_scripts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.sdist.sdist.read_template", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Read and parse manifest template file named by self.template.\n\n(usually \"MANIFEST.in\") The parsing and processing is done by\n'self.filelist', which updates itself accordingly."]}, {"name": "setuptools._distutils.command.sdist.sdist.prune_file_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Prune off branches that might slip into the file list as created\nby 'read_template()', but really don't belong there:\n  * the build tree (typically \"build\")\n  * the release tree itself (only an issue if we ran \"sdist\"\n    previously with --keep-temp, or it aborted)\n  * any RCS, CVS, .svn, .hg, .git, .bzr, _darcs directories"]}, {"name": "setuptools._distutils.command.sdist.sdist.write_manifest", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Write the file list in 'self.filelist' (presumably as filled in\nby 'add_defaults()' and 'read_template()') to the manifest file\nnamed by 'self.manifest'."]}, {"name": "setuptools._distutils.command.sdist.sdist._manifest_is_not_generated", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.sdist.sdist.read_manifest", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Read the manifest file (named by 'self.manifest') and use it to\nfill in 'self.filelist', the list of files to include in the source\ndistribution."]}, {"name": "setuptools._distutils.command.sdist.sdist.make_release_tree", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "base_dir", "type": null, "default": null}, {"name": "files", "type": null, "default": null}], "returns": null, "documentation": ["Create the directory tree that will become the source\ndistribution archive.  All directories implied by the filenames in\n'files' are created under 'base_dir', and then we hard link or copy\n(if hard linking is unavailable) those files into place.\nEssentially, this duplicates the developer's source tree, but in a\ndirectory named after the distribution, containing only the files\nto be distributed."]}, {"name": "setuptools._distutils.command.sdist.sdist.make_distribution", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Create the source distribution(s).  First, we create the release\ntree with 'make_release_tree()'; then, we create all required\narchive files (according to 'self.formats') from the release tree.\nFinally, we clean up by blowing away the release tree (unless\n'self.keep_temp' is true).  The list of archive files created is\nstored so it can be retrieved later by 'get_archive_files()'."]}, {"name": "setuptools._distutils.command.sdist.sdist.get_archive_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return the list of archive files created when the command\nwas run, or None if the command hasn't run yet."]}], "class_variables": [{"name": "setuptools._distutils.command.sdist.sdist.description", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.sdist.sdist.user_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.sdist.sdist.boolean_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.sdist.sdist.help_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.sdist.sdist.negative_opt", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.sdist.sdist.sub_commands", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.sdist.sdist.READMES", "type": {"name": "ClassVar", "xref": {"fqname": "typing.ClassVar", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.command.build_ext", "documentation": ["distutils.command.build_ext\n\nImplements the Distutils 'build_ext' command, for building extension\nmodules (currently limited to C extensions, should accommodate C++\nextensions ASAP)."], "functions": [{"name": "setuptools._distutils.command.build_ext.show_compilers", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [{"name": "setuptools._distutils.command.build_ext.extension_name_re", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.command.build_ext.build_ext", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.command.build_ext.build_ext.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_ext.build_ext._python_lib_dir", "asynchronous": false, "params": [{"name": "sysconfig", "type": null, "default": null}], "returns": null, "documentation": ["Resolve Python's library directory for building extensions\nthat rely on a shared Python library.\n\nSee python/cpython#44264 and python/cpython#48686"]}, {"name": "setuptools._distutils.command.build_ext.build_ext.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_ext.build_ext.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_ext.build_ext.check_extensions_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "extensions", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that the list of extensions (presumably provided as a\ncommand option 'extensions') is valid, i.e. it is a list of\nExtension objects.  We also support the old-style list of 2-tuples,\nwhere the tuples are (ext_name, build_info), which are converted to\nExtension instances here.\n\nRaise DistutilsSetupError if the structure is invalid anywhere;\njust returns otherwise."]}, {"name": "setuptools._distutils.command.build_ext.build_ext.get_source_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_ext.build_ext.get_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_ext.build_ext.build_extensions", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_ext.build_ext._build_extensions_parallel", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_ext.build_ext._build_extensions_serial", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_ext.build_ext._filter_build_errors", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "ext", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_ext.build_ext.build_extension", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "ext", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_ext.build_ext.swig_sources", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "sources", "type": null, "default": null}, {"name": "extension", "type": null, "default": null}], "returns": null, "documentation": ["Walk the list of source files in 'sources', looking for SWIG\ninterface (.i) files.  Run SWIG on all that are found, and\nreturn a modified 'sources' list with SWIG source files replaced\nby the generated C (or C++) files."]}, {"name": "setuptools._distutils.command.build_ext.build_ext.find_swig", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return the name of the SWIG executable.  On Unix, this is\njust \"swig\" -- it should be in the PATH.  Tries a bit harder on\nWindows."]}, {"name": "setuptools._distutils.command.build_ext.build_ext.get_ext_fullpath", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "ext_name", "type": null, "default": null}], "returns": null, "documentation": ["Returns the path of the filename for a given extension.\n\nThe file is located in `build_lib` or directly in the package\n(inplace option).", "-- Name generators -----------------------------------------------", "(extension names, filenames, whatever)"]}, {"name": "setuptools._distutils.command.build_ext.build_ext.get_ext_fullname", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "ext_name", "type": null, "default": null}], "returns": null, "documentation": ["Returns the fullname of a given extension name.\n\nAdds the `package.` prefix"]}, {"name": "setuptools._distutils.command.build_ext.build_ext.get_ext_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "ext_name", "type": null, "default": null}], "returns": null, "documentation": ["Convert the name of an extension (eg. \"foo.bar\") into the name\nof the file from which it will be loaded (eg. \"foo/bar.so\", or\n\"foo\\bar.pyd\")."]}, {"name": "setuptools._distutils.command.build_ext.build_ext.get_export_symbols", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "ext", "type": null, "default": null}], "returns": null, "documentation": ["Return the list of symbols that a shared extension has to\nexport.  This either uses 'ext.export_symbols' or, if it's not\nprovided, \"PyInit_\" + module_name.  Only relevant on Windows, where\nthe .pyd file (DLL) must export the module \"PyInit_\" function."]}, {"name": "setuptools._distutils.command.build_ext.build_ext.get_libraries", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "ext", "type": null, "default": null}], "returns": null, "documentation": ["Return the list of libraries to link against when building a\nshared extension.  On most platforms, this is just 'ext.libraries';\non Windows, we add the Python library (eg. python20.dll)."]}], "class_variables": [{"name": "setuptools._distutils.command.build_ext.build_ext.description", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.build_ext.build_ext.sep_by", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.build_ext.build_ext.user_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.build_ext.build_ext.boolean_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.build_ext.build_ext.help_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.command.install", "documentation": ["distutils.command.install\n\nImplements the Distutils 'install' command."], "functions": [{"name": "setuptools._distutils.command.install._load_sysconfig_schemes", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install._load_schemes", "asynchronous": false, "params": [], "returns": null, "documentation": ["Extend default schemes with schemes from sysconfig."]}, {"name": "setuptools._distutils.command.install._get_implementation", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install._select_scheme", "asynchronous": false, "params": [{"name": "ob", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install._remove_set", "asynchronous": false, "params": [{"name": "ob", "type": null, "default": null}, {"name": "attrs", "type": null, "default": null}], "returns": null, "documentation": ["Include only attrs that are None in ob."]}, {"name": "setuptools._distutils.command.install._resolve_scheme", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install._load_scheme", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install._inject_headers", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}, {"name": "scheme", "type": null, "default": null}], "returns": null, "documentation": ["Given a scheme name and the resolved scheme,\nif the scheme does not include headers, resolve\nthe fallback scheme for the name and use headers\nfrom it. pypa/distutils#88"]}, {"name": "setuptools._distutils.command.install._scheme_attrs", "asynchronous": false, "params": [{"name": "scheme", "type": null, "default": null}], "returns": null, "documentation": ["Resolve install directories by applying the install schemes."]}, {"name": "setuptools._distutils.command.install._pypy_hack", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools._distutils.command.install.HAS_USER_SITE", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.install.WINDOWS_SCHEME", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.install.INSTALL_SCHEMES", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.install.SCHEME_KEYS", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.command.install.install", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.command.install.install.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Initializes options."]}, {"name": "setuptools._distutils.command.install.install.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Finalizes options.", "-- Option finalizing methods -------------------------------------", "(This is rather more involved than for most commands,", "because this is where the policy for installing third-", "party Python modules on various platforms given a wide", "array of user input is decided.  Yes, it's quite complex!)"]}, {"name": "setuptools._distutils.command.install.install.dump_dirs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}], "returns": null, "documentation": ["Dumps the list of user options."]}, {"name": "setuptools._distutils.command.install.install.finalize_unix", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Finalizes options for posix platforms."]}, {"name": "setuptools._distutils.command.install.install.finalize_other", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Finalizes options for non-posix platforms"]}, {"name": "setuptools._distutils.command.install.install.select_scheme", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install.install._expand_attrs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "attrs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install.install.expand_basedirs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Calls `os.path.expanduser` on install_base, install_platbase and\nroot."]}, {"name": "setuptools._distutils.command.install.install.expand_dirs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Calls `os.path.expanduser` on install dirs."]}, {"name": "setuptools._distutils.command.install.install.convert_paths", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*names", "type": null, "default": null}], "returns": null, "documentation": ["Call `convert_path` over `names`."]}, {"name": "setuptools._distutils.command.install.install.handle_extra_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Set `path_file` and `extra_dirs` using `extra_path`."]}, {"name": "setuptools._distutils.command.install.install.change_roots", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*names", "type": null, "default": null}], "returns": null, "documentation": ["Change the install directories pointed by name using root."]}, {"name": "setuptools._distutils.command.install.install.create_home_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Create directories under ~."]}, {"name": "setuptools._distutils.command.install.install.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Runs the command.", "-- Command execution methods -------------------------------------"]}, {"name": "setuptools._distutils.command.install.install.create_path_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Creates the .pth file"]}, {"name": "setuptools._distutils.command.install.install.get_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Assembles the outputs of all the sub-commands.", "-- Reporting methods ---------------------------------------------"]}, {"name": "setuptools._distutils.command.install.install.get_inputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Returns the inputs of all the sub-commands"]}, {"name": "setuptools._distutils.command.install.install.has_lib", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Returns true if the current distribution has any Python\nmodules to install.", "-- Predicates for sub-command list -------------------------------"]}, {"name": "setuptools._distutils.command.install.install.has_headers", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Returns true if the current distribution has any headers to\ninstall."]}, {"name": "setuptools._distutils.command.install.install.has_scripts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Returns true if the current distribution has any scripts to.\ninstall."]}, {"name": "setuptools._distutils.command.install.install.has_data", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Returns true if the current distribution has any data to.\ninstall."]}], "class_variables": [{"name": "setuptools._distutils.command.install.install.description", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.install.install.user_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.install.install.boolean_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.install.install.negative_opt", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.install.install.sub_commands", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.command.build_scripts", "documentation": ["distutils.command.build_scripts\n\nImplements the Distutils 'build_scripts' command."], "functions": [], "variables": [{"name": "setuptools._distutils.command.build_scripts.shebang_pattern", "type": null, "documentation": ["Pattern matching a Python interpreter indicated in first line of a script."]}, {"name": "setuptools._distutils.command.build_scripts.first_line_re", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.command.build_scripts.build_scripts", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.command.build_scripts.build_scripts.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_scripts.build_scripts.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_scripts.build_scripts.get_source_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_scripts.build_scripts.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_scripts.build_scripts.copy_scripts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Copy each script listed in `self.scripts`.\n\nIf a script is marked as a Python script (first line matches\n'shebang_pattern', i.e. starts with `#!` and contains\n\"python\"), then adjust in the copy the first line to refer to\nthe current Python interpreter.\n"]}, {"name": "setuptools._distutils.command.build_scripts.build_scripts._copy_script", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "script", "type": null, "default": null}, {"name": "outfiles", "type": null, "default": null}, {"name": "updated_files", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_scripts.build_scripts._change_modes", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "outfiles", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_scripts.build_scripts._change_mode", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "file", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_scripts.build_scripts._validate_shebang", "asynchronous": false, "params": [{"name": "shebang", "type": null, "default": null}, {"name": "encoding", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.command.build_scripts.build_scripts.description", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.build_scripts.build_scripts.user_options", "type": {"name": "ClassVar", "xref": {"fqname": "typing.ClassVar", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "documentation": []}, {"name": "setuptools._distutils.command.build_scripts.build_scripts.boolean_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.command.install_headers", "documentation": ["distutils.command.install_headers\n\nImplements the Distutils 'install_headers' command, to install C/C++ header\nfiles to the Python include directory."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.command.install_headers.install_headers", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.command.install_headers.install_headers.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_headers.install_headers.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_headers.install_headers.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_headers.install_headers.get_inputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.install_headers.install_headers.get_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.command.install_headers.install_headers.description", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.install_headers.install_headers.user_options", "type": {"name": "ClassVar", "xref": {"fqname": "typing.ClassVar", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "documentation": []}, {"name": "setuptools._distutils.command.install_headers.install_headers.boolean_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["XXX force is never used"]}], "exports": []}, {"name": "setuptools._distutils.command.clean", "documentation": ["distutils.command.clean\n\nImplements the Distutils 'clean' command."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.command.clean.clean", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.command.clean.clean.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.clean.clean.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.clean.clean.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.command.clean.clean.description", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.clean.clean.user_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.clean.clean.boolean_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.compat", "documentation": [], "functions": [{"name": "setuptools._distutils.compat.consolidate_linker_args", "asynchronous": false, "params": [{"name": "args", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "list[str] | str", "xref": null, "params": null}, "documentation": ["Ensure the return value is a string for backward compatibility.\n\nRetain until at least 2025-04-31. See pypa/distutils#246"]}], "variables": [], "classes": [], "exports": [{"name": "setuptools._distutils.compat.annotations", "xref": {"fqname": "__future__.annotations", "project": null}}]}, {"name": "setuptools._distutils.compat.py39", "documentation": [], "functions": [{"name": "setuptools._distutils.compat.py39.add_ext_suffix_39", "asynchronous": false, "params": [{"name": "vars", "type": null, "default": null}], "returns": null, "documentation": ["Ensure vars contains 'EXT_SUFFIX'. pypa/distutils#130"]}, {"name": "setuptools._distutils.compat.py39._zip_equal_generator", "asynchronous": false, "params": [{"name": "iterables", "type": null, "default": null}], "returns": null, "documentation": ["from more_itertools"]}, {"name": "setuptools._distutils.compat.py39._zip_equal", "asynchronous": false, "params": [{"name": "*iterables", "type": null, "default": null}], "returns": null, "documentation": ["from more_itertools"]}], "variables": [{"name": "setuptools._distutils.compat.py39.needs_ext_suffix", "type": null, "documentation": []}, {"name": "setuptools._distutils.compat.py39.add_ext_suffix", "type": null, "documentation": []}, {"name": "setuptools._distutils.compat.py39.zip_strict", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.compat.py39.UnequalIterablesError", "bases": ["ValueError"], "methods": [{"name": "setuptools._distutils.compat.py39.UnequalIterablesError.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "details", "type": null, "default": "..."}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["from more_itertools"]}], "exports": []}, {"name": "setuptools._distutils.command.build_py", "documentation": ["distutils.command.build_py\n\nImplements the Distutils 'build_py' command."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.command.build_py.build_py", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.command.build_py.build_py.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_py.build_py.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_py.build_py.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_py.build_py.get_data_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Generate list of '(package,src_dir,build_dir,filenames)' tuples"]}, {"name": "setuptools._distutils.command.build_py.build_py.find_data_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "package", "type": null, "default": null}, {"name": "src_dir", "type": null, "default": null}], "returns": null, "documentation": ["Return filenames for package's data files in 'src_dir'"]}, {"name": "setuptools._distutils.command.build_py.build_py.build_package_data", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Copy data files into build directory"]}, {"name": "setuptools._distutils.command.build_py.build_py.get_package_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "package", "type": null, "default": null}], "returns": null, "documentation": ["Return the directory, relative to the top of the source\ndistribution, where package 'package' should be found\n(at least according to the 'package_dir' option, if any)."]}, {"name": "setuptools._distutils.command.build_py.build_py.check_package", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "package", "type": null, "default": null}, {"name": "package_dir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_py.build_py.check_module", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "module", "type": null, "default": null}, {"name": "module_file", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_py.build_py.find_package_modules", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "package", "type": null, "default": null}, {"name": "package_dir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_py.build_py.find_modules", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Finds individually-specified Python modules, ie. those listed by\nmodule name in 'self.py_modules'.  Returns a list of tuples (package,\nmodule_base, filename): 'package' is a tuple of the path through\npackage-space to the module; 'module_base' is the bare (no\npackages, no dots) module name, and 'filename' is the path to the\n\".py\" file (relative to the distribution root) that implements the\nmodule."]}, {"name": "setuptools._distutils.command.build_py.build_py.find_all_modules", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Compute the list of all modules that will be built, whether\nthey are specified one-module-at-a-time ('self.py_modules') or\nby whole packages ('self.packages').  Return a list of tuples\n(package, module, module_file), just like 'find_modules()' and\n'find_package_modules()' do."]}, {"name": "setuptools._distutils.command.build_py.build_py.get_source_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_py.build_py.get_module_outfile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "build_dir", "type": null, "default": null}, {"name": "package", "type": null, "default": null}, {"name": "module", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_py.build_py.get_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "include_bytecode", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_py.build_py.build_module", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "module", "type": null, "default": null}, {"name": "module_file", "type": null, "default": null}, {"name": "package", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_py.build_py.build_modules", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_py.build_py.build_packages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.build_py.build_py.byte_compile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "files", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.command.build_py.build_py.description", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.build_py.build_py.user_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.build_py.build_py.boolean_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.build_py.build_py.negative_opt", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.command.bdist_rpm", "documentation": ["distutils.command.bdist_rpm\n\nImplements the Distutils 'bdist_rpm' command (create RPM source and binary\ndistributions)."], "functions": [], "variables": [], "classes": [{"name": "setuptools._distutils.command.bdist_rpm.bdist_rpm", "bases": ["Command"], "methods": [{"name": "setuptools._distutils.command.bdist_rpm.bdist_rpm.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist_rpm.bdist_rpm.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist_rpm.bdist_rpm.finalize_package_data", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist_rpm.bdist_rpm.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist_rpm.bdist_rpm._dist_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist_rpm.bdist_rpm._make_spec_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Generate the text of an RPM spec file and return it as a\nlist of strings (one per line)."]}, {"name": "setuptools._distutils.command.bdist_rpm.bdist_rpm._format_changelog", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "changelog", "type": null, "default": null}], "returns": null, "documentation": ["Format the changelog correctly and convert it to a list of strings"]}], "class_variables": [{"name": "setuptools._distutils.command.bdist_rpm.bdist_rpm.description", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist_rpm.bdist_rpm.user_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist_rpm.bdist_rpm.boolean_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.command.bdist_rpm.bdist_rpm.negative_opt", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils.fancy_getopt", "documentation": ["distutils.fancy_getopt\n\nWrapper around the standard getopt module that provides the following\nadditional features:\n  * short and long options are tied together\n  * options have help strings, so fancy_getopt could potentially\n    create a complete usage summary\n  * options set attributes of a passed-in object"], "functions": [{"name": "setuptools._distutils.fancy_getopt.fancy_getopt", "asynchronous": false, "params": [{"name": "options", "type": null, "default": null}, {"name": "negative_opt", "type": null, "default": null}, {"name": "object", "type": null, "default": null}, {"name": "args", "type": {"name": "Sequence[str] | None", "xref": null, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.fancy_getopt.wrap_text", "asynchronous": false, "params": [{"name": "text", "type": null, "default": null}, {"name": "width", "type": null, "default": null}], "returns": null, "documentation": ["wrap_text(text : string, width : int) -> [string]\n\nSplit 'text' into multiple lines of no more than 'width' characters\neach, and return the list of strings that results."]}, {"name": "setuptools._distutils.fancy_getopt.translate_longopt", "asynchronous": false, "params": [{"name": "opt", "type": null, "default": null}], "returns": null, "documentation": ["Convert a long option name to a valid Python identifier by\nchanging \"-\" to \"_\"."]}], "variables": [{"name": "setuptools._distutils.fancy_getopt.longopt_pat", "type": null, "documentation": []}, {"name": "setuptools._distutils.fancy_getopt.longopt_re", "type": null, "documentation": []}, {"name": "setuptools._distutils.fancy_getopt.neg_alias_re", "type": null, "documentation": []}, {"name": "setuptools._distutils.fancy_getopt.longopt_xlate", "type": null, "documentation": []}, {"name": "setuptools._distutils.fancy_getopt.WS_TRANS", "type": null, "documentation": []}, {"name": "setuptools._distutils.fancy_getopt.text", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.fancy_getopt.FancyGetopt", "bases": [], "methods": [{"name": "setuptools._distutils.fancy_getopt.FancyGetopt.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "option_table", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.fancy_getopt.FancyGetopt._build_index", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.fancy_getopt.FancyGetopt.set_option_table", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "option_table", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.fancy_getopt.FancyGetopt.add_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "long_option", "type": null, "default": null}, {"name": "short_option", "type": null, "default": "..."}, {"name": "help_string", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.fancy_getopt.FancyGetopt.has_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "long_option", "type": null, "default": null}], "returns": null, "documentation": ["Return true if the option table for this parser has an\noption with long name 'long_option'."]}, {"name": "setuptools._distutils.fancy_getopt.FancyGetopt.get_attr_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "long_option", "type": null, "default": null}], "returns": null, "documentation": ["Translate long option name 'long_option' to the form it\nhas as an attribute of some object: ie., translate hyphens\nto underscores."]}, {"name": "setuptools._distutils.fancy_getopt.FancyGetopt._check_alias_dict", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "aliases", "type": null, "default": null}, {"name": "what", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.fancy_getopt.FancyGetopt.set_aliases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "alias", "type": null, "default": null}], "returns": null, "documentation": ["Set the aliases for this option parser."]}, {"name": "setuptools._distutils.fancy_getopt.FancyGetopt.set_negative_aliases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "negative_alias", "type": null, "default": null}], "returns": null, "documentation": ["Set the negative aliases for this option parser.\n'negative_alias' should be a dictionary mapping option names to\noption names, both the key and value must already be defined\nin the option table."]}, {"name": "setuptools._distutils.fancy_getopt.FancyGetopt._grok_option_table", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Populate the various data structures that keep tabs on the\noption table.  Called by 'getopt()' before it can do anything\nworthwhile."]}, {"name": "setuptools._distutils.fancy_getopt.FancyGetopt.getopt", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "args", "type": {"name": "Sequence[str] | None", "xref": null, "params": null}, "default": "..."}, {"name": "object", "type": null, "default": "..."}], "returns": null, "documentation": ["Parse command-line options in args. Store as attributes on object.\n\nIf 'args' is None or not supplied, uses 'sys.argv[1:]'.  If\n'object' is None or not supplied, creates a new OptionDummy\nobject, stores option values there, and returns a tuple (args,\nobject).  If 'object' is supplied, it is modified in place and\n'getopt()' just returns 'args'; in both cases, the returned\n'args' is a modified copy of the passed-in 'args' list, which\nis left untouched."]}, {"name": "setuptools._distutils.fancy_getopt.FancyGetopt.get_option_order", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Returns the list of (option, value) tuples processed by the\nprevious run of 'getopt()'.  Raises RuntimeError if\n'getopt()' hasn't been called yet."]}, {"name": "setuptools._distutils.fancy_getopt.FancyGetopt.generate_help", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "header", "type": null, "default": "..."}], "returns": null, "documentation": ["Generate help text (a list of strings, one per suggested line of\noutput) from the option table for this FancyGetopt object."]}, {"name": "setuptools._distutils.fancy_getopt.FancyGetopt.print_help", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "header", "type": null, "default": "..."}, {"name": "file", "type": null, "default": "..."}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Wrapper around the standard 'getopt()' module that provides some\nhandy extra functionality:\n  * short and long options are tied together\n  * options have help strings, and help text can be assembled\n    from them\n  * options set attributes of a passed-in object\n  * boolean options can have \"negative aliases\" -- eg. if\n    --quiet is the \"negative alias\" of --verbose, then \"--quiet\"\n    on the command line sets 'verbose' to false"]}, {"name": "setuptools._distutils.fancy_getopt.OptionDummy", "bases": [], "methods": [{"name": "setuptools._distutils.fancy_getopt.OptionDummy.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "options", "type": {"name": "Sequence", "xref": {"fqname": "collections.abc.Sequence", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": null, "documentation": ["Create a new OptionDummy instance.  The attributes listed in\n'options' will be initialized to None."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Dummy class just used as a place to hold command-line option\nvalues as instance attributes."]}], "exports": []}, {"name": "setuptools._distutils.unixccompiler", "documentation": ["distutils.unixccompiler\n\nContains the UnixCCompiler class, a subclass of CCompiler that handles\nthe \"typical\" Unix-style command-line C compiler:\n  * macros defined with -Dname[=value]\n  * macros undefined with -Uname\n  * include search directories specified with -Idir\n  * libraries specified with -lllib\n  * library search directories specified with -Ldir\n  * compile handled by 'cc' (or similar) executable with -c option:\n    compiles .c to .o\n  * link static library handled by 'ar' command (possibly with 'ranlib')\n  * link shared library handled by 'cc -shared'"], "functions": [{"name": "setuptools._distutils.unixccompiler._split_env", "asynchronous": false, "params": [{"name": "cmd", "type": null, "default": null}], "returns": null, "documentation": ["For macOS, split command into 'env' portion (if any)\nand the rest of the linker command.\n\n```pycon\n>>> _split_env(['a', 'b', 'c'])\n([], ['a', 'b', 'c'])\n>>> _split_env(['/usr/bin/env', 'A=3', 'gcc'])\n(['/usr/bin/env', 'A=3'], ['gcc'])\n```\n", "XXX Things not currently handled:", "* optimization/debug/warning flags; we just use whatever's in Python's", "Makefile and live with it.  Is this adequate?  If not, we might", "have to have a bunch of subclasses GNUCCompiler, SGICCompiler,", "SunCCompiler, and I suspect down that road lies madness.", "* even if we don't know a warning flag from an optimization flag,", "we need some way for outsiders to feed preprocessor/compiler/linker", "flags in to us -- eg. a sysadmin might want to mandate certain flags", "via a site config file, or a user might want to set something for", "compiling this module distribution only via the setup.py command", "line, whatever.  As long as these options come from something on the", "current system, they can be as system-dependent as they like, and we", "should just happily stuff them into the preprocessor/compiler/linker", "options and carry on."]}, {"name": "setuptools._distutils.unixccompiler._split_aix", "asynchronous": false, "params": [{"name": "cmd", "type": null, "default": null}], "returns": null, "documentation": ["AIX platforms prefix the compiler with the ld_so_aix\nscript, so split that from the linker command.\n\n```pycon\n>>> _split_aix(['a', 'b', 'c'])\n([], ['a', 'b', 'c'])\n>>> _split_aix(['/bin/foo/ld_so_aix', 'gcc'])\n(['/bin/foo/ld_so_aix'], ['gcc'])\n```\n"]}, {"name": "setuptools._distutils.unixccompiler._linker_params", "asynchronous": false, "params": [{"name": "linker_cmd", "type": null, "default": null}, {"name": "compiler_cmd", "type": null, "default": null}], "returns": null, "documentation": ["The linker command usually begins with the compiler\ncommand (possibly multiple elements), followed by zero or more\nparams for shared library building.\n\nIf the LDSHARED env variable overrides the linker command,\nhowever, the commands may not match.\n\nReturn the best guess of the linker parameters by stripping\nthe linker command. If the compiler command does not\nmatch the linker command, assume the linker command is\njust the first element.\n\n```pycon\n>>> _linker_params('gcc foo bar'.split(), ['gcc'])\n['foo', 'bar']\n>>> _linker_params('gcc foo bar'.split(), ['other'])\n['foo', 'bar']\n>>> _linker_params('ccache gcc foo bar'.split(), 'ccache gcc'.split())\n['foo', 'bar']\n>>> _linker_params(['gcc'], ['gcc'])\n[]\n```\n"]}], "variables": [], "classes": [{"name": "setuptools._distutils.unixccompiler.UnixCCompiler", "bases": ["CCompiler"], "methods": [{"name": "setuptools._distutils.unixccompiler.UnixCCompiler.preprocess", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "source", "type": null, "default": null}, {"name": "output_file", "type": null, "default": "..."}, {"name": "macros", "type": null, "default": "..."}, {"name": "include_dirs", "type": null, "default": "..."}, {"name": "extra_preargs", "type": null, "default": "..."}, {"name": "extra_postargs", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler._compile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "obj", "type": null, "default": null}, {"name": "src", "type": null, "default": null}, {"name": "ext", "type": null, "default": null}, {"name": "cc_args", "type": null, "default": null}, {"name": "extra_postargs", "type": null, "default": null}, {"name": "pp_opts", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler.create_static_lib", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "objects", "type": null, "default": null}, {"name": "output_libname", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": "..."}, {"name": "debug", "type": null, "default": "..."}, {"name": "target_lang", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler.link", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "target_desc", "type": null, "default": null}, {"name": "objects", "type": null, "default": null}, {"name": "output_filename", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": "..."}, {"name": "libraries", "type": null, "default": "..."}, {"name": "library_dirs", "type": null, "default": "..."}, {"name": "runtime_library_dirs", "type": null, "default": "..."}, {"name": "export_symbols", "type": null, "default": "..."}, {"name": "debug", "type": null, "default": "..."}, {"name": "extra_preargs", "type": null, "default": "..."}, {"name": "extra_postargs", "type": null, "default": "..."}, {"name": "build_temp", "type": null, "default": "..."}, {"name": "target_lang", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler.library_dir_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dir", "type": null, "default": null}], "returns": null, "documentation": ["-- Miscellaneous methods -----------------------------------------", "These are all used by the 'gen_lib_options() function, in", "ccompiler.py."]}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler._is_gcc", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler.runtime_library_dir_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dir", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str | list[str]", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler.library_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "lib", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler._library_root", "asynchronous": false, "params": [{"name": "dir", "type": null, "default": null}], "returns": null, "documentation": ["macOS users can specify an alternate SDK using'-isysroot'.\nCalculate the SDK root if it is specified.\n\nNote that, as of Xcode 7, Apple SDKs may contain textual stub\nlibraries with .tbd extensions rather than the normal .dylib\nshared libraries installed in /.  The Apple compiler tool\nchain handles this transparently but it can cause problems\nfor programs that are being built with an SDK and searching\nfor specific libraries.  Callers of find_library_file need to\nkeep in mind that the base filename of the returned SDK library\nfile might have a different extension from that of the library\nfile installed on the running system, for example:\n  /Applications/Xcode.app/Contents/Developer/Platforms/\n      MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/\n      usr/lib/libedit.tbd\nvs\n  /usr/lib/libedit.dylib"]}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler.find_library_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dirs", "type": null, "default": null}, {"name": "lib", "type": null, "default": null}, {"name": "debug", "type": null, "default": "..."}], "returns": null, "documentation": ["Second-guess the linker with not much hard\ndata to go on: GCC seems to prefer the shared library, so\nassume that *all* Unix C compilers do,\nignoring even GCC's \"-static\" option."]}], "class_variables": [{"name": "setuptools._distutils.unixccompiler.UnixCCompiler.compiler_type", "type": null, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler.executables", "type": null, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler.src_extensions", "type": null, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler.obj_extension", "type": null, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler.static_lib_extension", "type": null, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler.shared_lib_extension", "type": null, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler.dylib_lib_extension", "type": null, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler.xcode_stub_lib_extension", "type": null, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler.xcode_stub_lib_format", "type": null, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler.exe_extension", "type": null, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler.shared_lib_extension", "type": null, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler.dylib_lib_extension", "type": null, "documentation": []}, {"name": "setuptools._distutils.unixccompiler.UnixCCompiler.dylib_lib_format", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._distutils._msvccompiler", "documentation": ["distutils._msvccompiler\n\nContains MSVCCompiler, an implementation of the abstract CCompiler class\nfor Microsoft Visual Studio 2015.\n\nThis module requires VS 2015 or later."], "functions": [{"name": "setuptools._distutils._msvccompiler._find_vc2015", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler._find_vc2017", "asynchronous": false, "params": [], "returns": null, "documentation": ["Returns \"15, path\" based on the result of invoking vswhere.exe\nIf no install is found, returns \"None, None\"\n\nThe version is returned to avoid unnecessarily changing the function\nresult. It may be ignored when the path is not None.\n\nIf vswhere.exe is not available, by definition, VS 2017 is not\ninstalled."]}, {"name": "setuptools._distutils._msvccompiler._find_vcvarsall", "asynchronous": false, "params": [{"name": "plat_spec", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler._get_vc_env", "asynchronous": false, "params": [{"name": "plat_spec", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler._find_exe", "asynchronous": false, "params": [{"name": "exe", "type": null, "default": null}, {"name": "paths", "type": null, "default": "..."}], "returns": null, "documentation": ["Return path to an MSVC executable program.\n\nTries to find the program in several places: first, one of the\nMSVC program search paths from the registry; next, the directories\nin the PATH environment variable.  If any of those work, return an\nabsolute path that is known to exist.  If none of them work, just\nreturn the original program name, 'exe'."]}, {"name": "setuptools._distutils._msvccompiler._get_vcvars_spec", "asynchronous": false, "params": [{"name": "host_platform", "type": null, "default": null}, {"name": "platform", "type": null, "default": null}], "returns": null, "documentation": ["Given a host platform and platform, determine the spec for vcvarsall.\n\nUses the native MSVC host if the host platform would need expensive\nemulation for x86.\n\n```pycon\n>>> _get_vcvars_spec('win-arm64', 'win32')\n'arm64_x86'\n>>> _get_vcvars_spec('win-arm64', 'win-amd64')\n'arm64_amd64'\n```\n\nOtherwise, always cross-compile from x86 to work with the\nlighter-weight MSVC installs that do not include native 64-bit tools.\n\n```pycon\n>>> _get_vcvars_spec('win32', 'win32')\n'x86'\n>>> _get_vcvars_spec('win-arm32', 'win-arm32')\n'x86_arm'\n>>> _get_vcvars_spec('win-amd64', 'win-arm64')\n'x86_arm64'\n```\n"]}], "variables": [{"name": "setuptools._distutils._msvccompiler.PLAT_SPEC_TO_RUNTIME", "type": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler._vcvars_names", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils._msvccompiler.MSVCCompiler", "bases": ["CCompiler"], "methods": [{"name": "setuptools._distutils._msvccompiler.MSVCCompiler.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "verbose", "type": null, "default": "..."}, {"name": "dry_run", "type": null, "default": "..."}, {"name": "force", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler._configure", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "vc_env", "type": null, "default": null}], "returns": null, "documentation": ["Set class-level include/lib dirs."]}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler._parse_path", "asynchronous": false, "params": [{"name": "val", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler.initialize", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "plat_name", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler.out_extensions", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["-- Worker methods ------------------------------------------------"]}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler.compile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "sources", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": "..."}, {"name": "macros", "type": null, "default": "..."}, {"name": "include_dirs", "type": null, "default": "..."}, {"name": "debug", "type": null, "default": "..."}, {"name": "extra_preargs", "type": null, "default": "..."}, {"name": "extra_postargs", "type": null, "default": "..."}, {"name": "depends", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler.create_static_lib", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "objects", "type": null, "default": null}, {"name": "output_libname", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": "..."}, {"name": "debug", "type": null, "default": "..."}, {"name": "target_lang", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler.link", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "target_desc", "type": null, "default": null}, {"name": "objects", "type": null, "default": null}, {"name": "output_filename", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": "..."}, {"name": "libraries", "type": null, "default": "..."}, {"name": "library_dirs", "type": null, "default": "..."}, {"name": "runtime_library_dirs", "type": null, "default": "..."}, {"name": "export_symbols", "type": null, "default": "..."}, {"name": "debug", "type": null, "default": "..."}, {"name": "extra_preargs", "type": null, "default": "..."}, {"name": "extra_postargs", "type": null, "default": "..."}, {"name": "build_temp", "type": null, "default": "..."}, {"name": "target_lang", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler.spawn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "cmd", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler._fallback_spawn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "cmd", "type": null, "default": null}, {"name": "env", "type": null, "default": null}], "returns": null, "documentation": ["Discovered in pypa/distutils#15, some tools monkeypatch the compiler,\nso the 'env' kwarg causes a TypeError. Detect this condition and\nrestore the legacy, unsafe behavior."]}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler.library_dir_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dir", "type": null, "default": null}], "returns": null, "documentation": ["-- Miscellaneous methods -----------------------------------------", "These are all used by the 'gen_lib_options() function, in", "ccompiler.py."]}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler.runtime_library_dir_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler.library_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "lib", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler.find_library_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dirs", "type": null, "default": null}, {"name": "lib", "type": null, "default": null}, {"name": "debug", "type": null, "default": "..."}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils._msvccompiler.MSVCCompiler.compiler_type", "type": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler.executables", "type": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler._c_extensions", "type": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler._cpp_extensions", "type": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler._rc_extensions", "type": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler._mc_extensions", "type": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler.src_extensions", "type": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler.res_extension", "type": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler.obj_extension", "type": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler.static_lib_extension", "type": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler.shared_lib_extension", "type": null, "documentation": []}, {"name": "setuptools._distutils._msvccompiler.MSVCCompiler.exe_extension", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Concrete class that implements an interface to Microsoft Visual C++,\nas defined by the CCompiler abstract class."]}], "exports": []}, {"name": "setuptools._distutils.ccompiler", "documentation": ["distutils.ccompiler\n\nContains CCompiler, an abstract base class that defines the interface\nfor the Distutils compiler abstraction model."], "functions": [{"name": "setuptools._distutils.ccompiler.get_default_compiler", "asynchronous": false, "params": [{"name": "osname", "type": null, "default": "..."}, {"name": "platform", "type": null, "default": "..."}], "returns": null, "documentation": ["Determine the default compiler to use for the given platform.\n\nosname should be one of the standard Python OS names (i.e. the\nones returned by os.name) and platform the common value\nreturned by sys.platform for the platform in question.\n\nThe default values are os.name and sys.platform in case the\nparameters are not given."]}, {"name": "setuptools._distutils.ccompiler.show_compilers", "asynchronous": false, "params": [], "returns": null, "documentation": ["Print list of available compilers (used by the \"--help-compiler\"\noptions to \"build\", \"build_ext\", \"build_clib\")."]}, {"name": "setuptools._distutils.ccompiler.new_compiler", "asynchronous": false, "params": [{"name": "plat", "type": null, "default": "..."}, {"name": "compiler", "type": null, "default": "..."}, {"name": "verbose", "type": null, "default": "..."}, {"name": "dry_run", "type": null, "default": "..."}, {"name": "force", "type": null, "default": "..."}], "returns": null, "documentation": ["Generate an instance of some CCompiler subclass for the supplied\nplatform/compiler combination.  'plat' defaults to 'os.name'\n(eg. 'posix', 'nt'), and 'compiler' defaults to the default compiler\nfor that platform.  Currently only 'posix' and 'nt' are supported, and\nthe default compilers are \"traditional Unix interface\" (UnixCCompiler\nclass) and Visual C++ (MSVCCompiler class).  Note that it's perfectly\npossible to ask for a Unix compiler object under Windows, and a\nMicrosoft compiler object under Unix -- if you supply a value for\n'compiler', 'plat' is ignored."]}, {"name": "setuptools._distutils.ccompiler.gen_preprocess_options", "asynchronous": false, "params": [{"name": "macros", "type": null, "default": null}, {"name": "include_dirs", "type": null, "default": null}], "returns": null, "documentation": ["Generate C pre-processor options (-D, -U, -I) as used by at least\ntwo types of compilers: the typical Unix compiler and Visual C++.\n'macros' is the usual thing, a list of 1- or 2-tuples, where (name,)\nmeans undefine (-U) macro 'name', and (name,value) means define (-D)\nmacro 'name' to 'value'.  'include_dirs' is just a list of directory\nnames to be added to the header file search path (-I).  Returns a list\nof command-line options suitable for either Unix compilers or Visual\nC++."]}, {"name": "setuptools._distutils.ccompiler.gen_lib_options", "asynchronous": false, "params": [{"name": "compiler", "type": null, "default": null}, {"name": "library_dirs", "type": null, "default": null}, {"name": "runtime_library_dirs", "type": null, "default": null}, {"name": "libraries", "type": null, "default": null}], "returns": null, "documentation": ["Generate linker options for searching library directories and\nlinking with specific libraries.  'libraries' and 'library_dirs' are,\nrespectively, lists of library names (not filenames!) and search\ndirectories.  Returns a list of command-line options suitable for use\nwith some compiler (depending on the two format strings passed in)."]}], "variables": [{"name": "setuptools._distutils.ccompiler._default_compilers", "type": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.compiler_class", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.ccompiler.CCompiler", "bases": [], "methods": [{"name": "setuptools._distutils.ccompiler.CCompiler.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "verbose", "type": null, "default": "..."}, {"name": "dry_run", "type": null, "default": "..."}, {"name": "force", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler.set_executables", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["Define the executables (and options for them) that will be run\nto perform the various stages of compilation.  The exact set of\nexecutables that may be specified here depends on the compiler\nclass (via the 'executables' class attribute), but most will have:\n  compiler      the C/C++ compiler\n  linker_so     linker used to create shared objects and libraries\n  linker_exe    linker used to create binary executables\n  archiver      static library creator\n\nOn platforms with a command-line (Unix, DOS/Windows), each of these\nis a string that will be split into executable name and (optional)\nlist of arguments.  (Splitting the string is done similarly to how\nUnix shells operate: words are delimited by spaces, but quotes and\nbackslashes can override this.  See\n'distutils.util.split_quoted()'.)"]}, {"name": "setuptools._distutils.ccompiler.CCompiler.set_executable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler._find_macro", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler._check_macro_definitions", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "definitions", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that every element of 'definitions' is valid."]}, {"name": "setuptools._distutils.ccompiler.CCompiler._check_macro_definition", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "defn", "type": null, "default": null}], "returns": null, "documentation": ["Raise a TypeError if defn is not valid.\n\nA valid definition is either a (name, value) 2-tuple or a (name,) tuple."]}, {"name": "setuptools._distutils.ccompiler.CCompiler._is_valid_macro", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}, {"name": "value", "type": null, "default": "..."}], "returns": null, "documentation": ["A valid macro is a `name : str` and a `value : str | None`.\n"]}, {"name": "setuptools._distutils.ccompiler.CCompiler.define_macro", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "value", "type": null, "default": "..."}], "returns": null, "documentation": ["Define a preprocessor macro for all compilations driven by this\ncompiler object.  The optional parameter 'value' should be a\nstring; if it is not supplied, then the macro will be defined\nwithout an explicit value and the exact outcome depends on the\ncompiler used (XXX true? does ANSI say anything about this?)", "-- Bookkeeping methods -------------------------------------------"]}, {"name": "setuptools._distutils.ccompiler.CCompiler.undefine_macro", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Undefine a preprocessor macro for all compilations driven by\nthis compiler object.  If the same macro is defined by\n'define_macro()' and undefined by 'undefine_macro()' the last call\ntakes precedence (including multiple redefinitions or\nundefinitions).  If the macro is redefined/undefined on a\nper-compilation basis (ie. in the call to 'compile()'), then that\ntakes precedence."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.add_include_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dir", "type": null, "default": null}], "returns": null, "documentation": ["Add 'dir' to the list of directories that will be searched for\nheader files.  The compiler is instructed to search directories in\nthe order in which they are supplied by successive calls to\n'add_include_dir()'."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.set_include_dirs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dirs", "type": null, "default": null}], "returns": null, "documentation": ["Set the list of directories that will be searched to 'dirs' (a\nlist of strings).  Overrides any preceding calls to\n'add_include_dir()'; subsequence calls to 'add_include_dir()' add\nto the list passed to 'set_include_dirs()'.  This does not affect\nany list of standard include directories that the compiler may\nsearch by default."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.add_library", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "libname", "type": null, "default": null}], "returns": null, "documentation": ["Add 'libname' to the list of libraries that will be included in\nall links driven by this compiler object.  Note that 'libname'\nshould *not* be the name of a file containing a library, but the\nname of the library itself: the actual filename will be inferred by\nthe linker, the compiler, or the compiler class (depending on the\nplatform).\n\nThe linker will be instructed to link against libraries in the\norder they were supplied to 'add_library()' and/or\n'set_libraries()'.  It is perfectly valid to duplicate library\nnames; the linker will be instructed to link against libraries as\nmany times as they are mentioned."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.set_libraries", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "libnames", "type": null, "default": null}], "returns": null, "documentation": ["Set the list of libraries to be included in all links driven by\nthis compiler object to 'libnames' (a list of strings).  This does\nnot affect any standard system libraries that the linker may\ninclude by default."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.add_library_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dir", "type": null, "default": null}], "returns": null, "documentation": ["Add 'dir' to the list of directories that will be searched for\nlibraries specified to 'add_library()' and 'set_libraries()'.  The\nlinker will be instructed to search for libraries in the order they\nare supplied to 'add_library_dir()' and/or 'set_library_dirs()'."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.set_library_dirs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dirs", "type": null, "default": null}], "returns": null, "documentation": ["Set the list of library search directories to 'dirs' (a list of\nstrings).  This does not affect any standard library search path\nthat the linker may search by default."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.add_runtime_library_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dir", "type": null, "default": null}], "returns": null, "documentation": ["Add 'dir' to the list of directories that will be searched for\nshared libraries at runtime."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.set_runtime_library_dirs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dirs", "type": null, "default": null}], "returns": null, "documentation": ["Set the list of directories to search for shared libraries at\nruntime to 'dirs' (a list of strings).  This does not affect any\nstandard search path that the runtime linker may search by\ndefault."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.add_link_object", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "object", "type": null, "default": null}], "returns": null, "documentation": ["Add 'object' to the list of object files (or analogues, such as\nexplicitly named library files or the output of \"resource\ncompilers\") to be included in every link driven by this compiler\nobject."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.set_link_objects", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "objects", "type": null, "default": null}], "returns": null, "documentation": ["Set the list of object files (or analogues) to be included in\nevery link to 'objects'.  This does not affect any standard object\nfiles that the linker may include by default (such as system\nlibraries)."]}, {"name": "setuptools._distutils.ccompiler.CCompiler._setup_compile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "outdir", "type": null, "default": null}, {"name": "macros", "type": null, "default": null}, {"name": "incdirs", "type": null, "default": null}, {"name": "sources", "type": null, "default": null}, {"name": "depends", "type": null, "default": null}, {"name": "extra", "type": null, "default": null}], "returns": null, "documentation": ["Process arguments and decide which source files to compile.", "-- Private utility methods --------------------------------------", "(here for the convenience of subclasses)", "Helper method to prep compiler in subclass compile() methods"]}, {"name": "setuptools._distutils.ccompiler.CCompiler._get_cc_args", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pp_opts", "type": null, "default": null}, {"name": "debug", "type": null, "default": null}, {"name": "before", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler._fix_compile_args", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": null}, {"name": "macros", "type": null, "default": null}, {"name": "include_dirs", "type": null, "default": null}], "returns": null, "documentation": ["Typecheck and fix-up some of the arguments to the 'compile()'\nmethod, and return fixed-up values.  Specifically: if 'output_dir'\nis None, replaces it with 'self.output_dir'; ensures that 'macros'\nis a list, and augments it with 'self.macros'; ensures that\n'include_dirs' is a list, and augments it with 'self.include_dirs'.\nGuarantees that the returned values are of the correct type,\ni.e. for 'output_dir' either string or None, and for 'macros' and\n'include_dirs' either list or None."]}, {"name": "setuptools._distutils.ccompiler.CCompiler._prep_compile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "sources", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": null}, {"name": "depends", "type": null, "default": "..."}], "returns": null, "documentation": ["Decide which source files must be recompiled.\n\nDetermine the list of object files corresponding to 'sources',\nand figure out which ones really need to be recompiled.\nReturn a list of all object files and a dictionary telling\nwhich source files can be skipped."]}, {"name": "setuptools._distutils.ccompiler.CCompiler._fix_object_args", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "objects", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": null}], "returns": null, "documentation": ["Typecheck and fix up some arguments supplied to various methods.\nSpecifically: ensure that 'objects' is a list; if output_dir is\nNone, replace with self.output_dir.  Return fixed versions of\n'objects' and 'output_dir'."]}, {"name": "setuptools._distutils.ccompiler.CCompiler._fix_lib_args", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "libraries", "type": null, "default": null}, {"name": "library_dirs", "type": null, "default": null}, {"name": "runtime_library_dirs", "type": null, "default": null}], "returns": null, "documentation": ["Typecheck and fix up some of the arguments supplied to the\n'link_*' methods.  Specifically: ensure that all arguments are\nlists, and augment them with their permanent versions\n(eg. 'self.libraries' augments 'libraries').  Return a tuple with\nfixed versions of all arguments."]}, {"name": "setuptools._distutils.ccompiler.CCompiler._need_link", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "objects", "type": null, "default": null}, {"name": "output_file", "type": null, "default": null}], "returns": null, "documentation": ["Return true if we need to relink the files listed in 'objects'\nto recreate 'output_file'."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.detect_language", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "sources", "type": null, "default": null}], "returns": null, "documentation": ["Detect the language of a given file, or list of files. Uses\nlanguage_map, and language_order to do the job."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.preprocess", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "source", "type": null, "default": null}, {"name": "output_file", "type": null, "default": "..."}, {"name": "macros", "type": null, "default": "..."}, {"name": "include_dirs", "type": null, "default": "..."}, {"name": "extra_preargs", "type": null, "default": "..."}, {"name": "extra_postargs", "type": null, "default": "..."}], "returns": null, "documentation": ["Preprocess a single C/C++ source file, named in 'source'.\nOutput will be written to file named 'output_file', or stdout if\n'output_file' not supplied.  'macros' is a list of macro\ndefinitions as for 'compile()', which will augment the macros set\nwith 'define_macro()' and 'undefine_macro()'.  'include_dirs' is a\nlist of directory names that will be added to the default list.\n\nRaises PreprocessError on failure.", "-- Worker methods ------------------------------------------------", "(must be implemented by subclasses)"]}, {"name": "setuptools._distutils.ccompiler.CCompiler.compile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "sources", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": "..."}, {"name": "macros", "type": null, "default": "..."}, {"name": "include_dirs", "type": null, "default": "..."}, {"name": "debug", "type": null, "default": "..."}, {"name": "extra_preargs", "type": null, "default": "..."}, {"name": "extra_postargs", "type": null, "default": "..."}, {"name": "depends", "type": null, "default": "..."}], "returns": null, "documentation": ["Compile one or more source files.\n\n'sources' must be a list of filenames, most likely C/C++\nfiles, but in reality anything that can be handled by a\nparticular compiler and compiler class (eg. MSVCCompiler can\nhandle resource files in 'sources').  Return a list of object\nfilenames, one per source filename in 'sources'.  Depending on\nthe implementation, not all source files will necessarily be\ncompiled, but all corresponding object filenames will be\nreturned.\n\nIf 'output_dir' is given, object files will be put under it, while\nretaining their original path component.  That is, \"foo/bar.c\"\nnormally compiles to \"foo/bar.o\" (for a Unix implementation); if\n'output_dir' is \"build\", then it would compile to\n\"build/foo/bar.o\".\n\n'macros', if given, must be a list of macro definitions.  A macro\ndefinition is either a (name, value) 2-tuple or a (name,) 1-tuple.\nThe former defines a macro; if the value is None, the macro is\ndefined without an explicit value.  The 1-tuple case undefines a\nmacro.  Later definitions/redefinitions/ undefinitions take\nprecedence.\n\n'include_dirs', if given, must be a list of strings, the\ndirectories to add to the default include file search path for this\ncompilation only.\n\n'debug' is a boolean; if true, the compiler will be instructed to\noutput debug symbols in (or alongside) the object file(s).\n\n'extra_preargs' and 'extra_postargs' are implementation- dependent.\nOn platforms that have the notion of a command-line (e.g. Unix,\nDOS/Windows), they are most likely lists of strings: extra\ncommand-line arguments to prepend/append to the compiler command\nline.  On other platforms, consult the implementation class\ndocumentation.  In any event, they are intended as an escape hatch\nfor those occasions when the abstract compiler framework doesn't\ncut the mustard.\n\n'depends', if given, is a list of filenames that all targets\ndepend on.  If a source file is older than any file in\ndepends, then the source file will be recompiled.  This\nsupports dependency tracking, but only at a coarse\ngranularity.\n\nRaises CompileError on failure."]}, {"name": "setuptools._distutils.ccompiler.CCompiler._compile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "obj", "type": null, "default": null}, {"name": "src", "type": null, "default": null}, {"name": "ext", "type": null, "default": null}, {"name": "cc_args", "type": null, "default": null}, {"name": "extra_postargs", "type": null, "default": null}, {"name": "pp_opts", "type": null, "default": null}], "returns": null, "documentation": ["Compile 'src' to product 'obj'."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.create_static_lib", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "objects", "type": null, "default": null}, {"name": "output_libname", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": "..."}, {"name": "debug", "type": null, "default": "..."}, {"name": "target_lang", "type": null, "default": "..."}], "returns": null, "documentation": ["Link a bunch of stuff together to create a static library file.\nThe \"bunch of stuff\" consists of the list of object files supplied\nas 'objects', the extra object files supplied to\n'add_link_object()' and/or 'set_link_objects()', the libraries\nsupplied to 'add_library()' and/or 'set_libraries()', and the\nlibraries supplied as 'libraries' (if any).\n\n'output_libname' should be a library name, not a filename; the\nfilename will be inferred from the library name.  'output_dir' is\nthe directory where the library file will be put.\n\n'debug' is a boolean; if true, debugging information will be\nincluded in the library (note that on most platforms, it is the\ncompile step where this matters: the 'debug' flag is included here\njust for consistency).\n\n'target_lang' is the target language for which the given objects\nare being compiled. This allows specific linkage time treatment of\ncertain languages.\n\nRaises LibError on failure."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.link", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "target_desc", "type": null, "default": null}, {"name": "objects", "type": null, "default": null}, {"name": "output_filename", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": "..."}, {"name": "libraries", "type": null, "default": "..."}, {"name": "library_dirs", "type": null, "default": "..."}, {"name": "runtime_library_dirs", "type": null, "default": "..."}, {"name": "export_symbols", "type": null, "default": "..."}, {"name": "debug", "type": null, "default": "..."}, {"name": "extra_preargs", "type": null, "default": "..."}, {"name": "extra_postargs", "type": null, "default": "..."}, {"name": "build_temp", "type": null, "default": "..."}, {"name": "target_lang", "type": null, "default": "..."}], "returns": null, "documentation": ["Link a bunch of stuff together to create an executable or\nshared library file.\n\nThe \"bunch of stuff\" consists of the list of object files supplied\nas 'objects'.  'output_filename' should be a filename.  If\n'output_dir' is supplied, 'output_filename' is relative to it\n(i.e. 'output_filename' can provide directory components if\nneeded).\n\n'libraries' is a list of libraries to link against.  These are\nlibrary names, not filenames, since they're translated into\nfilenames in a platform-specific way (eg. \"foo\" becomes \"libfoo.a\"\non Unix and \"foo.lib\" on DOS/Windows).  However, they can include a\ndirectory component, which means the linker will look in that\nspecific directory rather than searching all the normal locations.\n\n'library_dirs', if supplied, should be a list of directories to\nsearch for libraries that were specified as bare library names\n(ie. no directory component).  These are on top of the system\ndefault and those supplied to 'add_library_dir()' and/or\n'set_library_dirs()'.  'runtime_library_dirs' is a list of\ndirectories that will be embedded into the shared library and used\nto search for other shared libraries that *it* depends on at\nrun-time.  (This may only be relevant on Unix.)\n\n'export_symbols' is a list of symbols that the shared library will\nexport.  (This appears to be relevant only on Windows.)\n\n'debug' is as for 'compile()' and 'create_static_lib()', with the\nslight distinction that it actually matters on most platforms (as\nopposed to 'create_static_lib()', which includes a 'debug' flag\nmostly for form's sake).\n\n'extra_preargs' and 'extra_postargs' are as for 'compile()' (except\nof course that they supply command-line arguments for the\nparticular linker being used).\n\n'target_lang' is the target language for which the given objects\nare being compiled. This allows specific linkage time treatment of\ncertain languages.\n\nRaises LinkError on failure."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.link_shared_lib", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "objects", "type": null, "default": null}, {"name": "output_libname", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": "..."}, {"name": "libraries", "type": null, "default": "..."}, {"name": "library_dirs", "type": null, "default": "..."}, {"name": "runtime_library_dirs", "type": null, "default": "..."}, {"name": "export_symbols", "type": null, "default": "..."}, {"name": "debug", "type": null, "default": "..."}, {"name": "extra_preargs", "type": null, "default": "..."}, {"name": "extra_postargs", "type": null, "default": "..."}, {"name": "build_temp", "type": null, "default": "..."}, {"name": "target_lang", "type": null, "default": "..."}], "returns": null, "documentation": ["Old 'link_*()' methods, rewritten to use the new 'link()' method."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.link_shared_object", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "objects", "type": null, "default": null}, {"name": "output_filename", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": "..."}, {"name": "libraries", "type": null, "default": "..."}, {"name": "library_dirs", "type": null, "default": "..."}, {"name": "runtime_library_dirs", "type": null, "default": "..."}, {"name": "export_symbols", "type": null, "default": "..."}, {"name": "debug", "type": null, "default": "..."}, {"name": "extra_preargs", "type": null, "default": "..."}, {"name": "extra_postargs", "type": null, "default": "..."}, {"name": "build_temp", "type": null, "default": "..."}, {"name": "target_lang", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler.link_executable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "objects", "type": null, "default": null}, {"name": "output_progname", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": "..."}, {"name": "libraries", "type": null, "default": "..."}, {"name": "library_dirs", "type": null, "default": "..."}, {"name": "runtime_library_dirs", "type": null, "default": "..."}, {"name": "debug", "type": null, "default": "..."}, {"name": "extra_preargs", "type": null, "default": "..."}, {"name": "extra_postargs", "type": null, "default": "..."}, {"name": "target_lang", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler.library_dir_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dir", "type": null, "default": null}], "returns": null, "documentation": ["Return the compiler option to add 'dir' to the list of\ndirectories searched for libraries.", "-- Miscellaneous methods -----------------------------------------", "These are all used by the 'gen_lib_options() function; there is", "no appropriate default implementation so subclasses should", "implement all of these."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.runtime_library_dir_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dir", "type": null, "default": null}], "returns": null, "documentation": ["Return the compiler option to add 'dir' to the list of\ndirectories searched for runtime libraries."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.library_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "lib", "type": null, "default": null}], "returns": null, "documentation": ["Return the compiler option to add 'lib' to the list of libraries\nlinked into the shared library or executable."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.has_function", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "funcname", "type": null, "default": null}, {"name": "includes", "type": null, "default": "..."}, {"name": "include_dirs", "type": null, "default": "..."}, {"name": "libraries", "type": null, "default": "..."}, {"name": "library_dirs", "type": null, "default": "..."}], "returns": null, "documentation": ["Return a boolean indicating whether funcname is provided as\na symbol on the current platform.  The optional arguments can\nbe used to augment the compilation environment.\n\nThe libraries argument is a list of flags to be passed to the\nlinker to make additional symbol definitions available for\nlinking.\n\nThe includes and include_dirs arguments are deprecated.\nUsually, supplying include files with function declarations\nwill cause function detection to fail even in cases where the\nsymbol is available for linking."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.find_library_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dirs", "type": null, "default": null}, {"name": "lib", "type": null, "default": null}, {"name": "debug", "type": null, "default": "..."}], "returns": null, "documentation": ["Search the specified list of directories for a static or shared\nlibrary file 'lib' and return the full path to that file.  If\n'debug' true, look for a debugging version (if that makes sense on\nthe current platform).  Return None if 'lib' wasn't found in any of\nthe specified directories."]}, {"name": "setuptools._distutils.ccompiler.CCompiler.object_filenames", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "source_filenames", "type": null, "default": null}, {"name": "strip_dir", "type": null, "default": "..."}, {"name": "output_dir", "type": null, "default": "..."}], "returns": null, "documentation": ["-- Filename generation methods -----------------------------------", "The default implementation of the filename generating methods are", "prejudiced towards the Unix/DOS/Windows view of the world:", "* object files are named by replacing the source file extension", "(eg. .c/.cpp -> .o/.obj)", "* library files (shared or static) are named by plugging the", "library name and extension into a format string, eg.", "\"lib%s.%s\" % (lib_name, \".a\") for Unix static libraries", "* executables are named by appending an extension (possibly", "empty) to the program name: eg. progname + \".exe\" for", "Windows", "To reduce redundant code, these methods expect to find", "several attributes in the current object (presumably defined", "as class attributes):", "* src_extensions -", "list of C/C++ source file extensions, eg. ['.c', '.cpp']", "* obj_extension -", "object file extension, eg. '.o' or '.obj'", "* static_lib_extension -", "extension for static library files, eg. '.a' or '.lib'", "* shared_lib_extension -", "extension for shared library/object files, eg. '.so', '.dll'", "* static_lib_format -", "format string for generating static library filenames,", "eg. 'lib%s.%s' or '%s.%s'", "* shared_lib_format", "format string for generating shared library filenames", "(probably same as static_lib_format, since the extension", "is one of the intended parameters to the format string)", "* exe_extension -", "extension for executable files, eg. '' or '.exe'"]}, {"name": "setuptools._distutils.ccompiler.CCompiler.out_extensions", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler._make_out_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": null}, {"name": "strip_dir", "type": null, "default": null}, {"name": "src_name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler._make_out_path_exts", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": null}, {"name": "strip_dir", "type": null, "default": null}, {"name": "src_name", "type": null, "default": null}, {"name": "extensions", "type": null, "default": null}], "returns": null, "documentation": ["```pycon\n>>> exts = {'.c': '.o'}\n>>> CCompiler._make_out_path_exts('.', False, '/foo/bar.c', exts).replace('\\\\', '/')\n'./foo/bar.o'\n>>> CCompiler._make_out_path_exts('.', True, '/foo/bar.c', exts).replace('\\\\', '/')\n'./bar.o'\n```\n"]}, {"name": "setuptools._distutils.ccompiler.CCompiler._make_relative", "asynchronous": false, "params": [{"name": "base", "type": {"name": "pathlib.Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler.shared_object_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "basename", "type": null, "default": null}, {"name": "strip_dir", "type": null, "default": "..."}, {"name": "output_dir", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler.executable_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "basename", "type": null, "default": null}, {"name": "strip_dir", "type": null, "default": "..."}, {"name": "output_dir", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler.library_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "libname", "type": null, "default": null}, {"name": "lib_type", "type": null, "default": "..."}, {"name": "strip_dir", "type": null, "default": "..."}, {"name": "output_dir", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler.announce", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}, {"name": "level", "type": null, "default": "..."}], "returns": null, "documentation": ["-- Utility methods -----------------------------------------------"]}, {"name": "setuptools._distutils.ccompiler.CCompiler.debug_print", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler.warn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler.execute", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "func", "type": null, "default": null}, {"name": "args", "type": null, "default": null}, {"name": "msg", "type": null, "default": "..."}, {"name": "level", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler.spawn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "cmd", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler.move_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "src", "type": null, "default": null}, {"name": "dst", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler.mkpath", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "mode", "type": null, "default": "..."}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.ccompiler.CCompiler.compiler_type", "type": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler.src_extensions", "type": null, "documentation": ["list of strings"]}, {"name": "setuptools._distutils.ccompiler.CCompiler.obj_extension", "type": null, "documentation": ["string"]}, {"name": "setuptools._distutils.ccompiler.CCompiler.static_lib_extension", "type": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler.shared_lib_extension", "type": null, "documentation": ["string"]}, {"name": "setuptools._distutils.ccompiler.CCompiler.static_lib_format", "type": null, "documentation": ["format string"]}, {"name": "setuptools._distutils.ccompiler.CCompiler.shared_lib_format", "type": null, "documentation": ["prob. same as static_lib_format"]}, {"name": "setuptools._distutils.ccompiler.CCompiler.exe_extension", "type": null, "documentation": ["string"]}, {"name": "setuptools._distutils.ccompiler.CCompiler.language_map", "type": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler.language_order", "type": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler.include_dirs", "type": null, "documentation": ["include dirs specific to this compiler class"]}, {"name": "setuptools._distutils.ccompiler.CCompiler.library_dirs", "type": null, "documentation": ["library dirs specific to this compiler class"]}, {"name": "setuptools._distutils.ccompiler.CCompiler.SHARED_OBJECT", "type": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler.SHARED_LIBRARY", "type": null, "documentation": []}, {"name": "setuptools._distutils.ccompiler.CCompiler.EXECUTABLE", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Abstract base class to define the interface that must be implemented\nby real compiler classes.  Also has some utility methods used by\nseveral compiler classes.\n\nThe basic idea behind a compiler abstraction class is that each\ninstance can be used for all the compile/link steps in building a\nsingle project.  Thus, attributes common to all of those compile and\nlink steps -- include directories, macros to define, libraries to link\nagainst, etc. -- are attributes of the compiler instance.  To allow for\nvariability in how individual files are treated, most of those\nattributes may be varied on a per-compilation or per-link basis."]}], "exports": []}, {"name": "setuptools._distutils.extension", "documentation": ["distutils.extension\n\nProvides the Extension class, used to describe C/C++ extension\nmodules in setup scripts."], "functions": [{"name": "setuptools._distutils.extension.read_setup_file", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}], "returns": null, "documentation": ["Reads a Setup file and returns Extension instances."]}], "variables": [], "classes": [{"name": "setuptools._distutils.extension.Extension", "bases": [], "methods": [{"name": "setuptools._distutils.extension.Extension.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "sources", "type": null, "default": null}, {"name": "include_dirs", "type": null, "default": "..."}, {"name": "define_macros", "type": null, "default": "..."}, {"name": "undef_macros", "type": null, "default": "..."}, {"name": "library_dirs", "type": null, "default": "..."}, {"name": "libraries", "type": null, "default": "..."}, {"name": "runtime_library_dirs", "type": null, "default": "..."}, {"name": "extra_objects", "type": null, "default": "..."}, {"name": "extra_compile_args", "type": null, "default": "..."}, {"name": "extra_link_args", "type": null, "default": "..."}, {"name": "export_symbols", "type": null, "default": "..."}, {"name": "swig_opts", "type": null, "default": "..."}, {"name": "depends", "type": null, "default": "..."}, {"name": "language", "type": null, "default": "..."}, {"name": "optional", "type": null, "default": "..."}, {"name": "**kw", "type": null, "default": null}], "returns": null, "documentation": ["When adding arguments to this constructor, be sure to update", "setup_keywords in core.py."]}, {"name": "setuptools._distutils.extension.Extension.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Just a collection of attributes that describes an extension\nmodule and everything needed to build it (hopefully in a portable\nway, but there are hooks that let you be as unportable as you need).\n\nInstance attributes:\n  name : string\n    the full name of the extension, including any packages -- ie.\n    *not* a filename or pathname, but Python dotted name\n  sources : Iterable[string | os.PathLike]\n    iterable of source filenames (except strings, which could be misinterpreted\n    as a single filename), relative to the distribution root (where the setup\n    script lives), in Unix form (slash-separated) for portability. Can be any\n    non-string iterable (list, tuple, set, etc.) containing strings or\n    PathLike objects. Source files may be C, C++, SWIG (.i), platform-specific\n    resource files, or whatever else is recognized by the \"build_ext\" command\n    as source for a Python extension.\n  include_dirs : [string]\n    list of directories to search for C/C++ header files (in Unix\n    form for portability)\n  define_macros : [(name : string, value : string|None)]\n    list of macros to define; each macro is defined using a 2-tuple,\n    where 'value' is either the string to define it to or None to\n    define it without a particular value (equivalent of \"#define\n    FOO\" in source or -DFOO on Unix C compiler command line)\n  undef_macros : [string]\n    list of macros to undefine explicitly\n  library_dirs : [string]\n    list of directories to search for C/C++ libraries at link time\n  libraries : [string]\n    list of library names (not filenames or paths) to link against\n  runtime_library_dirs : [string]\n    list of directories to search for C/C++ libraries at run time\n    (for shared extensions, this is when the extension is loaded)\n  extra_objects : [string]\n    list of extra files to link with (eg. object files not implied\n    by 'sources', static library that must be explicitly specified,\n    binary resource files, etc.)\n  extra_compile_args : [string]\n    any extra platform- and compiler-specific information to use\n    when compiling the source files in 'sources'.  For platforms and\n    compilers where \"command line\" makes sense, this is typically a\n    list of command-line arguments, but for other platforms it could\n    be anything.\n  extra_link_args : [string]\n    any extra platform- and compiler-specific information to use\n    when linking object files together to create the extension (or\n    to create a new static Python interpreter).  Similar\n    interpretation as for 'extra_compile_args'.\n  export_symbols : [string]\n    list of symbols to be exported from a shared extension.  Not\n    used on all platforms, and not generally necessary for Python\n    extensions, which typically export exactly one symbol: \"init\" +\n    extension_name.\n  swig_opts : [string]\n    any extra options to pass to SWIG if a source file has the .i\n    extension.\n  depends : [string]\n    list of files that the extension depends on\n  language : string\n    extension language (i.e. \"c\", \"c++\", \"objc\"). Will be detected\n    from the source extensions if not provided.\n  optional : boolean\n    specifies that a build failure in the extension should not abort the\n    build process, but simply not install the failing extension.", "This class is really only used by the \"build_ext\" command, so it might", "make sense to put it in distutils.command.build_ext.  However, that", "module is already big enough, and I want to make this class a bit more", "complex to simplify some common cases (\"foo\" module in \"foo.c\") and do", "better error-checking (\"foo.c\" actually exists).", "Also, putting this in build_ext.py means every setup script would have to", "import that large-ish module (indirectly, through distutils.core) in", "order to do anything."]}], "exports": []}, {"name": "setuptools._distutils.dir_util", "documentation": ["distutils.dir_util\n\nUtility functions for manipulating directories and directory trees."], "functions": [{"name": "setuptools._distutils.dir_util.mkpath", "asynchronous": false, "params": [{"name": "name", "type": {"name": "pathlib.Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "default": null}, {"name": "mode", "type": null, "default": "..."}, {"name": "verbose", "type": null, "default": "..."}, {"name": "dry_run", "type": null, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Create a directory and any missing ancestor directories.\n\nIf the directory already exists (or if 'name' is the empty string, which\nmeans the current directory, which of course exists), then do nothing.\nRaise DistutilsFileError if unable to create some directory along the way\n(eg. some sub-path exists, but is a file rather than a directory).\nIf 'verbose' is true, log the directory created."]}, {"name": "setuptools._distutils.dir_util._", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dir_util._", "asynchronous": false, "params": [{"name": "name", "type": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["Detect a common bug -- name is None."]}, {"name": "setuptools._distutils.dir_util.create_tree", "asynchronous": false, "params": [{"name": "base_dir", "type": null, "default": null}, {"name": "files", "type": null, "default": null}, {"name": "mode", "type": null, "default": "..."}, {"name": "verbose", "type": null, "default": "..."}, {"name": "dry_run", "type": null, "default": "..."}], "returns": null, "documentation": ["Create all the empty directories under 'base_dir' needed to put 'files'\nthere.\n\n'base_dir' is just the name of a directory which doesn't necessarily\nexist yet; 'files' is a list of filenames to be interpreted relative to\n'base_dir'.  'base_dir' + the directory portion of every file in 'files'\nwill be created if it doesn't already exist.  'mode', 'verbose' and\n'dry_run' flags are as for 'mkpath()'."]}, {"name": "setuptools._distutils.dir_util.copy_tree", "asynchronous": false, "params": [{"name": "src", "type": null, "default": null}, {"name": "dst", "type": null, "default": null}, {"name": "preserve_mode", "type": null, "default": "..."}, {"name": "preserve_times", "type": null, "default": "..."}, {"name": "preserve_symlinks", "type": null, "default": "..."}, {"name": "update", "type": null, "default": "..."}, {"name": "verbose", "type": null, "default": "..."}, {"name": "dry_run", "type": null, "default": "..."}], "returns": null, "documentation": ["Copy an entire directory tree 'src' to a new location 'dst'.\n\nBoth 'src' and 'dst' must be directory names.  If 'src' is not a\ndirectory, raise DistutilsFileError.  If 'dst' does not exist, it is\ncreated with 'mkpath()'.  The end result of the copy is that every\nfile in 'src' is copied to 'dst', and directories under 'src' are\nrecursively copied to 'dst'.  Return the list of files that were\ncopied or might have been copied, using their output name.  The\nreturn value is unaffected by 'update' or 'dry_run': it is simply\nthe list of all files under 'src', with the names changed to be\nunder 'dst'.\n\n'preserve_mode' and 'preserve_times' are the same as for\n'copy_file'; note that they only apply to regular files, not to\ndirectories.  If 'preserve_symlinks' is true, symlinks will be\ncopied as symlinks (on platforms that support them!); otherwise\n(the default), the destination of the symlink will be copied.\n'update' and 'verbose' are the same as for 'copy_file'."]}, {"name": "setuptools._distutils.dir_util._copy_one", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}, {"name": "src", "type": null, "default": null}, {"name": "dst", "type": null, "default": null}, {"name": "preserve_symlinks", "type": null, "default": null}, {"name": "verbose", "type": null, "default": null}, {"name": "dry_run", "type": null, "default": null}, {"name": "preserve_mode", "type": null, "default": null}, {"name": "preserve_times", "type": null, "default": null}, {"name": "update", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dir_util._build_cmdtuple", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}, {"name": "cmdtuples", "type": null, "default": null}], "returns": null, "documentation": ["Helper for remove_tree()."]}, {"name": "setuptools._distutils.dir_util.remove_tree", "asynchronous": false, "params": [{"name": "directory", "type": null, "default": null}, {"name": "verbose", "type": null, "default": "..."}, {"name": "dry_run", "type": null, "default": "..."}], "returns": null, "documentation": ["Recursively remove an entire directory tree.\n\nAny errors are ignored (apart from being reported to stdout if 'verbose'\nis true)."]}, {"name": "setuptools._distutils.dir_util.ensure_relative", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["Take the full path 'path', and make it a relative path.\n\nThis is useful to make 'path' the second argument to os.path.join()."]}], "variables": [{"name": "setuptools._distutils.dir_util.wrapper", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.dir_util.SkipRepeatAbsolutePaths", "bases": ["set"], "methods": [{"name": "setuptools._distutils.dir_util.SkipRepeatAbsolutePaths.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dir_util.SkipRepeatAbsolutePaths.clear", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dir_util.SkipRepeatAbsolutePaths.wrap", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "func", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Cache for mkpath.\n\nIn addition to cheapening redundant calls, eliminates redundant\n\"creating /foo/bar/baz\" messages in dry-run mode."]}], "exports": []}, {"name": "setuptools._distutils.zosccompiler", "documentation": ["distutils.zosccompiler\n\nContains the selection of the c & c++ compilers on z/OS. There are several\ndifferent c compilers on z/OS, all of them are optional, so the correct\none needs to be chosen based on the users input. This is compatible with\nthe following compilers:\n\nIBM C/C++ For Open Enterprise Languages on z/OS 2.0\nIBM Open XL C/C++ 1.1 for z/OS\nIBM XL C/C++ V2.4.1 for z/OS 2.4 and 2.5\nIBM z/OS XL C/C++"], "functions": [], "variables": [{"name": "setuptools._distutils.zosccompiler._cc_args", "type": null, "documentation": []}, {"name": "setuptools._distutils.zosccompiler._cxx_args", "type": null, "documentation": []}, {"name": "setuptools._distutils.zosccompiler._asm_args", "type": null, "documentation": []}, {"name": "setuptools._distutils.zosccompiler._ld_args", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.zosccompiler.zOSCCompiler", "bases": ["UnixCCompiler"], "methods": [{"name": "setuptools._distutils.zosccompiler.zOSCCompiler._get_zos_compiler_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.zosccompiler.zOSCCompiler.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "verbose", "type": null, "default": "..."}, {"name": "dry_run", "type": null, "default": "..."}, {"name": "force", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.zosccompiler.zOSCCompiler._compile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "obj", "type": null, "default": null}, {"name": "src", "type": null, "default": null}, {"name": "ext", "type": null, "default": null}, {"name": "cc_args", "type": null, "default": null}, {"name": "extra_postargs", "type": null, "default": null}, {"name": "pp_opts", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.zosccompiler.zOSCCompiler.runtime_library_dir_option", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.zosccompiler.zOSCCompiler.link", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "target_desc", "type": null, "default": null}, {"name": "objects", "type": null, "default": null}, {"name": "output_filename", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": "..."}, {"name": "libraries", "type": null, "default": "..."}, {"name": "library_dirs", "type": null, "default": "..."}, {"name": "runtime_library_dirs", "type": null, "default": "..."}, {"name": "export_symbols", "type": null, "default": "..."}, {"name": "debug", "type": null, "default": "..."}, {"name": "extra_preargs", "type": null, "default": "..."}, {"name": "extra_postargs", "type": null, "default": "..."}, {"name": "build_temp", "type": null, "default": "..."}, {"name": "target_lang", "type": null, "default": "..."}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.zosccompiler.zOSCCompiler.src_extensions", "type": null, "documentation": []}, {"name": "setuptools._distutils.zosccompiler.zOSCCompiler._cpp_extensions", "type": null, "documentation": []}, {"name": "setuptools._distutils.zosccompiler.zOSCCompiler._asm_extensions", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Python on z/OS is built with no compiler specific options in it's CFLAGS.", "But each compiler requires it's own specific options to build successfully,", "though some of the options are common between them"]}], "exports": []}, {"name": "setuptools._distutils", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._distutils._log", "documentation": [], "functions": [], "variables": [{"name": "setuptools._distutils._log.log", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._distutils.filelist", "documentation": ["distutils.filelist\n\nProvides the FileList class, used for poking about the filesystem\nand building lists of files."], "functions": [{"name": "setuptools._distutils.filelist._find_all_simple", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["Find all files under 'path'", "Utility functions"]}, {"name": "setuptools._distutils.filelist.findall", "asynchronous": false, "params": [{"name": "dir", "type": null, "default": "..."}], "returns": null, "documentation": ["Find all files under 'dir' and return the list of full filenames.\nUnless dir is '.', return full filenames with dir prepended."]}, {"name": "setuptools._distutils.filelist.glob_to_re", "asynchronous": false, "params": [{"name": "pattern", "type": null, "default": null}], "returns": null, "documentation": ["Translate a shell-like glob pattern to a regular expression; return\na string containing the regex.  Differs from 'fnmatch.translate()' in\nthat '*' does not match \"special characters\" (which are\nplatform-specific)."]}, {"name": "setuptools._distutils.filelist.translate_pattern", "asynchronous": false, "params": [{"name": "pattern", "type": null, "default": null}, {"name": "anchor", "type": null, "default": "..."}, {"name": "prefix", "type": null, "default": "..."}, {"name": "is_regex", "type": null, "default": "..."}], "returns": null, "documentation": ["Translate a shell-like wildcard pattern to a compiled regular\nexpression.  Return the compiled regex.  If 'is_regex' true,\nthen 'pattern' is directly compiled to a regex (if it's a string)\nor just returned as-is (assumes it's a regex object)."]}], "variables": [], "classes": [{"name": "setuptools._distutils.filelist.FileList", "bases": [], "methods": [{"name": "setuptools._distutils.filelist.FileList.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "warn", "type": null, "default": "..."}, {"name": "debug_print", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.filelist.FileList.set_allfiles", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "allfiles", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.filelist.FileList.findall", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dir", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.filelist.FileList.debug_print", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}], "returns": null, "documentation": ["Print 'msg' to stdout if the global DEBUG (taken from the\nDISTUTILS_DEBUG environment variable) flag is true."]}, {"name": "setuptools._distutils.filelist.FileList.append", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": null, "default": null}], "returns": null, "documentation": ["Collection methods"]}, {"name": "setuptools._distutils.filelist.FileList.extend", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "items", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.filelist.FileList.sort", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.filelist.FileList.remove_duplicates", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Other miscellaneous utility methods"]}, {"name": "setuptools._distutils.filelist.FileList._parse_template_line", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "line", "type": null, "default": null}], "returns": null, "documentation": ["\"File template\" methods"]}, {"name": "setuptools._distutils.filelist.FileList.process_template_line", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "line", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.filelist.FileList.include_pattern", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pattern", "type": null, "default": null}, {"name": "anchor", "type": null, "default": "..."}, {"name": "prefix", "type": null, "default": "..."}, {"name": "is_regex", "type": null, "default": "..."}], "returns": null, "documentation": ["Select strings (presumably filenames) from 'self.files' that\nmatch 'pattern', a Unix-style wildcard (glob) pattern.  Patterns\nare not quite the same as implemented by the 'fnmatch' module: '*'\nand '?'  match non-special characters, where \"special\" is platform-\ndependent: slash on Unix; colon, slash, and backslash on\nDOS/Windows; and colon on Mac OS.\n\nIf 'anchor' is true (the default), then the pattern match is more\nstringent: \"*.py\" will match \"foo.py\" but not \"foo/bar.py\".  If\n'anchor' is false, both of these will match.\n\nIf 'prefix' is supplied, then only filenames starting with 'prefix'\n(itself a pattern) and ending with 'pattern', with anything in between\nthem, will match.  'anchor' is ignored in this case.\n\nIf 'is_regex' is true, 'anchor' and 'prefix' are ignored, and\n'pattern' is assumed to be either a string containing a regex or a\nregex object -- no translation is done, the regex is just compiled\nand used as-is.\n\nSelected strings will be added to self.files.\n\nReturn True if files are found, False otherwise.", "Filtering/selection methods"]}, {"name": "setuptools._distutils.filelist.FileList.exclude_pattern", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pattern", "type": null, "default": null}, {"name": "anchor", "type": null, "default": "..."}, {"name": "prefix", "type": null, "default": "..."}, {"name": "is_regex", "type": null, "default": "..."}], "returns": null, "documentation": ["Remove strings (presumably filenames) from 'files' that match\n'pattern'.  Other parameters are the same as for\n'include_pattern()', above.\nThe list 'self.files' is modified in place.\nReturn True if files are found, False otherwise."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A list of files built by on exploring the filesystem and filtered by\napplying various patterns to what we find there.\n\nInstance attributes:\n  dir\n    directory from which files will be taken -- only used if\n    'allfiles' not supplied to constructor\n  files\n    list of filenames currently being built/filtered/manipulated\n  allfiles\n    complete list of files under consideration (ie. without any\n    filtering applied)"]}, {"name": "setuptools._distutils.filelist._UniqueDirs", "bases": ["set"], "methods": [{"name": "setuptools._distutils.filelist._UniqueDirs.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "walk_item", "type": null, "default": null}], "returns": null, "documentation": ["Given an item from an os.walk result, determine\nif the item represents a unique dir for this instance\nand if not, prevent further traversal."]}, {"name": "setuptools._distutils.filelist._UniqueDirs.filter", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "items", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Exclude previously-seen dirs from walk results,\navoiding infinite recursion.\nRef https://bugs.python.org/issue44497."]}], "exports": []}, {"name": "setuptools._distutils.dep_util", "documentation": [], "functions": [{"name": "setuptools._distutils.dep_util.__getattr__", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._distutils.spawn", "documentation": ["distutils.spawn\n\nProvides the 'spawn()' function, a front-end to various platform-\nspecific functions for launching another program in a sub-process."], "functions": [{"name": "setuptools._distutils.spawn._debug", "asynchronous": false, "params": [{"name": "cmd", "type": null, "default": null}], "returns": null, "documentation": ["Render a subprocess command differently depending on DEBUG."]}, {"name": "setuptools._distutils.spawn._inject_macos_ver", "asynchronous": false, "params": [{"name": "env", "type": {"name": "Mapping[str:str] | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "Mapping[str:str] | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._distutils.spawn._resolve", "asynchronous": false, "params": [{"name": "env", "type": {"name": "Mapping[str:str] | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str:str", "xref": null, "params": null}]}, "documentation": []}, {"name": "setuptools._distutils.spawn.spawn", "asynchronous": false, "params": [{"name": "cmd", "type": null, "default": null}, {"name": "search_path", "type": null, "default": "..."}, {"name": "verbose", "type": null, "default": "..."}, {"name": "dry_run", "type": null, "default": "..."}, {"name": "env", "type": null, "default": "..."}], "returns": null, "documentation": ["Run another program, specified as a command list 'cmd', in a new process.\n\n'cmd' is just the argument list for the new process, ie.\ncmd[0] is the program to run and cmd[1:] are the rest of its arguments.\nThere is no way to run a program with a name different from that of its\nexecutable.\n\nIf 'search_path' is true (the default), the system's executable\nsearch path will be used to find the program; otherwise, cmd[0]\nmust be the exact path to the executable.  If 'dry_run' is true,\nthe command will not actually be run.\n\nRaise DistutilsExecError if running the program fails in any way; just\nreturn on success."]}, {"name": "setuptools._distutils.spawn.find_executable", "asynchronous": false, "params": [{"name": "executable", "type": null, "default": null}, {"name": "path", "type": null, "default": "..."}], "returns": null, "documentation": ["Tries to find 'executable' in the directories listed in 'path'.\n\nA string listing directories separated by 'os.pathsep'; defaults to\nos.environ['PATH'].  Returns the complete filename or None if not found."]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._distutils.debug", "documentation": [], "functions": [], "variables": [{"name": "setuptools._distutils.debug.DEBUG", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._distutils.archive_util", "documentation": ["distutils.archive_util\n\nUtility functions for creating archive files (tarballs, zip files,\nthat sort of thing)."], "functions": [{"name": "setuptools._distutils.archive_util._get_gid", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Returns a gid, given a group name."]}, {"name": "setuptools._distutils.archive_util._get_uid", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Returns an uid, given a user name."]}, {"name": "setuptools._distutils.archive_util.make_tarball", "asynchronous": false, "params": [{"name": "base_name", "type": null, "default": null}, {"name": "base_dir", "type": null, "default": null}, {"name": "compress", "type": null, "default": "..."}, {"name": "verbose", "type": null, "default": "..."}, {"name": "dry_run", "type": null, "default": "..."}, {"name": "owner", "type": null, "default": "..."}, {"name": "group", "type": null, "default": "..."}], "returns": null, "documentation": ["Create a (possibly compressed) tar file from all the files under\n'base_dir'.\n\n'compress' must be \"gzip\" (the default), \"bzip2\", \"xz\", or None.\n\n'owner' and 'group' can be used to define an owner and a group for the\narchive that is being built. If not provided, the current owner and group\nwill be used.\n\nThe output tar file will be named 'base_dir' +  \".tar\", possibly plus\nthe appropriate compression extension (\".gz\", \".bz2\", \".xz\" or \".Z\").\n\nReturns the output filename."]}, {"name": "setuptools._distutils.archive_util.make_zipfile", "asynchronous": false, "params": [{"name": "base_name", "type": null, "default": null}, {"name": "base_dir", "type": null, "default": null}, {"name": "verbose", "type": null, "default": "..."}, {"name": "dry_run", "type": null, "default": "..."}], "returns": null, "documentation": ["Create a zip file from all the files under 'base_dir'.\n\nThe output zip file will be named 'base_name' + \".zip\".  Uses either the\n\"zipfile\" Python module (if available) or the InfoZIP \"zip\" utility\n(if installed and found on the default search path).  If neither tool is\navailable, raises DistutilsExecError.  Returns the name of the output zip\nfile."]}, {"name": "setuptools._distutils.archive_util.check_archive_formats", "asynchronous": false, "params": [{"name": "formats", "type": null, "default": null}], "returns": null, "documentation": ["Returns the first format from the 'format' list that is unknown.\n\nIf all formats are known, returns None"]}, {"name": "setuptools._distutils.archive_util.make_archive", "asynchronous": false, "params": [{"name": "base_name", "type": null, "default": null}, {"name": "format", "type": null, "default": null}, {"name": "root_dir", "type": null, "default": "..."}, {"name": "base_dir", "type": null, "default": "..."}, {"name": "verbose", "type": null, "default": "..."}, {"name": "dry_run", "type": null, "default": "..."}, {"name": "owner", "type": null, "default": "..."}, {"name": "group", "type": null, "default": "..."}], "returns": null, "documentation": ["Create an archive file (eg. zip or tar).\n\n'base_name' is the name of the file to create, minus any format-specific\nextension; 'format' is the archive format: one of \"zip\", \"tar\", \"gztar\",\n\"bztar\", \"xztar\", or \"ztar\".\n\n'root_dir' is a directory that will be the root directory of the\narchive; ie. we typically chdir into 'root_dir' before creating the\narchive.  'base_dir' is the directory where we start archiving from;\nie. 'base_dir' will be the common prefix of all files and\ndirectories in the archive.  'root_dir' and 'base_dir' both default\nto the current directory.  Returns the name of the archive file.\n\n'owner' and 'group' are used when creating a tar archive. By default,\nuses the current owner and group."]}], "variables": [{"name": "setuptools._distutils.archive_util.zipfile", "type": null, "documentation": []}, {"name": "setuptools._distutils.archive_util.getpwnam", "type": null, "documentation": []}, {"name": "setuptools._distutils.archive_util.getgrnam", "type": null, "documentation": []}, {"name": "setuptools._distutils.archive_util.ARCHIVE_FORMATS", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._distutils.sysconfig", "documentation": ["Provide access to Python's configuration information.  The specific\nconfiguration variables available depend heavily on the platform and\nconfiguration.  The values may be retrieved using\nget_config_var(name), and the list of variables is available via\nget_config_vars().keys().  Additional convenience functions are also\navailable.\n\nWritten by:   Fred L. Drake, Jr.\nEmail:        <fdrake@acm.org>"], "functions": [{"name": "setuptools._distutils.sysconfig._is_python_source_dir", "asynchronous": false, "params": [{"name": "d", "type": null, "default": null}], "returns": null, "documentation": ["Return True if the target directory appears to point to an\nun-installed Python."]}, {"name": "setuptools._distutils.sysconfig._is_parent", "asynchronous": false, "params": [{"name": "dir_a", "type": null, "default": null}, {"name": "dir_b", "type": null, "default": null}], "returns": null, "documentation": ["Return True if a is a parent of b."]}, {"name": "setuptools._distutils.sysconfig._fix_pcbuild", "asynchronous": false, "params": [{"name": "d", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig._python_build", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig.get_python_version", "asynchronous": false, "params": [], "returns": null, "documentation": ["Return a string containing the major and minor Python version,\nleaving off the patchlevel.  Sample return values could be '1.5'\nor '2.2'."]}, {"name": "setuptools._distutils.sysconfig.get_python_inc", "asynchronous": false, "params": [{"name": "plat_specific", "type": null, "default": "..."}, {"name": "prefix", "type": null, "default": "..."}], "returns": null, "documentation": ["Return the directory containing installed Python header files.\n\nIf 'plat_specific' is false (the default), this is the path to the\nnon-platform-specific header files, i.e. Python.h and so on;\notherwise, this is the path to platform-specific header files\n(namely pyconfig.h).\n\nIf 'prefix' is supplied, use it instead of sys.base_prefix or\nsys.base_exec_prefix -- i.e., ignore 'plat_specific'."]}, {"name": "setuptools._distutils.sysconfig._extant", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["Replace path with None if it doesn't exist."]}, {"name": "setuptools._distutils.sysconfig._get_python_inc_posix", "asynchronous": false, "params": [{"name": "prefix", "type": null, "default": null}, {"name": "spec_prefix", "type": null, "default": null}, {"name": "plat_specific", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig._get_python_inc_posix_python", "asynchronous": false, "params": [{"name": "plat_specific", "type": null, "default": null}], "returns": null, "documentation": ["Assume the executable is in the build directory. The\npyconfig.h file should be in the same directory. Since\nthe build directory may not be the source directory,\nuse \"srcdir\" from the makefile to find the \"Include\"\ndirectory."]}, {"name": "setuptools._distutils.sysconfig._get_python_inc_from_config", "asynchronous": false, "params": [{"name": "plat_specific", "type": null, "default": null}, {"name": "spec_prefix", "type": null, "default": null}], "returns": null, "documentation": ["If no prefix was explicitly specified, provide the include\ndirectory from the config vars. Useful when\ncross-compiling, since the config vars may come from\nthe host\nplatform Python installation, while the current Python\nexecutable is from the build platform installation.\n\n```pycon\n>>> monkeypatch = getfixture('monkeypatch')\n>>> gpifc = _get_python_inc_from_config\n>>> monkeypatch.setitem(gpifc.__globals__, 'get_config_var', str.lower)\n>>> gpifc(False, '/usr/bin/')\n>>> gpifc(False, '')\n>>> gpifc(False, None)\n'includepy'\n>>> gpifc(True, None)\n'confincludepy'\n```\n"]}, {"name": "setuptools._distutils.sysconfig._get_python_inc_posix_prefix", "asynchronous": false, "params": [{"name": "prefix", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig._get_python_inc_nt", "asynchronous": false, "params": [{"name": "prefix", "type": null, "default": null}, {"name": "spec_prefix", "type": null, "default": null}, {"name": "plat_specific", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig._posix_lib", "asynchronous": false, "params": [{"name": "standard_lib", "type": null, "default": null}, {"name": "libpython", "type": null, "default": null}, {"name": "early_prefix", "type": null, "default": null}, {"name": "prefix", "type": null, "default": null}], "returns": null, "documentation": ["allow this behavior to be monkey-patched. Ref pypa/distutils#2."]}, {"name": "setuptools._distutils.sysconfig.get_python_lib", "asynchronous": false, "params": [{"name": "plat_specific", "type": null, "default": "..."}, {"name": "standard_lib", "type": null, "default": "..."}, {"name": "prefix", "type": null, "default": "..."}], "returns": null, "documentation": ["Return the directory containing the Python library (standard or\nsite additions).\n\nIf 'plat_specific' is true, return the directory containing\nplatform-specific modules, i.e. any module from a non-pure-Python\nmodule distribution; otherwise, return the platform-shared library\ndirectory.  If 'standard_lib' is true, return the directory\ncontaining standard Python library modules; otherwise, return the\ndirectory for site-specific modules.\n\nIf 'prefix' is supplied, use it instead of sys.base_prefix or\nsys.base_exec_prefix -- i.e., ignore 'plat_specific'."]}, {"name": "setuptools._distutils.sysconfig._customize_macos", "asynchronous": false, "params": [], "returns": null, "documentation": ["Perform first-time customization of compiler-related\nconfig vars on macOS. Use after a compiler is known\nto be needed. This customization exists primarily to support Pythons\nfrom binary installers. The kind and paths to build tools on\nthe user system may vary significantly from the system\nthat Python itself was built on.  Also the user OS\nversion and build tools may not support the same set\nof CPU architectures for universal builds."]}, {"name": "setuptools._distutils.sysconfig.customize_compiler", "asynchronous": false, "params": [{"name": "compiler", "type": null, "default": null}], "returns": null, "documentation": ["Do any platform-specific customization of a CCompiler instance.\n\nMainly needed on Unix, so we can plug in the information that\nvaries across Unices and is stored in Python's Makefile."]}, {"name": "setuptools._distutils.sysconfig.get_config_h_filename", "asynchronous": false, "params": [], "returns": null, "documentation": ["Return full pathname of installed pyconfig.h file."]}, {"name": "setuptools._distutils.sysconfig.get_makefile_filename", "asynchronous": false, "params": [], "returns": null, "documentation": ["Return full pathname of installed Makefile from the Python build."]}, {"name": "setuptools._distutils.sysconfig.parse_config_h", "asynchronous": false, "params": [{"name": "fp", "type": null, "default": null}, {"name": "g", "type": null, "default": "..."}], "returns": null, "documentation": ["Parse a config.h-style file.\n\nA dictionary containing name/value pairs is returned.  If an\noptional dictionary is passed in as the second argument, it is\nused instead of a new dictionary."]}, {"name": "setuptools._distutils.sysconfig.parse_makefile", "asynchronous": false, "params": [{"name": "fn", "type": null, "default": null}, {"name": "g", "type": null, "default": "..."}], "returns": null, "documentation": ["Parse a Makefile-style file.\n\nA dictionary containing name/value pairs is returned.  If an\noptional dictionary is passed in as the second argument, it is\nused instead of a new dictionary."]}, {"name": "setuptools._distutils.sysconfig.expand_makefile_vars", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}, {"name": "vars", "type": null, "default": null}], "returns": null, "documentation": ["Expand Makefile-style variables -- \"${foo}\" or \"$(foo)\" -- in\n'string' according to 'vars' (a dictionary mapping variable names to\nvalues).  Variables not present in 'vars' are silently expanded to the\nempty string.  The variable values in 'vars' should not contain further\nvariable expansions; if 'vars' is the output of 'parse_makefile()',\nyou're fine.  Returns a variable-expanded version of 's'."]}, {"name": "setuptools._distutils.sysconfig.get_config_vars", "asynchronous": false, "params": [{"name": "*args", "type": null, "default": null}], "returns": null, "documentation": ["With no arguments, return a dictionary of all configuration\nvariables relevant for the current platform.  Generally this includes\neverything needed to build extensions and install both pure modules and\nextensions.  On Unix, this means every variable defined in Python's\ninstalled Makefile; on Windows it's a much smaller set.\n\nWith arguments, return a list of values that result from looking up\neach argument in the configuration variable dictionary."]}, {"name": "setuptools._distutils.sysconfig.get_config_var", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Return the value of a single variable using the dictionary\nreturned by 'get_config_vars()'.  Equivalent to\nget_config_vars().get(name)"]}, {"name": "setuptools._distutils.sysconfig._add_flags", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "type", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Add any flags from the environment for the given type.\n\ntype is the prefix to FLAGS in the environment key (e.g. \"C\" for \"CFLAGS\")."]}], "variables": [{"name": "setuptools._distutils.sysconfig.IS_PYPY", "type": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig.PREFIX", "type": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig.EXEC_PREFIX", "type": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig.BASE_PREFIX", "type": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig.BASE_EXEC_PREFIX", "type": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig.project_base", "type": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig.project_base", "type": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig.project_base", "type": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig._sys_home", "type": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig.project_base", "type": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig._sys_home", "type": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig.python_build", "type": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig.build_flags", "type": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig.build_flags", "type": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig._variable_rx", "type": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig._findvar1_rx", "type": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig._findvar2_rx", "type": null, "documentation": []}, {"name": "setuptools._distutils.sysconfig._config_vars", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._distutils.util", "documentation": ["distutils.util\n\nMiscellaneous utility functions -- anything that doesn't fit into\none of the other *util.py modules."], "functions": [{"name": "setuptools._distutils.util.get_host_platform", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return a string that identifies the current platform. Use this\nfunction to distinguish platform-specific build directories and\nplatform-specific built distributions."]}, {"name": "setuptools._distutils.util.get_platform", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools._distutils.util._clear_cached_macosx_ver", "asynchronous": false, "params": [], "returns": null, "documentation": ["For testing only. Do not call."]}, {"name": "setuptools._distutils.util.get_macosx_target_ver_from_syscfg", "asynchronous": false, "params": [], "returns": null, "documentation": ["Get the version of macOS latched in the Python interpreter configuration.\nReturns the version as a string or None if can't obtain one. Cached."]}, {"name": "setuptools._distutils.util.get_macosx_target_ver", "asynchronous": false, "params": [], "returns": null, "documentation": ["Return the version of macOS for which we are building.\n\nThe target version defaults to the version in sysconfig latched at time\nthe Python interpreter was built, unless overridden by an environment\nvariable. If neither source has a value, then None is returned"]}, {"name": "setuptools._distutils.util.split_version", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}], "returns": null, "documentation": ["Convert a dot-separated string into a list of numbers for comparisons"]}, {"name": "setuptools._distutils.util.convert_path", "asynchronous": false, "params": [{"name": "pathname", "type": {"name": "str | os.PathLike", "xref": null, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Allow for pathlib.Path inputs, coax to a native path string.\n\nIf None is passed, will just pass it through as\nSetuptools relies on this behavior.\n\n```pycon\n>>> convert_path(None) is None\nTrue\n```\n\nRemoves empty paths.\n\n```pycon\n>>> convert_path('foo/./bar').replace('\\\\', '/')\n'foo/bar'\n```\n"]}, {"name": "setuptools._distutils.util.change_root", "asynchronous": false, "params": [{"name": "new_root", "type": null, "default": null}, {"name": "pathname", "type": null, "default": null}], "returns": null, "documentation": ["Return 'pathname' with 'new_root' prepended.  If 'pathname' is\nrelative, this is equivalent to \"os.path.join(new_root,pathname)\".\nOtherwise, it requires making 'pathname' relative and then joining the\ntwo, which is tricky on DOS/Windows and Mac OS."]}, {"name": "setuptools._distutils.util.check_environ", "asynchronous": false, "params": [], "returns": null, "documentation": ["Ensure that 'os.environ' has all the environment variables we\nguarantee that users can use in config files, command-line options,\netc.  Currently this includes:\n  HOME - user's home directory (Unix only)\n  PLAT - description of the current platform, including hardware\n         and OS (see 'get_platform()')"]}, {"name": "setuptools._distutils.util.subst_vars", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}, {"name": "local_vars", "type": null, "default": null}], "returns": null, "documentation": ["Perform variable substitution on 'string'.\nVariables are indicated by format-style braces (\"{var}\").\nVariable is substituted by the value found in the 'local_vars'\ndictionary or in 'os.environ' if it's not in 'local_vars'.\n'os.environ' is first checked/augmented to guarantee that it contains\ncertain values: see 'check_environ()'.  Raise ValueError for any\nvariables not found in either 'local_vars' or 'os.environ'."]}, {"name": "setuptools._distutils.util._subst_compat", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}], "returns": null, "documentation": ["Replace shell/Perl-style variable substitution with\nformat-style. For compatibility."]}, {"name": "setuptools._distutils.util.grok_environment_error", "asynchronous": false, "params": [{"name": "exc", "type": null, "default": null}, {"name": "prefix", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.util._init_regex", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools._distutils.util.split_quoted", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}], "returns": null, "documentation": ["Split a string up according to Unix shell-like rules for quotes and\nbackslashes.  In short: words are delimited by spaces, as long as those\nspaces are not escaped by a backslash, or inside a quoted string.\nSingle and double quotes are equivalent, and the quote characters can\nbe backslash-escaped.  The backslash is stripped from any two-character\nescape sequence, leaving only the escaped character.  The quote\ncharacters are stripped from any quoted string.  Returns a list of\nwords."]}, {"name": "setuptools._distutils.util.execute", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}, {"name": "args", "type": null, "default": null}, {"name": "msg", "type": null, "default": "..."}, {"name": "verbose", "type": null, "default": "..."}, {"name": "dry_run", "type": null, "default": "..."}], "returns": null, "documentation": ["Perform some action that affects the outside world (eg.  by\nwriting to the filesystem).  Such actions are special because they\nare disabled by the 'dry_run' flag.  This method takes care of all\nthat bureaucracy for you; all you have to do is supply the\nfunction to call and an argument tuple for it (to embody the\n\"external action\" being performed), and an optional message to\nprint.", "split_quoted ()"]}, {"name": "setuptools._distutils.util.strtobool", "asynchronous": false, "params": [{"name": "val", "type": null, "default": null}], "returns": null, "documentation": ["Convert a string representation of truth to true (1) or false (0).\n\nTrue values are 'y', 'yes', 't', 'true', 'on', and '1'; false values\nare 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if\n'val' is anything else."]}, {"name": "setuptools._distutils.util.byte_compile", "asynchronous": false, "params": [{"name": "py_files", "type": null, "default": null}, {"name": "optimize", "type": null, "default": "..."}, {"name": "force", "type": null, "default": "..."}, {"name": "prefix", "type": null, "default": "..."}, {"name": "base_dir", "type": null, "default": "..."}, {"name": "verbose", "type": null, "default": "..."}, {"name": "dry_run", "type": null, "default": "..."}, {"name": "direct", "type": null, "default": "..."}], "returns": null, "documentation": ["Byte-compile a collection of Python source files to .pyc\nfiles in a __pycache__ subdirectory.  'py_files' is a list\nof files to compile; any files that don't end in \".py\" are silently\nskipped.  'optimize' must be one of the following:\n  0 - don't optimize\n  1 - normal optimization (like \"python -O\")\n  2 - extra optimization (like \"python -OO\")\nIf 'force' is true, all files are recompiled regardless of\ntimestamps.\n\nThe source filename encoded in each bytecode file defaults to the\nfilenames listed in 'py_files'; you can modify these with 'prefix' and\n'basedir'.  'prefix' is a string that will be stripped off of each\nsource filename, and 'base_dir' is a directory name that will be\nprepended (after 'prefix' is stripped).  You can supply either or both\n(or neither) of 'prefix' and 'base_dir', as you wish.\n\nIf 'dry_run' is true, doesn't actually do anything that would\naffect the filesystem.\n\nByte-compilation is either done directly in this interpreter process\nwith the standard py_compile module, or indirectly by writing a\ntemporary script and executing it.  Normally, you should let\n'byte_compile()' figure out to use direct compilation or not (see\nthe source for details).  The 'direct' flag is used by the script\ngenerated in indirect mode; unless you know what you're doing, leave\nit set to None."]}, {"name": "setuptools._distutils.util.rfc822_escape", "asynchronous": false, "params": [{"name": "header", "type": null, "default": null}], "returns": null, "documentation": ["Return a version of the string escaped for inclusion in an\nRFC-822 header, by ensuring there are 8 spaces space after each newline."]}, {"name": "setuptools._distutils.util.is_mingw", "asynchronous": false, "params": [], "returns": null, "documentation": ["Returns True if the current platform is mingw.\n\nPython compiled with Mingw-w64 has sys.platform == 'win32' and\nget_platform() starts with 'mingw'."]}, {"name": "setuptools._distutils.util.is_freethreaded", "asynchronous": false, "params": [], "returns": null, "documentation": ["Return True if the Python interpreter is built with free threading support."]}], "variables": [{"name": "setuptools._distutils.util._syscfg_macosx_ver", "type": null, "documentation": ["cache the version pulled from sysconfig"]}, {"name": "setuptools._distutils.util.MACOSX_VERSION_VAR", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.version", "documentation": [], "functions": [], "variables": [{"name": "setuptools.version.__version__", "type": null, "documentation": []}, {"name": "setuptools.version.__version__", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.errors", "documentation": ["setuptools.errors\n\nProvides exceptions used by setuptools modules."], "functions": [], "variables": [{"name": "setuptools.errors.ByteCompileError", "type": null, "documentation": []}, {"name": "setuptools.errors.CCompilerError", "type": null, "documentation": []}, {"name": "setuptools.errors.ClassError", "type": null, "documentation": []}, {"name": "setuptools.errors.CompileError", "type": null, "documentation": []}, {"name": "setuptools.errors.ExecError", "type": null, "documentation": []}, {"name": "setuptools.errors.FileError", "type": null, "documentation": []}, {"name": "setuptools.errors.InternalError", "type": null, "documentation": []}, {"name": "setuptools.errors.LibError", "type": null, "documentation": []}, {"name": "setuptools.errors.LinkError", "type": null, "documentation": []}, {"name": "setuptools.errors.ModuleError", "type": null, "documentation": []}, {"name": "setuptools.errors.OptionError", "type": null, "documentation": []}, {"name": "setuptools.errors.PlatformError", "type": null, "documentation": []}, {"name": "setuptools.errors.PreprocessError", "type": null, "documentation": []}, {"name": "setuptools.errors.SetupError", "type": null, "documentation": []}, {"name": "setuptools.errors.TemplateError", "type": null, "documentation": []}, {"name": "setuptools.errors.UnknownFileError", "type": null, "documentation": []}, {"name": "setuptools.errors.BaseError", "type": null, "documentation": []}], "classes": [{"name": "setuptools.errors.InvalidConfigError", "bases": ["OptionError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Error used for invalid configurations."]}, {"name": "setuptools.errors.RemovedConfigError", "bases": ["OptionError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Error used for configurations that were deprecated and removed."]}, {"name": "setuptools.errors.RemovedCommandError", "bases": ["BaseError", "RuntimeError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Error used for commands that have been removed in setuptools.\n\nSince `setuptools` is built on `distutils`, simply removing a command\nfrom `setuptools` will make the behavior fall back to `distutils`; this\nerror is raised if a command exists in `distutils` but has been actively\nremoved in `setuptools`.\n"]}, {"name": "setuptools.errors.PackageDiscoveryError", "bases": ["BaseError", "RuntimeError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Impossible to perform automatic discovery of packages and/or modules.\n\nThe current project layout or given discovery options can lead to problems when\nscanning the project directory.\n\nSetuptools might also refuse to complete auto-discovery if an error prone condition\nis detected (e.g. when a project is organised as a flat-layout but contains\nmultiple directories that can be taken as top-level packages inside a single\ndistribution [^footnote-1]). In these situations the users are encouraged to be explicit\nabout which packages to include or to make the discovery parameters more specific.\n\n[^footnote-1]: Since multi-package distributions are uncommon it is very likely that the\n    developers did not intend for all the directories to be packaged, and are just\n    leaving auxiliary code in the repository top-level, such as maintenance-related\n    scripts.\n"]}], "exports": []}, {"name": "setuptools.installer", "documentation": [], "functions": [{"name": "setuptools.installer._fixup_find_links", "asynchronous": false, "params": [{"name": "find_links", "type": null, "default": null}], "returns": null, "documentation": ["Ensure find-links option end-up being a list of strings."]}, {"name": "setuptools.installer.fetch_build_egg", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}, {"name": "req", "type": null, "default": null}], "returns": null, "documentation": ["Fetch an egg needed for building.\n\nUse pip/wheel to fetch/build a wheel."]}, {"name": "setuptools.installer._fetch_build_eggs", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}, {"name": "requires", "type": {"name": "_StrOrIter", "xref": {"fqname": "setuptools.installer._reqs._StrOrIter", "project": null}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "Distribution", "xref": {"fqname": "pkg_resources.Distribution", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools.installer._fetch_build_egg_no_warn", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}, {"name": "req", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.installer.strip_marker", "asynchronous": false, "params": [{"name": "req", "type": null, "default": null}], "returns": null, "documentation": ["Return a new requirement without the environment marker to avoid\ncalling pip with something like `babel; extra == \"i18n\"`, which\nwould always be ignored."]}, {"name": "setuptools.installer._warn_wheel_not_available", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools.installer._DeprecatedInstaller", "bases": ["SetuptoolsDeprecationWarning"], "methods": [], "class_variables": [{"name": "setuptools.installer._DeprecatedInstaller._SUMMARY", "type": null, "documentation": []}, {"name": "setuptools.installer._DeprecatedInstaller._DETAILS", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._reqs", "documentation": [], "functions": [{"name": "setuptools._reqs.parse_strings", "asynchronous": false, "params": [{"name": "strs", "type": {"name": "_StrOrIter", "xref": {"fqname": "_StrOrIter", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Yield requirement strings for each specification in `strs`.\n\n`strs` must be a string, or a (possibly-nested) iterable thereof.", "Setuptools parses the same requirement many times", "(e.g. first for validation than for normalisation),", "so it might be worth to cache."]}, {"name": "setuptools._reqs.parse", "asynchronous": false, "params": [{"name": "strs", "type": {"name": "_StrOrIter", "xref": {"fqname": "_StrOrIter", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "Requirement", "xref": {"fqname": "packaging.requirements.Requirement", "project": null}, "params": null}]}, "documentation": ["These overloads are only needed because of a mypy false-positive, pyright gets it right", "https://github.com/python/mypy/issues/3737"]}, {"name": "setuptools._reqs.parse", "asynchronous": false, "params": [{"name": "strs", "type": {"name": "_StrOrIter", "xref": {"fqname": "_StrOrIter", "project": null}, "params": null}, "default": null}, {"name": "parser", "type": {"name": "Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": [{"name": "", "xref": null, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, {"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools._reqs.parse", "asynchronous": false, "params": [{"name": "strs", "type": {"name": "_StrOrIter", "xref": {"fqname": "_StrOrIter", "project": null}, "params": null}, "default": null}, {"name": "parser", "type": {"name": "Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": [{"name": "", "xref": null, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, {"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}]}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}]}, "documentation": ["Replacement for `pkg_resources.parse_requirements` that uses `packaging`.\n"]}], "variables": [{"name": "setuptools._reqs._T", "type": null, "documentation": []}, {"name": "setuptools._reqs._StrOrIter", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._reqs.parse_req", "type": {"name": "Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": [{"name": "", "xref": null, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, {"name": "Requirement", "xref": {"fqname": "packaging.requirements.Requirement", "project": null}, "params": null}]}, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.command.test", "documentation": [], "functions": [{"name": "setuptools.command.test.__getattr__", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": [{"name": "_test", "xref": {"fqname": "_test", "project": null}, "params": null}]}, "documentation": ["Would restrict to Literal[\"test\"], but mypy doesn't support it: https://github.com/python/mypy/issues/8203"]}], "variables": [], "classes": [{"name": "setuptools.command.test._test", "bases": ["Command"], "methods": [{"name": "setuptools.command.test._test.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.test._test.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.test._test.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.command.test._test.description", "type": null, "documentation": []}, {"name": "setuptools.command.test._test.user_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Stub to warn when test command is referenced or used."]}], "exports": []}, {"name": "setuptools._core_metadata", "documentation": ["Handling of Core Metadata for Python packages (including reading and writing).\n\nSee: https://packaging.python.org/en/latest/specifications/core-metadata/"], "functions": [{"name": "setuptools._core_metadata.get_metadata_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._core_metadata.rfc822_unescape", "asynchronous": false, "params": [{"name": "content", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Reverse RFC-822 escaping by removing leading whitespaces from content."]}, {"name": "setuptools._core_metadata._read_field_from_msg", "asynchronous": false, "params": [{"name": "msg", "type": {"name": "Message", "xref": {"fqname": "email.message.Message", "project": "--std--"}, "params": null}, "default": null}, {"name": "field", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["Read Message header field."]}, {"name": "setuptools._core_metadata._read_field_unescaped_from_msg", "asynchronous": false, "params": [{"name": "msg", "type": {"name": "Message", "xref": {"fqname": "email.message.Message", "project": "--std--"}, "params": null}, "default": null}, {"name": "field", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["Read Message header field and apply rfc822_unescape."]}, {"name": "setuptools._core_metadata._read_list_from_msg", "asynchronous": false, "params": [{"name": "msg", "type": {"name": "Message", "xref": {"fqname": "email.message.Message", "project": "--std--"}, "params": null}, "default": null}, {"name": "field", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "list[str] | None", "xref": null, "params": null}, "documentation": ["Read Message header field and return all results as list."]}, {"name": "setuptools._core_metadata._read_payload_from_msg", "asynchronous": false, "params": [{"name": "msg", "type": {"name": "Message", "xref": {"fqname": "email.message.Message", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._core_metadata.read_pkg_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "file", "type": null, "default": null}], "returns": null, "documentation": ["Reads the metadata values from a file object."]}, {"name": "setuptools._core_metadata.single_line", "asynchronous": false, "params": [{"name": "val", "type": null, "default": null}], "returns": null, "documentation": ["Quick and dirty validation for Summary pypa/setuptools#1390."]}, {"name": "setuptools._core_metadata.write_pkg_info", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "base_dir", "type": null, "default": null}], "returns": null, "documentation": ["Write the PKG-INFO file into the release tree."]}, {"name": "setuptools._core_metadata.write_pkg_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "file", "type": null, "default": null}], "returns": null, "documentation": ["Write the PKG-INFO format data to a file object.", "Based on Python 3.5 version"]}, {"name": "setuptools._core_metadata._write_requirements", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "file", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._core_metadata._include_extra", "asynchronous": false, "params": [{"name": "req", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "extra", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "condition", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Requirement", "xref": {"fqname": "packaging.requirements.Requirement", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._core_metadata._write_provides_extra", "asynchronous": false, "params": [{"name": "file", "type": null, "default": null}, {"name": "processed_extras", "type": null, "default": null}, {"name": "safe", "type": null, "default": null}, {"name": "unsafe", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._core_metadata.get_fullname", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["from pypa/distutils#244; needed only until that logic is always available"]}, {"name": "setuptools._core_metadata._distribution_fullname", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["```pycon\n>>> _distribution_fullname('setup.tools', '1.0-2')\n'setup_tools-1.0.post2'\n>>> _distribution_fullname('setup-tools', '1.2post2')\n'setup_tools-1.2.post2'\n>>> _distribution_fullname('setup-tools', '1.0-r2')\n'setup_tools-1.0.post2'\n>>> _distribution_fullname('setup.tools', '1.0.post')\n'setup_tools-1.0.post0'\n>>> _distribution_fullname('setup.tools', '1.0+ubuntu-1')\n'setup_tools-1.0+ubuntu.1'\n```\n"]}], "variables": [{"name": "setuptools._core_metadata._POSSIBLE_DYNAMIC_FIELDS", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.command.build_clib", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools.command.build_clib.build_clib", "bases": ["orig.build_clib"], "methods": [{"name": "setuptools.command.build_clib.build_clib.build_libraries", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "libraries", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.command.build_clib.build_clib.distribution", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.command.dist.Distribution", "project": null}, "params": null}, "documentation": ["override distutils.dist.Distribution with setuptools.dist.Distribution"]}], "instance_variables": [], "inner_classes": [], "documentation": ["Override the default build_clib behaviour to do the following:\n\n1. Implement a rudimentary timestamp-based dependency system\n   so 'compile()' doesn't run every time.\n2. Add more keys to the 'build_info' dictionary:\n    * obj_deps - specify dependencies for each object compiled.\n                 this should be a dictionary mapping a key\n                 with the source filename to a list of\n                 dependencies. Use an empty string for global\n                 dependencies.\n    * cflags   - specify a list of additional flags to pass to\n                 the compiler."]}], "exports": []}, {"name": "setuptools._normalization", "documentation": ["Helpers for normalization as expected in wheel/sdist/module file names\nand core metadata"], "functions": [{"name": "setuptools._normalization.safe_identifier", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Make a string safe to be used as Python identifier.\n\\>>> safe_identifier(\"12abc\")\n'\\_12abc'\n\\>>> safe_identifier(\"\\_\\_editable\\_\\_.myns.pkg-78.9.3_local\")\n'\\_\\_editable\\_\\_\\_myns_pkg_78_9_3_local'\n"]}, {"name": "setuptools._normalization.safe_name", "asynchronous": false, "params": [{"name": "component", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Escape a component used as a project name according to Core Metadata.\n\\>>> safe_name(\"hello world\")\n'hello-world'\n\\>>> safe_name(\"hello?world\")\n'hello-world'\n\\>>> safe_name(\"hello_world\")\n'hello_world'\n"]}, {"name": "setuptools._normalization.safe_version", "asynchronous": false, "params": [{"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Convert an arbitrary string into a valid version string.\nCan still raise an `InvalidVersion` exception.\nTo avoid exceptions use `best_effort_version`.\n\\>>> safe_version(\"1988 12 25\")\n'1988.12.25'\n\\>>> safe_version(\"v0.2.1\")\n'0.2.1'\n\\>>> safe_version(\"v0.2?beta\")\n'0.2b0'\n\\>>> safe_version(\"v0.2 beta\")\n'0.2b0'\n\\>>> safe_version(\"ubuntu lts\")\nTraceback (most recent call last):\n...\npackaging.version.InvalidVersion: Invalid version: 'ubuntu.lts'\n"]}, {"name": "setuptools._normalization.best_effort_version", "asynchronous": false, "params": [{"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Convert an arbitrary string into a version-like string.\nFallback when `safe_version` is not safe enough.\n\\>>> best_effort_version(\"v0.2 beta\")\n'0.2b0'\n\\>>> best_effort_version(\"ubuntu lts\")\n'0.dev0+sanitized.ubuntu.lts'\n\\>>> best_effort_version(\"0.23ubuntu1\")\n'0.23.dev0+sanitized.ubuntu1'\n\\>>> best_effort_version(\"0.23-\")\n'0.23.dev0+sanitized'\n\\>>> best_effort_version(\"0.-\\_\")\n'0.dev0+sanitized'\n\\>>> best_effort_version(\"42.+?1\")\n'42.dev0+sanitized.1'\n"]}, {"name": "setuptools._normalization.safe_extra", "asynchronous": false, "params": [{"name": "extra", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Normalize extra name according to PEP 685\n\\>>> safe_extra(\"\\_FrIeNdLy-.\\_.-bArD\")\n'friendly-bard'\n\\>>> safe_extra(\"FrIeNdLy-.\\_.-.\\_-\")\n'friendly-bard'\n"]}, {"name": "setuptools._normalization.filename_component", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Normalize each component of a filename (e.g. distribution/version part of wheel)\nNote: `value` needs to be already normalized.\n\\>>> filename_component(\"my-pkg\")\n'my_pkg'\n"]}, {"name": "setuptools._normalization.filename_component_broken", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Produce the incorrect filename component for compatibility.\n\nSee pypa/setuptools#4167 for detailed analysis.\n\nTODO: replace this with filename_component after pip 24 is\nnearly-ubiquitous.\n\n```pycon\n>>> filename_component_broken('foo_bar-baz')\n'foo-bar-baz'\n```\n"]}, {"name": "setuptools._normalization.safer_name", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Like `safe_name` but can be used as filename component for wheel\n"]}, {"name": "setuptools._normalization.safer_best_effort_version", "asynchronous": false, "params": [{"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Like `best_effort_version` but can be used as filename component for wheel\n"]}], "variables": [{"name": "setuptools._normalization._VALID_NAME", "type": null, "documentation": []}, {"name": "setuptools._normalization._UNSAFE_NAME_CHARS", "type": null, "documentation": []}, {"name": "setuptools._normalization._NON_ALPHANUMERIC", "type": null, "documentation": []}, {"name": "setuptools._normalization._PEP440_FALLBACK", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._distutils.dist", "documentation": ["distutils.dist\n\nProvides the Distribution class, which represents the module distribution\nbeing built/installed/distributed."], "functions": [{"name": "setuptools._distutils.dist._ensure_list", "asynchronous": false, "params": [{"name": "value", "type": null, "default": null}, {"name": "fieldname", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.fix_help_options", "asynchronous": false, "params": [{"name": "options", "type": null, "default": null}], "returns": null, "documentation": ["Convert a 4-tuple 'help_options' list as found in various command\nclasses to the 3-tuple form required by FancyGetopt."]}], "variables": [{"name": "setuptools._distutils.dist._CommandT", "type": null, "documentation": []}, {"name": "setuptools._distutils.dist.command_re", "type": null, "documentation": []}], "classes": [{"name": "setuptools._distutils.dist.Distribution", "bases": [], "methods": [{"name": "setuptools._distutils.dist.Distribution.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "attrs", "type": null, "default": "..."}], "returns": null, "documentation": ["Construct a new Distribution instance: initialize all the\nattributes of a Distribution, and then use 'attrs' (a dictionary\nmapping attribute names to values) to assign some of those\nattributes their \"real\" values.  (Any attributes not mentioned in\n'attrs' will be assigned to some null value: 0, None, an empty list\nor dictionary, etc.)  Most importantly, initialize the\n'command_obj' attribute to the empty dictionary; this will be\nfilled in with real command objects by 'parse_command_line()'.", "-- Creation/initialization methods -------------------------------"]}, {"name": "setuptools._distutils.dist.Distribution.get_option_dict", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": null, "default": null}], "returns": null, "documentation": ["Get the option dictionary for a given command.  If that\ncommand's option dictionary hasn't been created yet, then create it\nand return the new dictionary; otherwise, return the existing\noption dictionary."]}, {"name": "setuptools._distutils.dist.Distribution.dump_option_dicts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "header", "type": null, "default": "..."}, {"name": "commands", "type": null, "default": "..."}, {"name": "indent", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.Distribution.find_config_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Find as many configuration files as should be processed for this\nplatform, and return a list of filenames in the order in which they\nshould be parsed. The filenames returned are guaranteed to exist\n(modulo nasty race conditions).\n\nThere are multiple possible config files:\n\\- distutils.cfg in the Distutils installation directory (i.e.\n\n> where the top-level Distutils \\_\\_inst\\_\\_.py file lives)\n\n- a file in the user's home directory named .pydistutils.cfg\n  on Unix and pydistutils.cfg on Windows/Mac; may be disabled\n  with the `--no-user-cfg` option\n- setup.cfg in the current directory\n- a file named by an environment variable\n", "-- Config file finding/parsing methods ---------------------------"]}, {"name": "setuptools._distutils.dist.Distribution._gen_paths", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.Distribution.parse_config_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "filenames", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.Distribution.parse_command_line", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Parse the setup script's command line, taken from the\n'script_args' instance attribute (which defaults to 'sys.argv[1:]'\n-- see 'setup()' in core.py).  This list is first processed for\n\"global options\" -- options that set attributes of the Distribution\ninstance.  Then, it is alternately scanned for Distutils commands\nand options for that command.  Each new command terminates the\noptions for the previous command.  The allowed options for a\ncommand are determined by the 'user_options' attribute of the\ncommand class -- thus, we have to be able to load command classes\nin order to parse the command line.  Any error in that 'options'\nattribute raises DistutilsGetoptError; any error on the\ncommand-line raises DistutilsArgError.  If no Distutils commands\nwere found on the command line, raises DistutilsArgError.  Return\ntrue if command-line was successfully parsed and we should carry\non with executing commands; false if no errors but we shouldn't\nexecute commands (currently, this only happens if user asks for\nhelp).", "-- Command-line parsing methods ----------------------------------"]}, {"name": "setuptools._distutils.dist.Distribution._get_toplevel_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return the non-display options recognized at the top level.\n\nThis includes options that are recognized *only* at the top\nlevel as well as options recognized for commands."]}, {"name": "setuptools._distutils.dist.Distribution._parse_command_opts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parser", "type": null, "default": null}, {"name": "args", "type": null, "default": null}], "returns": null, "documentation": ["Parse the command-line options for a single command.\n'parser' must be a FancyGetopt instance; 'args' must be the list\nof arguments, starting with the current command (whose options\nwe are about to parse).  Returns a new version of 'args' with\nthe next command at the front of the list; will be the empty\nlist if there are no more commands on the command line.  Returns\nNone if the user asked for help on this command."]}, {"name": "setuptools._distutils.dist.Distribution.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Set final values for all the options on the Distribution\ninstance, analogous to the .finalize_options() method of Command\nobjects."]}, {"name": "setuptools._distutils.dist.Distribution._show_help", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parser", "type": null, "default": null}, {"name": "global_options", "type": null, "default": "..."}, {"name": "display_options", "type": null, "default": "..."}, {"name": "commands", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": null}, "default": "..."}], "returns": null, "documentation": ["Show help for the setup script command-line in the form of\nseveral lists of command-line options.  'parser' should be a\nFancyGetopt instance; do not expect it to be returned in the\nsame state, as its option table will be reset to make it\ngenerate the correct help text.\n\nIf 'global_options' is true, lists the global options:\n--verbose, --dry-run, etc.  If 'display_options' is true, lists\nthe \"display-only\" options: --name, --version, etc.  Finally,\nlists per-command help for every command name or command class\nin 'commands'."]}, {"name": "setuptools._distutils.dist.Distribution.handle_display_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "option_order", "type": null, "default": null}], "returns": null, "documentation": ["If there were any non-global \"display-only\" options\n(--help-commands or the metadata display options) on the command\nline, display the requested info and return true; else return\nfalse."]}, {"name": "setuptools._distutils.dist.Distribution.print_command_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "commands", "type": null, "default": null}, {"name": "header", "type": null, "default": null}, {"name": "max_length", "type": null, "default": null}], "returns": null, "documentation": ["Print a subset of the list of all commands -- used by\n'print_commands()'."]}, {"name": "setuptools._distutils.dist.Distribution.print_commands", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Print out a help message listing all available commands with a\ndescription of each.  The list is divided into \"standard commands\"\n(listed in distutils.command.__all__) and \"extra commands\"\n(mentioned in self.cmdclass, but not a standard command).  The\ndescriptions come from the command class attribute\n'description'."]}, {"name": "setuptools._distutils.dist.Distribution.get_command_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Get a list of (command, description) tuples.\nThe list is divided into \"standard commands\" (listed in\ndistutils.command.__all__) and \"extra commands\" (mentioned in\nself.cmdclass, but not a standard command).  The descriptions come\nfrom the command class attribute 'description'."]}, {"name": "setuptools._distutils.dist.Distribution.get_command_packages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return a list of packages from which commands are loaded.", "-- Command class/object methods ----------------------------------"]}, {"name": "setuptools._distutils.dist.Distribution.get_command_class", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": null, "default": null}], "returns": null, "documentation": ["Return the class that implements the Distutils command named by\n'command'.  First we check the 'cmdclass' dictionary; if the\ncommand is mentioned there, we fetch the class object from the\ndictionary and return it.  Otherwise we load the command module\n(\"distutils.command.\" + command) and fetch the command class from\nthe module.  The loaded class is also stored in 'cmdclass'\nto speed future calls to 'get_command_class()'.\n\nRaises DistutilsModuleError if the expected module could not be\nfound, or if that module does not define the expected class."]}, {"name": "setuptools._distutils.dist.Distribution.get_command_obj", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "create", "type": {"name": "Literal", "xref": {"fqname": "typing.Literal", "project": "--std--"}, "params": [{"name": "True", "xref": null, "params": null}]}, "default": "..."}], "returns": {"name": "Command", "xref": {"fqname": "setuptools._distutils.dist.cmd.Command", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._distutils.dist.Distribution.get_command_obj", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "create", "type": {"name": "Literal", "xref": {"fqname": "typing.Literal", "project": "--std--"}, "params": [{"name": "False", "xref": null, "params": null}]}, "default": null}], "returns": {"name": "Command | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._distutils.dist.Distribution.get_command_obj", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "create", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Command | None", "xref": null, "params": null}, "documentation": ["Return the command object for 'command'.  Normally this object\nis cached on a previous call to 'get_command_obj()'; if no command\nobject for 'command' is in the cache, then we either create and\nreturn it (if 'create' is true) or return None."]}, {"name": "setuptools._distutils.dist.Distribution._set_command_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command_obj", "type": null, "default": null}, {"name": "option_dict", "type": null, "default": "..."}], "returns": null, "documentation": ["Set the options for 'command_obj' from 'option_dict'.  Basically\nthis means copying elements of a dictionary ('option_dict') to\nattributes of an instance ('command').\n\n'command_obj' must be a Command instance.  If 'option_dict' is not\nsupplied, uses the standard option dictionary for this command\n(from 'self.command_options')."]}, {"name": "setuptools._distutils.dist.Distribution.reinitialize_command", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "reinit_subcommands", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Command", "xref": {"fqname": "setuptools._distutils.dist.cmd.Command", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._distutils.dist.Distribution.reinitialize_command", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": {"name": "_CommandT", "xref": {"fqname": "_CommandT", "project": null}, "params": null}, "default": null}, {"name": "reinit_subcommands", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "_CommandT", "xref": {"fqname": "_CommandT", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._distutils.dist.Distribution.reinitialize_command", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": {"name": "str | Command", "xref": null, "params": null}, "default": null}, {"name": "reinit_subcommands", "type": null, "default": "..."}], "returns": {"name": "Command", "xref": {"fqname": "setuptools._distutils.dist.cmd.Command", "project": null}, "params": null}, "documentation": ["Reinitializes a command to the state it was in when first\nreturned by 'get_command_obj()': ie., initialized but not yet\nfinalized.  This provides the opportunity to sneak option\nvalues in programmatically, overriding or supplementing\nuser-supplied values from the config files and command line.\nYou'll have to re-finalize the command object (by calling\n'finalize_options()' or 'ensure_finalized()') before using it for\nreal.\n\n'command' should be a command name (string) or command object.  If\n'reinit_subcommands' is true, also reinitializes the command's\nsub-commands, as declared by the 'sub_commands' class attribute (if\nit has one).  See the \"install\" command for an example.  Only\nreinitializes the sub-commands that actually matter, ie. those\nwhose test predicates return true.\n\nReturns the reinitialized command object."]}, {"name": "setuptools._distutils.dist.Distribution.announce", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}, {"name": "level", "type": null, "default": "..."}], "returns": null, "documentation": ["-- Methods that operate on the Distribution ----------------------"]}, {"name": "setuptools._distutils.dist.Distribution.run_commands", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Run each command that was seen on the setup script command line.\nUses the list of commands found and cache of command objects\ncreated by 'get_command_obj()'."]}, {"name": "setuptools._distutils.dist.Distribution.run_command", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": null, "default": null}], "returns": null, "documentation": ["Do whatever it takes to run a command (including nothing at all,\nif the command has already been run).  Specifically: if we have\nalready created and run the command named by 'command', return\nsilently without doing anything.  If the command named by 'command'\ndoesn't even have a command object yet, create one.  Then invoke\n'run()' on that command object (or an existing one).", "-- Methods that operate on its Commands --------------------------"]}, {"name": "setuptools._distutils.dist.Distribution.has_pure_modules", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["-- Distribution query methods ------------------------------------"]}, {"name": "setuptools._distutils.dist.Distribution.has_ext_modules", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.Distribution.has_c_libraries", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.Distribution.has_modules", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.Distribution.has_headers", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.Distribution.has_scripts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.Distribution.has_data_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.Distribution.is_pure", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.dist.Distribution.global_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.dist.Distribution.common_usage", "type": null, "documentation": []}, {"name": "setuptools._distutils.dist.Distribution.display_options", "type": null, "documentation": []}, {"name": "setuptools._distutils.dist.Distribution.display_option_names", "type": null, "documentation": []}, {"name": "setuptools._distutils.dist.Distribution.negative_opt", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["The core of the Distutils.  Most of the work hiding behind 'setup'\nis really done within a Distribution instance, which farms the work out\nto the Distutils commands specified on the command line.\n\nSetup scripts will almost never instantiate Distribution directly,\nunless the 'setup()' function is totally inadequate to their needs.\nHowever, it is conceivable that a setup script might wish to subclass\nDistribution for some specialized purpose, and then pass the subclass\nto 'setup()' as the 'distclass' keyword argument.  If so, it is\nnecessary to respect the expectations that 'setup' has of Distribution.\nSee the code for 'setup()', in core.py, for details."]}, {"name": "setuptools._distutils.dist.DistributionMetadata", "bases": [], "methods": [{"name": "setuptools._distutils.dist.DistributionMetadata.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.read_pkg_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "file", "type": null, "default": null}], "returns": null, "documentation": ["Reads the metadata values from a file object."]}, {"name": "setuptools._distutils.dist.DistributionMetadata.write_pkg_info", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "base_dir", "type": null, "default": null}], "returns": null, "documentation": ["Write the PKG-INFO file into the release tree."]}, {"name": "setuptools._distutils.dist.DistributionMetadata.write_pkg_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "file", "type": null, "default": null}], "returns": null, "documentation": ["Write the PKG-INFO format data to a file object."]}, {"name": "setuptools._distutils.dist.DistributionMetadata._write_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "file", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "values", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["-- Metadata query methods ----------------------------------------"]}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_fullname", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata._fullname", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["```pycon\n>>> DistributionMetadata._fullname('setup.tools', '1.0-2')\n'setup_tools-1.0.post2'\n>>> DistributionMetadata._fullname('setup-tools', '1.2post2')\n'setup_tools-1.2.post2'\n>>> DistributionMetadata._fullname('setup-tools', '1.0-r2')\n'setup_tools-1.0.post2'\n>>> DistributionMetadata._fullname('setup.tools', '1.0.post')\n'setup_tools-1.0.post0'\n>>> DistributionMetadata._fullname('setup.tools', '1.0+ubuntu-1')\n'setup_tools-1.0+ubuntu.1'\n```\n"]}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_author", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_author_email", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_maintainer", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_maintainer_email", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_contact", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_contact_email", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_url", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_license", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_description", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_long_description", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_keywords", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.set_keywords", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_platforms", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.set_platforms", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_classifiers", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.set_classifiers", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_download_url", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_requires", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["PEP 314"]}, {"name": "setuptools._distutils.dist.DistributionMetadata.set_requires", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_provides", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.set_provides", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_obsoletes", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.set_obsoletes", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._distutils.dist.DistributionMetadata._METHOD_BASENAMES", "type": null, "documentation": []}, {"name": "setuptools._distutils.dist.DistributionMetadata.get_licence", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Dummy class to hold the distribution meta-data: name, version,\nauthor, and so forth."]}], "exports": []}, {"name": "setuptools.command.install_egg_info", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools.command.install_egg_info.install_egg_info", "bases": ["namespaces.Installer", "Command"], "methods": [{"name": "setuptools.command.install_egg_info.install_egg_info.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.install_egg_info.install_egg_info.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.install_egg_info.install_egg_info.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.install_egg_info.install_egg_info.get_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.install_egg_info.install_egg_info.copytree", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.command.install_egg_info.install_egg_info.description", "type": null, "documentation": []}, {"name": "setuptools.command.install_egg_info.install_egg_info.user_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Install an .egg-info directory for the package"]}], "exports": []}, {"name": "setuptools.command.build", "documentation": [], "functions": [], "variables": [{"name": "setuptools.command.build._ORIGINAL_SUBCOMMANDS", "type": null, "documentation": []}], "classes": [{"name": "setuptools.command.build.build", "bases": ["_build"], "methods": [], "class_variables": [{"name": "setuptools.command.build.build.distribution", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.command.dist.Distribution", "project": null}, "params": null}, "documentation": ["override distutils.dist.Distribution with setuptools.dist.Distribution"]}, {"name": "setuptools.command.build.build.sub_commands", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.command.build.SubCommand", "bases": ["Protocol"], "methods": [{"name": "setuptools.command.build.SubCommand.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["(Required by the original {class}`setuptools.Command` interface)\n"]}, {"name": "setuptools.command.build.SubCommand.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["(Required by the original {class}`setuptools.Command` interface)\n"]}, {"name": "setuptools.command.build.SubCommand.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["(Required by the original {class}`setuptools.Command` interface)\n"]}, {"name": "setuptools.command.build.SubCommand.get_source_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Return a list of all files that are used by the command to create the expected\noutputs.\nFor example, if your build command transpiles Java files into Python, you should\nlist here all the Java files.\nThe primary purpose of this function is to help populating the `sdist`\nwith all the files necessary to build the distribution.\nAll files should be strings relative to the project root directory.\n"]}, {"name": "setuptools.command.build.SubCommand.get_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Return a list of files intended for distribution as they would have been\nproduced by the build.\nThese files should be strings in the form of\n`\"{build_lib}/destination/file/path\"`.\n\n:::{note}\nThe return value of `get_output()` should include all files used as keys\nin `get_output_mapping()` plus files that are generated during the build\nand don't correspond to any source file already present in the project.\n:::\n"]}, {"name": "setuptools.command.build.SubCommand.get_output_mapping", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Return a mapping between destination files as they would be produced by the\nbuild (dict keys) into the respective existing (source) files (dict values).\nExisting (source) files should be represented as strings relative to the project\nroot directory.\nDestination files should be strings in the form of\n`\"{build_lib}/destination/file/path\"`.\n"]}], "class_variables": [{"name": "setuptools.command.build.SubCommand.editable_mode", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Boolean flag that will be set to `True` when setuptools is used for an\neditable installation (see {pep}`660`).\nImplementations **SHOULD** explicitly set the default value of this attribute to\n`False`.\nWhen subcommands run, they can use this flag to perform optimizations or change\ntheir behaviour accordingly.\n"]}, {"name": "setuptools.command.build.SubCommand.build_lib", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["String representing the directory where the build artifacts should be stored,\ne.g. `build/lib`.\nFor example, if a distribution wants to provide a Python module named `pkg.mod`,\nthen a corresponding file should be written to `{build_lib}/package/module.py`.\nA way of thinking about this is that the files saved under `build_lib`\nwould be eventually copied to one of the directories in {obj}`site.PREFIXES`\nupon installation.\n\nA command that produces platform-independent files (e.g. compiling text templates\ninto Python functions), **CAN** initialize `build_lib` by copying its value from\nthe `build_py` command. On the other hand, a command that produces\nplatform-specific files **CAN** initialize `build_lib` by copying its value from\nthe `build_ext` command. In general this is done inside the `finalize_options`\nmethod with the help of the `set_undefined_options` command:\n\n```\ndef finalize_options(self):\n    self.set_undefined_options(\"build_py\", (\"build_lib\", \"build_lib\"))\n    ...\n```\n"]}], "instance_variables": [], "inner_classes": [], "documentation": ["In order to support editable installations (see {pep}`660`) all\nbuild subcommands **SHOULD** implement this protocol. They also **MUST** inherit\nfrom `setuptools.Command`.\n\nWhen creating an {pep}`editable wheel <660>`, `setuptools` will try to evaluate\ncustom `build` subcommands using the following procedure:\n\n1. `setuptools` will set the `editable_mode` attribute to `True`\n\n2. `setuptools` will execute the `run()` command.\n\n   :::{important}\n   Subcommands **SHOULD** take advantage of `editable_mode=True` to adequate\n   its behaviour or perform optimisations.\n\n   For example, if a subcommand doesn't need to generate an extra file and\n   all it does is to copy a source file into the build directory,\n   `run()` **SHOULD** simply \"early return\".\n\n   Similarly, if the subcommand creates files that would be placed alongside\n   Python files in the final distribution, during an editable install\n   the command **SHOULD** generate these files \"in place\" (i.e. write them to\n   the original source directory, instead of using the build directory).\n   Note that `get_output_mapping()` should reflect that and include mappings\n   for \"in place\" builds accordingly.\n   :::\n\n3. `setuptools` use any knowledge it can derive from the return values of\n   `get_outputs()` and `get_output_mapping()` to create an editable wheel.\n   When relevant `setuptools` **MAY** attempt to use file links based on the value\n   of `get_output_mapping()`. Alternatively, `setuptools` **MAY** attempt to use\n   {doc}`import hooks <python:reference/import>` to redirect any attempt to import\n   to the directory with the original source code and other files built in place.\n\nPlease note that custom sub-commands **SHOULD NOT** rely on `run()` being\nexecuted (or not) to provide correct return values for `get_outputs()`,\n`get_output_mapping()` or `get_source_files()`. The `get_*` methods should\nwork independently of `run()`.\n"]}], "exports": []}, {"name": "setuptools.command.build_ext", "documentation": [], "functions": [{"name": "setuptools.command.build_ext._customize_compiler_for_shlib", "asynchronous": false, "params": [{"name": "compiler", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.build_ext.if_dl", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.build_ext.get_abi3_suffix", "asynchronous": false, "params": [], "returns": null, "documentation": ["Return the file extension for an abi3-compliant Extension()"]}, {"name": "setuptools.command.build_ext.link_shared_object", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "objects", "type": null, "default": null}, {"name": "output_libname", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": "..."}, {"name": "libraries", "type": null, "default": "..."}, {"name": "library_dirs", "type": null, "default": "..."}, {"name": "runtime_library_dirs", "type": null, "default": "..."}, {"name": "export_symbols", "type": null, "default": "..."}, {"name": "debug", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "extra_preargs", "type": null, "default": "..."}, {"name": "extra_postargs", "type": null, "default": "..."}, {"name": "build_temp", "type": null, "default": "..."}, {"name": "target_lang", "type": null, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Build shared libraries"]}, {"name": "setuptools.command.build_ext.link_shared_object", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "objects", "type": null, "default": null}, {"name": "output_libname", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": "..."}, {"name": "libraries", "type": null, "default": "..."}, {"name": "library_dirs", "type": null, "default": "..."}, {"name": "runtime_library_dirs", "type": null, "default": "..."}, {"name": "export_symbols", "type": null, "default": "..."}, {"name": "debug", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "extra_preargs", "type": null, "default": "..."}, {"name": "extra_postargs", "type": null, "default": "..."}, {"name": "build_temp", "type": null, "default": "..."}, {"name": "target_lang", "type": null, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "variables": [{"name": "setuptools.command.build_ext.have_rtld", "type": null, "documentation": []}, {"name": "setuptools.command.build_ext.use_stubs", "type": null, "documentation": []}, {"name": "setuptools.command.build_ext.libtype", "type": null, "documentation": []}, {"name": "setuptools.command.build_ext.use_stubs", "type": null, "documentation": []}, {"name": "setuptools.command.build_ext.libtype", "type": null, "documentation": []}], "classes": [{"name": "setuptools.command.build_ext.build_ext", "bases": ["_build_ext"], "methods": [{"name": "setuptools.command.build_ext.build_ext.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Build extensions in build directory, then copy if --inplace"]}, {"name": "setuptools.command.build_ext.build_ext._get_inplace_equivalent", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "build_py", "type": null, "default": null}, {"name": "ext", "type": {"name": "Extension", "xref": {"fqname": "setuptools.extension.Extension", "project": null}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.command.build_ext.build_ext.copy_extensions_to_source", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.build_ext.build_ext._get_equivalent_stub", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "ext", "type": {"name": "Extension", "xref": {"fqname": "setuptools.extension.Extension", "project": null}, "params": null}, "default": null}, {"name": "output_file", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.build_ext.build_ext._get_output_mapping", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "setuptools.command.build_ext.build_ext.get_ext_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "fullname", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.build_ext.build_ext.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.build_ext.build_ext.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.build_ext.build_ext.setup_shlib_compiler", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.build_ext.build_ext.get_export_symbols", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "ext", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.build_ext.build_ext.build_extension", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "ext", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.build_ext.build_ext.links_to_dynamic", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "ext", "type": null, "default": null}], "returns": null, "documentation": ["Return true if 'ext' links to a dynamic lib in the same package"]}, {"name": "setuptools.command.build_ext.build_ext.get_source_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.command.build_ext.build_ext._get_internal_depends", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Yield `ext.depends` that are contained by the project directory\n"]}, {"name": "setuptools.command.build_ext.build_ext.get_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.command.build_ext.build_ext.get_output_mapping", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["See {class}`setuptools.commands.build.SubCommand`\n"]}, {"name": "setuptools.command.build_ext.build_ext.__get_stubs_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.build_ext.build_ext.__get_output_extensions", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.build_ext.build_ext.write_stub", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "output_dir", "type": null, "default": null}, {"name": "ext", "type": null, "default": null}, {"name": "compile", "type": null, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.build_ext.build_ext._write_stub_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "stub_file", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "ext", "type": {"name": "Extension", "xref": {"fqname": "setuptools.extension.Extension", "project": null}, "params": null}, "default": null}, {"name": "compile", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.command.build_ext.build_ext._compile_and_remove_stub", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "stub_file", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.command.build_ext.build_ext.distribution", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "documentation": ["override distutils.dist.Distribution with setuptools.dist.Distribution"]}, {"name": "setuptools.command.build_ext.build_ext.editable_mode", "type": null, "documentation": []}, {"name": "setuptools.command.build_ext.build_ext.inplace", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.command.egg_info", "documentation": ["setuptools.command.egg_info\n\nCreate a distribution's .egg-info directory and contents"], "functions": [{"name": "setuptools.command.egg_info.translate_pattern", "asynchronous": false, "params": [{"name": "glob", "type": null, "default": null}], "returns": null, "documentation": ["Translate a file path glob like '*.txt' in to a regular expression.\nThis differs from fnmatch.translate which allows wildcards to match\ndirectory separators. It also knows about '**/' which matches any number of\ndirectories."]}, {"name": "setuptools.command.egg_info.write_file", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}, {"name": "contents", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Create a file with the specified name and write 'contents' (a\nsequence of strings without line terminators) to it."]}, {"name": "setuptools.command.egg_info.write_pkg_info", "asynchronous": false, "params": [{"name": "cmd", "type": null, "default": null}, {"name": "basename", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.egg_info.warn_depends_obsolete", "asynchronous": false, "params": [{"name": "cmd", "type": null, "default": null}, {"name": "basename", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Unused: left to avoid errors when updating (from source) from \\<= 67.8.\nOld installations have a .dist-info directory with the entry-point\n`depends.txt = setuptools.command.egg_info:warn_depends_obsolete`.\nThis may trigger errors when running the first egg_info in build_meta.\nTODO: Remove this function in a version sufficiently > 68.\n"]}, {"name": "setuptools.command.egg_info.write_toplevel_names", "asynchronous": false, "params": [{"name": "cmd", "type": null, "default": null}, {"name": "basename", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.egg_info.overwrite_arg", "asynchronous": false, "params": [{"name": "cmd", "type": null, "default": null}, {"name": "basename", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.egg_info.write_arg", "asynchronous": false, "params": [{"name": "cmd", "type": null, "default": null}, {"name": "basename", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}, {"name": "force", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.egg_info.write_entries", "asynchronous": false, "params": [{"name": "cmd", "type": null, "default": null}, {"name": "basename", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.egg_info._egg_basename", "asynchronous": false, "params": [{"name": "egg_name", "type": null, "default": null}, {"name": "egg_version", "type": null, "default": null}, {"name": "py_version", "type": null, "default": "..."}, {"name": "platform", "type": null, "default": "..."}], "returns": null, "documentation": ["Compute filename of the output egg. Private API."]}], "variables": [{"name": "setuptools.command.egg_info.PY_MAJOR", "type": null, "documentation": []}, {"name": "setuptools.command.egg_info.write_requirements", "type": null, "documentation": []}, {"name": "setuptools.command.egg_info.write_setup_requirements", "type": null, "documentation": []}], "classes": [{"name": "setuptools.command.egg_info.InfoCommon", "bases": [], "methods": [{"name": "setuptools.command.egg_info.InfoCommon.name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.egg_info.InfoCommon.tagged_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.egg_info.InfoCommon._maybe_tag", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "version", "type": null, "default": null}], "returns": null, "documentation": ["egg_info may be called more than once for a distribution,\nin which case the version string already contains all tags."]}, {"name": "setuptools.command.egg_info.InfoCommon._already_tagged", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.egg_info.InfoCommon._safe_tags", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.egg_info.InfoCommon.tags", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.command.egg_info.InfoCommon.tag_build", "type": null, "documentation": []}, {"name": "setuptools.command.egg_info.InfoCommon.tag_date", "type": null, "documentation": []}, {"name": "setuptools.command.egg_info.InfoCommon.vtags", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.command.egg_info.egg_info", "bases": ["InfoCommon", "Command"], "methods": [{"name": "setuptools.command.egg_info.egg_info.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.egg_info.egg_info.tag_svn_revision", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["###################################", "allow the 'tag_svn_revision' to be detected and", "set, supporting sdists built on older Setuptools."]}, {"name": "setuptools.command.egg_info.egg_info.tag_svn_revision", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.egg_info.egg_info.save_version_info", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Materialize the value of date into the\nbuild tag. Install build keys in a deterministic order\nto avoid arbitrary reordering on subsequent builds.", "###################################"]}, {"name": "setuptools.command.egg_info.egg_info.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.egg_info.egg_info._get_egg_basename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "py_version", "type": null, "default": "..."}, {"name": "platform", "type": null, "default": "..."}], "returns": null, "documentation": ["Compute filename of the output egg. Private API."]}, {"name": "setuptools.command.egg_info.egg_info.write_or_delete_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "what", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}, {"name": "data", "type": null, "default": null}, {"name": "force", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Write `data` to `filename` or delete if empty\n\nIf `data` is non-empty, this routine is the same as `write_file()`.\nIf `data` is empty but not `None`, this is the same as calling\n``` delete_file(filename)`.  If `data` is ``None ```, then this is a no-op\nunless `filename` exists, in which case a warning is issued about the\norphaned file (if `force` is false), or deleted (if `force` is true).\n"]}, {"name": "setuptools.command.egg_info.egg_info.write_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "what", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}, {"name": "data", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Write `data` to `filename` (if not a dry run) after announcing it\n\n`what` is used in a log message to identify what is being written\nto the file."]}, {"name": "setuptools.command.egg_info.egg_info.delete_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Delete `filename` (if not a dry run) after announcing it"]}, {"name": "setuptools.command.egg_info.egg_info.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.egg_info.egg_info.find_sources", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Generate SOURCES.txt manifest file"]}], "class_variables": [{"name": "setuptools.command.egg_info.egg_info.description", "type": null, "documentation": []}, {"name": "setuptools.command.egg_info.egg_info.user_options", "type": null, "documentation": []}, {"name": "setuptools.command.egg_info.egg_info.boolean_options", "type": null, "documentation": []}, {"name": "setuptools.command.egg_info.egg_info.negative_opt", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.command.egg_info.FileList", "bases": ["_FileList"], "methods": [{"name": "setuptools.command.egg_info.FileList.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "warn", "type": null, "default": "..."}, {"name": "debug_print", "type": null, "default": "..."}, {"name": "ignore_egg_info_dir", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Implementations of the various MANIFEST.in commands"]}, {"name": "setuptools.command.egg_info.FileList.process_template_line", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "line", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.egg_info.FileList._remove_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "predicate", "type": null, "default": null}], "returns": null, "documentation": ["Remove all files from the file list that match the predicate.\nReturn True if any matching files were removed"]}, {"name": "setuptools.command.egg_info.FileList.include", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pattern", "type": null, "default": null}], "returns": null, "documentation": ["Include files that match 'pattern'."]}, {"name": "setuptools.command.egg_info.FileList.exclude", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pattern", "type": null, "default": null}], "returns": null, "documentation": ["Exclude files that match 'pattern'."]}, {"name": "setuptools.command.egg_info.FileList.recursive_include", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dir", "type": null, "default": null}, {"name": "pattern", "type": null, "default": null}], "returns": null, "documentation": ["Include all files anywhere in 'dir/' that match the pattern."]}, {"name": "setuptools.command.egg_info.FileList.recursive_exclude", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dir", "type": null, "default": null}, {"name": "pattern", "type": null, "default": null}], "returns": null, "documentation": ["Exclude any file anywhere in 'dir/' that match the pattern."]}, {"name": "setuptools.command.egg_info.FileList.graft", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dir", "type": null, "default": null}], "returns": null, "documentation": ["Include all files from 'dir/'."]}, {"name": "setuptools.command.egg_info.FileList.prune", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dir", "type": null, "default": null}], "returns": null, "documentation": ["Filter out files from 'dir/'."]}, {"name": "setuptools.command.egg_info.FileList.global_include", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pattern", "type": null, "default": null}], "returns": null, "documentation": ["Include all files anywhere in the current directory that match the\npattern. This is very inefficient on large file trees."]}, {"name": "setuptools.command.egg_info.FileList.global_exclude", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pattern", "type": null, "default": null}], "returns": null, "documentation": ["Exclude all files anywhere that match the pattern."]}, {"name": "setuptools.command.egg_info.FileList.append", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.egg_info.FileList.extend", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "paths", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.egg_info.FileList._repair", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Replace self.files with only safe paths\n\nBecause some owners of FileList manipulate the underlying\n`files` attribute directly, this method must be called to\nrepair those paths.\n"]}, {"name": "setuptools.command.egg_info.FileList._safe_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.command.egg_info.manifest_maker", "bases": ["sdist"], "methods": [{"name": "setuptools.command.egg_info.manifest_maker.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.egg_info.manifest_maker.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.egg_info.manifest_maker.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.egg_info.manifest_maker._manifest_normalize", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.egg_info.manifest_maker.write_manifest", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Write the file list in 'self.filelist' to the manifest file\nnamed by 'self.manifest'."]}, {"name": "setuptools.command.egg_info.manifest_maker.warn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.egg_info.manifest_maker._should_suppress_warning", "asynchronous": false, "params": [{"name": "msg", "type": null, "default": null}], "returns": null, "documentation": ["suppress missing-file warnings from sdist"]}, {"name": "setuptools.command.egg_info.manifest_maker.add_defaults", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.egg_info.manifest_maker.add_license_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.egg_info.manifest_maker._add_referenced_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Add files referenced by the config (e.g. `file:` directive) to filelist"]}, {"name": "setuptools.command.egg_info.manifest_maker._safe_data_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "build_py", "type": null, "default": null}], "returns": null, "documentation": ["The parent class implementation of this method\n(`sdist`) will try to include data files, which\nmight cause recursion problems when\n`include_package_data=True`.\n\nTherefore, avoid triggering any attempt of\nanalyzing/building the manifest again.\n"]}], "class_variables": [{"name": "setuptools.command.egg_info.manifest_maker.template", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.command.egg_info.EggInfoDeprecationWarning", "bases": ["SetuptoolsDeprecationWarning"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Deprecated behavior warning for EggInfo, bypassing suppression."]}], "exports": []}, {"name": "setuptools.command.saveopts", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools.command.saveopts.saveopts", "bases": ["option_base"], "methods": [{"name": "setuptools.command.saveopts.saveopts.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.command.saveopts.saveopts.description", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Save command-line options to a file"]}], "exports": []}, {"name": "setuptools.command._requirestxt", "documentation": ["Helper code used to generate `requires.txt` files in the egg-info directory.\n\nThe `requires.txt` file has an specific format:\n: - Environment markers need to be part of the section headers and\n    should not be part of the requirement spec itself.\n\nSee <https://setuptools.pypa.io/en/latest/deprecated/python_eggs.html#requires-txt>\n"], "functions": [{"name": "setuptools.command._requirestxt._prepare", "asynchronous": false, "params": [{"name": "install_requires", "type": {"name": "_StrOrIter", "xref": {"fqname": "setuptools.command._reqs._StrOrIter", "project": null}, "params": null}, "default": null}, {"name": "extras_require", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "_StrOrIter", "xref": {"fqname": "setuptools.command._reqs._StrOrIter", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "documentation": ["Given values for `install_requires` and `extras_require`\ncreate modified versions in a way that can be written in `requires.txt`\n"]}, {"name": "setuptools.command._requirestxt._convert_extras_requirements", "asynchronous": false, "params": [{"name": "extras_require", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "_StrOrIter", "xref": {"fqname": "setuptools.command._reqs._StrOrIter", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "defaultdict", "xref": {"fqname": "collections.defaultdict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "_Ordered", "xref": {"fqname": "_Ordered", "project": null}, "params": [{"name": "Requirement", "xref": {"fqname": "packaging.requirements.Requirement", "project": null}, "params": null}]}]}, "documentation": ["Convert requirements in `extras_require` of the form\n`\"extra\": [\"barbazquux; {marker}\"]` to\n`\"extra:{marker}\": [\"barbazquux\"]`."]}, {"name": "setuptools.command._requirestxt._move_install_requirements_markers", "asynchronous": false, "params": [{"name": "install_requires", "type": {"name": "_StrOrIter", "xref": {"fqname": "setuptools.command._reqs._StrOrIter", "project": null}, "params": null}, "default": null}, {"name": "extras_require", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "_Ordered", "xref": {"fqname": "_Ordered", "project": null}, "params": [{"name": "Requirement", "xref": {"fqname": "packaging.requirements.Requirement", "project": null}, "params": null}]}]}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "documentation": ["The `requires.txt` file has an specific format:\n: - Environment markers need to be part of the section headers and\n    should not be part of the requirement spec itself.\n\nMove requirements in `install_requires` that are using environment\nmarkers `extras_require`.\n"]}, {"name": "setuptools.command._requirestxt._suffix_for", "asynchronous": false, "params": [{"name": "req", "type": null, "default": null}], "returns": null, "documentation": ["Return the 'extras_require' suffix for a given requirement."]}, {"name": "setuptools.command._requirestxt._clean_req", "asynchronous": false, "params": [{"name": "req", "type": null, "default": null}], "returns": null, "documentation": ["Given a Requirement, remove environment markers and return it"]}, {"name": "setuptools.command._requirestxt._no_marker", "asynchronous": false, "params": [{"name": "req", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command._requirestxt._write_requirements", "asynchronous": false, "params": [{"name": "stream", "type": null, "default": null}, {"name": "reqs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command._requirestxt.write_requirements", "asynchronous": false, "params": [{"name": "cmd", "type": null, "default": null}, {"name": "basename", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command._requirestxt.write_setup_requirements", "asynchronous": false, "params": [{"name": "cmd", "type": null, "default": null}, {"name": "basename", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.command._requirestxt._T", "type": null, "documentation": []}, {"name": "setuptools.command._requirestxt._Ordered", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.command.install_scripts", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools.command.install_scripts.install_scripts", "bases": ["orig.install_scripts"], "methods": [{"name": "setuptools.command.install_scripts.install_scripts.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.install_scripts.install_scripts.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.install_scripts.install_scripts._install_ep_scripts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.install_scripts.install_scripts.write_script", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "script_name", "type": null, "default": null}, {"name": "contents", "type": null, "default": null}, {"name": "mode", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "*ignored", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Write an executable file to the scripts directory"]}], "class_variables": [{"name": "setuptools.command.install_scripts.install_scripts.distribution", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.command.dist.Distribution", "project": null}, "params": null}, "documentation": ["override distutils.dist.Distribution with setuptools.dist.Distribution"]}], "instance_variables": [], "inner_classes": [], "documentation": ["Do normal script install, plus any egg_info wrapper scripts"]}], "exports": []}, {"name": "setuptools.command.install", "documentation": [], "functions": [{"name": "setuptools.command.install.__getattr__", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.command.install.easy_install_cls", "type": null, "documentation": []}, {"name": "setuptools.command.install.install.sub_commands", "type": null, "documentation": []}], "classes": [{"name": "setuptools.command.install.install", "bases": ["orig.install"], "methods": [{"name": "setuptools.command.install.install.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.install.install.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.install.install.handle_extra_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.install.install.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.install.install._called_from_setup", "asynchronous": false, "params": [{"name": "run_frame", "type": null, "default": null}], "returns": null, "documentation": ["Attempt to detect whether run() was called from setup() or by another\ncommand.  If called by setup(), the parent caller will be the\n'run_command' method in 'distutils.dist', and *its* caller will be\nthe 'run_commands' method.  If called any other way, the\nimmediate caller *might* be 'run_command', but it won't have been\ncalled by 'run_commands'. Return True in that case or if a call stack\nis unavailable. Return False otherwise."]}, {"name": "setuptools.command.install.install.do_egg_install", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.command.install.install.distribution", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.command.dist.Distribution", "project": null}, "params": null}, "documentation": ["override distutils.dist.Distribution with setuptools.dist.Distribution"]}, {"name": "setuptools.command.install.install.user_options", "type": null, "documentation": []}, {"name": "setuptools.command.install.install.boolean_options", "type": null, "documentation": []}, {"name": "setuptools.command.install.install.new_commands", "type": {"name": "ClassVar", "xref": {"fqname": "typing.ClassVar", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Callable[[Any], bool] | None", "xref": null, "params": null}]}]}]}, "documentation": []}, {"name": "setuptools.command.install.install._nc", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Use easy_install to install the package, w/dependencies"]}], "exports": []}, {"name": "setuptools.command.setopt", "documentation": [], "functions": [{"name": "setuptools.command.setopt.config_file", "asynchronous": false, "params": [{"name": "kind", "type": null, "default": "..."}], "returns": null, "documentation": ["Get the filename of the distutils, local, global, or per-user config\n\n`kind` must be one of \"local\", \"global\", or \"user\""]}, {"name": "setuptools.command.setopt.edit_config", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}, {"name": "settings", "type": null, "default": null}, {"name": "dry_run", "type": null, "default": "..."}], "returns": null, "documentation": ["Edit a configuration file to include `settings`\n\n`settings` is a dictionary of dictionaries or `None` values, keyed by\ncommand/section name. A `None` value means to delete the entire section,\nwhile a dictionary lists settings to be changed or deleted in that section.\nA setting of `None` means to delete that setting.\n"]}], "variables": [], "classes": [{"name": "setuptools.command.setopt.option_base", "bases": ["Command"], "methods": [{"name": "setuptools.command.setopt.option_base.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.setopt.option_base.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.command.setopt.option_base.user_options", "type": null, "documentation": []}, {"name": "setuptools.command.setopt.option_base.boolean_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Abstract base class for commands that mess with config files"]}, {"name": "setuptools.command.setopt.setopt", "bases": ["option_base"], "methods": [{"name": "setuptools.command.setopt.setopt.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.setopt.setopt.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.setopt.setopt.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.command.setopt.setopt.description", "type": null, "documentation": []}, {"name": "setuptools.command.setopt.setopt.user_options", "type": null, "documentation": []}, {"name": "setuptools.command.setopt.setopt.boolean_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Save command-line options to a file"]}], "exports": [{"name": "setuptools.command.setopt.config_file", "xref": {"fqname": "setuptools.command.setopt.config_file", "project": null}}, {"name": "setuptools.command.setopt.edit_config", "xref": {"fqname": "setuptools.command.setopt.edit_config", "project": null}}, {"name": "setuptools.command.setopt.option_base", "xref": {"fqname": "setuptools.command.setopt.option_base", "project": null}}, {"name": "setuptools.command.setopt.setopt", "xref": {"fqname": "setuptools.command.setopt.setopt", "project": null}}]}, {"name": "setuptools.command.bdist_egg", "documentation": ["setuptools.command.bdist_egg\n\nBuild .egg distributions"], "functions": [{"name": "setuptools.command.bdist_egg._get_purelib", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.command.bdist_egg.strip_module", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.bdist_egg.sorted_walk", "asynchronous": false, "params": [{"name": "dir", "type": null, "default": null}], "returns": null, "documentation": ["Do os.walk in a reproducible way,\nindependent of indeterministic filesystem readdir order"]}, {"name": "setuptools.command.bdist_egg.write_stub", "asynchronous": false, "params": [{"name": "resource", "type": null, "default": null}, {"name": "pyfile", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.bdist_egg.walk_egg", "asynchronous": false, "params": [{"name": "egg_dir", "type": null, "default": null}], "returns": null, "documentation": ["Walk an unpacked egg's contents, skipping the metadata directory"]}, {"name": "setuptools.command.bdist_egg.analyze_egg", "asynchronous": false, "params": [{"name": "egg_dir", "type": null, "default": null}, {"name": "stubs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.bdist_egg.write_safety_flag", "asynchronous": false, "params": [{"name": "egg_dir", "type": null, "default": null}, {"name": "safe", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.bdist_egg.scan_module", "asynchronous": false, "params": [{"name": "egg_dir", "type": null, "default": null}, {"name": "base", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "stubs", "type": null, "default": null}], "returns": null, "documentation": ["Check whether module possibly uses unsafe-for-zipfile stuff"]}, {"name": "setuptools.command.bdist_egg.iter_symbols", "asynchronous": false, "params": [{"name": "code", "type": null, "default": null}], "returns": null, "documentation": ["Yield names and strings used by `code` and its nested code objects"]}, {"name": "setuptools.command.bdist_egg.can_scan", "asynchronous": false, "params": [], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.bdist_egg.make_zipfile", "asynchronous": false, "params": [{"name": "zip_filename", "type": {"name": "StrPathT", "xref": {"fqname": "setuptools.command._path.StrPathT", "project": null}, "params": null}, "default": null}, {"name": "base_dir", "type": null, "default": null}, {"name": "verbose", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "dry_run", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "compress", "type": null, "default": "..."}, {"name": "mode", "type": {"name": "_ZipFileMode", "xref": {"fqname": "_ZipFileMode", "project": null}, "params": null}, "default": "..."}], "returns": {"name": "StrPathT", "xref": {"fqname": "setuptools.command._path.StrPathT", "project": null}, "params": null}, "documentation": ["Create a zip file from all the files under 'base_dir'.  The output\nzip file will be named 'base_dir' + \".zip\".  Uses either the \"zipfile\"\nPython module (if available) or the InfoZIP \"zip\" utility (if installed\nand found on the default search path).  If neither tool is available,\nraises DistutilsExecError.  Returns the name of the output zip file."]}], "variables": [{"name": "setuptools.command.bdist_egg._ZipFileMode", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.command.bdist_egg.NATIVE_EXTENSIONS", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.command.bdist_egg.safety_flags", "type": null, "documentation": []}, {"name": "setuptools.command.bdist_egg.INSTALL_DIRECTORY_ATTRS", "type": null, "documentation": []}], "classes": [{"name": "setuptools.command.bdist_egg.bdist_egg", "bases": ["Command"], "methods": [{"name": "setuptools.command.bdist_egg.bdist_egg.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.bdist_egg.bdist_egg.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.bdist_egg.bdist_egg.do_install_data", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.bdist_egg.bdist_egg.get_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.bdist_egg.bdist_egg.call_command", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "cmdname", "type": null, "default": null}, {"name": "**kw", "type": null, "default": null}], "returns": null, "documentation": ["Invoke reinitialized command `cmdname` with keyword args"]}, {"name": "setuptools.command.bdist_egg.bdist_egg.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.bdist_egg.bdist_egg.zap_pyfiles", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.bdist_egg.bdist_egg.zip_safe", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.bdist_egg.bdist_egg.gen_header", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Literal", "xref": {"fqname": "typing.Literal", "project": "--std--"}, "params": [{"name": "\"w\"", "xref": null, "params": null}]}, "documentation": []}, {"name": "setuptools.command.bdist_egg.bdist_egg.copy_metadata_to", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "target_dir", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.bdist_egg.bdist_egg.get_ext_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Get a list of relative paths to C extensions in the output distro"]}], "class_variables": [{"name": "setuptools.command.bdist_egg.bdist_egg.description", "type": null, "documentation": []}, {"name": "setuptools.command.bdist_egg.bdist_egg.user_options", "type": null, "documentation": []}, {"name": "setuptools.command.bdist_egg.bdist_egg.boolean_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.command.dist_info", "documentation": ["Create a dist_info directory\nAs defined in the wheel specification"], "functions": [], "variables": [], "classes": [{"name": "setuptools.command.dist_info.dist_info", "bases": ["Command"], "methods": [{"name": "setuptools.command.dist_info.dist_info.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.dist_info.dist_info.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.dist_info.dist_info._maybe_bkp_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dir_path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "requires_bkp", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.dist_info.dist_info.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.command.dist_info.dist_info.description", "type": null, "documentation": []}, {"name": "setuptools.command.dist_info.dist_info.user_options", "type": null, "documentation": []}, {"name": "setuptools.command.dist_info.dist_info.boolean_options", "type": null, "documentation": []}, {"name": "setuptools.command.dist_info.dist_info.negative_opt", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["This command is private and reserved for internal use of setuptools,\nusers should rely on `setuptools.build_meta` APIs.\n"]}], "exports": []}, {"name": "setuptools.command", "documentation": ["mypy: disable_error_code=call-overload", "pyright: reportCallIssue=false, reportArgumentType=false", "Can't disable on the exact line because distutils doesn't exists on Python 3.12", "and type-checkers aren't aware of distutils_hack,", "causing distutils.command.bdist.bdist.format_commands to be Any."], "functions": [], "variables": [], "classes": [], "exports": [{"name": "setuptools.command.bdist", "xref": {"fqname": "distutils.command.bdist.bdist", "project": null}}]}, {"name": "setuptools.command.bdist_wheel", "documentation": ["Create a wheel (.whl) distribution.\n\nA wheel is a built archive format."], "functions": [{"name": "setuptools.command.bdist_wheel.safe_version", "asynchronous": false, "params": [{"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Convert an arbitrary string to a standard version string"]}, {"name": "setuptools.command.bdist_wheel._is_32bit_interpreter", "asynchronous": false, "params": [], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.bdist_wheel.python_tag", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.bdist_wheel.get_platform", "asynchronous": false, "params": [{"name": "archive_root", "type": {"name": "str | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return our platform name 'win32', 'linux_x86_64'"]}, {"name": "setuptools.command.bdist_wheel.get_flag", "asynchronous": false, "params": [{"name": "var", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "fallback", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}, {"name": "expected", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Use a fallback value for determining SOABI flags if the needed config\nvar is unset or unavailable."]}, {"name": "setuptools.command.bdist_wheel.get_abi_tag", "asynchronous": false, "params": [], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["Return the ABI tag based on SOABI (if available) or emulate SOABI (PyPy2)."]}, {"name": "setuptools.command.bdist_wheel.safer_version", "asynchronous": false, "params": [{"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "variables": [{"name": "setuptools.command.bdist_wheel.setuptools_major_version", "type": null, "documentation": []}, {"name": "setuptools.command.bdist_wheel.PY_LIMITED_API_PATTERN", "type": null, "documentation": []}], "classes": [{"name": "setuptools.command.bdist_wheel.bdist_wheel", "bases": ["Command"], "methods": [{"name": "setuptools.command.bdist_wheel.bdist_wheel.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.bdist_wheel.bdist_wheel.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.bdist_wheel.bdist_wheel._validate_py_limited_api", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.bdist_wheel.bdist_wheel.wheel_dist_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return distribution full name with - replaced with _"]}, {"name": "setuptools.command.bdist_wheel.bdist_wheel.get_tag", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.command.bdist_wheel.bdist_wheel.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.bdist_wheel.bdist_wheel.write_wheelfile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "wheelfile_base", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "generator", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.bdist_wheel.bdist_wheel._ensure_relative", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.bdist_wheel.bdist_wheel.license_paths", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.command.bdist_wheel.bdist_wheel.egg2dist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "egginfo_path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "distinfo_path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Convert an .egg-info directory into a .dist-info directory"]}, {"name": "setuptools.command.bdist_wheel.bdist_wheel._zip_compression", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.command.bdist_wheel.bdist_wheel.description", "type": null, "documentation": []}, {"name": "setuptools.command.bdist_wheel.bdist_wheel.supported_compressions", "type": null, "documentation": []}, {"name": "setuptools.command.bdist_wheel.bdist_wheel.user_options", "type": null, "documentation": []}, {"name": "setuptools.command.bdist_wheel.bdist_wheel.boolean_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.command.sdist", "documentation": [], "functions": [{"name": "setuptools.command.sdist.walk_revctrl", "asynchronous": false, "params": [{"name": "dirname", "type": null, "default": "..."}], "returns": null, "documentation": ["Find all files under revision control"]}], "variables": [{"name": "setuptools.command.sdist._default_revctrl", "type": null, "documentation": []}], "classes": [{"name": "setuptools.command.sdist.sdist", "bases": ["orig.sdist"], "methods": [{"name": "setuptools.command.sdist.sdist.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.sdist.sdist.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.sdist.sdist.make_distribution", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Workaround for #516"]}, {"name": "setuptools.command.sdist.sdist._remove_os_link", "asynchronous": false, "params": [], "returns": null, "documentation": ["In a context, remove and restore os.link if it exists"]}, {"name": "setuptools.command.sdist.sdist.add_defaults", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.sdist.sdist._add_defaults_optional", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.sdist.sdist._add_defaults_python", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["getting python files"]}, {"name": "setuptools.command.sdist.sdist._add_defaults_build_sub_commands", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.sdist.sdist._safe_data_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "build_py", "type": null, "default": null}], "returns": null, "documentation": ["Since the `sdist` class is also used to compute the MANIFEST\n(via {obj}`setuptools.command.egg_info.manifest_maker`),\nthere might be recursion problems when trying to obtain the list of\ndata_files and `include_package_data=True` (which in turn depends on\nthe files included in the MANIFEST).\n\nTo avoid that, `manifest_maker` should be able to overwrite this\nmethod and avoid recursive attempts to build/analyze the MANIFEST.\n"]}, {"name": "setuptools.command.sdist.sdist._add_data_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "data_files", "type": null, "default": null}], "returns": null, "documentation": ["Add data files as found in build_py.data_files."]}, {"name": "setuptools.command.sdist.sdist._add_defaults_data_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.sdist.sdist.prune_file_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.sdist.sdist.check_readme", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.sdist.sdist.make_release_tree", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "base_dir", "type": null, "default": null}, {"name": "files", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.sdist.sdist._manifest_is_not_generated", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.sdist.sdist.read_manifest", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Read the manifest file (named by 'self.manifest') and use it to\nfill in 'self.filelist', the list of files to include in the source\ndistribution."]}], "class_variables": [{"name": "setuptools.command.sdist.sdist.user_options", "type": null, "documentation": []}, {"name": "setuptools.command.sdist.sdist.distribution", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.command.dist.Distribution", "project": null}, "params": null}, "documentation": ["override distutils.dist.Distribution with setuptools.dist.Distribution"]}, {"name": "setuptools.command.sdist.sdist.negative_opt", "type": {"name": "ClassVar", "xref": {"fqname": "typing.ClassVar", "project": "--std--"}, "params": [{"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "setuptools.command.sdist.sdist.README_EXTENSIONS", "type": null, "documentation": []}, {"name": "setuptools.command.sdist.sdist.READMES", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Smart sdist that finds anything supported by revision control"]}], "exports": []}, {"name": "setuptools.command.install_lib", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools.command.install_lib.install_lib", "bases": ["orig.install_lib"], "methods": [{"name": "setuptools.command.install_lib.install_lib.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.install_lib.install_lib.get_exclusions", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return a collections.Sized collections.Container of paths to be\nexcluded for single_version_externally_managed installations."]}, {"name": "setuptools.command.install_lib.install_lib._exclude_pkg_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pkg", "type": null, "default": null}, {"name": "exclusion_path", "type": null, "default": null}], "returns": null, "documentation": ["Given a package name and exclusion path within that package,\ncompute the full exclusion path."]}, {"name": "setuptools.command.install_lib.install_lib._all_packages", "asynchronous": false, "params": [{"name": "pkg_name", "type": null, "default": null}], "returns": null, "documentation": ["```pycon\n>>> list(install_lib._all_packages('foo.bar.baz'))\n['foo.bar.baz', 'foo.bar', 'foo']\n```\n"]}, {"name": "setuptools.command.install_lib.install_lib._get_SVEM_NSPs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Get namespace packages (list) but only for\nsingle_version_externally_managed installations and empty otherwise."]}, {"name": "setuptools.command.install_lib.install_lib._gen_exclusion_paths", "asynchronous": false, "params": [], "returns": null, "documentation": ["Generate file paths to be excluded for namespace packages (bytecode\ncache files)."]}, {"name": "setuptools.command.install_lib.install_lib.copy_tree", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "infile", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.command._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "outfile", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "preserve_mode", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "preserve_times", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "preserve_symlinks", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "level", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.command.install_lib.install_lib.get_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.command.install_lib.install_lib.distribution", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.command.dist.Distribution", "project": null}, "params": null}, "documentation": ["override distutils.dist.Distribution with setuptools.dist.Distribution"]}], "instance_variables": [], "inner_classes": [], "documentation": ["Don't add compiled flags to filenames of non-Python files"]}], "exports": []}, {"name": "setuptools.command.develop", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools.command.develop.develop", "bases": ["namespaces.DevelopInstaller", "easy_install"], "methods": [{"name": "setuptools.command.develop.develop.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.develop.develop.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.develop.develop.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.develop.develop._resolve_setup_path", "asynchronous": false, "params": [{"name": "egg_base", "type": null, "default": null}, {"name": "install_dir", "type": null, "default": null}, {"name": "egg_path", "type": null, "default": null}], "returns": null, "documentation": ["Generate a path from egg_base back to '.' where the\nsetup script resides and ensure that path points to the\nsetup path from $install_dir/$egg_path."]}, {"name": "setuptools.command.develop.develop.install_for_development", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.develop.develop.uninstall_link", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.develop.develop.install_egg_scripts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.develop.develop.install_wrapper_scripts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.command.develop.develop.description", "type": null, "documentation": []}, {"name": "setuptools.command.develop.develop.user_options", "type": null, "documentation": []}, {"name": "setuptools.command.develop.develop.boolean_options", "type": null, "documentation": []}, {"name": "setuptools.command.develop.develop.command_consumes_arguments", "type": null, "documentation": ["override base"]}], "instance_variables": [], "inner_classes": [], "documentation": ["Set up package for development"]}, {"name": "setuptools.command.develop.VersionlessRequirement", "bases": [], "methods": [{"name": "setuptools.command.develop.VersionlessRequirement.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.develop.VersionlessRequirement.__getattr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.develop.VersionlessRequirement.as_requirement", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Adapt a pkg_resources.Distribution to simply return the project\nname as the 'requirement' so that scripts will work across\nmultiple versions.\n\n```pycon\n>>> from pkg_resources import Distribution\n>>> dist = Distribution(project_name='foo', version='1.0')\n>>> str(dist.as_requirement())\n'foo==1.0'\n>>> adapted_dist = VersionlessRequirement(dist)\n>>> str(adapted_dist.as_requirement())\n'foo'\n```\n"]}], "exports": []}, {"name": "setuptools.command.alias", "documentation": [], "functions": [{"name": "setuptools.command.alias.shquote", "asynchronous": false, "params": [{"name": "arg", "type": null, "default": null}], "returns": null, "documentation": ["Quote an argument for later parsing by shlex.split()"]}, {"name": "setuptools.command.alias.format_alias", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}, {"name": "aliases", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [{"name": "setuptools.command.alias.alias", "bases": ["option_base"], "methods": [{"name": "setuptools.command.alias.alias.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.alias.alias.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.alias.alias.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.command.alias.alias.description", "type": null, "documentation": []}, {"name": "setuptools.command.alias.alias.command_consumes_arguments", "type": null, "documentation": []}, {"name": "setuptools.command.alias.alias.user_options", "type": null, "documentation": []}, {"name": "setuptools.command.alias.alias.boolean_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Define a shortcut that invokes one or more commands"]}], "exports": []}, {"name": "setuptools.command.rotate", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools.command.rotate.rotate", "bases": ["Command"], "methods": [{"name": "setuptools.command.rotate.rotate.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.rotate.rotate.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.rotate.rotate.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.command.rotate.rotate.description", "type": null, "documentation": []}, {"name": "setuptools.command.rotate.rotate.user_options", "type": null, "documentation": []}, {"name": "setuptools.command.rotate.rotate.boolean_options", "type": {"name": "ClassVar", "xref": {"fqname": "typing.ClassVar", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Delete older distributions"]}], "exports": []}, {"name": "setuptools.command.bdist_rpm", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools.command.bdist_rpm.bdist_rpm", "bases": ["orig.bdist_rpm"], "methods": [{"name": "setuptools.command.bdist_rpm.bdist_rpm.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.bdist_rpm.bdist_rpm._make_spec_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.command.bdist_rpm.bdist_rpm.distribution", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.command.dist.Distribution", "project": null}, "params": null}, "documentation": ["override distutils.dist.Distribution with setuptools.dist.Distribution"]}], "instance_variables": [], "inner_classes": [], "documentation": ["Override the default bdist_rpm behavior to do the following:\n\n1. Run egg_info to ensure the name and version are properly calculated.\n2. Always run 'install' using --single-version-externally-managed to\n   disable eggs in RPM distributions."]}], "exports": []}, {"name": "setuptools.command.easy_install", "documentation": ["Easy Install\n------------\n\nA tool for doing automatic download/extract/build of distutils-based Python\npackages.  For detailed documentation, see the accompanying EasyInstall.txt\nfile, or visit the `EasyInstall home page`__.\n\n__ https://setuptools.pypa.io/en/latest/deprecated/easy_install.html"], "functions": [{"name": "setuptools.command.easy_install.is_64bit", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install._to_bytes", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.isascii", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install._one_liner", "asynchronous": false, "params": [{"name": "text", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install._pythonpath", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.get_site_dirs", "asynchronous": false, "params": [], "returns": null, "documentation": ["Return a list of 'site' dirs"]}, {"name": "setuptools.command.easy_install.expand_paths", "asynchronous": false, "params": [{"name": "inputs", "type": null, "default": null}], "returns": null, "documentation": ["Yield sys.path directories that might contain \"old-style\" packages"]}, {"name": "setuptools.command.easy_install.extract_wininst_cfg", "asynchronous": false, "params": [{"name": "dist_filename", "type": null, "default": null}], "returns": null, "documentation": ["Extract configuration data from a bdist_wininst .exe\n\nReturns a configparser.RawConfigParser, or None"]}, {"name": "setuptools.command.easy_install.get_exe_prefixes", "asynchronous": false, "params": [{"name": "exe_filename", "type": null, "default": null}], "returns": null, "documentation": ["Get exe->egg path translations for a given .exe file"]}, {"name": "setuptools.command.easy_install._first_line_re", "asynchronous": false, "params": [], "returns": null, "documentation": ["Return a regular expression based on first_line_re suitable for matching\nstrings."]}, {"name": "setuptools.command.easy_install.update_dist_caches", "asynchronous": false, "params": [{"name": "dist_path", "type": null, "default": null}, {"name": "fix_zipimporter_caches", "type": null, "default": null}], "returns": null, "documentation": ["Fix any globally cached `dist_path` related data\n\n`dist_path` should be a path of a newly installed egg distribution (zipped\nor unzipped).\n\nsys.path_importer_cache contains finder objects that have been cached when\nimporting data from the original distribution. Any such finders need to be\ncleared since the replacement distribution might be packaged differently,\ne.g. a zipped egg distribution might get replaced with an unzipped egg\nfolder or vice versa. Having the old finders cached may then cause Python\nto attempt loading modules from the replacement distribution using an\nincorrect loader.\n\nzipimport.zipimporter objects are Python loaders charged with importing\ndata packaged inside zip archives. If stale loaders referencing the\noriginal distribution, are left behind, they can fail to load modules from\nthe replacement distribution. E.g. if an old zipimport.zipimporter instance\nis used to load data from a new zipped egg archive, it may cause the\noperation to attempt to locate the requested data in the wrong location -\none indicated by the original distribution's zip archive directory\ninformation. Such an operation may then fail outright, e.g. report having\nread a 'bad local file header', or even worse, it may fail silently &\nreturn invalid data.\n\nzipimport._zip_directory_cache contains cached zip archive directory\ninformation for all existing zipimport.zipimporter instances and all such\ninstances connected to the same archive share the same cached directory\ninformation.\n\nIf asked, and the underlying Python implementation allows it, we can fix\nall existing zipimport.zipimporter instances instead of having to track\nthem down and remove them one by one, by updating their shared cached zip\narchive directory information. This, of course, assumes that the\nreplacement distribution is packaged as a zipped egg.\n\nIf not asked to fix existing zipimport.zipimporter instances, we still do\nour best to clear any remaining zipimport.zipimporter related cached data\nthat might somehow later get used when attempting to load data from the new\ndistribution and thus cause such load operations to fail. Note that when\ntracking down such remaining stale data, we can not catch every conceivable\nusage from here, and we clear only those that we know of and have found to\ncause problems if left alive. Any remaining caches should be updated by\nwhomever is in charge of maintaining them, i.e. they should be ready to\nhandle us replacing their zip archives with new distributions at runtime."]}, {"name": "setuptools.command.easy_install._collect_zipimporter_cache_entries", "asynchronous": false, "params": [{"name": "normalized_path", "type": null, "default": null}, {"name": "cache", "type": null, "default": null}], "returns": null, "documentation": ["Return zipimporter cache entry keys related to a given normalized path.\n\nAlternative path spellings (e.g. those using different character case or\nthose using alternative path separators) related to the same path are\nincluded. Any sub-path entries are included as well, i.e. those\ncorresponding to zip archives embedded in other zip archives."]}, {"name": "setuptools.command.easy_install._update_zipimporter_cache", "asynchronous": false, "params": [{"name": "normalized_path", "type": null, "default": null}, {"name": "cache", "type": null, "default": null}, {"name": "updater", "type": null, "default": "..."}], "returns": null, "documentation": ["Update zipimporter cache data for a given normalized path.\n\nAny sub-path entries are processed as well, i.e. those corresponding to zip\narchives embedded in other zip archives.\n\nGiven updater is a callable taking a cache entry key and the original entry\n(after already removing the entry from the cache), and expected to update\nthe entry and possibly return a new one to be inserted in its place.\nReturning None indicates that the entry should not be replaced with a new\none. If no updater is given, the cache entries are simply removed without\nany additional processing, the same as if the updater simply returned None."]}, {"name": "setuptools.command.easy_install._uncache", "asynchronous": false, "params": [{"name": "normalized_path", "type": null, "default": null}, {"name": "cache", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install._remove_and_clear_zip_directory_cache_data", "asynchronous": false, "params": [{"name": "normalized_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install._replace_zip_directory_cache_data", "asynchronous": false, "params": [{"name": "normalized_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.is_python", "asynchronous": false, "params": [{"name": "text", "type": null, "default": null}, {"name": "filename", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.is_sh", "asynchronous": false, "params": [{"name": "executable", "type": null, "default": null}], "returns": null, "documentation": ["Determine if the specified executable is a .sh (contains a #! line)"]}, {"name": "setuptools.command.easy_install.nt_quote_arg", "asynchronous": false, "params": [{"name": "arg", "type": null, "default": null}], "returns": null, "documentation": ["Quote a command line argument according to Windows parsing rules"]}, {"name": "setuptools.command.easy_install.is_python_script", "asynchronous": false, "params": [{"name": "script_text", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": null, "documentation": ["Is this text, as a whole, a Python script? (as opposed to shell/bat/etc."]}, {"name": "setuptools.command.easy_install.get_win_launcher", "asynchronous": false, "params": [{"name": "type", "type": null, "default": null}], "returns": null, "documentation": ["Load the Windows launcher (executable) suitable for launching a script.\n\n`type` should be either 'cli' or 'gui'\n\nReturns the executable as a byte string."]}, {"name": "setuptools.command.easy_install.load_launcher_manifest", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.current_umask", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.only_strs", "asynchronous": false, "params": [{"name": "values", "type": null, "default": null}], "returns": null, "documentation": ["Exclude non-str values. Ref #3063."]}, {"name": "setuptools.command.easy_install._read_pth", "asynchronous": false, "params": [{"name": "fullname", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "variables": [{"name": "setuptools.command.easy_install.PthDistributions", "type": null, "documentation": ["type: ignore[misc]  # Overwriting type"]}, {"name": "setuptools.command.easy_install._replace_zip_directory_cache_data", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.sys_executable", "type": null, "documentation": []}], "classes": [{"name": "setuptools.command.easy_install.easy_install", "bases": ["Command"], "methods": [{"name": "setuptools.command.easy_install.easy_install.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.delete_blockers", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "blockers", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install._delete_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install._render_version", "asynchronous": false, "params": [], "returns": null, "documentation": ["Render the Setuptools version and installation details, then exit."]}, {"name": "setuptools.command.easy_install.easy_install.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install._process_site_dirs", "asynchronous": false, "params": [{"name": "site_dirs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install._validate_optimize", "asynchronous": false, "params": [{"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install._fix_install_dir_for_user_site", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Fix the install_dir if \"--user\" was used."]}, {"name": "setuptools.command.easy_install.easy_install._expand_attrs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "attrs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.expand_basedirs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Calls `os.path.expanduser` on install_base, install_platbase and\nroot."]}, {"name": "setuptools.command.easy_install.easy_install.expand_dirs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Calls `os.path.expanduser` on install dirs."]}, {"name": "setuptools.command.easy_install.easy_install.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "show_deprecation", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.pseudo_tempname", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return a pseudo-tempname base in the install directory.\nThis code is intentionally naive; if a malicious party can write to\nthe target directory you're already in deep doodoo."]}, {"name": "setuptools.command.easy_install.easy_install.warn_deprecated_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.check_site_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Verify that self.install_dir is .pth-capable dir, if needed"]}, {"name": "setuptools.command.easy_install.easy_install.cant_write_to_target", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "NoReturn", "xref": {"fqname": "typing.NoReturn", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.check_pth_processing", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Empirically verify whether .pth files are supported in inst. dir"]}, {"name": "setuptools.command.easy_install.easy_install.install_egg_scripts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Write all the scripts for `dist`, unless scripts are excluded"]}, {"name": "setuptools.command.easy_install.easy_install.add_output", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.not_editable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "spec", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.check_editable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "spec", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install._tmpdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.easy_install", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "spec", "type": null, "default": null}, {"name": "deps", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Distribution | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.install_item", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "spec", "type": null, "default": null}, {"name": "download", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}, {"name": "deps", "type": null, "default": null}, {"name": "install_needed", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Distribution | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.select_scheme", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.process_distribution", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requirement", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}, {"name": "deps", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "*info", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["FIXME: 'easy_install.process_distribution' is too complex (12)"]}, {"name": "setuptools.command.easy_install.easy_install.should_unzip", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.maybe_move", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "spec", "type": null, "default": null}, {"name": "dist_filename", "type": null, "default": null}, {"name": "setup_base", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.install_wrapper_scripts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.install_script", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}, {"name": "script_name", "type": null, "default": null}, {"name": "script_text", "type": null, "default": null}, {"name": "dev_path", "type": null, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Generate a legacy script wrapper and install it"]}, {"name": "setuptools.command.easy_install.easy_install._load_template", "asynchronous": false, "params": [{"name": "dev_path", "type": null, "default": null}], "returns": null, "documentation": ["There are a couple of template scripts in the package. This\nfunction loads one of them and prepares it for use."]}, {"name": "setuptools.command.easy_install.easy_install.write_script", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "script_name", "type": null, "default": null}, {"name": "contents", "type": null, "default": null}, {"name": "mode", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "blockers", "type": null, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Write an executable file to the scripts directory"]}, {"name": "setuptools.command.easy_install.easy_install.install_eggs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "spec", "type": null, "default": null}, {"name": "dist_filename", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "Distribution", "xref": {"fqname": "pkg_resources.Distribution", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.egg_distribution", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "egg_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.install_egg", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "egg_path", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["FIXME: 'easy_install.install_egg' is too complex (11)"]}, {"name": "setuptools.command.easy_install.easy_install.install_exe", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist_filename", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.exe_to_egg", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist_filename", "type": null, "default": null}, {"name": "egg_tmp", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Extract a bdist_wininst to the directories an egg would use", "FIXME: 'easy_install.exe_to_egg' is too complex (12)"]}, {"name": "setuptools.command.easy_install.easy_install.install_wheel", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "wheel_path", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.installation_report", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "req", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}, {"name": "what", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Helpful installation message for display to package users"]}, {"name": "setuptools.command.easy_install.easy_install.report_editable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "spec", "type": null, "default": null}, {"name": "setup_script", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.run_setup", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "setup_script", "type": null, "default": null}, {"name": "setup_base", "type": null, "default": null}, {"name": "args", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.build_and_install", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "setup_script", "type": null, "default": null}, {"name": "setup_base", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install._set_fetcher_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "base", "type": null, "default": null}], "returns": null, "documentation": ["When easy_install is about to run bdist_egg on a source dist, that\nsource dist might have 'setup_requires' directives, requiring\nadditional fetching. Ensure the fetcher options given to easy_install\nare available to that command as well."]}, {"name": "setuptools.command.easy_install.easy_install.update_pth", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.unpack_progress", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "src", "type": null, "default": null}, {"name": "dst", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.unpack_and_compile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "egg_path", "type": null, "default": null}, {"name": "destination", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.byte_compile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "to_compile", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.create_home_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Create directories under ~."]}, {"name": "setuptools.command.easy_install.easy_install._expand", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*attrs", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.command.easy_install.easy_install.description", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.command_consumes_arguments", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.user_options", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.boolean_options", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.negative_opt", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.create_index", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.__cant_write_msg", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.__not_exists_id", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.__access_msg", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.__mv_warning", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.__id_warning", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.__editable_msg", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.__no_default_msg", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.INSTALL_SCHEMES", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.easy_install.DEFAULT_SCHEME", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Manage a download/build/install process"]}, {"name": "setuptools.command.easy_install.PthDistributions", "bases": ["Environment"], "methods": [{"name": "setuptools.command.easy_install.PthDistributions.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}, {"name": "sitedirs", "type": null, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.easy_install.PthDistributions._load_raw", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.PthDistributions._load", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.PthDistributions.save", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Write changed .pth file back to disk"]}, {"name": "setuptools.command.easy_install.PthDistributions._wrap_lines", "asynchronous": false, "params": [{"name": "lines", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.PthDistributions.add", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Add `dist` to the distribution map"]}, {"name": "setuptools.command.easy_install.PthDistributions.remove", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Remove `dist` from the distribution map"]}, {"name": "setuptools.command.easy_install.PthDistributions.make_relative", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A .pth file with Distribution paths in it"]}, {"name": "setuptools.command.easy_install.RewritePthDistributions", "bases": ["PthDistributions"], "methods": [{"name": "setuptools.command.easy_install.RewritePthDistributions._wrap_lines", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "lines", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.command.easy_install.RewritePthDistributions.prelude", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.RewritePthDistributions.postlude", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.command.easy_install._SplitArgs", "bases": ["TypedDict"], "methods": [], "class_variables": [{"name": "setuptools.command.easy_install._SplitArgs.comments", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.easy_install._SplitArgs.posix", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.command.easy_install.CommandSpec", "bases": ["list"], "methods": [{"name": "setuptools.command.easy_install.CommandSpec.best", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": null, "documentation": ["Choose the best CommandSpec class based on environmental conditions."]}, {"name": "setuptools.command.easy_install.CommandSpec._sys_executable", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.CommandSpec.from_param", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "param", "type": {"name": "Self | str | Iterable[str] | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "Self", "xref": {"fqname": "typing_extensions.Self", "project": null}, "params": null}, "documentation": ["Construct a CommandSpec from a parameter to build_scripts, which may\nbe None."]}, {"name": "setuptools.command.easy_install.CommandSpec.from_environment", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.CommandSpec.from_string", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "string", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Self", "xref": {"fqname": "typing_extensions.Self", "project": null}, "params": null}, "documentation": ["Construct a command spec from a simple string representing a command\nline parseable by shlex.split."]}, {"name": "setuptools.command.easy_install.CommandSpec.install_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "script_text", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.CommandSpec._extract_options", "asynchronous": false, "params": [{"name": "orig_script", "type": null, "default": null}], "returns": null, "documentation": ["Extract any options from the first line of the script."]}, {"name": "setuptools.command.easy_install.CommandSpec.as_header", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.CommandSpec._strip_quotes", "asynchronous": false, "params": [{"name": "item", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.CommandSpec._render", "asynchronous": false, "params": [{"name": "items", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.command.easy_install.CommandSpec.options", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.command.easy_install.CommandSpec.split_args", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A command spec for a #! header, specified as a list of arguments akin to\nthose passed to Popen."]}, {"name": "setuptools.command.easy_install.WindowsCommandSpec", "bases": ["CommandSpec"], "methods": [], "class_variables": [{"name": "setuptools.command.easy_install.WindowsCommandSpec.split_args", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.command.easy_install.ScriptWriter", "bases": [], "methods": [{"name": "setuptools.command.easy_install.ScriptWriter.get_args", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}, {"name": "header", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield write_script() argument tuples for a distribution's\nconsole_scripts and gui_scripts entry points."]}, {"name": "setuptools.command.easy_install.ScriptWriter._ensure_safe_name", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Prevent paths in *_scripts entry point names."]}, {"name": "setuptools.command.easy_install.ScriptWriter.best", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": null, "documentation": ["Select the best ScriptWriter for this environment."]}, {"name": "setuptools.command.easy_install.ScriptWriter._get_script_args", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "type_", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "header", "type": null, "default": null}, {"name": "script_text", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.ScriptWriter.get_header", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "script_text", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "executable", "type": {"name": "str | CommandSpec | Iterable[str] | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Create a #! line, getting options (if any) from script_text"]}], "class_variables": [{"name": "setuptools.command.easy_install.ScriptWriter.template", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.ScriptWriter.command_spec_class", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Encapsulates behavior around writing entry point scripts for console and\ngui apps."]}, {"name": "setuptools.command.easy_install.WindowsScriptWriter", "bases": ["ScriptWriter"], "methods": [{"name": "setuptools.command.easy_install.WindowsScriptWriter.best", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": null, "documentation": ["Select the best ScriptWriter suitable for Windows"]}, {"name": "setuptools.command.easy_install.WindowsScriptWriter._get_script_args", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "type_", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "header", "type": null, "default": null}, {"name": "script_text", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.easy_install.WindowsScriptWriter._adjust_header", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "type_", "type": null, "default": null}, {"name": "orig_header", "type": null, "default": null}], "returns": null, "documentation": ["Make sure 'pythonw' is used for gui and 'python' is used for\nconsole (regardless of what sys.executable is)."]}, {"name": "setuptools.command.easy_install.WindowsScriptWriter._use_header", "asynchronous": false, "params": [{"name": "new_header", "type": null, "default": null}], "returns": null, "documentation": ["Should _adjust_header use the replaced header?\n\nOn non-windows systems, always use. On\nWindows systems, only use the replaced header if it resolves\nto an executable on the system."]}], "class_variables": [{"name": "setuptools.command.easy_install.WindowsScriptWriter.command_spec_class", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.command.easy_install.WindowsExecutableLauncherWriter", "bases": ["WindowsScriptWriter"], "methods": [{"name": "setuptools.command.easy_install.WindowsExecutableLauncherWriter._get_script_args", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "type_", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "header", "type": null, "default": null}, {"name": "script_text", "type": null, "default": null}], "returns": null, "documentation": ["For Windows, add a .py extension and an .exe launcher"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.command.easy_install.EasyInstallDeprecationWarning", "bases": ["SetuptoolsDeprecationWarning"], "methods": [], "class_variables": [{"name": "setuptools.command.easy_install.EasyInstallDeprecationWarning._SUMMARY", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.EasyInstallDeprecationWarning._DETAILS", "type": null, "documentation": []}, {"name": "setuptools.command.easy_install.EasyInstallDeprecationWarning._SEE_URL", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": [{"name": "setuptools.command.easy_install.easy_install", "xref": {"fqname": "setuptools.command.easy_install.easy_install", "project": null}}, {"name": "setuptools.command.easy_install.extract_wininst_cfg", "xref": {"fqname": "setuptools.command.easy_install.extract_wininst_cfg", "project": null}}, {"name": "setuptools.command.easy_install.get_exe_prefixes", "xref": {"fqname": "setuptools.command.easy_install.get_exe_prefixes", "project": null}}, {"name": "setuptools.command.easy_install.PthDistributions", "xref": {"fqname": "setuptools.command.easy_install.PthDistributions", "project": null}}]}, {"name": "setuptools.command.editable_wheel", "documentation": ["Create a wheel that, when installed, will make the source package 'editable'\n(add it to the interpreter's path, including metadata) per PEP 660. Replaces\n'setup.py develop'.\n\n:::{note}\nOne of the mechanisms briefly mentioned in PEP 660 to implement editable installs is\nto create a separated directory inside `build` and use a .pth file to point to that\ndirectory. In the context of this file such directory is referred as\n*auxiliary build directory* or `auxiliary_dir`.\n:::\n"], "functions": [{"name": "setuptools.command.editable_wheel._encode_pth", "asynchronous": false, "params": [{"name": "content", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, "documentation": ["Prior to Python 3.13 (see <https://github.com/python/cpython/issues/77102>),\n.pth files are always read with 'locale' encoding, the recommendation\nfrom the cpython core developers is to write them as `open(path, \"w\")`\nand ignore warnings (see python/cpython#77102, pypa/setuptools#3937).\nThis function tries to simulate this behaviour without having to create an\nactual file, in a way that supports a range of active Python versions.\n(There seems to be some variety in the way different version of Python handle\n`encoding=None`, not all of them use `locale.getpreferredencoding(False)`\nor `locale.getencoding()`).\n"]}, {"name": "setuptools.command.editable_wheel._can_symlink_files", "asynchronous": false, "params": [{"name": "base_dir", "type": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.editable_wheel._simple_layout", "asynchronous": false, "params": [{"name": "packages", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "package_dir", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "project_dir", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.command._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Return `True` if:\n\\- all packages are contained by the same parent directory, **and**\n\\- all packages become importable if the parent directory is added to `sys.path`.\n\n```pycon\n>>> _simple_layout(['a'], {\"\": \"src\"}, \"/tmp/myproj\")\nTrue\n>>> _simple_layout(['a', 'a.b'], {\"\": \"src\"}, \"/tmp/myproj\")\nTrue\n>>> _simple_layout(['a', 'a.b'], {}, \"/tmp/myproj\")\nTrue\n>>> _simple_layout(['a', 'a.a1', 'a.a1.a2', 'b'], {\"\": \"src\"}, \"/tmp/myproj\")\nTrue\n>>> _simple_layout(['a', 'a.a1', 'a.a1.a2', 'b'], {\"a\": \"a\", \"b\": \"b\"}, \".\")\nTrue\n>>> _simple_layout(['a', 'a.a1', 'a.a1.a2', 'b'], {\"a\": \"_a\", \"b\": \"_b\"}, \".\")\nFalse\n>>> _simple_layout(['a', 'a.a1', 'a.a1.a2', 'b'], {\"a\": \"_a\"}, \"/tmp/myproj\")\nFalse\n>>> _simple_layout(['a', 'a.a1', 'a.a1.a2', 'b'], {\"a.a1.a2\": \"_a2\"}, \".\")\nFalse\n>>> _simple_layout(['a', 'a.b'], {\"\": \"src\", \"a.b\": \"_ab\"}, \"/tmp/myproj\")\nFalse\n>>> # Special cases, no packages yet:\n>>> _simple_layout([], {\"\": \"src\"}, \"/tmp/myproj\")\nTrue\n>>> _simple_layout([], {\"a\": \"_a\", \"\": \"src\"}, \"/tmp/myproj\")\nFalse\n```\n"]}, {"name": "setuptools.command.editable_wheel._parent_path", "asynchronous": false, "params": [{"name": "pkg", "type": null, "default": null}, {"name": "pkg_path", "type": null, "default": null}], "returns": null, "documentation": ["Infer the parent path containing a package, that if added to `sys.path` would\nallow importing that package.\nWhen `pkg` is directly mapped into a directory with a different name, return its\nown path.\n\\>>> \\_parent_path(\"a\", \"src/a\")\n'src'\n\\>>> \\_parent_path(\"b\", \"src/c\")\n'src/c'\n"]}, {"name": "setuptools.command.editable_wheel._find_packages", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.command.dist.Distribution", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.command.editable_wheel._find_top_level_modules", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.command.dist.Distribution", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.command.editable_wheel._find_package_roots", "asynchronous": false, "params": [{"name": "packages", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "package_dir", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "src_root", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.command._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.command.editable_wheel._absolute_root", "asynchronous": false, "params": [{"name": "path", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.command._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Works for packages and top-level modules"]}, {"name": "setuptools.command.editable_wheel._find_virtual_namespaces", "asynchronous": false, "params": [{"name": "pkg_roots", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["By carefully designing `package_dir`, it is possible to implement the logical\nstructure of PEP 420 in a package without the corresponding directories.\n\nMoreover a parent package can be purposefully/accidentally skipped in the discovery\nphase (e.g. `find_packages(include=[\"mypkg.*\"])`, when `mypkg.foo` is included\nby `mypkg` itself is not).\nWe consider this case to also be a virtual namespace (ignoring the original\ndirectory) to emulate a non-editable installation.\n\nThis function will try to find these kinds of namespaces.\n"]}, {"name": "setuptools.command.editable_wheel._find_namespaces", "asynchronous": false, "params": [{"name": "packages", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "pkg_roots", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "documentation": []}, {"name": "setuptools.command.editable_wheel._remove_nested", "asynchronous": false, "params": [{"name": "pkg_roots", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.command.editable_wheel._is_nested", "asynchronous": false, "params": [{"name": "pkg", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pkg_path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "parent", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "parent_path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Return `True` if `pkg` is nested inside `parent` both logically and in the\nfile system.\n\\>>> \\_is_nested(\"a.b\", \"path/a/b\", \"a\", \"path/a\")\nTrue\n\\>>> \\_is_nested(\"a.b\", \"path/a/b\", \"a\", \"otherpath/a\")\nFalse\n\\>>> \\_is_nested(\"a.b\", \"path/a/b\", \"c\", \"path/c\")\nFalse\n\\>>> \\_is_nested(\"a.a\", \"path/a/a\", \"a\", \"path/a\")\nTrue\n\\>>> \\_is_nested(\"b.a\", \"path/b/a\", \"a\", \"path/a\")\nFalse\n"]}, {"name": "setuptools.command.editable_wheel._empty_dir", "asynchronous": false, "params": [{"name": "dir_", "type": {"name": "_P", "xref": {"fqname": "_P", "project": null}, "params": null}, "default": null}], "returns": {"name": "_P", "xref": {"fqname": "_P", "project": null}, "params": null}, "documentation": ["Create a directory ensured to be empty. Existing files may be removed."]}, {"name": "setuptools.command.editable_wheel._finder_template", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "mapping", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "namespaces", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Create a string containing the code for the\\`\\`MetaPathFinder\\`\\` and\n`PathEntryFinder`.\n"]}], "variables": [{"name": "setuptools.command.editable_wheel._P", "type": null, "documentation": []}, {"name": "setuptools.command.editable_wheel._logger", "type": null, "documentation": []}, {"name": "setuptools.command.editable_wheel._STRICT_WARNING", "type": null, "documentation": []}, {"name": "setuptools.command.editable_wheel._LENIENT_WARNING", "type": null, "documentation": []}, {"name": "setuptools.command.editable_wheel._FINDER_TEMPLATE", "type": null, "documentation": []}], "classes": [{"name": "setuptools.command.editable_wheel._EditableMode", "bases": ["Enum"], "methods": [{"name": "setuptools.command.editable_wheel._EditableMode.convert", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "mode", "type": {"name": "str | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "_EditableMode", "xref": {"fqname": "setuptools.command.editable_wheel._EditableMode", "project": null}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.command.editable_wheel._EditableMode.STRICT", "type": null, "documentation": []}, {"name": "setuptools.command.editable_wheel._EditableMode.LENIENT", "type": null, "documentation": []}, {"name": "setuptools.command.editable_wheel._EditableMode.COMPAT", "type": null, "documentation": ["TODO: Remove `compat` after Dec/2022."]}], "instance_variables": [], "inner_classes": [], "documentation": ["Possible editable installation modes:\n`lenient` (new files automatically added to the package - DEFAULT);\n`strict` (requires a new installation when files are added/removed); or\n`compat` (attempts to emulate `python setup.py develop` - DEPRECATED)."]}, {"name": "setuptools.command.editable_wheel.editable_wheel", "bases": ["Command"], "methods": [{"name": "setuptools.command.editable_wheel.editable_wheel.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.editable_wheel.editable_wheel.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.editable_wheel.editable_wheel.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.editable_wheel.editable_wheel._ensure_dist_info", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.editable_wheel.editable_wheel._install_namespaces", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "installation_dir", "type": null, "default": null}, {"name": "pth_prefix", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.editable_wheel.editable_wheel._find_egg_info_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools.command.editable_wheel.editable_wheel._configure_build", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "unpacked_wheel", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.command._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "build_lib", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.command._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "tmp_dir", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.command._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": null, "documentation": ["Configure commands to behave in the following ways:\n\n- Build commands can write to `build_lib` if they really want to...\n  (but this folder is expected to be ignored and modules are expected to live\n  in the project directory...)\n- Binary extensions should be built in-place (editable_mode = True)\n- Data/header/script files are not part of the \"editable\" specification\n  so they are written directly to the unpacked_wheel directory.\n"]}, {"name": "setuptools.command.editable_wheel.editable_wheel._set_editable_mode", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Set the `editable_mode` flag in the build sub-commands\n"]}, {"name": "setuptools.command.editable_wheel.editable_wheel._collect_build_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "setuptools.command.editable_wheel.editable_wheel._run_build_commands", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "unpacked_wheel", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.command._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "build_lib", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.command._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "tmp_dir", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.command._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "setuptools.command.editable_wheel.editable_wheel._run_build_subcommands", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Issue #3501 indicates that some plugins/customizations might rely on:\n\n1. `build_py` not running\n2. `build_py` always copying files to `build_lib`\n\nHowever both these assumptions may be false in editable_wheel.\nThis method implements a temporary workaround to support the ecosystem\nwhile the implementations catch up.\n"]}, {"name": "setuptools.command.editable_wheel.editable_wheel._safely_run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "cmd_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.editable_wheel.editable_wheel._create_wheel_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "bdist_wheel", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.editable_wheel.editable_wheel._run_install", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "category", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.editable_wheel.editable_wheel._select_strategy", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "tag", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "build_lib", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.command._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "EditableStrategy", "xref": {"fqname": "EditableStrategy", "project": null}, "params": null}, "documentation": ["Decides which strategy to use to implement an editable installation."]}], "class_variables": [{"name": "setuptools.command.editable_wheel.editable_wheel.description", "type": null, "documentation": []}, {"name": "setuptools.command.editable_wheel.editable_wheel.user_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Build 'editable' wheel for development.\nThis command is private and reserved for internal use of setuptools,\nusers should rely on `setuptools.build_meta` APIs.\n"]}, {"name": "setuptools.command.editable_wheel.EditableStrategy", "bases": ["Protocol"], "methods": [{"name": "setuptools.command.editable_wheel.EditableStrategy.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "wheel", "type": {"name": "WheelFile", "xref": {"fqname": "setuptools.command._vendor.wheel.wheelfile.WheelFile", "project": null}, "params": null}, "default": null}, {"name": "files", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "mapping", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.editable_wheel.EditableStrategy.__enter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Self", "xref": {"fqname": "typing_extensions.Self", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.command.editable_wheel.EditableStrategy.__exit__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "_exc_type", "type": {"name": "type[BaseException] | None", "xref": null, "params": null}, "default": null}, {"name": "_exc_value", "type": {"name": "BaseException | None", "xref": null, "params": null}, "default": null}, {"name": "_traceback", "type": {"name": "TracebackType | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.command.editable_wheel._StaticPth", "bases": [], "methods": [{"name": "setuptools.command.editable_wheel._StaticPth.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.command.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "path_entries", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.editable_wheel._StaticPth.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "wheel", "type": {"name": "WheelFile", "xref": {"fqname": "setuptools.command._vendor.wheel.wheelfile.WheelFile", "project": null}, "params": null}, "default": null}, {"name": "files", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "mapping", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.editable_wheel._StaticPth.__enter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Self", "xref": {"fqname": "typing_extensions.Self", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.command.editable_wheel._StaticPth.__exit__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "_exc_type", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}, {"name": "_exc_value", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}, {"name": "_traceback", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.command.editable_wheel._LinkTree", "bases": ["_StaticPth"], "methods": [{"name": "setuptools.command.editable_wheel._LinkTree.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.command.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "auxiliary_dir", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.command._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "build_lib", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.command._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.editable_wheel._LinkTree.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "wheel", "type": {"name": "WheelFile", "xref": {"fqname": "setuptools.command._vendor.wheel.wheelfile.WheelFile", "project": null}, "params": null}, "default": null}, {"name": "files", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "mapping", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.editable_wheel._LinkTree._normalize_output", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "file", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools.command.editable_wheel._LinkTree._create_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "relative_output", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "src_file", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "link", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.command.editable_wheel._LinkTree._create_links", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "outputs", "type": null, "default": null}, {"name": "output_mapping", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.editable_wheel._LinkTree.__enter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Self", "xref": {"fqname": "typing_extensions.Self", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.command.editable_wheel._LinkTree.__exit__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "_exc_type", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}, {"name": "_exc_value", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}, {"name": "_traceback", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Creates a `.pth` file that points to a link tree in the `auxiliary_dir`.\n\nThis strategy will only link files (not dirs), so it can be implemented in\nany OS, even if that means using hardlinks instead of symlinks.\n\nBy collocating `auxiliary_dir` and the original source code, limitations\nwith hardlinks should be avoided.\n"]}, {"name": "setuptools.command.editable_wheel._TopLevelFinder", "bases": [], "methods": [{"name": "setuptools.command.editable_wheel._TopLevelFinder.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.command.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.editable_wheel._TopLevelFinder.template_vars", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "documentation": []}, {"name": "setuptools.command.editable_wheel._TopLevelFinder.get_implementation", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "setuptools.command.editable_wheel._TopLevelFinder.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "wheel", "type": {"name": "WheelFile", "xref": {"fqname": "setuptools.command._vendor.wheel.wheelfile.WheelFile", "project": null}, "params": null}, "default": null}, {"name": "files", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "mapping", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.editable_wheel._TopLevelFinder.__enter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Self", "xref": {"fqname": "typing_extensions.Self", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.command.editable_wheel._TopLevelFinder.__exit__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "_exc_type", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}, {"name": "_exc_value", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}, {"name": "_traceback", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.command.editable_wheel._NamespaceInstaller", "bases": ["namespaces.Installer"], "methods": [{"name": "setuptools.command.editable_wheel._NamespaceInstaller.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "distribution", "type": null, "default": null}, {"name": "installation_dir", "type": null, "default": null}, {"name": "editable_name", "type": null, "default": null}, {"name": "src_root", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.editable_wheel._NamespaceInstaller._get_nspkg_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Installation target."]}, {"name": "setuptools.command.editable_wheel._NamespaceInstaller._get_root", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Where the modules/packages should be loaded from."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.command.editable_wheel.LinksNotSupported", "bases": ["errors.FileError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["File system does not seem to support either symlinks or hard links."]}, {"name": "setuptools.command.editable_wheel._DebuggingTips", "bases": ["SetuptoolsWarning"], "methods": [], "class_variables": [{"name": "setuptools.command.editable_wheel._DebuggingTips._SUMMARY", "type": null, "documentation": []}, {"name": "setuptools.command.editable_wheel._DebuggingTips._DETAILS", "type": null, "documentation": []}, {"name": "setuptools.command.editable_wheel._DebuggingTips._SEE_DOCS", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._vendor.tomli", "documentation": ["SPDX-License-Identifier: MIT", "SPDX-FileCopyrightText: 2021 Taneli Hukkinen", "Licensed to PSF under a Contributor Agreement."], "functions": [], "variables": [{"name": "setuptools._vendor.tomli.__version__", "type": null, "documentation": ["DO NOT EDIT THIS LINE MANUALLY. LET bump2version UTILITY DO IT"]}, {"name": "setuptools._vendor.tomli.TOMLDecodeError.__module__", "type": null, "documentation": []}], "classes": [], "exports": [{"name": "setuptools._vendor.tomli.load", "xref": {"fqname": "setuptools._vendor.tomli._parser.load", "project": null}}, {"name": "setuptools._vendor.tomli.loads", "xref": {"fqname": "setuptools._vendor.tomli._parser.loads", "project": null}}, {"name": "setuptools._vendor.tomli.TOMLDecodeError", "xref": {"fqname": "setuptools._vendor.tomli._parser.TOMLDecodeError", "project": null}}]}, {"name": "setuptools.command.build_py", "documentation": [], "functions": [{"name": "setuptools.command.build_py.make_writable", "asynchronous": false, "params": [{"name": "target", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.build_py.assert_relative", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.command.build_py._IMPLICIT_DATA_FILES", "type": null, "documentation": []}], "classes": [{"name": "setuptools.command.build_py.build_py", "bases": ["orig.build_py"], "methods": [{"name": "setuptools.command.build_py.build_py.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.build_py.build_py.copy_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "infile", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.command._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "outfile", "type": {"name": "StrPathT", "xref": {"fqname": "setuptools.command._path.StrPathT", "project": null}, "params": null}, "default": null}, {"name": "preserve_mode", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "preserve_times", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "link", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "level", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "StrPathT | str", "xref": null, "params": null}, {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.command.build_py.build_py.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Build modules, packages, and copy data files to build directory"]}, {"name": "setuptools.command.build_py.build_py.__getattr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "attr", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.build_py.build_py._get_data_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Generate list of '(package,src_dir,build_dir,filenames)' tuples"]}, {"name": "setuptools.command.build_py.build_py.get_data_files_without_manifest", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Generate list of `(package,src_dir,build_dir,filenames)` tuples,\nbut without triggering any attempt to analyze or build the manifest.\n"]}, {"name": "setuptools.command.build_py.build_py._get_pkg_data_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "package", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.build_py.build_py.find_data_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "package", "type": null, "default": null}, {"name": "src_dir", "type": null, "default": null}], "returns": null, "documentation": ["Return filenames for package's data files in 'src_dir'"]}, {"name": "setuptools.command.build_py.build_py.get_outputs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "include_bytecode", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["See {class}`setuptools.commands.build.SubCommand`\n"]}, {"name": "setuptools.command.build_py.build_py.get_output_mapping", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["See {class}`setuptools.commands.build.SubCommand`\n"]}, {"name": "setuptools.command.build_py.build_py._get_module_mapping", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": ["Iterate over all modules producing (dest, src) pairs."]}, {"name": "setuptools.command.build_py.build_py._get_package_data_output_mapping", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": ["Iterate over package data producing (dest, src) pairs."]}, {"name": "setuptools.command.build_py.build_py.build_package_data", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Copy data files into build directory"]}, {"name": "setuptools.command.build_py.build_py.analyze_manifest", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.build_py.build_py._filter_build_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "files", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "egg_info", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.command._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["`build_meta` may try to create egg_info outside of the project directory,\nand this can be problematic for certain plugins (reported in issue #3500).\n\nExtensions might also include between their sources files created on the\n`build_lib` and `build_temp` directories.\n\nThis function should filter this case of invalid files out.\n"]}, {"name": "setuptools.command.build_py.build_py.get_data_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.build_py.build_py.check_package", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "package", "type": null, "default": null}, {"name": "package_dir", "type": null, "default": null}], "returns": null, "documentation": ["Check namespace packages' __init__ for declare_namespace"]}, {"name": "setuptools.command.build_py.build_py.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.build_py.build_py.get_package_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "package", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.build_py.build_py.exclude_data_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "package", "type": null, "default": null}, {"name": "src_dir", "type": null, "default": null}, {"name": "files", "type": null, "default": null}], "returns": null, "documentation": ["Filter filenames for package's data files in 'src_dir'"]}, {"name": "setuptools.command.build_py.build_py._get_platform_patterns", "asynchronous": false, "params": [{"name": "spec", "type": null, "default": null}, {"name": "package", "type": null, "default": null}, {"name": "src_dir", "type": null, "default": null}, {"name": "extra_patterns", "type": null, "default": "..."}], "returns": null, "documentation": ["yield platform-specific path patterns (suitable for glob\nor fn_match) from a glob-based spec (such as\nself.package_data or self.exclude_package_data)\nmatching package in src_dir."]}], "class_variables": [{"name": "setuptools.command.build_py.build_py.distribution", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.command.dist.Distribution", "project": null}, "params": null}, "documentation": ["override distutils.dist.Distribution with setuptools.dist.Distribution"]}, {"name": "setuptools.command.build_py.build_py.editable_mode", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.command.build_py.build_py.existing_egg_info_dir", "type": {"name": "StrPath | None", "xref": null, "params": null}, "documentation": [": Private API, internal use only."]}], "instance_variables": [], "inner_classes": [], "documentation": ["Enhanced 'build_py' command that includes data files with packages\n\nThe data files are specified via a 'package_data' argument to 'setup()'.\nSee 'setuptools.dist.Distribution' for more details.\n\nAlso, this version of the 'build_py' command allows you to specify both\n'py_modules' and 'packages' in the same setup operation."]}, {"name": "setuptools.command.build_py._IncludePackageDataAbuse", "bases": [], "methods": [{"name": "setuptools.command.build_py._IncludePackageDataAbuse.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.build_py._IncludePackageDataAbuse.is_module", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "file", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.build_py._IncludePackageDataAbuse.importable_subpackage", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parent", "type": null, "default": null}, {"name": "file", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.command.build_py._IncludePackageDataAbuse.warn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "importable", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [{"name": "setuptools.command.build_py._IncludePackageDataAbuse._Warning", "bases": ["SetuptoolsDeprecationWarning"], "methods": [], "class_variables": [{"name": "setuptools.command.build_py._IncludePackageDataAbuse._Warning._SUMMARY", "type": null, "documentation": []}, {"name": "setuptools.command.build_py._IncludePackageDataAbuse._Warning._DETAILS", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "documentation": ["Inform users that package or module is included as 'data file'"]}], "exports": []}, {"name": "setuptools._vendor.tomli._types", "documentation": ["SPDX-License-Identifier: MIT", "SPDX-FileCopyrightText: 2021 Taneli Hukkinen", "Licensed to PSF under a Contributor Agreement."], "functions": [], "variables": [{"name": "setuptools._vendor.tomli._types.ParseFloat", "type": null, "documentation": []}, {"name": "setuptools._vendor.tomli._types.Key", "type": null, "documentation": []}, {"name": "setuptools._vendor.tomli._types.Pos", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._vendor.tomli._re", "documentation": ["SPDX-License-Identifier: MIT", "SPDX-FileCopyrightText: 2021 Taneli Hukkinen", "Licensed to PSF under a Contributor Agreement."], "functions": [{"name": "setuptools._vendor.tomli._re.match_to_datetime", "asynchronous": false, "params": [{"name": "match", "type": {"name": "re.Match", "xref": {"fqname": "re.Match", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "datetime | date", "xref": null, "params": null}, "documentation": ["Convert a `RE_DATETIME` match to `datetime.datetime` or `datetime.date`.\n\nRaises ValueError if the match does not correspond to a valid date\nor datetime."]}, {"name": "setuptools._vendor.tomli._re.cached_tz", "asynchronous": false, "params": [{"name": "hour_str", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "minute_str", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "sign_str", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "timezone", "xref": {"fqname": "datetime.timezone", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.tomli._re.match_to_localtime", "asynchronous": false, "params": [{"name": "match", "type": {"name": "re.Match", "xref": {"fqname": "re.Match", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "time", "xref": {"fqname": "datetime.time", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.tomli._re.match_to_number", "asynchronous": false, "params": [{"name": "match", "type": {"name": "re.Match", "xref": {"fqname": "re.Match", "project": "--std--"}, "params": null}, "default": null}, {"name": "parse_float", "type": {"name": "ParseFloat", "xref": {"fqname": "setuptools._vendor.tomli._re._types.ParseFloat", "project": null}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}], "variables": [{"name": "setuptools._vendor.tomli._re._TIME_RE_STR", "type": null, "documentation": []}, {"name": "setuptools._vendor.tomli._re.RE_NUMBER", "type": null, "documentation": []}, {"name": "setuptools._vendor.tomli._re.RE_LOCALTIME", "type": null, "documentation": []}, {"name": "setuptools._vendor.tomli._re.RE_DATETIME", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._vendor.more_itertools", "documentation": ["More routines for operating on iterables, beyond itertools"], "functions": [], "variables": [{"name": "setuptools._vendor.more_itertools.__version__", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.discovery", "documentation": ["Automatic discovery of Python modules and packages (for inclusion in the\ndistribution) and other config values.\n\nFor the purposes of this module, the following nomenclature is used:\n\n- \"src-layout\": a directory representing a Python project that contains a \"src\"\n  folder. Everything under the \"src\" folder is meant to be included in the\n  distribution when packaging the project. Example:\n\n  ```\n  .\n  \u251c\u2500\u2500 tox.ini\n  \u251c\u2500\u2500 pyproject.toml\n  \u2514\u2500\u2500 src/\n      \u2514\u2500\u2500 mypkg/\n          \u251c\u2500\u2500 __init__.py\n          \u251c\u2500\u2500 mymodule.py\n          \u2514\u2500\u2500 my_data_file.txt\n  ```\n\n- \"flat-layout\": a Python project that does not use \"src-layout\" but instead\n  have a directory under the project root for each package:\n\n  ```\n  .\n  \u251c\u2500\u2500 tox.ini\n  \u251c\u2500\u2500 pyproject.toml\n  \u2514\u2500\u2500 mypkg/\n      \u251c\u2500\u2500 __init__.py\n      \u251c\u2500\u2500 mymodule.py\n      \u2514\u2500\u2500 my_data_file.txt\n  ```\n\n- \"single-module\": a project that contains a single Python script direct under\n  the project root (no directory used):\n\n  ```\n  .\n  \u251c\u2500\u2500 tox.ini\n  \u251c\u2500\u2500 pyproject.toml\n  \u2514\u2500\u2500 mymodule.py\n  ```\n"], "functions": [{"name": "setuptools.discovery._valid_name", "asynchronous": false, "params": [{"name": "path", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.discovery._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.discovery._find_packages_within", "asynchronous": false, "params": [{"name": "root_pkg", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pkg_dir", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.discovery._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.discovery.remove_nested_packages", "asynchronous": false, "params": [{"name": "packages", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Remove nested packages from a list of packages.\n\n```pycon\n>>> remove_nested_packages([\"a\", \"a.b1\", \"a.b2\", \"a.b1.c1\"])\n['a']\n>>> remove_nested_packages([\"a\", \"b\", \"c.d\", \"c.d.e.f\", \"g.h\", \"a.a1\"])\n['a', 'b', 'c.d', 'g.h']\n```\n"]}, {"name": "setuptools.discovery.remove_stubs", "asynchronous": false, "params": [{"name": "packages", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Remove type stubs ({pep}`561`) from a list of packages.\n\n```pycon\n>>> remove_stubs([\"a\", \"a.b\", \"a-stubs\", \"a-stubs.b.c\", \"b\", \"c-stubs\"])\n['a', 'a.b', 'b']\n```\n"]}, {"name": "setuptools.discovery.find_parent_package", "asynchronous": false, "params": [{"name": "packages", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "package_dir", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "root_dir", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.discovery._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["Find the parent package that is not a namespace."]}, {"name": "setuptools.discovery.find_package_path", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "package_dir", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "root_dir", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.discovery._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Given a package name, return the path where it should be found on\ndisk, considering the `package_dir` option.\n\n```pycon\n>>> path = find_package_path(\"my.pkg\", {\"\": \"root/is/nested\"}, \".\")\n>>> path.replace(os.sep, \"/\")\n'./root/is/nested/my/pkg'\n```\n\n```pycon\n>>> path = find_package_path(\"my.pkg\", {\"my\": \"root/is/nested\"}, \".\")\n>>> path.replace(os.sep, \"/\")\n'./root/is/nested/pkg'\n```\n\n```pycon\n>>> path = find_package_path(\"my.pkg\", {\"my.pkg\": \"root/is/nested\"}, \".\")\n>>> path.replace(os.sep, \"/\")\n'./root/is/nested'\n```\n\n```pycon\n>>> path = find_package_path(\"other.pkg\", {\"my.pkg\": \"root/is/nested\"}, \".\")\n>>> path.replace(os.sep, \"/\")\n'./other/pkg'\n```\n"]}, {"name": "setuptools.discovery.construct_package_dir", "asynchronous": false, "params": [{"name": "packages", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "package_path", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.discovery._path.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}], "variables": [{"name": "setuptools.discovery.chain_iter", "type": null, "documentation": []}], "classes": [{"name": "setuptools.discovery._Filter", "bases": [], "methods": [{"name": "setuptools.discovery._Filter.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*patterns", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.discovery._Filter.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.discovery._Filter.__contains__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Given a list of patterns, create a callable that will be true only if\nthe input matches at least one of the patterns."]}, {"name": "setuptools.discovery._Finder", "bases": [], "methods": [{"name": "setuptools.discovery._Finder.find", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "where", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.discovery._path.StrPath", "project": null}, "params": null}, "default": "..."}, {"name": "exclude", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}, {"name": "include", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Return a list of all Python items (packages or modules, depending on\nthe finder implementation) found within directory 'where'.\n\n'where' is the root directory which will be searched.\nIt should be supplied as a \"cross-platform\" (i.e. URL-style) path;\nit will be converted to the appropriate local path syntax.\n\n'exclude' is a sequence of names to exclude; '*' can be used\nas a wildcard in the names.\nWhen finding packages, 'foo.*' will exclude all subpackages of 'foo'\n(but not 'foo' itself).\n\n'include' is a sequence of names to include.\nIf it's specified, only the named items will be included.\nIf it's not specified, all found items will be included.\n'include' can contain shell style wildcard patterns just like\n'exclude'."]}, {"name": "setuptools.discovery._Finder._find_iter", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "where", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.discovery._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "exclude", "type": {"name": "_Filter", "xref": {"fqname": "setuptools.discovery._Filter", "project": null}, "params": null}, "default": null}, {"name": "include", "type": {"name": "_Filter", "xref": {"fqname": "setuptools.discovery._Filter", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}], "class_variables": [{"name": "setuptools.discovery._Finder.ALWAYS_EXCLUDE", "type": {"name": "ClassVar", "xref": {"fqname": "typing.ClassVar", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}]}, "documentation": []}, {"name": "setuptools.discovery._Finder.DEFAULT_EXCLUDE", "type": {"name": "ClassVar", "xref": {"fqname": "typing.ClassVar", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Base class that exposes functionality for module/package finders"]}, {"name": "setuptools.discovery.PackageFinder", "bases": ["_Finder"], "methods": [{"name": "setuptools.discovery.PackageFinder._find_iter", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "where", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.discovery._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "exclude", "type": {"name": "_Filter", "xref": {"fqname": "setuptools.discovery._Filter", "project": null}, "params": null}, "default": null}, {"name": "include", "type": {"name": "_Filter", "xref": {"fqname": "setuptools.discovery._Filter", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["All the packages found in 'where' that pass the 'include' filter, but\nnot the 'exclude' filter."]}, {"name": "setuptools.discovery.PackageFinder._looks_like_package", "asynchronous": false, "params": [{"name": "path", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.discovery._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "_package_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Does a directory look like a package?"]}], "class_variables": [{"name": "setuptools.discovery.PackageFinder.ALWAYS_EXCLUDE", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Generate a list of all Python packages found within a directory"]}, {"name": "setuptools.discovery.PEP420PackageFinder", "bases": ["PackageFinder"], "methods": [{"name": "setuptools.discovery.PEP420PackageFinder._looks_like_package", "asynchronous": false, "params": [{"name": "_path", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.discovery._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "_package_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.discovery.ModuleFinder", "bases": ["_Finder"], "methods": [{"name": "setuptools.discovery.ModuleFinder._find_iter", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "where", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.discovery._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "exclude", "type": {"name": "_Filter", "xref": {"fqname": "setuptools.discovery._Filter", "project": null}, "params": null}, "default": null}, {"name": "include", "type": {"name": "_Filter", "xref": {"fqname": "setuptools.discovery._Filter", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}], "class_variables": [{"name": "setuptools.discovery.ModuleFinder._looks_like_module", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Find isolated Python modules.\nThis function will **not** recurse subdirectories."]}, {"name": "setuptools.discovery.FlatLayoutPackageFinder", "bases": ["PEP420PackageFinder"], "methods": [{"name": "setuptools.discovery.FlatLayoutPackageFinder._looks_like_package", "asynchronous": false, "params": [{"name": "_path", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.discovery._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "package_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.discovery.FlatLayoutPackageFinder._EXCLUDE", "type": null, "documentation": []}, {"name": "setuptools.discovery.FlatLayoutPackageFinder.DEFAULT_EXCLUDE", "type": null, "documentation": ["Reserved package names"]}], "instance_variables": [], "inner_classes": [], "documentation": ["We have to be extra careful in the case of flat layout to not include files", "and directories not meant for distribution (e.g. tool-related)"]}, {"name": "setuptools.discovery.FlatLayoutModuleFinder", "bases": ["ModuleFinder"], "methods": [], "class_variables": [{"name": "setuptools.discovery.FlatLayoutModuleFinder.DEFAULT_EXCLUDE", "type": null, "documentation": ["Reserved top-level module names"]}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.discovery.ConfigDiscovery", "bases": [], "methods": [{"name": "setuptools.discovery.ConfigDiscovery.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "distribution", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.Distribution", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.discovery.ConfigDiscovery._disable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Internal API to disable automatic discovery"]}, {"name": "setuptools.discovery.ConfigDiscovery._ignore_ext_modules", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Internal API to disregard ext_modules.\n\nNormally auto-discovery would not be triggered if `ext_modules` are set\n(this is done for backward compatibility with existing packages relying on\n`setup.py` or `setup.cfg`). However, `setuptools` can call this function\nto ignore given `ext_modules` and proceed with the auto-discovery if\n`packages` and `py_modules` are not given (e.g. when using pyproject.toml\nmetadata).\n"]}, {"name": "setuptools.discovery.ConfigDiscovery._root_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "StrPath", "xref": {"fqname": "setuptools.discovery._path.StrPath", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.discovery.ConfigDiscovery._package_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.discovery.ConfigDiscovery.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "force", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "name", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ignore_ext_modules", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": null, "documentation": ["Automatically discover missing configuration fields\nand modifies the given `distribution` object in-place.\n\nNote that by default this will only have an effect the first time the\n`ConfigDiscovery` object is called.\n\nTo repeatedly invoke automatic discovery (e.g. when the project\ndirectory changes), please use `force=True` (or create a new\n`ConfigDiscovery` instance).\n"]}, {"name": "setuptools.discovery.ConfigDiscovery._explicitly_specified", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "ignore_ext_modules", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["``True`` if the user has specified some form of package/module listing"]}, {"name": "setuptools.discovery.ConfigDiscovery._analyse_package_layout", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "ignore_ext_modules", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.discovery.ConfigDiscovery._analyse_explicit_layout", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["The user can explicitly give a package layout via ``package_dir``"]}, {"name": "setuptools.discovery.ConfigDiscovery._analyse_src_layout", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Try to find all packages or modules under the `src` directory\n(or anything pointed by `package_dir[\"\"]`).\n\nThe \"src-layout\" is relatively safe for automatic discovery.\nWe assume that everything within is meant to be included in the\ndistribution.\n\nIf `package_dir[\"\"]` is not given, but the `src` directory exists,\nthis function will set `package_dir[\"\"] = \"src\"`.\n"]}, {"name": "setuptools.discovery.ConfigDiscovery._analyse_flat_layout", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Try to find all packages and modules under the project root.\n\nSince the `flat-layout` is more dangerous in terms of accidentally including\nextra files/directories, this function is more conservative and will raise an\nerror if multiple packages or modules are found.\n\nThis assumes that multi-package dists are uncommon and refuse to support that\nuse case in order to be able to prevent unintended errors.\n"]}, {"name": "setuptools.discovery.ConfigDiscovery._analyse_flat_packages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.discovery.ConfigDiscovery._analyse_flat_modules", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.discovery.ConfigDiscovery._ensure_no_accidental_inclusion", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "detected", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "kind", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.discovery.ConfigDiscovery.analyse_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["The packages/modules are the essential contribution of the author.\nTherefore the name of the distribution can be derived from them."]}, {"name": "setuptools.discovery.ConfigDiscovery._find_name_single_package_or_module", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["Exactly one module or package"]}, {"name": "setuptools.discovery.ConfigDiscovery._find_name_from_packages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["Try to find the root package that is not a PEP 420 namespace"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Fill-in metadata and options that can be automatically derived\n(from other metadata/options, the file system or conventions)"]}], "exports": []}, {"name": "setuptools._vendor.tomli._parser", "documentation": ["SPDX-License-Identifier: MIT", "SPDX-FileCopyrightText: 2021 Taneli Hukkinen", "Licensed to PSF under a Contributor Agreement."], "functions": [{"name": "setuptools._vendor.tomli._parser.load", "asynchronous": false, "params": [{"name": "__fp", "type": {"name": "BinaryIO", "xref": {"fqname": "typing.BinaryIO", "project": "--std--"}, "params": null}, "default": null}, {"name": "parse_float", "type": {"name": "ParseFloat", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.ParseFloat", "project": null}, "params": null}, "default": "..."}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "documentation": ["Parse TOML from a binary file object."]}, {"name": "setuptools._vendor.tomli._parser.loads", "asynchronous": false, "params": [{"name": "__s", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "parse_float", "type": {"name": "ParseFloat", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.ParseFloat", "project": null}, "params": null}, "default": "..."}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "documentation": ["Parse TOML from a string."]}, {"name": "setuptools._vendor.tomli._parser.skip_chars", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}, {"name": "chars", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.skip_until", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}, {"name": "expect", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "error_on", "type": {"name": "frozenset", "xref": {"fqname": "functions.frozenset", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "error_on_eof", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.skip_comment", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}], "returns": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.skip_comments_and_array_ws", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}], "returns": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.create_dict_rule", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}, {"name": "out", "type": {"name": "Output", "xref": {"fqname": "setuptools._vendor.tomli._parser.Output", "project": null}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, {"name": "Key", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Key", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.create_list_rule", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}, {"name": "out", "type": {"name": "Output", "xref": {"fqname": "setuptools._vendor.tomli._parser.Output", "project": null}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, {"name": "Key", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Key", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.key_value_rule", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}, {"name": "out", "type": {"name": "Output", "xref": {"fqname": "setuptools._vendor.tomli._parser.Output", "project": null}, "params": null}, "default": null}, {"name": "header", "type": {"name": "Key", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Key", "project": null}, "params": null}, "default": null}, {"name": "parse_float", "type": {"name": "ParseFloat", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.ParseFloat", "project": null}, "params": null}, "default": null}], "returns": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.parse_key_value_pair", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}, {"name": "parse_float", "type": {"name": "ParseFloat", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.ParseFloat", "project": null}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, {"name": "Key", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Key", "project": null}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.parse_key", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, {"name": "Key", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Key", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.parse_key_part", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.parse_one_line_basic_str", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.parse_array", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}, {"name": "parse_float", "type": {"name": "ParseFloat", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.ParseFloat", "project": null}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.parse_inline_table", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}, {"name": "parse_float", "type": {"name": "ParseFloat", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.ParseFloat", "project": null}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.parse_basic_str_escape", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}, {"name": "multiline", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.parse_basic_str_escape_multiline", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.parse_hex_char", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}, {"name": "hex_len", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.parse_literal_str", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.parse_multiline_str", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}, {"name": "literal", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.parse_basic_str", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}, {"name": "multiline", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.parse_value", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}, {"name": "parse_float", "type": {"name": "ParseFloat", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.ParseFloat", "project": null}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.suffixed_err", "asynchronous": false, "params": [{"name": "src", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pos", "type": {"name": "Pos", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Pos", "project": null}, "params": null}, "default": null}, {"name": "msg", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "TOMLDecodeError", "xref": {"fqname": "setuptools._vendor.tomli._parser.TOMLDecodeError", "project": null}, "params": null}, "documentation": ["Return a `TOMLDecodeError` where error message is suffixed with\ncoordinates in source."]}, {"name": "setuptools._vendor.tomli._parser.is_unicode_scalar_value", "asynchronous": false, "params": [{"name": "codepoint", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.make_safe_parse_float", "asynchronous": false, "params": [{"name": "parse_float", "type": {"name": "ParseFloat", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.ParseFloat", "project": null}, "params": null}, "default": null}], "returns": {"name": "ParseFloat", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.ParseFloat", "project": null}, "params": null}, "documentation": ["A decorator to make `parse_float` safe.\n\n`parse_float` must not return dicts or lists, because these types\nwould be mixed with parsed TOML tables and arrays, thus confusing\nthe parser. The returned decorated callable raises `ValueError`\ninstead of returning illegal types."]}], "variables": [{"name": "setuptools._vendor.tomli._parser.ASCII_CTRL", "type": null, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.ILLEGAL_BASIC_STR_CHARS", "type": null, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.ILLEGAL_MULTILINE_BASIC_STR_CHARS", "type": null, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.ILLEGAL_LITERAL_STR_CHARS", "type": null, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.ILLEGAL_MULTILINE_LITERAL_STR_CHARS", "type": null, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.ILLEGAL_COMMENT_CHARS", "type": null, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.TOML_WS", "type": null, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.TOML_WS_AND_NEWLINE", "type": null, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.BARE_KEY_CHARS", "type": null, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.KEY_INITIAL_CHARS", "type": null, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.HEXDIGIT_CHARS", "type": null, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.BASIC_STR_ESCAPE_REPLACEMENTS", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.tomli._parser.TOMLDecodeError", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An error raised if a document is not valid TOML."]}, {"name": "setuptools._vendor.tomli._parser.Flags", "bases": [], "methods": [{"name": "setuptools._vendor.tomli._parser.Flags.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.Flags.add_pending", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": {"name": "Key", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Key", "project": null}, "params": null}, "default": null}, {"name": "flag", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.Flags.finalize_pending", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.Flags.unset_all", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": {"name": "Key", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Key", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.Flags.set", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": {"name": "Key", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Key", "project": null}, "params": null}, "default": null}, {"name": "flag", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}, {"name": "recursive", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.Flags.is_", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": {"name": "Key", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Key", "project": null}, "params": null}, "default": null}, {"name": "flag", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.tomli._parser.Flags.FROZEN", "type": null, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.Flags.EXPLICIT_NEST", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Flags that map to parsed keys/namespaces."]}, {"name": "setuptools._vendor.tomli._parser.NestedDict", "bases": [], "methods": [{"name": "setuptools._vendor.tomli._parser.NestedDict.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.NestedDict.get_or_create_nest", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": {"name": "Key", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Key", "project": null}, "params": null}, "default": null}, {"name": "access_lists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.NestedDict.append_nest_to_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": {"name": "Key", "xref": {"fqname": "setuptools._vendor.tomli._parser._types.Key", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.tomli._parser.Output", "bases": ["NamedTuple"], "methods": [], "class_variables": [{"name": "setuptools._vendor.tomli._parser.Output.data", "type": {"name": "NestedDict", "xref": {"fqname": "setuptools._vendor.tomli._parser.NestedDict", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.tomli._parser.Output.flags", "type": {"name": "Flags", "xref": {"fqname": "setuptools._vendor.tomli._parser.Flags", "project": null}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._vendor.autocommand.autoparse", "documentation": ["Copyright 2014-2015 Nathan West", "This file is part of autocommand.", "autocommand is free software: you can redistribute it and/or modify", "it under the terms of the GNU Lesser General Public License as published by", "the Free Software Foundation, either version 3 of the License, or", "(at your option) any later version.", "autocommand is distributed in the hope that it will be useful,", "but WITHOUT ANY WARRANTY; without even the implied warranty of", "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "GNU Lesser General Public License for more details.", "You should have received a copy of the GNU Lesser General Public License", "along with autocommand.  If not, see <http://www.gnu.org/licenses/>."], "functions": [{"name": "setuptools._vendor.autocommand.autoparse._get_type_description", "asynchronous": false, "params": [{"name": "annotation", "type": null, "default": null}], "returns": null, "documentation": ["Given an annotation, return the (type, description) for the parameter.\nIf you provide an annotation that is somehow both a string and a callable,\nthe behavior is undefined."]}, {"name": "setuptools._vendor.autocommand.autoparse._add_arguments", "asynchronous": false, "params": [{"name": "param", "type": null, "default": null}, {"name": "parser", "type": null, "default": null}, {"name": "used_char_args", "type": null, "default": null}, {"name": "add_nos", "type": null, "default": null}], "returns": null, "documentation": ["Add the argument(s) to an ArgumentParser (using add_argument) for a given\nparameter. used_char_args is the set of -short options currently already in\nuse, and is updated (if necessary) by this function. If add_nos is True,\nthis will also add an inverse switch for all boolean options. For\ninstance, for the boolean parameter \"verbose\", this will create --verbose\nand --no-verbose."]}, {"name": "setuptools._vendor.autocommand.autoparse.make_parser", "asynchronous": false, "params": [{"name": "func_sig", "type": null, "default": null}, {"name": "description", "type": null, "default": null}, {"name": "epilog", "type": null, "default": null}, {"name": "add_nos", "type": null, "default": null}], "returns": null, "documentation": ["Given the signature of a function, create an ArgumentParser"]}, {"name": "setuptools._vendor.autocommand.autoparse.parse_docstring", "asynchronous": false, "params": [{"name": "docstring", "type": null, "default": null}], "returns": null, "documentation": ["Given a docstring, parse it into a description and epilog part"]}, {"name": "setuptools._vendor.autocommand.autoparse.autoparse", "asynchronous": false, "params": [{"name": "func", "type": null, "default": "..."}, {"name": "description", "type": null, "default": "..."}, {"name": "epilog", "type": null, "default": "..."}, {"name": "add_nos", "type": null, "default": "..."}, {"name": "parser", "type": null, "default": "..."}], "returns": null, "documentation": ["This decorator converts a function that takes normal arguments into a\nfunction which takes a single optional argument, argv, parses it using an\nargparse.ArgumentParser, and calls the underlying function with the parsed\narguments. If it is not given, sys.argv[1:] is used. This is so that the\nfunction can be used as a setuptools entry point, as well as a normal main\nfunction. sys.argv[1:] is not evaluated until the function is called, to\nallow injecting different arguments for testing.\n\nIt uses the argument signature of the function to create an\nArgumentParser. Parameters without defaults become positional parameters,\nwhile parameters *with* defaults become --options. Use annotations to set\nthe type of the parameter.\n\nThe `desctiption` and `epilog` parameters corrospond to the same respective\nargparse parameters. If no description is given, it defaults to the\ndecorated functions's docstring, if present.\n\nIf add_nos is True, every boolean option (that is, every parameter with a\ndefault of True/False or a type of bool) will have a --no- version created\nas well, which inverts the option. For instance, the --verbose option will\nhave a --no-verbose counterpart. These are not mutually exclusive-\nwhichever one appears last in the argument list will have precedence.\n\nIf a parser is given, it is used instead of one generated from the function\nsignature. In this case, no parser is created; instead, the given parser is\nused to parse the argv argument. The parser's results' argument names must\nmatch up with the parameter names of the decorated function.\n\nThe decorated function is attached to the result as the `func` attribute,\nand the parser is attached as the `parser` attribute."]}, {"name": "setuptools._vendor.autocommand.autoparse.smart_open", "asynchronous": false, "params": [{"name": "filename_or_file", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["This context manager allows you to open a filename, if you want to default\nsome already-existing file object, like sys.stdout, which shouldn't be\nclosed at the end of the context. If the filename argument is a str, bytes,\nor int, the file object is created via a call to open with the given *args\nand **kwargs, sent to the context, and closed at the end of the context,\njust like \"with open(filename) as f:\". If it isn't one of the openable\ntypes, the object simply sent to the context unchanged, and left unclosed\nat the end of the context. Example:\n\n    def work_with_file(name=sys.stdout):\n        with smart_open(name) as f:\n            # Works correctly if name is a str filename or sys.stdout\n            print(\"Some stuff\", file=f)\n            # If it was a filename, f is closed at the end here."]}], "variables": [{"name": "setuptools._vendor.autocommand.autoparse._empty", "type": null, "documentation": []}, {"name": "setuptools._vendor.autocommand.autoparse._DOCSTRING_SPLIT", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.autocommand.autoparse.AnnotationError", "bases": ["AutocommandError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Annotation error: annotation must be a string, type, or tuple of both"]}, {"name": "setuptools._vendor.autocommand.autoparse.PositionalArgError", "bases": ["AutocommandError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Postional Arg Error: autocommand can't handle postional-only parameters"]}, {"name": "setuptools._vendor.autocommand.autoparse.KWArgError", "bases": ["AutocommandError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["kwarg Error: autocommand can't handle a **kwargs parameter"]}, {"name": "setuptools._vendor.autocommand.autoparse.DocstringError", "bases": ["AutocommandError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Docstring error"]}, {"name": "setuptools._vendor.autocommand.autoparse.TooManySplitsError", "bases": ["DocstringError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["The docstring had too many ---- section splits. Currently we only support\nusing up to a single split, to split the docstring into description and\nepilog parts."]}], "exports": []}, {"name": "setuptools._vendor.autocommand.errors", "documentation": ["Copyright 2014-2016 Nathan West", "This file is part of autocommand.", "autocommand is free software: you can redistribute it and/or modify", "it under the terms of the GNU Lesser General Public License as published by", "the Free Software Foundation, either version 3 of the License, or", "(at your option) any later version.", "autocommand is distributed in the hope that it will be useful,", "but WITHOUT ANY WARRANTY; without even the implied warranty of", "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "GNU Lesser General Public License for more details.", "You should have received a copy of the GNU Lesser General Public License", "along with autocommand.  If not, see <http://www.gnu.org/licenses/>."], "functions": [], "variables": [], "classes": [{"name": "setuptools._vendor.autocommand.errors.AutocommandError", "bases": ["Exception"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Base class for autocommand exceptions"]}], "exports": []}, {"name": "setuptools._vendor.autocommand.autocommand", "documentation": ["Copyright 2014-2015 Nathan West", "This file is part of autocommand.", "autocommand is free software: you can redistribute it and/or modify", "it under the terms of the GNU Lesser General Public License as published by", "the Free Software Foundation, either version 3 of the License, or", "(at your option) any later version.", "autocommand is distributed in the hope that it will be useful,", "but WITHOUT ANY WARRANTY; without even the implied warranty of", "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "GNU Lesser General Public License for more details.", "You should have received a copy of the GNU Lesser General Public License", "along with autocommand.  If not, see <http://www.gnu.org/licenses/>."], "functions": [{"name": "setuptools._vendor.autocommand.autocommand.autocommand", "asynchronous": false, "params": [{"name": "module", "type": null, "default": null}, {"name": "description", "type": null, "default": "..."}, {"name": "epilog", "type": null, "default": "..."}, {"name": "add_nos", "type": null, "default": "..."}, {"name": "parser", "type": null, "default": "..."}, {"name": "loop", "type": null, "default": "..."}, {"name": "forever", "type": null, "default": "..."}, {"name": "pass_loop", "type": null, "default": "..."}], "returns": null, "documentation": []}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.autocommand", "documentation": ["Copyright 2014-2016 Nathan West", "This file is part of autocommand.", "autocommand is free software: you can redistribute it and/or modify", "it under the terms of the GNU Lesser General Public License as published by", "the Free Software Foundation, either version 3 of the License, or", "(at your option) any later version.", "autocommand is distributed in the hope that it will be useful,", "but WITHOUT ANY WARRANTY; without even the implied warranty of", "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "GNU Lesser General Public License for more details.", "You should have received a copy of the GNU Lesser General Public License", "along with autocommand.  If not, see <http://www.gnu.org/licenses/>.", "flake8 flags all these imports as unused, hence the NOQAs everywhere."], "functions": [], "variables": [], "classes": [], "exports": [{"name": "setuptools._vendor.autocommand.autoasync", "xref": {"fqname": "setuptools._vendor.autocommand.autoasync.autoasync", "project": null}}, {"name": "setuptools._vendor.autocommand.autocommand", "xref": {"fqname": "setuptools._vendor.autocommand.autocommand.autocommand", "project": null}}, {"name": "setuptools._vendor.autocommand.automain", "xref": {"fqname": "setuptools._vendor.autocommand.automain.automain", "project": null}}, {"name": "setuptools._vendor.autocommand.autoparse", "xref": {"fqname": "setuptools._vendor.autocommand.autoparse.autoparse", "project": null}}, {"name": "setuptools._vendor.autocommand.smart_open", "xref": {"fqname": "setuptools._vendor.autocommand.autoparse.smart_open", "project": null}}]}, {"name": "setuptools._vendor.autocommand.autoasync", "documentation": ["Copyright 2014-2015 Nathan West", "This file is part of autocommand.", "autocommand is free software: you can redistribute it and/or modify", "it under the terms of the GNU Lesser General Public License as published by", "the Free Software Foundation, either version 3 of the License, or", "(at your option) any later version.", "autocommand is distributed in the hope that it will be useful,", "but WITHOUT ANY WARRANTY; without even the implied warranty of", "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "GNU Lesser General Public License for more details.", "You should have received a copy of the GNU Lesser General Public License", "along with autocommand.  If not, see <http://www.gnu.org/licenses/>."], "functions": [{"name": "setuptools._vendor.autocommand.autoasync._run_forever_coro", "asynchronous": true, "params": [{"name": "coro", "type": null, "default": null}, {"name": "args", "type": null, "default": null}, {"name": "kwargs", "type": null, "default": null}, {"name": "loop", "type": null, "default": null}], "returns": null, "documentation": ["This helper function launches an async main function that was tagged with\nforever=True. There are two possibilities:\n\n- The function is a normal function, which handles initializing the event\n  loop, which is then run forever\n- The function is a coroutine, which needs to be scheduled in the event\n  loop, which is then run forever\n  - There is also the possibility that the function is a normal function\n    wrapping a coroutine function\n\nThe function is therefore called unconditionally and scheduled in the event\nloop if the return value is a coroutine object.\n\nThe reason this is a separate function is to make absolutely sure that all\nthe objects created are garbage collected after all is said and done; we\ndo this to ensure that any exceptions raised in the tasks are collected\nASAP."]}, {"name": "setuptools._vendor.autocommand.autoasync.autoasync", "asynchronous": false, "params": [{"name": "coro", "type": null, "default": "..."}, {"name": "loop", "type": null, "default": "..."}, {"name": "forever", "type": null, "default": "..."}, {"name": "pass_loop", "type": null, "default": "..."}], "returns": null, "documentation": ["Convert an asyncio coroutine into a function which, when called, is\nevaluted in an event loop, and the return value returned. This is intented\nto make it easy to write entry points into asyncio coroutines, which\notherwise need to be explictly evaluted with an event loop's\nrun_until_complete.\n\nIf `loop` is given, it is used as the event loop to run the coro in. If it\nis None (the default), the loop is retreived using asyncio.get_event_loop.\nThis call is defered until the decorated function is called, so that\ncallers can install custom event loops or event loop policies after\n@autoasync is applied.\n\nIf `forever` is True, the loop is run forever after the decorated coroutine\nis finished. Use this for servers created with asyncio.start_server and the\nlike.\n\nIf `pass_loop` is True, the event loop object is passed into the coroutine\nas the `loop` kwarg when the wrapper function is called. In this case, the\nwrapper function's __signature__ is updated to remove this parameter, so\nthat autoparse can still be used on it without generating a parameter for\n`loop`.\n\nThis coroutine can be called with ( @autoasync(...) ) or without\n( @autoasync ) arguments.\n\nExamples:\n\n@autoasync\ndef get_file(host, port):\n    reader, writer = yield from asyncio.open_connection(host, port)\n    data = reader.read()\n    sys.stdout.write(data.decode())\n\nget_file(host, port)\n\n@autoasync(forever=True, pass_loop=True)\ndef server(host, port, loop):\n    yield_from loop.create_server(Proto, host, port)\n\nserver('localhost', 8899)"]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.autocommand.automain", "documentation": ["Copyright 2014-2015 Nathan West", "This file is part of autocommand.", "autocommand is free software: you can redistribute it and/or modify", "it under the terms of the GNU Lesser General Public License as published by", "the Free Software Foundation, either version 3 of the License, or", "(at your option) any later version.", "autocommand is distributed in the hope that it will be useful,", "but WITHOUT ANY WARRANTY; without even the implied warranty of", "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", "GNU Lesser General Public License for more details.", "You should have received a copy of the GNU Lesser General Public License", "along with autocommand.  If not, see <http://www.gnu.org/licenses/>."], "functions": [{"name": "setuptools._vendor.autocommand.automain.automain", "asynchronous": false, "params": [{"name": "module", "type": null, "default": null}, {"name": "args", "type": null, "default": "..."}, {"name": "kwargs", "type": null, "default": "..."}], "returns": null, "documentation": ["This decorator automatically invokes a function if the module is being run\nas the \"__main__\" module. Optionally, provide args or kwargs with which to\ncall the function. If `module` is \"__main__\", the function is called, and\nthe program is `sys.exit`ed with the return value. You can also pass `True`\nto cause the function to be called unconditionally. If the function is not\ncalled, it is returned unchanged by the decorator.\n\nUsage:\n\n@automain(__name__)  # Pass __name__ to check __name__==\"__main__\"\ndef main():\n    ...\n\nIf __name__ is \"__main__\" here, the main function is called, and then\nsys.exit called with the return value."]}], "variables": [], "classes": [{"name": "setuptools._vendor.autocommand.automain.AutomainRequiresModuleError", "bases": ["AutocommandError", "TypeError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._vendor.packaging.licenses", "documentation": ["######################################################################################", "Adapted from:", "https://github.com/pypa/hatch/blob/5352e44/backend/src/hatchling/licenses/parse.py", "MIT License", "Copyright (c) 2017-present Ofek Lev <oss@ofek.dev>", "Permission is hereby granted, free of charge, to any person obtaining a copy of this", "software and associated documentation files (the \"Software\"), to deal in the Software", "without restriction, including without limitation the rights to use, copy, modify,", "merge, publish, distribute, sublicense, and/or sell copies of the Software, and to", "permit persons to whom the Software is furnished to do so, subject to the following", "conditions:", "The above copyright notice and this permission notice shall be included in all copies", "or substantial portions of the Software.", "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,", "INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A", "PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT", "HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF", "CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE", "OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "With additional allowance of arbitrary `LicenseRef-` identifiers, not just", "`LicenseRef-Public-Domain` and `LicenseRef-Proprietary`.", "######################################################################################"], "functions": [{"name": "setuptools._vendor.packaging.licenses.canonicalize_license_expression", "asynchronous": false, "params": [{"name": "raw_license_expression", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "NormalizedLicenseExpression", "xref": {"fqname": "NormalizedLicenseExpression", "project": null}, "params": null}, "documentation": []}], "variables": [{"name": "setuptools._vendor.packaging.licenses.license_ref_allowed", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.licenses.NormalizedLicenseExpression", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.packaging.licenses.InvalidLicenseExpression", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Raised when a license-expression string is invalid\n\n```pycon\n>>> canonicalize_license_expression(\"invalid\")\nTraceback (most recent call last):\n    ...\npackaging.licenses.InvalidLicenseExpression: Invalid license expression: 'invalid'\n```\n"]}], "exports": [{"name": "setuptools._vendor.packaging.licenses.canonicalize_license_expression", "xref": {"fqname": "setuptools._vendor.packaging.licenses.canonicalize_license_expression", "project": null}}, {"name": "setuptools._vendor.packaging.licenses.InvalidLicenseExpression", "xref": {"fqname": "setuptools._vendor.packaging.licenses.InvalidLicenseExpression", "project": null}}, {"name": "setuptools._vendor.packaging.licenses.NormalizedLicenseExpression", "xref": {"fqname": "setuptools._vendor.packaging.licenses.NormalizedLicenseExpression", "project": null}}]}, {"name": "setuptools._vendor.packaging.requirements", "documentation": ["This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [], "variables": [], "classes": [{"name": "setuptools._vendor.packaging.requirements.InvalidRequirement", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An invalid requirement was found, users should refer to PEP 508."]}, {"name": "setuptools._vendor.packaging.requirements.Requirement", "bases": [], "methods": [{"name": "setuptools._vendor.packaging.requirements.Requirement.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requirement_string", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["TODO: Can we test whether something is contained within a requirement?", "If so how do we do that? Do we need to test against the _name_ of", "the thing as well as the version? What about the markers?", "TODO: Can we normalize the name and extra name?"]}, {"name": "setuptools._vendor.packaging.requirements.Requirement._iter_parts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.requirements.Requirement.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.requirements.Requirement.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.requirements.Requirement.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.requirements.Requirement.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Parse a requirement.\n\nParse a given requirement string into its parts, such as name, specifier,\nURL, and extras. Raises InvalidRequirement on a badly-formed requirement\nstring."]}], "exports": []}, {"name": "setuptools._vendor.packaging.licenses._spdx", "documentation": [], "functions": [], "variables": [{"name": "setuptools._vendor.packaging.licenses._spdx.VERSION", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.licenses._spdx.LICENSES", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "SPDXLicense", "xref": {"fqname": "setuptools._vendor.packaging.licenses._spdx.SPDXLicense", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.licenses._spdx.EXCEPTIONS", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "SPDXException", "xref": {"fqname": "setuptools._vendor.packaging.licenses._spdx.SPDXException", "project": null}, "params": null}]}, "documentation": []}], "classes": [{"name": "setuptools._vendor.packaging.licenses._spdx.SPDXLicense", "bases": ["TypedDict"], "methods": [], "class_variables": [{"name": "setuptools._vendor.packaging.licenses._spdx.SPDXLicense.id", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.licenses._spdx.SPDXLicense.deprecated", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.packaging.licenses._spdx.SPDXException", "bases": ["TypedDict"], "methods": [], "class_variables": [{"name": "setuptools._vendor.packaging.licenses._spdx.SPDXException.id", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.licenses._spdx.SPDXException.deprecated", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._vendor.packaging.tags", "documentation": ["This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [{"name": "setuptools._vendor.packaging.tags.parse_tag", "asynchronous": false, "params": [{"name": "tag", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "frozenset", "xref": {"fqname": "functions.frozenset", "project": "--std--"}, "params": [{"name": "Tag", "xref": {"fqname": "setuptools._vendor.packaging.tags.Tag", "project": null}, "params": null}]}, "documentation": ["Parses the provided tag (e.g. `py3-none-any`) into a frozenset of Tag instances.\n\nReturning a set is required due to the possibility that the tag is a\ncompressed tag set."]}, {"name": "setuptools._vendor.packaging.tags._get_config_var", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "int | str | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.tags._normalize_string", "asynchronous": false, "params": [{"name": "string", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.tags._is_threaded_cpython", "asynchronous": false, "params": [{"name": "abis", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Determine if the ABI corresponds to a threaded (`--disable-gil`) build.\n\nThe threaded builds are indicated by a \"t\" in the abiflags."]}, {"name": "setuptools._vendor.packaging.tags._abi3_applies", "asynchronous": false, "params": [{"name": "python_version", "type": {"name": "PythonVersion", "xref": {"fqname": "PythonVersion", "project": null}, "params": null}, "default": null}, {"name": "threading", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Determine if the Python version supports abi3.\n\nPEP 384 was first implemented in Python 3.2. The threaded (`--disable-gil`)\nbuilds do not support abi3."]}, {"name": "setuptools._vendor.packaging.tags._cpython_abis", "asynchronous": false, "params": [{"name": "py_version", "type": {"name": "PythonVersion", "xref": {"fqname": "PythonVersion", "project": null}, "params": null}, "default": null}, {"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.tags.cpython_tags", "asynchronous": false, "params": [{"name": "python_version", "type": {"name": "PythonVersion | None", "xref": null, "params": null}, "default": "..."}, {"name": "abis", "type": {"name": "Iterable[str] | None", "xref": null, "params": null}, "default": "..."}, {"name": "platforms", "type": {"name": "Iterable[str] | None", "xref": null, "params": null}, "default": "..."}, {"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Tag", "xref": {"fqname": "setuptools._vendor.packaging.tags.Tag", "project": null}, "params": null}]}, "documentation": ["Yields the tags for a CPython interpreter.\n\nThe tags consist of:\n- cp<python_version>-<abi>-<platform>\n- cp<python_version>-abi3-<platform>\n- cp<python_version>-none-<platform>\n- cp<less than python_version>-abi3-<platform>  # Older Python versions down to 3.2.\n\nIf python_version only specifies a major version then user-provided ABIs and\nthe 'none' ABItag will be used.\n\nIf 'abi3' or 'none' are specified in 'abis' then they will be yielded at\ntheir normal position and not at the beginning."]}, {"name": "setuptools._vendor.packaging.tags._generic_abi", "asynchronous": false, "params": [], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Return the ABI tag based on EXT_SUFFIX."]}, {"name": "setuptools._vendor.packaging.tags.generic_tags", "asynchronous": false, "params": [{"name": "interpreter", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "abis", "type": {"name": "Iterable[str] | None", "xref": null, "params": null}, "default": "..."}, {"name": "platforms", "type": {"name": "Iterable[str] | None", "xref": null, "params": null}, "default": "..."}, {"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Tag", "xref": {"fqname": "setuptools._vendor.packaging.tags.Tag", "project": null}, "params": null}]}, "documentation": ["Yields the tags for a generic interpreter.\n\nThe tags consist of:\n- <interpreter>-<abi>-<platform>\n\nThe \"none\" ABI will be added if it was not explicitly provided."]}, {"name": "setuptools._vendor.packaging.tags._py_interpreter_range", "asynchronous": false, "params": [{"name": "py_version", "type": {"name": "PythonVersion", "xref": {"fqname": "PythonVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Yields Python versions in descending order.\n\nAfter the latest version, the major-only version will be yielded, and then\nall previous versions of that major version."]}, {"name": "setuptools._vendor.packaging.tags.compatible_tags", "asynchronous": false, "params": [{"name": "python_version", "type": {"name": "PythonVersion | None", "xref": null, "params": null}, "default": "..."}, {"name": "interpreter", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "platforms", "type": {"name": "Iterable[str] | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Tag", "xref": {"fqname": "setuptools._vendor.packaging.tags.Tag", "project": null}, "params": null}]}, "documentation": ["Yields the sequence of tags that are compatible with a specific version of Python.\n\nThe tags consist of:\n- py*-none-<platform>\n- <interpreter>-none-any  # ... if `interpreter` is provided.\n- py*-none-any"]}, {"name": "setuptools._vendor.packaging.tags._mac_arch", "asynchronous": false, "params": [{"name": "arch", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "is_32bit", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.tags._mac_binary_formats", "asynchronous": false, "params": [{"name": "version", "type": {"name": "AppleVersion", "xref": {"fqname": "AppleVersion", "project": null}, "params": null}, "default": null}, {"name": "cpu_arch", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.tags.mac_platforms", "asynchronous": false, "params": [{"name": "version", "type": {"name": "AppleVersion | None", "xref": null, "params": null}, "default": "..."}, {"name": "arch", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Yields the platform tags for a macOS system.\n\nThe `version` parameter is a two-item tuple specifying the macOS version to\ngenerate platform tags for. The `arch` parameter is the CPU architecture to\ngenerate platform tags for. Both parameters default to the appropriate value\nfor the current system."]}, {"name": "setuptools._vendor.packaging.tags.ios_platforms", "asynchronous": false, "params": [{"name": "version", "type": {"name": "AppleVersion | None", "xref": null, "params": null}, "default": "..."}, {"name": "multiarch", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Yields the platform tags for an iOS system.\n\n```\nparam version\n\nA two-item tuple specifying the iOS version to generate\nplatform tags for. Defaults to the current iOS version.\n\nparam multiarch\n\nThe CPU architecture+ABI to generate platform tags for -\n(the value used by  e.g.,\n or ). Defaults to the current\nmultiarch value.\n```\n"]}, {"name": "setuptools._vendor.packaging.tags._linux_platforms", "asynchronous": false, "params": [{"name": "is_32bit", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.tags._generic_platforms", "asynchronous": false, "params": [], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.tags.platform_tags", "asynchronous": false, "params": [], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Provides the platform tags for this installation."]}, {"name": "setuptools._vendor.packaging.tags.interpreter_name", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Returns the name of the running interpreter.\n\nSome implementations have a reserved, two-letter abbreviation which will\nbe returned when appropriate."]}, {"name": "setuptools._vendor.packaging.tags.interpreter_version", "asynchronous": false, "params": [{"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Returns the version of the running interpreter."]}, {"name": "setuptools._vendor.packaging.tags._version_nodot", "asynchronous": false, "params": [{"name": "version", "type": {"name": "PythonVersion", "xref": {"fqname": "PythonVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.tags.sys_tags", "asynchronous": false, "params": [{"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Tag", "xref": {"fqname": "setuptools._vendor.packaging.tags.Tag", "project": null}, "params": null}]}, "documentation": ["Returns the sequence of tag triples for the running interpreter.\n\nThe order of the sequence corresponds to priority order for the\ninterpreter, from most to least important."]}], "variables": [{"name": "setuptools._vendor.packaging.tags.logger", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.tags.PythonVersion", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.tags.AppleVersion", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.tags.INTERPRETER_SHORT_NAMES", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.tags._32_BIT_INTERPRETER", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.packaging.tags.Tag", "bases": [], "methods": [{"name": "setuptools._vendor.packaging.tags.Tag.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "interpreter", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "abi", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "platform", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.tags.Tag.interpreter", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.tags.Tag.abi", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.tags.Tag.platform", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.tags.Tag.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.tags.Tag.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.tags.Tag.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.tags.Tag.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.packaging.tags.Tag.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A representation of the tag triple for a wheel.\n\nInstances are considered immutable and thus are hashable. Equality checking\nis also supported."]}], "exports": []}, {"name": "setuptools._vendor.packaging._manylinux", "documentation": [], "functions": [{"name": "setuptools._vendor.packaging._manylinux._parse_elf", "asynchronous": false, "params": [{"name": "path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Generator", "xref": {"fqname": "typing.Generator", "project": "--std--"}, "params": [{"name": "ELFFile | None", "xref": null, "params": null}, {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}]}, "documentation": ["`os.PathLike` not a generic type until Python 3.9, so sticking with `str`", "as the type for `path` until then."]}, {"name": "setuptools._vendor.packaging._manylinux._is_linux_armhf", "asynchronous": false, "params": [{"name": "executable", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._manylinux._is_linux_i686", "asynchronous": false, "params": [{"name": "executable", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._manylinux._have_compatible_abi", "asynchronous": false, "params": [{"name": "executable", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "archs", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._manylinux._glibc_version_string_confstr", "asynchronous": false, "params": [], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["Primary implementation of glibc_version_string using os.confstr."]}, {"name": "setuptools._vendor.packaging._manylinux._glibc_version_string_ctypes", "asynchronous": false, "params": [], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["Fallback implementation of glibc_version_string using ctypes."]}, {"name": "setuptools._vendor.packaging._manylinux._glibc_version_string", "asynchronous": false, "params": [], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["Returns glibc version string, or None if not using glibc."]}, {"name": "setuptools._vendor.packaging._manylinux._parse_glibc_version", "asynchronous": false, "params": [{"name": "version_str", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "documentation": ["Parse glibc version.\n\nWe use a regexp instead of str.split because we want to discard any\nrandom junk that might come after the minor version -- this might happen\nin patched/forked versions of glibc (e.g. Linaro's version of glibc\nuses version strings like \"2.20-2014.11\"). See gh-3588."]}, {"name": "setuptools._vendor.packaging._manylinux._get_glibc_version", "asynchronous": false, "params": [], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging._manylinux._is_compatible", "asynchronous": false, "params": [{"name": "arch", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "version", "type": {"name": "_GLibCVersion", "xref": {"fqname": "setuptools._vendor.packaging._manylinux._GLibCVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["From PEP 513, PEP 600"]}, {"name": "setuptools._vendor.packaging._manylinux.platform_tags", "asynchronous": false, "params": [{"name": "archs", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Generate manylinux tags compatible to the current platform.\n\n```\nparam archs\n\nSequence of compatible architectures.\nThe first one shall be the closest to the actual architecture and be the part of\nplatform tag after the linux_ prefix, e.g. x86_64.\nThe linux_ prefix is assumed as a prerequisite for the current platform to\nbe manylinux-compatible.\n\nreturns\n\nAn iterator of compatible manylinux tags.\n```\n"]}], "variables": [{"name": "setuptools._vendor.packaging._manylinux.EF_ARM_ABIMASK", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging._manylinux.EF_ARM_ABI_VER5", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging._manylinux.EF_ARM_ABI_FLOAT_HARD", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging._manylinux._LAST_GLIBC_MINOR", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging._manylinux._LEGACY_MANYLINUX_MAP", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.packaging._manylinux._GLibCVersion", "bases": ["NamedTuple"], "methods": [], "class_variables": [{"name": "setuptools._vendor.packaging._manylinux._GLibCVersion.major", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._manylinux._GLibCVersion.minor", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._vendor.packaging._structures", "documentation": ["This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [], "variables": [{"name": "setuptools._vendor.packaging._structures.Infinity", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging._structures.NegativeInfinity", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.packaging._structures.InfinityType", "bases": [], "methods": [{"name": "setuptools._vendor.packaging._structures.InfinityType.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._structures.InfinityType.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._structures.InfinityType.__lt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._structures.InfinityType.__le__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._structures.InfinityType.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._structures.InfinityType.__gt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._structures.InfinityType.__ge__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._structures.InfinityType.__neg__", "asynchronous": false, "params": [{"name": "self", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "NegativeInfinityType", "xref": {"fqname": "NegativeInfinityType", "project": null}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.packaging._structures.NegativeInfinityType", "bases": [], "methods": [{"name": "setuptools._vendor.packaging._structures.NegativeInfinityType.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._structures.NegativeInfinityType.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._structures.NegativeInfinityType.__lt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._structures.NegativeInfinityType.__le__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._structures.NegativeInfinityType.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._structures.NegativeInfinityType.__gt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._structures.NegativeInfinityType.__ge__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._structures.NegativeInfinityType.__neg__", "asynchronous": false, "params": [{"name": "self", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "InfinityType", "xref": {"fqname": "setuptools._vendor.packaging._structures.InfinityType", "project": null}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._vendor.packaging.markers", "documentation": ["This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [{"name": "setuptools._vendor.packaging.markers._normalize_extra_values", "asynchronous": false, "params": [{"name": "results", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": ["Normalize extra values."]}, {"name": "setuptools._vendor.packaging.markers._format_marker", "asynchronous": false, "params": [{"name": "marker", "type": {"name": "list[str] | MarkerAtom | str", "xref": null, "params": null}, "default": null}, {"name": "first", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.markers._eval_op", "asynchronous": false, "params": [{"name": "lhs", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "op", "type": {"name": "Op", "xref": {"fqname": "setuptools._vendor.packaging.markers._parser.Op", "project": null}, "params": null}, "default": null}, {"name": "rhs", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.markers._normalize", "asynchronous": false, "params": [{"name": "*values", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "key", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.markers._evaluate_markers", "asynchronous": false, "params": [{"name": "markers", "type": {"name": "MarkerList", "xref": {"fqname": "setuptools._vendor.packaging.markers._parser.MarkerList", "project": null}, "params": null}, "default": null}, {"name": "environment", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.markers.format_full_version", "asynchronous": false, "params": [{"name": "info", "type": {"name": "sys._version_info", "xref": {"fqname": "sys._version_info", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.markers.default_environment", "asynchronous": false, "params": [], "returns": {"name": "Environment", "xref": {"fqname": "setuptools._vendor.packaging.markers.Environment", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.markers._repair_python_full_version", "asynchronous": false, "params": [{"name": "env", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Work around platform.python_version() returning something that is not PEP 440\ncompliant for non-tagged Python builds."]}], "variables": [{"name": "setuptools._vendor.packaging.markers.Operator", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.markers._operators", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Operator", "xref": {"fqname": "Operator", "project": null}, "params": null}]}, "documentation": []}], "classes": [{"name": "setuptools._vendor.packaging.markers.InvalidMarker", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An invalid marker was found, users should refer to PEP 508."]}, {"name": "setuptools._vendor.packaging.markers.UndefinedComparison", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An invalid operation was attempted on a value that doesn't support it."]}, {"name": "setuptools._vendor.packaging.markers.UndefinedEnvironmentName", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A name was attempted to be used that does not exist inside of the\nenvironment."]}, {"name": "setuptools._vendor.packaging.markers.Environment", "bases": ["TypedDict"], "methods": [], "class_variables": [{"name": "setuptools._vendor.packaging.markers.Environment.implementation_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The implementation's identifier, e.g. `'cpython'`.\n"]}, {"name": "setuptools._vendor.packaging.markers.Environment.implementation_version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The implementation's version, e.g. `'3.13.0a2'` for CPython 3.13.0a2, or\n`'7.3.13'` for PyPy3.10 v7.3.13.\n"]}, {"name": "setuptools._vendor.packaging.markers.Environment.os_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The value of {py:data}`os.name`. The name of the operating system dependent module\nimported, e.g. `'posix'`.\n"]}, {"name": "setuptools._vendor.packaging.markers.Environment.platform_machine", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Returns the machine type, e.g. `'i386'`.\n\nAn empty string if the value cannot be determined.\n"]}, {"name": "setuptools._vendor.packaging.markers.Environment.platform_release", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The system's release, e.g. `'2.2.0'` or `'NT'`.\n\nAn empty string if the value cannot be determined.\n"]}, {"name": "setuptools._vendor.packaging.markers.Environment.platform_system", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The system/OS name, e.g. `'Linux'`, `'Windows'` or `'Java'`.\n\nAn empty string if the value cannot be determined.\n"]}, {"name": "setuptools._vendor.packaging.markers.Environment.platform_version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The system's release version, e.g. `'#3 on degas'`.\n\nAn empty string if the value cannot be determined.\n"]}, {"name": "setuptools._vendor.packaging.markers.Environment.python_full_version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The Python version as string `'major.minor.patchlevel'`.\n\nNote that unlike the Python {py:data}`sys.version`, this value will always include\nthe patchlevel (it defaults to 0).\n"]}, {"name": "setuptools._vendor.packaging.markers.Environment.platform_python_implementation", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A string identifying the Python implementation, e.g. `'CPython'`.\n"]}, {"name": "setuptools._vendor.packaging.markers.Environment.python_version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The Python version as string `'major.minor'`.\n"]}, {"name": "setuptools._vendor.packaging.markers.Environment.sys_platform", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["This string contains a platform identifier that can be used to append\nplatform-specific components to {py:data}`sys.path`, for instance.\n\nFor Unix systems, except on Linux and AIX, this is the lowercased OS name as\nreturned by `uname -s` with the first part of the version as returned by\n`uname -r` appended, e.g. `'sunos5'` or `'freebsd8'`, at the time when Python\nwas built.\n"]}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.packaging.markers.Marker", "bases": [], "methods": [{"name": "setuptools._vendor.packaging.markers.Marker.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "marker", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.markers.Marker.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.markers.Marker.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.markers.Marker.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.markers.Marker.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.markers.Marker.evaluate", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "environment", "type": {"name": "dict[str, str] | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Evaluate a marker.\n\nReturn the boolean from evaluating the given marker against the\nenvironment. environment is an optional argument to override all or\npart of the determined environment.\n\nThe environment is determined from the current Python process."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": [{"name": "setuptools._vendor.packaging.markers.default_environment", "xref": {"fqname": "setuptools._vendor.packaging.markers.default_environment", "project": null}}, {"name": "setuptools._vendor.packaging.markers.InvalidMarker", "xref": {"fqname": "setuptools._vendor.packaging.markers.InvalidMarker", "project": null}}, {"name": "setuptools._vendor.packaging.markers.Marker", "xref": {"fqname": "setuptools._vendor.packaging.markers.Marker", "project": null}}, {"name": "setuptools._vendor.packaging.markers.UndefinedComparison", "xref": {"fqname": "setuptools._vendor.packaging.markers.UndefinedComparison", "project": null}}, {"name": "setuptools._vendor.packaging.markers.UndefinedEnvironmentName", "xref": {"fqname": "setuptools._vendor.packaging.markers.UndefinedEnvironmentName", "project": null}}]}, {"name": "setuptools._vendor.packaging._elffile", "documentation": ["ELF file parser.\n\nThis provides a class `ELFFile` that parses an ELF executable in a similar\ninterface to `ZipFile`. Only the read interface is implemented.\n\nBased on: <https://gist.github.com/lyssdod/f51579ae8d93c8657a5564aefc2ffbca>\nELF header: <https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html>\n"], "functions": [], "variables": [], "classes": [{"name": "setuptools._vendor.packaging._elffile.ELFInvalid", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.packaging._elffile.EIClass", "bases": ["enum.IntEnum"], "methods": [], "class_variables": [{"name": "setuptools._vendor.packaging._elffile.EIClass.C32", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging._elffile.EIClass.C64", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.packaging._elffile.EIData", "bases": ["enum.IntEnum"], "methods": [], "class_variables": [{"name": "setuptools._vendor.packaging._elffile.EIData.Lsb", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging._elffile.EIData.Msb", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.packaging._elffile.EMachine", "bases": ["enum.IntEnum"], "methods": [], "class_variables": [{"name": "setuptools._vendor.packaging._elffile.EMachine.I386", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging._elffile.EMachine.S390", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging._elffile.EMachine.Arm", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging._elffile.EMachine.X8664", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging._elffile.EMachine.AArc64", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.packaging._elffile.ELFFile", "bases": [], "methods": [{"name": "setuptools._vendor.packaging._elffile.ELFFile.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "f", "type": {"name": "IO", "xref": {"fqname": "typing.IO", "project": "--std--"}, "params": [{"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._elffile.ELFFile._read", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "fmt", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging._elffile.ELFFile.interpreter", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["The path recorded in the `PT_INTERP` section header.\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Representation of an ELF executable."]}], "exports": []}, {"name": "setuptools._vendor.more_itertools.recipes", "documentation": ["Imported from the recipes section of the itertools documentation.\n\nAll functions taken from the recipes section of the itertools library docs\n[^footnote-1].\nSome backward-compatible usability improvements have been made.\n\n[^footnote-1]: <http://docs.python.org/library/itertools.html#recipes>\n"], "functions": [{"name": "setuptools._vendor.more_itertools.recipes.take", "asynchronous": false, "params": [{"name": "n", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Return first *n* items of the iterable as a list.\n\n    >>> take(3, range(10))\n    [0, 1, 2]\n\nIf there are fewer than *n* items in the iterable, all of them are\nreturned.\n\n    >>> take(10, range(3))\n    [0, 1, 2]"]}, {"name": "setuptools._vendor.more_itertools.recipes.tabulate", "asynchronous": false, "params": [{"name": "function", "type": null, "default": null}, {"name": "start", "type": null, "default": "..."}], "returns": null, "documentation": ["Return an iterator over the results of `func(start)`,\n`func(start + 1)`, `func(start + 2)`...\n\n*func* should be a function that accepts one integer argument.\n\nIf *start* is not specified it defaults to 0. It will be incremented each\ntime the iterator is advanced.\n\n> ```pycon\n> >>> square = lambda x: x ** 2\n> >>> iterator = tabulate(square, -3)\n> >>> take(4, iterator)\n> [9, 4, 1, 0]\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.tail", "asynchronous": false, "params": [{"name": "n", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Return an iterator over the last *n* items of *iterable*.\n\n```pycon\n>>> t = tail(3, 'ABCDEFG')\n>>> list(t)\n['E', 'F', 'G']\n```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.consume", "asynchronous": false, "params": [{"name": "iterator", "type": null, "default": null}, {"name": "n", "type": null, "default": "..."}], "returns": null, "documentation": ["Advance *iterable* by *n* steps. If *n* is `None`, consume it\nentirely.\n\nEfficiently exhausts an iterator without returning values. Defaults to\nconsuming the whole iterator, but an optional second argument may be\nprovided to limit consumption.\n\n> ```pycon\n> >>> i = (x for x in range(10))\n> >>> next(i)\n> 0\n> >>> consume(i, 3)\n> >>> next(i)\n> 4\n> >>> consume(i)\n> >>> next(i)\n> Traceback (most recent call last):\n>   File \"<stdin>\", line 1, in <module>\n> StopIteration\n> ```\n\nIf the iterator has fewer items remaining than the provided limit, the\nwhole iterator will be consumed.\n\n> ```pycon\n> >>> i = (x for x in range(3))\n> >>> consume(i, 5)\n> >>> next(i)\n> Traceback (most recent call last):\n>   File \"<stdin>\", line 1, in <module>\n> StopIteration\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.nth", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": null}, {"name": "default", "type": null, "default": "..."}], "returns": null, "documentation": ["Returns the nth item or a default value.\n\n```pycon\n>>> l = range(10)\n>>> nth(l, 3)\n3\n>>> nth(l, 20, \"zebra\")\n'zebra'\n```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.all_equal", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "key", "type": null, "default": "..."}], "returns": null, "documentation": ["Returns `True` if all the elements are equal to each other.\n\n> ```pycon\n> >>> all_equal('aaaa')\n> True\n> >>> all_equal('aaab')\n> False\n> ```\n\nA function that accepts a single argument and returns a transformed version\nof each input item can be specified with *key*:\n\n> ```pycon\n> >>> all_equal('AaaA', key=str.casefold)\n> True\n> >>> all_equal([1, 2, 3], key=lambda x: x < 10)\n> True\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.quantify", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "pred", "type": null, "default": "..."}], "returns": null, "documentation": ["Return the how many times the predicate is true.\n\n```pycon\n>>> quantify([True, False, True])\n2\n```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.pad_none", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Returns the sequence of elements and then returns `None` indefinitely.\n\n> ```pycon\n> >>> take(5, pad_none(range(3)))\n> [0, 1, 2, None, None]\n> ```\n\nUseful for emulating the behavior of the built-in {func}`map` function.\n\nSee also {func}`padded`.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.ncycles", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": null}], "returns": null, "documentation": ["Returns the sequence elements *n* times\n\n```pycon\n>>> list(ncycles([\"a\", \"b\"], 3))\n['a', 'b', 'a', 'b', 'a', 'b']\n```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.dotproduct", "asynchronous": false, "params": [{"name": "vec1", "type": null, "default": null}, {"name": "vec2", "type": null, "default": null}], "returns": null, "documentation": ["Returns the dot product of the two iterables.\n\n```pycon\n>>> dotproduct([10, 10], [20, 20])\n400\n```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.flatten", "asynchronous": false, "params": [{"name": "listOfLists", "type": null, "default": null}], "returns": null, "documentation": ["Return an iterator flattening one level of nesting in a list of lists.\n\n> ```pycon\n> >>> list(flatten([[0, 1], [2, 3]]))\n> [0, 1, 2, 3]\n> ```\n\nSee also {func}`collapse`, which can flatten multiple levels of nesting.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.repeatfunc", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}, {"name": "times", "type": null, "default": "..."}, {"name": "*args", "type": null, "default": null}], "returns": null, "documentation": ["Call *func* with *args* repeatedly, returning an iterable over the\nresults.\n\nIf *times* is specified, the iterable will terminate after that many\nrepetitions:\n\n> ```pycon\n> >>> from operator import add\n> >>> times = 4\n> >>> args = 3, 5\n> >>> list(repeatfunc(add, times, *args))\n> [8, 8, 8, 8]\n> ```\n\nIf *times* is `None` the iterable will not terminate:\n\n> ```pycon\n> >>> from random import randrange\n> >>> times = None\n> >>> args = 1, 11\n> >>> take(6, repeatfunc(randrange, times, *args))  # doctest:+SKIP\n> [2, 4, 8, 1, 8, 4]\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes._pairwise", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Returns an iterator of paired items, overlapping, from the original\n\n```pycon\n>>> take(4, pairwise(count()))\n[(0, 1), (1, 2), (2, 3), (3, 4)]\n```\n\nOn Python 3.10 and above, this is an alias for {func}`itertools.pairwise`.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.pairwise", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.recipes._zip_equal_generator", "asynchronous": false, "params": [{"name": "iterables", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.recipes._zip_equal", "asynchronous": false, "params": [{"name": "*iterables", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.recipes.grouper", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": null}, {"name": "incomplete", "type": null, "default": "..."}, {"name": "fillvalue", "type": null, "default": "..."}], "returns": null, "documentation": ["Group elements from *iterable* into fixed-length groups of length *n*.\n\n```pycon\n>>> list(grouper('ABCDEF', 3))\n[('A', 'B', 'C'), ('D', 'E', 'F')]\n```\n\nThe keyword arguments *incomplete* and *fillvalue* control what happens for\niterables whose length is not a multiple of *n*.\n\nWhen *incomplete* is `'fill'`, the last group will contain instances of\n*fillvalue*.\n\n```pycon\n>>> list(grouper('ABCDEFG', 3, incomplete='fill', fillvalue='x'))\n[('A', 'B', 'C'), ('D', 'E', 'F'), ('G', 'x', 'x')]\n```\n\nWhen *incomplete* is `'ignore'`, the last group will not be emitted.\n\n```pycon\n>>> list(grouper('ABCDEFG', 3, incomplete='ignore', fillvalue='x'))\n[('A', 'B', 'C'), ('D', 'E', 'F')]\n```\n\nWhen *incomplete* is `'strict'`, a subclass of `ValueError` will be raised.\n\n```pycon\n>>> it = grouper('ABCDEFG', 3, incomplete='strict')\n>>> list(it)  # doctest: +IGNORE_EXCEPTION_DETAIL\nTraceback (most recent call last):\n...\nUnequalIterablesError\n```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.roundrobin", "asynchronous": false, "params": [{"name": "*iterables", "type": null, "default": null}], "returns": null, "documentation": ["Yields an item from each iterable, alternating between them.\n\n> ```pycon\n> >>> list(roundrobin('ABC', 'D', 'EF'))\n> ['A', 'D', 'E', 'B', 'F', 'C']\n> ```\n\nThis function produces the same output as {func}`interleave_longest`, but\nmay perform better for some inputs (in particular when the number of\niterables is small).\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.partition", "asynchronous": false, "params": [{"name": "pred", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Returns a 2-tuple of iterables derived from the input iterable.\nThe first yields the items that have `pred(item) == False`.\nThe second yields the items that have `pred(item) == True`.\n\n> ```pycon\n> >>> is_odd = lambda x: x % 2 != 0\n> >>> iterable = range(10)\n> >>> even_items, odd_items = partition(is_odd, iterable)\n> >>> list(even_items), list(odd_items)\n> ([0, 2, 4, 6, 8], [1, 3, 5, 7, 9])\n> ```\n\nIf *pred* is None, {func}`bool` is used.\n\n> ```pycon\n> >>> iterable = [0, 1, False, True, '', ' ']\n> >>> false_items, true_items = partition(None, iterable)\n> >>> list(false_items), list(true_items)\n> ([0, False, ''], [1, True, ' '])\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.powerset", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Yields all possible subsets of the iterable.\n\n> ```pycon\n> >>> list(powerset([1, 2, 3]))\n> [(), (1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)]\n> ```\n\n{func}`powerset` will operate on iterables that aren't {class}`set`\ninstances, so repeated elements in the input will produce repeated elements\nin the output.\n\n> ```pycon\n> >>> seq = [1, 1, 0]\n> >>> list(powerset(seq))\n> [(), (1,), (1,), (0,), (1, 1), (1, 0), (1, 0), (1, 1, 0)]\n> ```\n\nFor a variant that efficiently yields actual {class}`set` instances, see\n{func}`powerset_of_sets`.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.unique_everseen", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "key", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield unique elements, preserving order.\n\n> ```pycon\n> >>> list(unique_everseen('AAAABBBCCDAABBB'))\n> ['A', 'B', 'C', 'D']\n> >>> list(unique_everseen('ABBCcAD', str.lower))\n> ['A', 'B', 'C', 'D']\n> ```\n\nSequences with a mix of hashable and unhashable items can be used.\nThe function will be slower (i.e., `O(n^2)`) for unhashable items.\n\nRemember that `list` objects are unhashable - you can use the *key*\nparameter to transform the list to a tuple (which is hashable) to\navoid a slowdown.\n\n> ```pycon\n> >>> iterable = ([1, 2], [2, 3], [1, 2])\n> >>> list(unique_everseen(iterable))  # Slow\n> [[1, 2], [2, 3]]\n> >>> list(unique_everseen(iterable, key=tuple))  # Faster\n> [[1, 2], [2, 3]]\n> ```\n\nSimilarly, you may want to convert unhashable `set` objects with\n`key=frozenset`. For `dict` objects,\n`key=lambda x: frozenset(x.items())` can be used.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.unique_justseen", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "key", "type": null, "default": "..."}], "returns": null, "documentation": ["Yields elements in order, ignoring serial duplicates\n\n```pycon\n>>> list(unique_justseen('AAAABBBCCDAABBB'))\n['A', 'B', 'C', 'D', 'A', 'B']\n>>> list(unique_justseen('ABBCcAD', str.lower))\n['A', 'B', 'C', 'A', 'D']\n```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.unique", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "key", "type": null, "default": "..."}, {"name": "reverse", "type": null, "default": "..."}], "returns": null, "documentation": ["Yields unique elements in sorted order.\n\n```pycon\n>>> list(unique([[1, 2], [3, 4], [1, 2]]))\n[[1, 2], [3, 4]]\n```\n\n*key* and *reverse* are passed to {func}`sorted`.\n\n```pycon\n>>> list(unique('ABBcCAD', str.casefold))\n['A', 'B', 'c', 'D']\n>>> list(unique('ABBcCAD', str.casefold, reverse=True))\n['D', 'c', 'B', 'A']\n```\n\nThe elements in *iterable* need not be hashable, but they must be\ncomparable for sorting to work.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.iter_except", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}, {"name": "exception", "type": null, "default": null}, {"name": "first", "type": null, "default": "..."}], "returns": null, "documentation": ["Yields results from a function repeatedly until an exception is raised.\n\nConverts a call-until-exception interface to an iterator interface.\nLike `iter(func, sentinel)`, but uses an exception instead of a sentinel\nto end the loop.\n\n> ```pycon\n> >>> l = [0, 1, 2]\n> >>> list(iter_except(l.pop, IndexError))\n> [2, 1, 0]\n> ```\n\nMultiple exceptions can be specified as a stopping condition:\n\n> ```pycon\n> >>> l = [1, 2, 3, '...', 4, 5, 6]\n> >>> list(iter_except(lambda: 1 + l.pop(), (IndexError, TypeError)))\n> [7, 6, 5]\n> >>> list(iter_except(lambda: 1 + l.pop(), (IndexError, TypeError)))\n> [4, 3, 2]\n> >>> list(iter_except(lambda: 1 + l.pop(), (IndexError, TypeError)))\n> []\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.first_true", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "default", "type": null, "default": "..."}, {"name": "pred", "type": null, "default": "..."}], "returns": null, "documentation": ["Returns the first true value in the iterable.\n\nIf no true value is found, returns *default*\n\nIf *pred* is not None, returns the first item for which\n`pred(item) == True` .\n\n> ```pycon\n> >>> first_true(range(10))\n> 1\n> >>> first_true(range(10), pred=lambda x: x > 5)\n> 6\n> >>> first_true(range(10), default='missing', pred=lambda x: x > 9)\n> 'missing'\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.random_product", "asynchronous": false, "params": [{"name": "*args", "type": null, "default": null}, {"name": "repeat", "type": null, "default": "..."}], "returns": null, "documentation": ["Draw an item at random from each of the input iterables.\n\n> ```pycon\n> >>> random_product('abc', range(4), 'XYZ')  # doctest:+SKIP\n> ('c', 3, 'Z')\n> ```\n\nIf *repeat* is provided as a keyword argument, that many items will be\ndrawn from each iterable.\n\n> ```pycon\n> >>> random_product('abcd', range(4), repeat=2)  # doctest:+SKIP\n> ('a', 2, 'd', 3)\n> ```\n\nThis equivalent to taking a random selection from\n`itertools.product(*args, **kwarg)`.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.random_permutation", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "r", "type": null, "default": "..."}], "returns": null, "documentation": ["Return a random *r* length permutation of the elements in *iterable*.\n\nIf *r* is not specified or is `None`, then *r* defaults to the length of\n*iterable*.\n\n> ```pycon\n> >>> random_permutation(range(5))  # doctest:+SKIP\n> (3, 4, 0, 1, 2)\n> ```\n\nThis equivalent to taking a random selection from\n`itertools.permutations(iterable, r)`.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.random_combination", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "r", "type": null, "default": null}], "returns": null, "documentation": ["Return a random *r* length subsequence of the elements in *iterable*.\n\n> ```pycon\n> >>> random_combination(range(5), 3)  # doctest:+SKIP\n> (2, 3, 4)\n> ```\n\nThis equivalent to taking a random selection from\n`itertools.combinations(iterable, r)`.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.random_combination_with_replacement", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "r", "type": null, "default": null}], "returns": null, "documentation": ["Return a random *r* length subsequence of elements in *iterable*,\nallowing individual elements to be repeated.\n\n> ```pycon\n> >>> random_combination_with_replacement(range(3), 5) # doctest:+SKIP\n> (0, 0, 1, 2, 2)\n> ```\n\nThis equivalent to taking a random selection from\n`itertools.combinations_with_replacement(iterable, r)`.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.nth_combination", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "r", "type": null, "default": null}, {"name": "index", "type": null, "default": null}], "returns": null, "documentation": ["Equivalent to `list(combinations(iterable, r))[index]`.\n\nThe subsequences of *iterable* that are of length *r* can be ordered\nlexicographically. {func}`nth_combination` computes the subsequence at\nsort position *index* directly, without computing the previous\nsubsequences.\n\n> ```pycon\n> >>> nth_combination(range(5), 3, 5)\n> (0, 3, 4)\n> ```\n\n`ValueError` will be raised If *r* is negative or greater than the length\nof *iterable*.\n`IndexError` will be raised if the given *index* is invalid.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.prepend", "asynchronous": false, "params": [{"name": "value", "type": null, "default": null}, {"name": "iterator", "type": null, "default": null}], "returns": null, "documentation": ["Yield *value*, followed by the elements in *iterator*.\n\n> ```pycon\n> >>> value = '0'\n> >>> iterator = ['1', '2', '3']\n> >>> list(prepend(value, iterator))\n> ['0', '1', '2', '3']\n> ```\n\nTo prepend multiple values, see {func}`itertools.chain`\nor {func}`value_chain`.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.convolve", "asynchronous": false, "params": [{"name": "signal", "type": null, "default": null}, {"name": "kernel", "type": null, "default": null}], "returns": null, "documentation": ["Convolve the iterable *signal* with the iterable *kernel*.\n\n    >>> signal = (1, 2, 3, 4, 5)\n    >>> kernel = [3, 2, 1]\n    >>> list(convolve(signal, kernel))\n    [3, 8, 14, 20, 26, 14, 5]\n\nNote: the input arguments are not interchangeable, as the *kernel*\nis immediately consumed and stored."]}, {"name": "setuptools._vendor.more_itertools.recipes.before_and_after", "asynchronous": false, "params": [{"name": "predicate", "type": null, "default": null}, {"name": "it", "type": null, "default": null}], "returns": null, "documentation": ["A variant of {func}`takewhile` that allows complete access to the\nremainder of the iterator.\n\n> ```pycon\n> >>> it = iter('ABCdEfGhI')\n> >>> all_upper, remainder = before_and_after(str.isupper, it)\n> >>> ''.join(all_upper)\n> 'ABC'\n> >>> ''.join(remainder) # takewhile() would lose the 'd'\n> 'dEfGhI'\n> ```\n\nNote that the first iterator must be fully consumed before the second\niterator can generate valid results.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.triplewise", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Return overlapping triplets from *iterable*.\n\n```pycon\n>>> list(triplewise('ABCDE'))\n[('A', 'B', 'C'), ('B', 'C', 'D'), ('C', 'D', 'E')]\n```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.sliding_window", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": null}], "returns": null, "documentation": ["Return a sliding window of width *n* over *iterable*.\n\n> ```pycon\n> >>> list(sliding_window(range(6), 4))\n> [(0, 1, 2, 3), (1, 2, 3, 4), (2, 3, 4, 5)]\n> ```\n\nIf *iterable* has fewer than *n* items, then nothing is yielded:\n\n> ```pycon\n> >>> list(sliding_window(range(3), 4))\n> []\n> ```\n\nFor a variant with more features, see {func}`windowed`.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.subslices", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Return all contiguous non-empty subslices of *iterable*.\n\n> ```pycon\n> >>> list(subslices('ABC'))\n> [['A'], ['A', 'B'], ['A', 'B', 'C'], ['B'], ['B', 'C'], ['C']]\n> ```\n\nThis is similar to {func}`substrings`, but emits items in a different\norder.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.polynomial_from_roots", "asynchronous": false, "params": [{"name": "roots", "type": null, "default": null}], "returns": null, "documentation": ["Compute a polynomial's coefficients from its roots.\n\n```pycon\n>>> roots = [5, -4, 3]  # (x - 5) * (x + 4) * (x - 3)\n>>> polynomial_from_roots(roots)  # x^3 - 4 * x^2 - 17 * x + 60\n[1, -4, -17, 60]\n```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.iter_index", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "value", "type": null, "default": null}, {"name": "start", "type": null, "default": "..."}, {"name": "stop", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield the index of each place in *iterable* that *value* occurs,\nbeginning with index *start* and ending before index *stop*.\n\n```pycon\n>>> list(iter_index('AABCADEAF', 'A'))\n[0, 1, 4, 7]\n>>> list(iter_index('AABCADEAF', 'A', 1))  # start index is inclusive\n[1, 4, 7]\n>>> list(iter_index('AABCADEAF', 'A', 1, 7))  # stop index is not inclusive\n[1, 4]\n```\n\nThe behavior for non-scalar *values* matches the built-in Python types.\n\n```pycon\n>>> list(iter_index('ABCDABCD', 'AB'))\n[0, 4]\n>>> list(iter_index([0, 1, 2, 3, 0, 1, 2, 3], [0, 1]))\n[]\n>>> list(iter_index([[0, 1], [2, 3], [0, 1], [2, 3]], [0, 1]))\n[0, 2]\n```\n\nSee {func}`locate` for a more general means of finding the indexes\nassociated with particular values.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.sieve", "asynchronous": false, "params": [{"name": "n", "type": null, "default": null}], "returns": null, "documentation": ["Yield the primes less than n.\n\n```pycon\n>>> list(sieve(30))\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes._batched", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": null}, {"name": "strict", "type": null, "default": "..."}], "returns": null, "documentation": ["Batch data into tuples of length *n*. If the number of items in\n*iterable* is not divisible by *n*:\n\\* The last batch will be shorter if *strict* is `False`.\n\\* {exc}`ValueError` will be raised if *strict* is `True`.\n\n```pycon\n>>> list(batched('ABCDEFG', 3))\n[('A', 'B', 'C'), ('D', 'E', 'F'), ('G',)]\n```\n\nOn Python 3.13 and above, this is an alias for {func}`itertools.batched`.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.batched", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": null}, {"name": "strict", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.recipes.transpose", "asynchronous": false, "params": [{"name": "it", "type": null, "default": null}], "returns": null, "documentation": ["Swap the rows and columns of the input matrix.\n\n```pycon\n>>> list(transpose([(1, 2, 3), (11, 22, 33)]))\n[(1, 11), (2, 22), (3, 33)]\n```\n\nThe caller should ensure that the dimensions of the input are compatible.\nIf the input is empty, no output will be produced.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.reshape", "asynchronous": false, "params": [{"name": "matrix", "type": null, "default": null}, {"name": "cols", "type": null, "default": null}], "returns": null, "documentation": ["Reshape the 2-D input *matrix* to have a column count given by *cols*.\n\n```pycon\n>>> matrix = [(0, 1), (2, 3), (4, 5)]\n>>> cols = 3\n>>> list(reshape(matrix, cols))\n[(0, 1, 2), (3, 4, 5)]\n```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.matmul", "asynchronous": false, "params": [{"name": "m1", "type": null, "default": null}, {"name": "m2", "type": null, "default": null}], "returns": null, "documentation": ["Multiply two matrices.\n\n```pycon\n>>> list(matmul([(7, 5), (3, 5)], [(2, 5), (7, 9)]))\n[(49, 80), (41, 60)]\n```\n\nThe caller should ensure that the dimensions of the input matrices are\ncompatible with each other.\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.factor", "asynchronous": false, "params": [{"name": "n", "type": null, "default": null}], "returns": null, "documentation": ["Yield the prime factors of n.\n\n```pycon\n>>> list(factor(360))\n[2, 2, 2, 3, 3, 5]\n```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.polynomial_eval", "asynchronous": false, "params": [{"name": "coefficients", "type": null, "default": null}, {"name": "x", "type": null, "default": null}], "returns": null, "documentation": ["Evaluate a polynomial at a specific value.\n\nExample: evaluating x^3 - 4 * x^2 - 17 * x + 60 at x = 2.5:\n\n```pycon\n>>> coefficients = [1, -4, -17, 60]\n>>> x = 2.5\n>>> polynomial_eval(coefficients, x)\n8.125\n```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.sum_of_squares", "asynchronous": false, "params": [{"name": "it", "type": null, "default": null}], "returns": null, "documentation": ["Return the sum of the squares of the input values.\n\n```pycon\n>>> sum_of_squares([10, 20, 30])\n1400\n```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.polynomial_derivative", "asynchronous": false, "params": [{"name": "coefficients", "type": null, "default": null}], "returns": null, "documentation": ["Compute the first derivative of a polynomial.\n\nExample: evaluating the derivative of x^3 - 4 * x^2 - 17 * x + 60\n\n```pycon\n>>> coefficients = [1, -4, -17, 60]\n>>> derivative_coefficients = polynomial_derivative(coefficients)\n>>> derivative_coefficients\n[3, -8, -17]\n```\n"]}, {"name": "setuptools._vendor.more_itertools.recipes.totient", "asynchronous": false, "params": [{"name": "n", "type": null, "default": null}], "returns": null, "documentation": ["Return the count of natural numbers up to *n* that are coprime with *n*.\n\n```pycon\n>>> totient(9)\n6\n>>> totient(12)\n4\n```\n"]}], "variables": [{"name": "setuptools._vendor.more_itertools.recipes._marker", "type": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.recipes._zip_strict", "type": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.recipes._zip_strict", "type": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.recipes._sumprod", "type": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.recipes.padnone", "type": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.recipes.pairwise", "type": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.recipes.pairwise.__doc__", "type": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.recipes.batched", "type": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.recipes.batched.__doc__", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.more_itertools.recipes.UnequalIterablesError", "bases": ["ValueError"], "methods": [{"name": "setuptools._vendor.more_itertools.recipes.UnequalIterablesError.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "details", "type": null, "default": "..."}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": [{"name": "setuptools._vendor.more_itertools.recipes.all_equal", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.all_equal", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.batched", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.batched", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.before_and_after", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.before_and_after", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.consume", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.consume", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.convolve", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.convolve", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.dotproduct", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.dotproduct", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.factor", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.factor", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.first_true", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.first_true", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.flatten", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.flatten", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.grouper", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.grouper", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.iter_except", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.iter_except", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.iter_index", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.iter_index", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.matmul", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.matmul", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.ncycles", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.ncycles", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.nth", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.nth", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.nth_combination", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.nth_combination", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.pad_none", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.pad_none", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.padnone", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.padnone", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.pairwise", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.pairwise", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.partition", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.partition", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.polynomial_derivative", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.polynomial_derivative", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.polynomial_eval", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.polynomial_eval", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.polynomial_from_roots", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.polynomial_from_roots", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.powerset", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.powerset", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.prepend", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.prepend", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.quantify", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.quantify", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.random_combination", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.random_combination", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.random_combination_with_replacement", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.random_combination_with_replacement", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.random_permutation", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.random_permutation", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.random_product", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.random_product", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.repeatfunc", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.repeatfunc", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.reshape", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.reshape", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.roundrobin", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.roundrobin", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.sieve", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.sieve", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.sliding_window", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.sliding_window", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.subslices", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.subslices", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.sum_of_squares", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.sum_of_squares", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.tabulate", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.tabulate", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.tail", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.tail", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.take", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.take", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.totient", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.totient", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.transpose", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.transpose", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.triplewise", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.triplewise", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.unique", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.unique", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.unique_everseen", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.unique_everseen", "project": null}}, {"name": "setuptools._vendor.more_itertools.recipes.unique_justseen", "xref": {"fqname": "setuptools._vendor.more_itertools.recipes.unique_justseen", "project": null}}]}, {"name": "setuptools._vendor.packaging._musllinux", "documentation": ["PEP 656 support.\n\nThis module implements logic to detect if the currently running Python is\nlinked against musl, and what musl version is used."], "functions": [{"name": "setuptools._vendor.packaging._musllinux._parse_musl_version", "asynchronous": false, "params": [{"name": "output", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "_MuslVersion | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._musllinux._get_musl_version", "asynchronous": false, "params": [{"name": "executable", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "_MuslVersion | None", "xref": null, "params": null}, "documentation": ["Detect currently-running musl runtime version.\n\nThis is done by checking the specified executable's dynamic linking\ninformation, and invoking the loader to parse its output for a version\nstring. If the loader is musl, the output would be something like:\n\n```\nmusl libc (x86_64)\nVersion 1.2.2\nDynamic Program Loader\n```\n"]}, {"name": "setuptools._vendor.packaging._musllinux.platform_tags", "asynchronous": false, "params": [{"name": "archs", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Generate musllinux tags compatible to the current platform.\n\n```\nparam archs\n\nSequence of compatible architectures.\nThe first one shall be the closest to the actual architecture and be the part of\nplatform tag after the linux_ prefix, e.g. x86_64.\nThe linux_ prefix is assumed as a prerequisite for the current platform to\nbe musllinux-compatible.\n\nreturns\n\nAn iterator of compatible musllinux tags.\n```\n"]}], "variables": [{"name": "setuptools._vendor.packaging._musllinux.plat", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.packaging._musllinux._MuslVersion", "bases": ["NamedTuple"], "methods": [], "class_variables": [{"name": "setuptools._vendor.packaging._musllinux._MuslVersion.major", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._musllinux._MuslVersion.minor", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._vendor.packaging._parser", "documentation": ["Handwritten parser of dependency specifiers.\n\nThe docstring for each __parse_* function contains EBNF-inspired grammar representing\nthe implementation."], "functions": [{"name": "setuptools._vendor.packaging._parser.parse_requirement", "asynchronous": false, "params": [{"name": "source", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "ParsedRequirement", "xref": {"fqname": "setuptools._vendor.packaging._parser.ParsedRequirement", "project": null}, "params": null}, "documentation": ["--------------------------------------------------------------------------------------", "Recursive descent parser for dependency specifier", "--------------------------------------------------------------------------------------"]}, {"name": "setuptools._vendor.packaging._parser._parse_requirement", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "ParsedRequirement", "xref": {"fqname": "setuptools._vendor.packaging._parser.ParsedRequirement", "project": null}, "params": null}, "documentation": ["requirement = WS? IDENTIFIER WS? extras WS? requirement_details"]}, {"name": "setuptools._vendor.packaging._parser._parse_requirement_details", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "MarkerList | None", "xref": null, "params": null}]}, "documentation": ["requirement_details = AT URL (WS requirement_marker?)?\n                    | specifier WS? (requirement_marker)?"]}, {"name": "setuptools._vendor.packaging._parser._parse_requirement_marker", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}, {"name": "span_start", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}, {"name": "after", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "MarkerList", "xref": {"fqname": "MarkerList", "project": null}, "params": null}, "documentation": ["requirement_marker = SEMICOLON marker WS?"]}, {"name": "setuptools._vendor.packaging._parser._parse_extras", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["extras = (LEFT_BRACKET wsp* extras_list? wsp* RIGHT_BRACKET)?"]}, {"name": "setuptools._vendor.packaging._parser._parse_extras_list", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["extras_list = identifier (wsp* ',' wsp* identifier)*"]}, {"name": "setuptools._vendor.packaging._parser._parse_specifier", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["specifier = LEFT_PARENTHESIS WS? version_many WS? RIGHT_PARENTHESIS\n          | WS? version_many WS?"]}, {"name": "setuptools._vendor.packaging._parser._parse_version_many", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["version_many = (SPECIFIER (WS? COMMA WS? SPECIFIER)*)?"]}, {"name": "setuptools._vendor.packaging._parser.parse_marker", "asynchronous": false, "params": [{"name": "source", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "MarkerList", "xref": {"fqname": "MarkerList", "project": null}, "params": null}, "documentation": ["--------------------------------------------------------------------------------------", "Recursive descent parser for marker expression", "--------------------------------------------------------------------------------------"]}, {"name": "setuptools._vendor.packaging._parser._parse_full_marker", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "MarkerList", "xref": {"fqname": "MarkerList", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._parser._parse_marker", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "MarkerList", "xref": {"fqname": "MarkerList", "project": null}, "params": null}, "documentation": ["marker = marker_atom (BOOLOP marker_atom)+"]}, {"name": "setuptools._vendor.packaging._parser._parse_marker_atom", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "MarkerAtom", "xref": {"fqname": "MarkerAtom", "project": null}, "params": null}, "documentation": ["marker_atom = WS? LEFT_PARENTHESIS WS? marker WS? RIGHT_PARENTHESIS WS?\n            | WS? marker_item WS?"]}, {"name": "setuptools._vendor.packaging._parser._parse_marker_item", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "MarkerItem", "xref": {"fqname": "MarkerItem", "project": null}, "params": null}, "documentation": ["marker_item = WS? marker_var WS? marker_op WS? marker_var WS?"]}, {"name": "setuptools._vendor.packaging._parser._parse_marker_var", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "MarkerVar", "xref": {"fqname": "MarkerVar", "project": null}, "params": null}, "documentation": ["marker_var = VARIABLE | QUOTED_STRING"]}, {"name": "setuptools._vendor.packaging._parser.process_env_var", "asynchronous": false, "params": [{"name": "env_var", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Variable", "xref": {"fqname": "setuptools._vendor.packaging._parser.Variable", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._parser.process_python_str", "asynchronous": false, "params": [{"name": "python_str", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Value", "xref": {"fqname": "setuptools._vendor.packaging._parser.Value", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._parser._parse_marker_op", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "Op", "xref": {"fqname": "setuptools._vendor.packaging._parser.Op", "project": null}, "params": null}, "documentation": ["marker_op = IN | NOT IN | OP"]}], "variables": [{"name": "setuptools._vendor.packaging._parser.MarkerVar", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging._parser.MarkerItem", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging._parser.MarkerAtom", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging._parser.MarkerList", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.packaging._parser.Node", "bases": [], "methods": [{"name": "setuptools._vendor.packaging._parser.Node.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._parser.Node.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._parser.Node.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._parser.Node.serialize", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.packaging._parser.Variable", "bases": ["Node"], "methods": [{"name": "setuptools._vendor.packaging._parser.Variable.serialize", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.packaging._parser.Value", "bases": ["Node"], "methods": [{"name": "setuptools._vendor.packaging._parser.Value.serialize", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.packaging._parser.Op", "bases": ["Node"], "methods": [{"name": "setuptools._vendor.packaging._parser.Op.serialize", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.packaging._parser.ParsedRequirement", "bases": ["NamedTuple"], "methods": [], "class_variables": [{"name": "setuptools._vendor.packaging._parser.ParsedRequirement.name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._parser.ParsedRequirement.url", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._parser.ParsedRequirement.extras", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging._parser.ParsedRequirement.specifier", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._parser.ParsedRequirement.marker", "type": {"name": "MarkerList | None", "xref": null, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._vendor.packaging", "documentation": ["This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [], "variables": [{"name": "setuptools._vendor.packaging.__title__", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.__summary__", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.__uri__", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.__version__", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.__author__", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.__email__", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.__license__", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.__copyright__", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._vendor.packaging.utils", "documentation": ["This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [{"name": "setuptools._vendor.packaging.utils.canonicalize_name", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "validate", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "NormalizedName", "xref": {"fqname": "NormalizedName", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.utils.is_normalized_name", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.utils.canonicalize_version", "asynchronous": false, "params": [{"name": "version", "type": {"name": "Version | str", "xref": null, "params": null}, "default": null}, {"name": "strip_trailing_zero", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return a canonical form of a version as a string.\n\n```pycon\n>>> canonicalize_version('1.0.1')\n'1.0.1'\n```\n\nPer PEP 625, versions may have multiple canonical forms, differing\nonly by trailing zeros.\n\n```pycon\n>>> canonicalize_version('1.0.0')\n'1'\n>>> canonicalize_version('1.0.0', strip_trailing_zero=False)\n'1.0.0'\n```\n\nInvalid versions are returned unaltered.\n\n```pycon\n>>> canonicalize_version('foo bar baz')\n'foo bar baz'\n```\n"]}, {"name": "setuptools._vendor.packaging.utils._", "asynchronous": false, "params": [{"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "strip_trailing_zero", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.utils.parse_wheel_filename", "asynchronous": false, "params": [{"name": "filename", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "NormalizedName", "xref": {"fqname": "NormalizedName", "project": null}, "params": null}, {"name": "Version", "xref": {"fqname": "setuptools._vendor.packaging.utils.version.Version", "project": null}, "params": null}, {"name": "BuildTag", "xref": {"fqname": "BuildTag", "project": null}, "params": null}, {"name": "frozenset", "xref": {"fqname": "functions.frozenset", "project": "--std--"}, "params": [{"name": "Tag", "xref": {"fqname": "setuptools._vendor.packaging.utils.tags.Tag", "project": null}, "params": null}]}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.utils.parse_sdist_filename", "asynchronous": false, "params": [{"name": "filename", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "NormalizedName", "xref": {"fqname": "NormalizedName", "project": null}, "params": null}, {"name": "Version", "xref": {"fqname": "setuptools._vendor.packaging.utils.version.Version", "project": null}, "params": null}]}, "documentation": []}], "variables": [{"name": "setuptools._vendor.packaging.utils.BuildTag", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.utils.NormalizedName", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.utils._validate_regex", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.utils._canonicalize_regex", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.utils._normalized_regex", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.utils._build_tag_regex", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.packaging.utils.InvalidName", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An invalid distribution name; users should refer to the packaging user guide."]}, {"name": "setuptools._vendor.packaging.utils.InvalidWheelFilename", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An invalid wheel filename was found, users should refer to PEP 427."]}, {"name": "setuptools._vendor.packaging.utils.InvalidSdistFilename", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An invalid sdist filename was found, users should refer to the packaging user guide."]}], "exports": []}, {"name": "setuptools._vendor.packaging._tokenizer", "documentation": [], "functions": [], "variables": [{"name": "setuptools._vendor.packaging._tokenizer.DEFAULT_RULES", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str | re.Pattern[str]", "xref": null, "params": null}]}, "documentation": []}], "classes": [{"name": "setuptools._vendor.packaging._tokenizer.Token", "bases": [], "methods": [], "class_variables": [{"name": "setuptools._vendor.packaging._tokenizer.Token.name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._tokenizer.Token.text", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._tokenizer.Token.position", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.packaging._tokenizer.ParserSyntaxError", "bases": ["Exception"], "methods": [{"name": "setuptools._vendor.packaging._tokenizer.ParserSyntaxError.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "message", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "source", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "span", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._tokenizer.ParserSyntaxError.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["The provided source text could not be parsed correctly."]}, {"name": "setuptools._vendor.packaging._tokenizer.Tokenizer", "bases": [], "methods": [{"name": "setuptools._vendor.packaging._tokenizer.Tokenizer.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "source", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "rules", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str | re.Pattern[str]", "xref": null, "params": null}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging._tokenizer.Tokenizer.consume", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Move beyond provided token name, if at current position."]}, {"name": "setuptools._vendor.packaging._tokenizer.Tokenizer.check", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "peek", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Check whether the next token has the provided name.\n\nBy default, if the check succeeds, the token *must* be read before\nanother check. If `peek` is set to `True`, the token is not loaded and\nwould need to be checked again."]}, {"name": "setuptools._vendor.packaging._tokenizer.Tokenizer.expect", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "expected", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Token", "xref": {"fqname": "setuptools._vendor.packaging._tokenizer.Token", "project": null}, "params": null}, "documentation": ["Expect a certain token name next, failing with a syntax error otherwise.\n\nThe token is *not* read."]}, {"name": "setuptools._vendor.packaging._tokenizer.Tokenizer.read", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Token", "xref": {"fqname": "setuptools._vendor.packaging._tokenizer.Token", "project": null}, "params": null}, "documentation": ["Consume the next token and return it."]}, {"name": "setuptools._vendor.packaging._tokenizer.Tokenizer.raise_syntax_error", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "message", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "span_start", "type": {"name": "int | None", "xref": null, "params": null}, "default": "..."}, {"name": "span_end", "type": {"name": "int | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "NoReturn", "xref": {"fqname": "typing.NoReturn", "project": "--std--"}, "params": null}, "documentation": ["Raise ParserSyntaxError at the given position."]}, {"name": "setuptools._vendor.packaging._tokenizer.Tokenizer.enclosing_tokens", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "open_token", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "close_token", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "around", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}]}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Context-sensitive token parsing.\n\nProvides methods to examine the input stream to check whether the next token\nmatches."]}], "exports": []}, {"name": "setuptools._vendor.packaging.version", "documentation": ["```\n.. testsetup::\n\n    from packaging.version import parse, Version\n```\n", "This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [{"name": "setuptools._vendor.packaging.version.parse", "asynchronous": false, "params": [{"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Version", "xref": {"fqname": "Version", "project": null}, "params": null}, "documentation": ["Parse the given version string.\n\n```pycon\n>>> parse('1.0.dev1')\n<Version('1.0.dev1')>\n```\n\n```\nparam version\n\nThe version string to parse.\n\nraises InvalidVersion\n\nWhen the version string is not a valid version.\n```\n"]}, {"name": "setuptools._vendor.packaging.version._parse_letter_version", "asynchronous": false, "params": [{"name": "letter", "type": {"name": "str | None", "xref": null, "params": null}, "default": null}, {"name": "number", "type": {"name": "str | bytes | SupportsInt | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "tuple[str, int] | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.version._parse_local_version", "asynchronous": false, "params": [{"name": "local", "type": {"name": "str | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "LocalType | None", "xref": null, "params": null}, "documentation": ["Takes a string like abc.1.twelve and turns it into (\"abc\", 1, \"twelve\")."]}, {"name": "setuptools._vendor.packaging.version._cmpkey", "asynchronous": false, "params": [{"name": "epoch", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}, {"name": "release", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "pre", "type": {"name": "tuple[str, int] | None", "xref": null, "params": null}, "default": null}, {"name": "post", "type": {"name": "tuple[str, int] | None", "xref": null, "params": null}, "default": null}, {"name": "dev", "type": {"name": "tuple[str, int] | None", "xref": null, "params": null}, "default": null}, {"name": "local", "type": {"name": "LocalType | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "CmpKey", "xref": {"fqname": "CmpKey", "project": null}, "params": null}, "documentation": []}], "variables": [{"name": "setuptools._vendor.packaging.version.LocalType", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.version.CmpPrePostDevType", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.version.CmpLocalType", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.version.CmpKey", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.version.VersionComparisonMethod", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.version._VERSION_PATTERN", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.version.VERSION_PATTERN", "type": null, "documentation": ["A string containing the regular expression used to match a valid version.\n\nThe pattern is not anchored at either end, and is intended for embedding in larger\nexpressions (for example, matching a version number as part of a file name). The\nregular expression should be compiled with the `re.VERBOSE` and `re.IGNORECASE`\nflags set.\n\n```\nmeta hide-value\n\n```\n"]}, {"name": "setuptools._vendor.packaging.version._local_version_separators", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.packaging.version._Version", "bases": ["NamedTuple"], "methods": [], "class_variables": [{"name": "setuptools._vendor.packaging.version._Version.epoch", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.version._Version.release", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.version._Version.dev", "type": {"name": "tuple[str, int] | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.version._Version.pre", "type": {"name": "tuple[str, int] | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.version._Version.post", "type": {"name": "tuple[str, int] | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.version._Version.local", "type": {"name": "LocalType | None", "xref": null, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.packaging.version.InvalidVersion", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Raised when a version string is not a valid version.\n\n```pycon\n>>> Version(\"invalid\")\nTraceback (most recent call last):\n    ...\npackaging.version.InvalidVersion: Invalid version: 'invalid'\n```\n"]}, {"name": "setuptools._vendor.packaging.version._BaseVersion", "bases": [], "methods": [{"name": "setuptools._vendor.packaging.version._BaseVersion.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.version._BaseVersion.__lt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "_BaseVersion", "xref": {"fqname": "setuptools._vendor.packaging.version._BaseVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Please keep the duplicated `isinstance` check", "in the six comparisons hereunder", "unless you find a way to avoid adding overhead function calls."]}, {"name": "setuptools._vendor.packaging.version._BaseVersion.__le__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "_BaseVersion", "xref": {"fqname": "setuptools._vendor.packaging.version._BaseVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.version._BaseVersion.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.version._BaseVersion.__ge__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "_BaseVersion", "xref": {"fqname": "setuptools._vendor.packaging.version._BaseVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.version._BaseVersion.__gt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "_BaseVersion", "xref": {"fqname": "setuptools._vendor.packaging.version._BaseVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.version._BaseVersion.__ne__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.packaging.version._BaseVersion._key", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.packaging.version.Version", "bases": ["_BaseVersion"], "methods": [{"name": "setuptools._vendor.packaging.version.Version.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Initialize a Version object.\n\n```\nparam version\n\nThe string representation of a version which will be parsed and normalized\nbefore use.\n\nraises InvalidVersion\n\nIf the version does not conform to PEP 440 in any way then this\nexception will be raised.\n```\n"]}, {"name": "setuptools._vendor.packaging.version.Version.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A representation of the Version that shows all internal state.\n\n```pycon\n>>> Version('1.0.0')\n<Version('1.0.0')>\n```\n"]}, {"name": "setuptools._vendor.packaging.version.Version.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A string representation of the version that can be round-tripped.\n\n```pycon\n>>> str(Version(\"1.0a5\"))\n'1.0a5'\n```\n"]}, {"name": "setuptools._vendor.packaging.version.Version.epoch", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["The epoch of the version.\n\n```pycon\n>>> Version(\"2.0.0\").epoch\n0\n>>> Version(\"1!2.0.0\").epoch\n1\n```\n"]}, {"name": "setuptools._vendor.packaging.version.Version.release", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": ["The components of the \"release\" segment of the version.\n\n```pycon\n>>> Version(\"1.2.3\").release\n(1, 2, 3)\n>>> Version(\"2.0.0\").release\n(2, 0, 0)\n>>> Version(\"1!2.0.0.post0\").release\n(2, 0, 0)\n```\n\nIncludes trailing zeroes but not the epoch or any pre-release / development /\npost-release suffixes.\n"]}, {"name": "setuptools._vendor.packaging.version.Version.pre", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "tuple[str, int] | None", "xref": null, "params": null}, "documentation": ["The pre-release segment of the version.\n\n```pycon\n>>> print(Version(\"1.2.3\").pre)\nNone\n>>> Version(\"1.2.3a1\").pre\n('a', 1)\n>>> Version(\"1.2.3b1\").pre\n('b', 1)\n>>> Version(\"1.2.3rc1\").pre\n('rc', 1)\n```\n"]}, {"name": "setuptools._vendor.packaging.version.Version.post", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int | None", "xref": null, "params": null}, "documentation": ["The post-release number of the version.\n\n```pycon\n>>> print(Version(\"1.2.3\").post)\nNone\n>>> Version(\"1.2.3.post1\").post\n1\n```\n"]}, {"name": "setuptools._vendor.packaging.version.Version.dev", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int | None", "xref": null, "params": null}, "documentation": ["The development number of the version.\n\n```pycon\n>>> print(Version(\"1.2.3\").dev)\nNone\n>>> Version(\"1.2.3.dev1\").dev\n1\n```\n"]}, {"name": "setuptools._vendor.packaging.version.Version.local", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["The local version segment of the version.\n\n```pycon\n>>> print(Version(\"1.2.3\").local)\nNone\n>>> Version(\"1.2.3+abc\").local\n'abc'\n```\n"]}, {"name": "setuptools._vendor.packaging.version.Version.public", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The public portion of the version.\n\n```pycon\n>>> Version(\"1.2.3\").public\n'1.2.3'\n>>> Version(\"1.2.3+abc\").public\n'1.2.3'\n>>> Version(\"1!1.2.3dev1+abc\").public\n'1!1.2.3.dev1'\n```\n"]}, {"name": "setuptools._vendor.packaging.version.Version.base_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The \"base version\" of the version.\n\n```pycon\n>>> Version(\"1.2.3\").base_version\n'1.2.3'\n>>> Version(\"1.2.3+abc\").base_version\n'1.2.3'\n>>> Version(\"1!1.2.3dev1+abc\").base_version\n'1!1.2.3'\n```\n\nThe \"base version\" is the public version of the project without any pre or post\nrelease markers.\n"]}, {"name": "setuptools._vendor.packaging.version.Version.is_prerelease", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Whether this version is a pre-release.\n\n```pycon\n>>> Version(\"1.2.3\").is_prerelease\nFalse\n>>> Version(\"1.2.3a1\").is_prerelease\nTrue\n>>> Version(\"1.2.3b1\").is_prerelease\nTrue\n>>> Version(\"1.2.3rc1\").is_prerelease\nTrue\n>>> Version(\"1.2.3dev1\").is_prerelease\nTrue\n```\n"]}, {"name": "setuptools._vendor.packaging.version.Version.is_postrelease", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Whether this version is a post-release.\n\n```pycon\n>>> Version(\"1.2.3\").is_postrelease\nFalse\n>>> Version(\"1.2.3.post1\").is_postrelease\nTrue\n```\n"]}, {"name": "setuptools._vendor.packaging.version.Version.is_devrelease", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Whether this version is a development release.\n\n```pycon\n>>> Version(\"1.2.3\").is_devrelease\nFalse\n>>> Version(\"1.2.3.dev1\").is_devrelease\nTrue\n```\n"]}, {"name": "setuptools._vendor.packaging.version.Version.major", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["The first item of {attr}`release` or `0` if unavailable.\n\n```pycon\n>>> Version(\"1.2.3\").major\n1\n```\n"]}, {"name": "setuptools._vendor.packaging.version.Version.minor", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["The second item of {attr}`release` or `0` if unavailable.\n\n```pycon\n>>> Version(\"1.2.3\").minor\n2\n>>> Version(\"1\").minor\n0\n```\n"]}, {"name": "setuptools._vendor.packaging.version.Version.micro", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["The third item of {attr}`release` or `0` if unavailable.\n\n```pycon\n>>> Version(\"1.2.3\").micro\n3\n>>> Version(\"1\").micro\n0\n```\n"]}], "class_variables": [{"name": "setuptools._vendor.packaging.version.Version._regex", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.version.Version._key", "type": {"name": "CmpKey", "xref": {"fqname": "CmpKey", "project": null}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["This class abstracts handling of a project's versions.\n\nA {class}`Version` instance is comparison aware and can be compared and\nsorted using the standard Python interfaces.\n\n```pycon\n>>> v1 = Version(\"1.0a5\")\n>>> v2 = Version(\"1.0\")\n>>> v1\n<Version('1.0a5')>\n>>> v2\n<Version('1.0')>\n>>> v1 < v2\nTrue\n>>> v1 == v2\nFalse\n>>> v1 > v2\nFalse\n>>> v1 >= v2\nFalse\n>>> v1 <= v2\nTrue\n```\n"]}, {"name": "setuptools._vendor.packaging.version._TrimmedRelease", "bases": ["Version"], "methods": [{"name": "setuptools._vendor.packaging.version._TrimmedRelease.release", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": ["Release segment without any trailing zeros.\n\n```pycon\n>>> _TrimmedRelease('1.0.0').release\n(1,)\n>>> _TrimmedRelease('0.0').release\n(0,)\n```\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": [{"name": "setuptools._vendor.packaging.version.InvalidVersion", "xref": {"fqname": "setuptools._vendor.packaging.version.InvalidVersion", "project": null}}, {"name": "setuptools._vendor.packaging.version.parse", "xref": {"fqname": "setuptools._vendor.packaging.version.parse", "project": null}}, {"name": "setuptools._vendor.packaging.version.Version", "xref": {"fqname": "setuptools._vendor.packaging.version.Version", "project": null}}, {"name": "setuptools._vendor.packaging.version.VERSION_PATTERN", "xref": {"fqname": "setuptools._vendor.packaging.version.VERSION_PATTERN", "project": null}}]}, {"name": "setuptools._vendor.packaging.specifiers", "documentation": ["```\n.. testsetup::\n\n    from packaging.specifiers import Specifier, SpecifierSet, InvalidSpecifier\n    from packaging.version import Version\n```\n", "This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [{"name": "setuptools._vendor.packaging.specifiers._coerce_version", "asynchronous": false, "params": [{"name": "version", "type": {"name": "UnparsedVersion", "xref": {"fqname": "UnparsedVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "Version", "xref": {"fqname": "setuptools._vendor.packaging.specifiers.version.Version", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers._version_split", "asynchronous": false, "params": [{"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Split version into components.\n\nThe split components are intended for version comparison. The logic does\nnot attempt to retain the original version string, so joining the\ncomponents back with {func}`_version_join` may not produce the original\nversion string.\n"]}, {"name": "setuptools._vendor.packaging.specifiers._version_join", "asynchronous": false, "params": [{"name": "components", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Join split version components into a version string.\n\nThis function assumes the input came from {func}`_version_split`, where the\nfirst component must be the epoch (either empty or numeric), and all other\ncomponents numeric.\n"]}, {"name": "setuptools._vendor.packaging.specifiers._is_not_suffix", "asynchronous": false, "params": [{"name": "segment", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers._pad_version", "asynchronous": false, "params": [{"name": "left", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "right", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": []}], "variables": [{"name": "setuptools._vendor.packaging.specifiers.UnparsedVersion", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.UnparsedVersionVar", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.CallableOperator", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers._prefix_regex", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.packaging.specifiers.InvalidSpecifier", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Raised when attempting to create a {class}`Specifier` with a specifier\nstring that is invalid.\n\n```pycon\n>>> Specifier(\"lolwat\")\nTraceback (most recent call last):\n    ...\npackaging.specifiers.InvalidSpecifier: Invalid specifier: 'lolwat'\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.BaseSpecifier", "bases": [], "methods": [{"name": "setuptools._vendor.packaging.specifiers.BaseSpecifier.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Returns the str representation of this Specifier-like object. This\nshould be representative of the Specifier itself."]}, {"name": "setuptools._vendor.packaging.specifiers.BaseSpecifier.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["Returns a hash value for this Specifier-like object."]}, {"name": "setuptools._vendor.packaging.specifiers.BaseSpecifier.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Returns a boolean representing whether or not the two Specifier-like\nobjects are equal.\n\n```\nparam other\n\nThe other object to check against.\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.BaseSpecifier.prereleases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool | None", "xref": null, "params": null}, "documentation": ["Whether or not pre-releases as a whole are allowed.\n\nThis can be set to either `True` or `False` to explicitly enable or disable\nprereleases or it can be set to `None` (the default) to use default semantics.\n"]}, {"name": "setuptools._vendor.packaging.specifiers.BaseSpecifier.prereleases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Setter for {attr}`prereleases`.\n\n```\nparam value\n\nThe value to set.\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.BaseSpecifier.contains", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "prereleases", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Determines if the given item is contained within this specifier."]}, {"name": "setuptools._vendor.packaging.specifiers.BaseSpecifier.filter", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "iterable", "type": {"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "UnparsedVersionVar", "xref": {"fqname": "UnparsedVersionVar", "project": null}, "params": null}]}, "default": null}, {"name": "prereleases", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "UnparsedVersionVar", "xref": {"fqname": "UnparsedVersionVar", "project": null}, "params": null}]}, "documentation": ["Takes an iterable of items and filters them so that only items which\nare contained within this specifier are allowed in it."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.Specifier", "bases": ["BaseSpecifier"], "methods": [{"name": "setuptools._vendor.packaging.specifiers.Specifier.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "prereleases", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Initialize a Specifier instance.\n\n```\nparam spec\n\nThe string representation of a specifier which will be parsed and\nnormalized before use.\n\nparam prereleases\n\nThis tells the specifier if it should accept prerelease versions if\napplicable or not. The default of None will autodetect it from the\ngiven specifiers.\n\nraises InvalidSpecifier\n\nIf the given specifier is invalid (i.e. bad syntax).\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.Specifier.prereleases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["https://github.com/python/mypy/pull/13475#pullrequestreview-1079784515"]}, {"name": "setuptools._vendor.packaging.specifiers.Specifier.prereleases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.Specifier.operator", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The operator of this specifier.\n\n```pycon\n>>> Specifier(\"==1.2.3\").operator\n'=='\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.Specifier.version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The version of this specifier.\n\n```pycon\n>>> Specifier(\"==1.2.3\").version\n'1.2.3'\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.Specifier.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A representation of the Specifier that shows all internal state.\n\n```pycon\n>>> Specifier('>=1.0.0')\n<Specifier('>=1.0.0')>\n>>> Specifier('>=1.0.0', prereleases=False)\n<Specifier('>=1.0.0', prereleases=False)>\n>>> Specifier('>=1.0.0', prereleases=True)\n<Specifier('>=1.0.0', prereleases=True)>\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.Specifier.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A string representation of the Specifier that can be round-tripped.\n\n```pycon\n>>> str(Specifier('>=1.0.0'))\n'>=1.0.0'\n>>> str(Specifier('>=1.0.0', prereleases=False))\n'>=1.0.0'\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.Specifier._canonical_spec", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.Specifier.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.Specifier.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Whether or not the two Specifier-like objects are equal.\n\n```\nparam other\n\nThe other object to check against.\n```\n\nThe value of {attr}`prereleases` is ignored.\n\n```pycon\n>>> Specifier(\"==1.2.3\") == Specifier(\"== 1.2.3.0\")\nTrue\n>>> (Specifier(\"==1.2.3\", prereleases=False) ==\n...  Specifier(\"==1.2.3\", prereleases=True))\nTrue\n>>> Specifier(\"==1.2.3\") == \"==1.2.3\"\nTrue\n>>> Specifier(\"==1.2.3\") == Specifier(\"==1.2.4\")\nFalse\n>>> Specifier(\"==1.2.3\") == Specifier(\"~=1.2.3\")\nFalse\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.Specifier._get_operator", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "op", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "CallableOperator", "xref": {"fqname": "CallableOperator", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.Specifier._compare_compatible", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "setuptools._vendor.packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.Specifier._compare_equal", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "setuptools._vendor.packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.Specifier._compare_not_equal", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "setuptools._vendor.packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.Specifier._compare_less_than_equal", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "setuptools._vendor.packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.Specifier._compare_greater_than_equal", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "setuptools._vendor.packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.Specifier._compare_less_than", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "setuptools._vendor.packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec_str", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.Specifier._compare_greater_than", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "setuptools._vendor.packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec_str", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.Specifier._compare_arbitrary", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "setuptools._vendor.packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.Specifier.__contains__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "str | Version", "xref": null, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Return whether or not the item is contained in this specifier.\n\n```\nparam item\n\nThe item to check for.\n```\n\nThis is used for the `in` operator and behaves the same as\n{meth}`contains` with no `prereleases` argument passed.\n\n```pycon\n>>> \"1.2.3\" in Specifier(\">=1.2.3\")\nTrue\n>>> Version(\"1.2.3\") in Specifier(\">=1.2.3\")\nTrue\n>>> \"1.0.0\" in Specifier(\">=1.2.3\")\nFalse\n>>> \"1.3.0a1\" in Specifier(\">=1.2.3\")\nFalse\n>>> \"1.3.0a1\" in Specifier(\">=1.2.3\", prereleases=True)\nTrue\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.Specifier.contains", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "UnparsedVersion", "xref": {"fqname": "UnparsedVersion", "project": null}, "params": null}, "default": null}, {"name": "prereleases", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Return whether or not the item is contained in this specifier.\n\n```\nparam item\n\nThe item to check for, which can be a version string or a\n instance.\n\nparam prereleases\n\nWhether or not to match prereleases with this Specifier. If set to\nNone (the default), it uses  to determine\nwhether or not prereleases are allowed.\n```\n\n```pycon\n>>> Specifier(\">=1.2.3\").contains(\"1.2.3\")\nTrue\n>>> Specifier(\">=1.2.3\").contains(Version(\"1.2.3\"))\nTrue\n>>> Specifier(\">=1.2.3\").contains(\"1.0.0\")\nFalse\n>>> Specifier(\">=1.2.3\").contains(\"1.3.0a1\")\nFalse\n>>> Specifier(\">=1.2.3\", prereleases=True).contains(\"1.3.0a1\")\nTrue\n>>> Specifier(\">=1.2.3\").contains(\"1.3.0a1\", prereleases=True)\nTrue\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.Specifier.filter", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "iterable", "type": {"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "UnparsedVersionVar", "xref": {"fqname": "UnparsedVersionVar", "project": null}, "params": null}]}, "default": null}, {"name": "prereleases", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "UnparsedVersionVar", "xref": {"fqname": "UnparsedVersionVar", "project": null}, "params": null}]}, "documentation": ["Filter items in the given iterable, that match the specifier.\n\n```\nparam iterable\n\nAn iterable that can contain version strings and  instances.\nThe items in the iterable will be filtered according to the specifier.\n\nparam prereleases\n\nWhether or not to allow prereleases in the returned iterator. If set to\nNone (the default), it will be intelligently decide whether to allow\nprereleases or not (based on the  attribute, and\nwhether the only versions matching are prereleases).\n```\n\nThis method is smarter than just `filter(Specifier().contains, [...])`\nbecause it implements the rule from {pep}`440` that a prerelease item\nSHOULD be accepted if no other versions match the given specifier.\n\n```pycon\n>>> list(Specifier(\">=1.2.3\").filter([\"1.2\", \"1.3\", \"1.5a1\"]))\n['1.3']\n>>> list(Specifier(\">=1.2.3\").filter([\"1.2\", \"1.2.3\", \"1.3\", Version(\"1.4\")]))\n['1.2.3', '1.3', <Version('1.4')>]\n>>> list(Specifier(\">=1.2.3\").filter([\"1.2\", \"1.5a1\"]))\n['1.5a1']\n>>> list(Specifier(\">=1.2.3\").filter([\"1.3\", \"1.5a1\"], prereleases=True))\n['1.3', '1.5a1']\n>>> list(Specifier(\">=1.2.3\", prereleases=True).filter([\"1.3\", \"1.5a1\"]))\n['1.3', '1.5a1']\n```\n"]}], "class_variables": [{"name": "setuptools._vendor.packaging.specifiers.Specifier._operator_regex_str", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.Specifier._version_regex_str", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.Specifier._regex", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.Specifier._operators", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["This class abstracts handling of version specifiers.\n\n:::{tip}\nIt is generally not required to instantiate this manually. You should instead\nprefer to work with {class}`SpecifierSet` instead, which can parse\ncomma-separated version specifiers (which is what package metadata contains).\n:::\n"]}, {"name": "setuptools._vendor.packaging.specifiers.SpecifierSet", "bases": ["BaseSpecifier"], "methods": [{"name": "setuptools._vendor.packaging.specifiers.SpecifierSet.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "specifiers", "type": {"name": "str | Iterable[Specifier]", "xref": null, "params": null}, "default": "..."}, {"name": "prereleases", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Initialize a SpecifierSet instance.\n\n```\nparam specifiers\n\nThe string representation of a specifier or a comma-separated list of\nspecifiers which will be parsed and normalized before use.\nMay also be an iterable of Specifier instances, which will be used\nas is.\n\nparam prereleases\n\nThis tells the SpecifierSet if it should accept prerelease versions if\napplicable or not. The default of None will autodetect it from the\ngiven specifiers.\n\nraises InvalidSpecifier\n\nIf the given specifiers are not parseable than this exception will be\nraised.\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.SpecifierSet.prereleases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.SpecifierSet.prereleases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.SpecifierSet.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A representation of the specifier set that shows all internal state.\n\nNote that the ordering of the individual specifiers within the set may not\nmatch the input string.\n\n```pycon\n>>> SpecifierSet('>=1.0.0,!=2.0.0')\n<SpecifierSet('!=2.0.0,>=1.0.0')>\n>>> SpecifierSet('>=1.0.0,!=2.0.0', prereleases=False)\n<SpecifierSet('!=2.0.0,>=1.0.0', prereleases=False)>\n>>> SpecifierSet('>=1.0.0,!=2.0.0', prereleases=True)\n<SpecifierSet('!=2.0.0,>=1.0.0', prereleases=True)>\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.SpecifierSet.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A string representation of the specifier set that can be round-tripped.\n\nNote that the ordering of the individual specifiers within the set may not\nmatch the input string.\n\n```pycon\n>>> str(SpecifierSet(\">=1.0.0,!=1.0.1\"))\n'!=1.0.1,>=1.0.0'\n>>> str(SpecifierSet(\">=1.0.0,!=1.0.1\", prereleases=False))\n'!=1.0.1,>=1.0.0'\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.SpecifierSet.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.specifiers.SpecifierSet.__and__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "SpecifierSet | str", "xref": null, "params": null}, "default": null}], "returns": {"name": "SpecifierSet", "xref": {"fqname": "setuptools._vendor.packaging.specifiers.SpecifierSet", "project": null}, "params": null}, "documentation": ["Return a SpecifierSet which is a combination of the two sets.\n\n```\nparam other\n\nThe other object to combine with.\n```\n\n```pycon\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\") & '<=2.0.0,!=2.0.1'\n<SpecifierSet('!=1.0.1,!=2.0.1,<=2.0.0,>=1.0.0')>\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\") & SpecifierSet('<=2.0.0,!=2.0.1')\n<SpecifierSet('!=1.0.1,!=2.0.1,<=2.0.0,>=1.0.0')>\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.SpecifierSet.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Whether or not the two SpecifierSet-like objects are equal.\n\n```\nparam other\n\nThe other object to check against.\n```\n\nThe value of {attr}`prereleases` is ignored.\n\n```pycon\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\") == SpecifierSet(\">=1.0.0,!=1.0.1\")\nTrue\n>>> (SpecifierSet(\">=1.0.0,!=1.0.1\", prereleases=False) ==\n...  SpecifierSet(\">=1.0.0,!=1.0.1\", prereleases=True))\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\") == \">=1.0.0,!=1.0.1\"\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\") == SpecifierSet(\">=1.0.0\")\nFalse\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\") == SpecifierSet(\">=1.0.0,!=1.0.2\")\nFalse\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.SpecifierSet.__len__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["Returns the number of specifiers in this specifier set."]}, {"name": "setuptools._vendor.packaging.specifiers.SpecifierSet.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Specifier", "xref": {"fqname": "setuptools._vendor.packaging.specifiers.Specifier", "project": null}, "params": null}]}, "documentation": ["Returns an iterator over all the underlying {class}`Specifier` instances\nin this specifier set.\n\n```pycon\n>>> sorted(SpecifierSet(\">=1.0.0,!=1.0.1\"), key=str)\n[<Specifier('!=1.0.1')>, <Specifier('>=1.0.0')>]\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.SpecifierSet.__contains__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "UnparsedVersion", "xref": {"fqname": "UnparsedVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Return whether or not the item is contained in this specifier.\n\n```\nparam item\n\nThe item to check for.\n```\n\nThis is used for the `in` operator and behaves the same as\n{meth}`contains` with no `prereleases` argument passed.\n\n```pycon\n>>> \"1.2.3\" in SpecifierSet(\">=1.0.0,!=1.0.1\")\nTrue\n>>> Version(\"1.2.3\") in SpecifierSet(\">=1.0.0,!=1.0.1\")\nTrue\n>>> \"1.0.1\" in SpecifierSet(\">=1.0.0,!=1.0.1\")\nFalse\n>>> \"1.3.0a1\" in SpecifierSet(\">=1.0.0,!=1.0.1\")\nFalse\n>>> \"1.3.0a1\" in SpecifierSet(\">=1.0.0,!=1.0.1\", prereleases=True)\nTrue\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.SpecifierSet.contains", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "UnparsedVersion", "xref": {"fqname": "UnparsedVersion", "project": null}, "params": null}, "default": null}, {"name": "prereleases", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}, {"name": "installed", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Return whether or not the item is contained in this SpecifierSet.\n\n```\nparam item\n\nThe item to check for, which can be a version string or a\n instance.\n\nparam prereleases\n\nWhether or not to match prereleases with this SpecifierSet. If set to\nNone (the default), it uses  to determine\nwhether or not prereleases are allowed.\n```\n\n```pycon\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.2.3\")\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(Version(\"1.2.3\"))\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.0.1\")\nFalse\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.3.0a1\")\nFalse\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\", prereleases=True).contains(\"1.3.0a1\")\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.3.0a1\", prereleases=True)\nTrue\n```\n"]}, {"name": "setuptools._vendor.packaging.specifiers.SpecifierSet.filter", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "iterable", "type": {"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "UnparsedVersionVar", "xref": {"fqname": "UnparsedVersionVar", "project": null}, "params": null}]}, "default": null}, {"name": "prereleases", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "UnparsedVersionVar", "xref": {"fqname": "UnparsedVersionVar", "project": null}, "params": null}]}, "documentation": ["Filter items in the given iterable, that match the specifiers in this set.\n\n```\nparam iterable\n\nAn iterable that can contain version strings and  instances.\nThe items in the iterable will be filtered according to the specifier.\n\nparam prereleases\n\nWhether or not to allow prereleases in the returned iterator. If set to\nNone (the default), it will be intelligently decide whether to allow\nprereleases or not (based on the  attribute, and\nwhether the only versions matching are prereleases).\n```\n\nThis method is smarter than just `filter(SpecifierSet(...).contains, [...])`\nbecause it implements the rule from {pep}`440` that a prerelease item\nSHOULD be accepted if no other versions match the given specifier.\n\n```pycon\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.2\", \"1.3\", \"1.5a1\"]))\n['1.3']\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.2\", \"1.3\", Version(\"1.4\")]))\n['1.3', <Version('1.4')>]\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.2\", \"1.5a1\"]))\n[]\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.3\", \"1.5a1\"], prereleases=True))\n['1.3', '1.5a1']\n>>> list(SpecifierSet(\">=1.2.3\", prereleases=True).filter([\"1.3\", \"1.5a1\"]))\n['1.3', '1.5a1']\n```\n\nAn \"empty\" SpecifierSet will filter items based on the presence of prerelease\nversions in the set.\n\n```pycon\n>>> list(SpecifierSet(\"\").filter([\"1.3\", \"1.5a1\"]))\n['1.3']\n>>> list(SpecifierSet(\"\").filter([\"1.5a1\"]))\n['1.5a1']\n>>> list(SpecifierSet(\"\", prereleases=True).filter([\"1.3\", \"1.5a1\"]))\n['1.3', '1.5a1']\n>>> list(SpecifierSet(\"\").filter([\"1.3\", \"1.5a1\"], prereleases=True))\n['1.3', '1.5a1']\n```\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["This class abstracts handling of a set of version specifiers.\n\nIt can be passed a single specifier (`>=3.0`), a comma-separated list of\nspecifiers (`>=3.0,!=3.1`), or no specifier at all.\n"]}], "exports": []}, {"name": "setuptools._vendor.importlib_metadata._collections", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools._vendor.importlib_metadata._collections.FreezableDefaultDict", "bases": ["collections.defaultdict"], "methods": [{"name": "setuptools._vendor.importlib_metadata._collections.FreezableDefaultDict.__missing__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._collections.FreezableDefaultDict.freeze", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Often it is desirable to prevent the mutation of\na default dict after its initial construction, such\nas to prevent mutation during iteration.\n\n```pycon\n>>> dd = FreezableDefaultDict(list)\n>>> dd[0].append('1')\n>>> dd.freeze()\n>>> dd[1]\n[]\n>>> len(dd)\n1\n```\n", "from jaraco.collections 3.3"]}, {"name": "setuptools._vendor.importlib_metadata._collections.Pair", "bases": [], "methods": [{"name": "setuptools._vendor.importlib_metadata._collections.Pair.parse", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "text", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._vendor.importlib_metadata._compat", "documentation": [], "functions": [{"name": "setuptools._vendor.importlib_metadata._compat.install", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": null, "documentation": ["Class decorator for installation on sys.meta_path.\n\nAdds the backport DistributionFinder to sys.meta_path and\nattempts to disable the finder functionality of the stdlib\nDistributionFinder."]}, {"name": "setuptools._vendor.importlib_metadata._compat.disable_stdlib_finder", "asynchronous": false, "params": [], "returns": null, "documentation": ["Give the backport primacy for discovering path-based distributions\nby monkey-patching the stdlib O_O.\n\nSee #91 for more background for rationale on this sketchy\nbehavior."]}, {"name": "setuptools._vendor.importlib_metadata._compat.pypy_partial", "asynchronous": false, "params": [{"name": "val", "type": null, "default": null}], "returns": null, "documentation": ["Adjust for variable stacklevel on partial under PyPy.\n\nWorkaround for #327."]}], "variables": [], "classes": [{"name": "setuptools._vendor.importlib_metadata._compat.NullFinder", "bases": [], "methods": [{"name": "setuptools._vendor.importlib_metadata._compat.NullFinder.find_spec", "asynchronous": false, "params": [{"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A \"Finder\" (aka \"MetaPathFinder\") that never finds any modules,\nbut may find distributions."]}], "exports": [{"name": "setuptools._vendor.importlib_metadata._compat.install", "xref": {"fqname": "setuptools._vendor.importlib_metadata._compat.install", "project": null}}, {"name": "setuptools._vendor.importlib_metadata._compat.NullFinder", "xref": {"fqname": "setuptools._vendor.importlib_metadata._compat.NullFinder", "project": null}}]}, {"name": "setuptools._vendor.importlib_metadata._text", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools._vendor.importlib_metadata._text.FoldedCase", "bases": ["str"], "methods": [{"name": "setuptools._vendor.importlib_metadata._text.FoldedCase.__lt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._text.FoldedCase.__gt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._text.FoldedCase.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._text.FoldedCase.__ne__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._text.FoldedCase.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._text.FoldedCase.__contains__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._text.FoldedCase.in_", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._text.FoldedCase.lower", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["cache lower since it's likely to be called frequently."]}, {"name": "setuptools._vendor.importlib_metadata._text.FoldedCase.index", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "sub", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._text.FoldedCase.split", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "splitter", "type": null, "default": "..."}, {"name": "maxsplit", "type": null, "default": "..."}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A case insensitive string class; behaves just like str\nexcept compares equal when the only variation is case.\n\n```pycon\n>>> s = FoldedCase('hello world')\n```\n\n```pycon\n>>> s == 'Hello World'\nTrue\n```\n\n```pycon\n>>> 'Hello World' == s\nTrue\n```\n\n```pycon\n>>> s != 'Hello World'\nFalse\n```\n\n```pycon\n>>> s.index('O')\n4\n```\n\n```pycon\n>>> s.split('O')\n['hell', ' w', 'rld']\n```\n\n```pycon\n>>> sorted(map(FoldedCase, ['GAMMA', 'alpha', 'Beta']))\n['alpha', 'Beta', 'GAMMA']\n```\n\nSequence membership is straightforward.\n\n```pycon\n>>> \"Hello World\" in [s]\nTrue\n>>> s in [\"Hello World\"]\nTrue\n```\n\nYou may test for set inclusion, but candidate and elements\nmust both be folded.\n\n```pycon\n>>> FoldedCase(\"Hello World\") in {s}\nTrue\n>>> s in {FoldedCase(\"Hello World\")}\nTrue\n```\n\nString inclusion works as long as the FoldedCase object\nis on the right.\n\n```pycon\n>>> \"hello\" in FoldedCase(\"Hello World\")\nTrue\n```\n\nBut not if the FoldedCase object is on the left:\n\n```pycon\n>>> FoldedCase('hello') in 'Hello World'\nFalse\n```\n\nIn that case, use [in]:\n\n```pycon\n>>> FoldedCase('hello').in_('Hello World')\nTrue\n```\n\n```pycon\n>>> FoldedCase('hello') > FoldedCase('Hello')\nFalse\n```\n", "from jaraco.text 3.5"]}], "exports": []}, {"name": "setuptools._vendor.packaging.metadata", "documentation": [], "functions": [{"name": "setuptools._vendor.packaging.metadata._parse_keywords", "asynchronous": false, "params": [{"name": "data", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Split a string of comma-separated keywords into a list of keywords."]}, {"name": "setuptools._vendor.packaging.metadata._parse_project_urls", "asynchronous": false, "params": [{"name": "data", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Parse a list of label/URL string pairings separated by a comma."]}, {"name": "setuptools._vendor.packaging.metadata._get_payload", "asynchronous": false, "params": [{"name": "msg", "type": {"name": "email.message.Message", "xref": {"fqname": "email.message.Message", "project": "--std--"}, "params": null}, "default": null}, {"name": "source", "type": {"name": "bytes | str", "xref": null, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Get the body of the message."]}, {"name": "setuptools._vendor.packaging.metadata.parse_email", "asynchronous": false, "params": [{"name": "data", "type": {"name": "bytes | str", "xref": null, "params": null}, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "RawMetadata", "xref": {"fqname": "setuptools._vendor.packaging.metadata.RawMetadata", "project": null}, "params": null}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "documentation": ["Parse a distribution's metadata stored as email headers (e.g. from `METADATA`).\n\nThis function returns a two-item tuple of dicts. The first dict is of\nrecognized fields from the core metadata specification. Fields that can be\nparsed and translated into Python's built-in types are converted\nappropriately. All other fields are left as-is. Fields that are allowed to\nappear multiple times are stored as lists.\n\nThe second dict contains all other fields from the metadata. This includes\nany unrecognized fields. It also includes any fields which are expected to\nbe parsed into a built-in type but were not formatted appropriately. Finally,\nany fields that are expected to appear only once but are repeated are\nincluded in this dict.\n"]}], "variables": [{"name": "setuptools._vendor.packaging.metadata.T", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.ExceptionGroup", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._STRING_FIELDS", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._LIST_FIELDS", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._DICT_FIELDS", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._EMAIL_TO_RAW_MAPPING", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._RAW_TO_EMAIL_MAPPING", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._NOT_FOUND", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._VALID_METADATA_VERSIONS", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._MetadataVersion", "type": null, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._REQUIRED_ATTRS", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.packaging.metadata.ExceptionGroup", "bases": ["Exception"], "methods": [{"name": "setuptools._vendor.packaging.metadata.ExceptionGroup.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "message", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "exceptions", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "Exception", "xref": {"fqname": "functions.Exception", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.ExceptionGroup.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.packaging.metadata.ExceptionGroup.message", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.ExceptionGroup.exceptions", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "Exception", "xref": {"fqname": "functions.Exception", "project": "--std--"}, "params": null}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A minimal implementation of {external:exc}`ExceptionGroup` from Python 3.11.\n\nIf {external:exc}`ExceptionGroup` is already defined by Python itself,\nthat version is used instead.\n"]}, {"name": "setuptools._vendor.packaging.metadata.InvalidMetadata", "bases": ["ValueError"], "methods": [{"name": "setuptools._vendor.packaging.metadata.InvalidMetadata.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "field", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "message", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.packaging.metadata.InvalidMetadata.field", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The name of the field that contains invalid data."]}], "instance_variables": [], "inner_classes": [], "documentation": ["A metadata field contains invalid data."]}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata", "bases": ["TypedDict"], "methods": [], "class_variables": [{"name": "setuptools._vendor.packaging.metadata.RawMetadata.metadata_version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.platforms", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.summary", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.description", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.keywords", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.home_page", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.author", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.author_email", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.license", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.supported_platforms", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.download_url", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.classifiers", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.requires", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.provides", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.obsoletes", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.maintainer", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.maintainer_email", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.requires_dist", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.provides_dist", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.obsoletes_dist", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.requires_python", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.requires_external", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.project_urls", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.description_content_type", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.provides_extra", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.dynamic", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.license_expression", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.RawMetadata.license_files", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A dictionary of raw core metadata.\n\nEach field in core metadata maps to a key of this dictionary (when data is\nprovided). The key is lower-case and underscores are used instead of dashes\ncompared to the equivalent core metadata field. Any core metadata field that\ncan be specified multiple times or can hold multiple values in a single\nfield have a key with a plural name. See {class}`Metadata` whose attributes\nmatch the keys of this dictionary.\n\nCore metadata fields that can be specified multiple times are stored as a\nlist or dict depending on which is appropriate for the field. Any fields\nwhich hold multiple values in a single field are stored as a list.\n", "The RawMetadata class attempts to make as few assumptions about the underlying", "serialization formats as possible. The idea is that as long as a serialization", "formats offer some very basic primitives in *some* way then we can support", "serializing to and from that format."]}, {"name": "setuptools._vendor.packaging.metadata._Validator", "bases": [], "methods": [{"name": "setuptools._vendor.packaging.metadata._Validator.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "added", "type": {"name": "_MetadataVersion", "xref": {"fqname": "_MetadataVersion", "project": null}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._Validator.__set_name__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "_owner", "type": {"name": "Metadata", "xref": {"fqname": "Metadata", "project": null}, "params": null}, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._Validator.__get__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "instance", "type": {"name": "Metadata", "xref": {"fqname": "Metadata", "project": null}, "params": null}, "default": null}, {"name": "_owner", "type": {"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": [{"name": "Metadata", "xref": {"fqname": "Metadata", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._Validator._invalid_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "cause", "type": {"name": "Exception | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "InvalidMetadata", "xref": {"fqname": "setuptools._vendor.packaging.metadata.InvalidMetadata", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._Validator._process_metadata_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "_MetadataVersion", "xref": {"fqname": "_MetadataVersion", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._Validator._process_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._Validator._process_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "version_module.Version", "xref": {"fqname": "setuptools._vendor.packaging.metadata..version.Version", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._Validator._process_summary", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Check the field contains no newlines."]}, {"name": "setuptools._vendor.packaging.metadata._Validator._process_description_content_type", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._Validator._process_dynamic", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._Validator._process_provides_extra", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "utils.NormalizedName", "xref": {"fqname": "setuptools._vendor.packaging.metadata..utils.NormalizedName", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._Validator._process_requires_python", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "specifiers.SpecifierSet", "xref": {"fqname": "setuptools._vendor.packaging.metadata..specifiers.SpecifierSet", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._Validator._process_requires_dist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "requirements.Requirement", "xref": {"fqname": "setuptools._vendor.packaging.metadata..requirements.Requirement", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._Validator._process_license_expression", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "NormalizedLicenseExpression | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._Validator._process_license_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.packaging.metadata._Validator.name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._Validator.raw_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata._Validator.added", "type": {"name": "_MetadataVersion", "xref": {"fqname": "_MetadataVersion", "project": null}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Validate a metadata field.\n\nAll \\_process\\_\\*() methods correspond to a core metadata field. The method is\ncalled with the field's raw value. If the raw value is valid it is returned\nin its \"enriched\" form (e.g. `version.Version` for the `Version` field).\nIf the raw value is invalid, {exc}`InvalidMetadata` is raised (with a cause\nas appropriate).\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata", "bases": [], "methods": [{"name": "setuptools._vendor.packaging.metadata.Metadata.from_raw", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "data", "type": {"name": "RawMetadata", "xref": {"fqname": "setuptools._vendor.packaging.metadata.RawMetadata", "project": null}, "params": null}, "default": null}, {"name": "validate", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Metadata", "xref": {"fqname": "setuptools._vendor.packaging.metadata.Metadata", "project": null}, "params": null}, "documentation": ["Create an instance from {class}`RawMetadata`.\n\nIf *validate* is true, all metadata will be validated. All exceptions\nrelated to validation will be gathered and raised as an {class}`ExceptionGroup`.\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.from_email", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "data", "type": {"name": "bytes | str", "xref": null, "params": null}, "default": null}, {"name": "validate", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Metadata", "xref": {"fqname": "setuptools._vendor.packaging.metadata.Metadata", "project": null}, "params": null}, "documentation": ["Parse metadata from email headers.\n\nIf *validate* is true, the metadata will be validated. All exceptions\nrelated to validation will be gathered and raised as an {class}`ExceptionGroup`.\n"]}], "class_variables": [{"name": "setuptools._vendor.packaging.metadata.Metadata._raw", "type": {"name": "RawMetadata", "xref": {"fqname": "setuptools._vendor.packaging.metadata.RawMetadata", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.packaging.metadata.Metadata.metadata_version", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "_MetadataVersion", "xref": {"fqname": "_MetadataVersion", "project": null}, "params": null}]}, "documentation": ["{external:ref}`core-metadata-metadata-version`\n(required; validated to be a valid metadata version)\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.name", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["{external:ref}`core-metadata-name`\n(required; validated using {func}`~packaging.utils.canonicalize_name` and its\n*validate* parameter)\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.version", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "version_module.Version", "xref": {"fqname": "setuptools._vendor.packaging.metadata..version.Version", "project": null}, "params": null}]}, "documentation": ["{external:ref}`core-metadata-version` (required)\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.dynamic", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-dynamic`\n(validated against core metadata field names and lowercased)\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.platforms", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-platform`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.supported_platforms", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-supported-platform`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.summary", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-summary` (validated to contain no newlines)\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.description", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-description`\n", "TODO 2.1: can be in body"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.description_content_type", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-description-content-type` (validated)\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.keywords", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-keywords`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.home_page", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-home-page`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.download_url", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-download-url`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.author", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-author`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.author_email", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-author-email`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.maintainer", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-maintainer`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.maintainer_email", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-maintainer-email`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.license", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "str | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-license`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.license_expression", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "NormalizedLicenseExpression | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-license-expression`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.license_files", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-license-file`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.classifiers", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-classifier`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.requires_dist", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "list[requirements.Requirement] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-requires-dist`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.requires_python", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "specifiers.SpecifierSet | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-requires-python`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.requires_external", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-requires-external`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.project_urls", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "dict[str, str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-project-url`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.provides_extra", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "list[utils.NormalizedName] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-provides-extra`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.provides_dist", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-provides-dist`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.obsoletes_dist", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["{external:ref}`core-metadata-obsoletes-dist`\n"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.requires", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["``Requires`` (deprecated)"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.provides", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["``Provides`` (deprecated)"]}, {"name": "setuptools._vendor.packaging.metadata.Metadata.obsoletes", "type": {"name": "_Validator", "xref": {"fqname": "setuptools._vendor.packaging.metadata._Validator", "project": null}, "params": [{"name": "list[str] | None", "xref": null, "params": null}]}, "documentation": ["``Obsoletes`` (deprecated)"]}], "instance_variables": [], "inner_classes": [], "documentation": ["Representation of distribution metadata.\n\nCompared to {class}`RawMetadata`, this class provides objects representing\nmetadata fields instead of only using built-in types. Any invalid metadata\nwill cause {exc}`InvalidMetadata` to be raised (with a\n{py:attr}`~BaseException.__cause__` attribute as appropriate).\n"]}], "exports": []}, {"name": "setuptools._vendor.importlib_metadata.diagnose", "documentation": [], "functions": [{"name": "setuptools._vendor.importlib_metadata.diagnose.inspect", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.diagnose.run", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.importlib_metadata.compat.py311", "documentation": [], "functions": [{"name": "setuptools._vendor.importlib_metadata.compat.py311.wrap", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["Workaround for https://github.com/python/cpython/issues/84538\nto add backward compatibility for walk_up=True.\nAn example affected package is dask-labextension, which uses\njupyter-packaging to install JupyterLab javascript files outside\nof site-packages."]}], "variables": [{"name": "setuptools._vendor.importlib_metadata.compat.py311.relative_fix", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._vendor.importlib_metadata._adapters", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools._vendor.importlib_metadata._adapters.Message", "bases": ["email.message.Message"], "methods": [{"name": "setuptools._vendor.importlib_metadata._adapters.Message.__new__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "orig", "type": {"name": "email.message.Message", "xref": {"fqname": "email.message.Message", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._adapters.Message.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._adapters.Message.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["suppress spurious error from mypy"]}, {"name": "setuptools._vendor.importlib_metadata._adapters.Message.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": null, "default": null}], "returns": null, "documentation": ["Override parent behavior to typical dict behavior.\n\n`email.message.Message` will emit None values for missing\nkeys. Typical mappings, including this `Message`, will raise\na key error for missing keys.\n\nRef python/importlib_metadata#371.\n"]}, {"name": "setuptools._vendor.importlib_metadata._adapters.Message._repair_headers", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._adapters.Message.json", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Convert PackageMetadata to a JSON-compatible format\nper PEP 0566."]}], "class_variables": [{"name": "setuptools._vendor.importlib_metadata._adapters.Message.multiple_use_keys", "type": null, "documentation": ["Keys that may be indicated multiple times per PEP 566."]}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._vendor.importlib_metadata.compat", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.importlib_metadata.compat.py39", "documentation": ["Compatibility layer with Python 3.8/3.9"], "functions": [{"name": "setuptools._vendor.importlib_metadata.compat.py39.normalized_name", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools._vendor.importlib_metadata.compat..Distribution", "project": null}, "params": null}, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Honor name normalization for distributions that don't provide `_normalized_name`.\n"]}, {"name": "setuptools._vendor.importlib_metadata.compat.py39.ep_matches", "asynchronous": false, "params": [{"name": "ep", "type": {"name": "EntryPoint", "xref": {"fqname": "setuptools._vendor.importlib_metadata.compat..EntryPoint", "project": null}, "params": null}, "default": null}, {"name": "**params", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Workaround for `EntryPoint` objects without the `matches` method.\n"]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.importlib_metadata._functools", "documentation": [], "functions": [{"name": "setuptools._vendor.importlib_metadata._functools.method_cache", "asynchronous": false, "params": [{"name": "method", "type": null, "default": null}, {"name": "cache_wrapper", "type": null, "default": "..."}], "returns": null, "documentation": ["Wrap lru_cache to support storing the cache data in the object instances.\n\nAbstracts the common paradigm where the method explicitly saves an\nunderscore-prefixed protected property on first call and returns that\nsubsequently.\n\n```pycon\n>>> class MyClass:\n...     calls = 0\n...\n...     @method_cache\n...     def method(self, value):\n...         self.calls += 1\n...         return value\n```\n\n```pycon\n>>> a = MyClass()\n>>> a.method(3)\n3\n>>> for x in range(75):\n...     res = a.method(x)\n>>> a.calls\n75\n```\n\nNote that the apparent behavior will be exactly like that of lru_cache\nexcept that the cache is stored on each instance, so values in one\ninstance will not flush values from another, and when an instance is\ndeleted, so are the cached values for that instance.\n\n```pycon\n>>> b = MyClass()\n>>> for x in range(35):\n...     res = b.method(x)\n>>> b.calls\n35\n>>> a.method(0)\n0\n>>> a.calls\n75\n```\n\nNote that if method had been decorated with `functools.lru_cache()`,\na.calls would have been 76 (due to the cached value of 0 having been\nflushed by the 'b' instance).\n\nClear the cache with `.cache_clear()`\n\n```pycon\n>>> a.method.cache_clear()\n```\n\nSame for a method that hasn't yet been called.\n\n```pycon\n>>> c = MyClass()\n>>> c.method.cache_clear()\n```\n\nAnother cache wrapper may be supplied:\n\n```pycon\n>>> cache = functools.lru_cache(maxsize=2)\n>>> MyClass.method2 = method_cache(lambda self: 3, cache_wrapper=cache)\n>>> a = MyClass()\n>>> a.method2()\n3\n```\n\nCaution - do not subsequently wrap the method with another decorator, such\nas `@property`, which changes the semantics of the function.\n\nSee also\n<http://code.activestate.com/recipes/577452-a-memoize-decorator-for-instance-methods/>\nfor another implementation and additional justification.\n", "from jaraco.functools 3.3"]}, {"name": "setuptools._vendor.importlib_metadata._functools.pass_none", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}], "returns": null, "documentation": ["Wrap func so it's not called if its first param is None\n\n```pycon\n>>> print_text = pass_none(print)\n>>> print_text('text')\ntext\n>>> print_text(None)\n```\n", "From jaraco.functools 3.3"]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.importlib_metadata._itertools", "documentation": [], "functions": [{"name": "setuptools._vendor.importlib_metadata._itertools.unique_everseen", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "key", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._itertools.always_iterable", "asynchronous": false, "params": [{"name": "obj", "type": null, "default": null}, {"name": "base_type", "type": null, "default": "..."}], "returns": null, "documentation": ["If *obj* is iterable, return an iterator over its items:\n\n```\n>>> obj = (1, 2, 3)\n>>> list(always_iterable(obj))\n[1, 2, 3]\n```\n\nIf *obj* is not iterable, return a one-item iterable containing *obj*:\n\n```\n>>> obj = 1\n>>> list(always_iterable(obj))\n[1]\n```\n\nIf *obj* is `None`, return an empty iterable:\n\n> ```pycon\n> >>> obj = None\n> >>> list(always_iterable(None))\n> []\n> ```\n\nBy default, binary and text strings are not considered iterable:\n\n```\n>>> obj = 'foo'\n>>> list(always_iterable(obj))\n['foo']\n```\n\nIf *base_type* is set, objects for which `isinstance(obj, base_type)`\nreturns `True` won't be considered iterable.\n\n> ```pycon\n> >>> obj = {'a': 1}\n> >>> list(always_iterable(obj))  # Iterate over the dict's keys\n> ['a']\n> >>> list(always_iterable(obj, base_type=dict))  # Treat dicts as a unit\n> [{'a': 1}]\n> ```\n\nSet *base_type* to `None` to avoid any special handling and treat objects\nPython considers iterable as iterable:\n\n> ```pycon\n> >>> obj = 'foo'\n> >>> list(always_iterable(obj, base_type=None))\n> ['f', 'o', 'o']\n> ```\n", "copied from more_itertools 8.8"]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.importlib_metadata._meta", "documentation": [], "functions": [], "variables": [{"name": "setuptools._vendor.importlib_metadata._meta._T", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.importlib_metadata._meta.PackageMetadata", "bases": ["Protocol"], "methods": [{"name": "setuptools._vendor.importlib_metadata._meta.PackageMetadata.__len__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._meta.PackageMetadata.__contains__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._meta.PackageMetadata.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._meta.PackageMetadata.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._meta.PackageMetadata.get", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "failobj", "type": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._meta.PackageMetadata.get", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "failobj", "type": {"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}, "default": null}], "returns": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._meta.PackageMetadata.get_all", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "failobj", "type": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}]}, "documentation": ["overload per python/importlib_metadata#435"]}, {"name": "setuptools._vendor.importlib_metadata._meta.PackageMetadata.get_all", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "failobj", "type": {"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}, "default": null}], "returns": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, {"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}]}, "documentation": ["Return all values associated with a possibly multi-valued key."]}, {"name": "setuptools._vendor.importlib_metadata._meta.PackageMetadata.json", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Dict", "xref": {"fqname": "typing.Dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "documentation": ["A JSON-compatible form of the metadata."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._meta.SimplePath", "bases": ["Protocol"], "methods": [{"name": "setuptools._vendor.importlib_metadata._meta.SimplePath.joinpath", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "os.PathLike", "xref": {"fqname": "os.PathLike", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "default": null}], "returns": {"name": "SimplePath", "xref": {"fqname": "setuptools._vendor.importlib_metadata._meta.SimplePath", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._meta.SimplePath.__truediv__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "os.PathLike", "xref": {"fqname": "os.PathLike", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "default": null}], "returns": {"name": "SimplePath", "xref": {"fqname": "setuptools._vendor.importlib_metadata._meta.SimplePath", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._meta.SimplePath.parent", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "SimplePath", "xref": {"fqname": "setuptools._vendor.importlib_metadata._meta.SimplePath", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._meta.SimplePath.read_text", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "encoding", "type": null, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._meta.SimplePath.read_bytes", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._meta.SimplePath.exists", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A minimal subset of pathlib.Path required by Distribution."]}], "exports": []}, {"name": "setuptools._vendor.zipp.compat", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.zipp.compat.py310", "documentation": [], "functions": [{"name": "setuptools._vendor.zipp.compat.py310._text_encoding", "asynchronous": false, "params": [{"name": "encoding", "type": null, "default": null}, {"name": "stacklevel", "type": null, "default": "..."}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools._vendor.zipp.compat.py310.text_encoding", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._vendor.more_itertools.more", "documentation": [], "functions": [{"name": "setuptools._vendor.more_itertools.more.chunked", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": null}, {"name": "strict", "type": null, "default": "..."}], "returns": null, "documentation": ["Break *iterable* into lists of length *n*:\n\n> ```pycon\n> >>> list(chunked([1, 2, 3, 4, 5, 6], 3))\n> [[1, 2, 3], [4, 5, 6]]\n> ```\n\nBy the default, the last yielded list will have fewer than *n* elements\nif the length of *iterable* is not divisible by *n*:\n\n> ```pycon\n> >>> list(chunked([1, 2, 3, 4, 5, 6, 7, 8], 3))\n> [[1, 2, 3], [4, 5, 6], [7, 8]]\n> ```\n\nTo use a fill-in value instead, see the {func}`grouper` recipe.\n\nIf the length of *iterable* is not divisible by *n* and *strict* is\n`True`, then `ValueError` will be raised before the last\nlist is yielded.\n"]}, {"name": "setuptools._vendor.more_itertools.more.first", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "default", "type": null, "default": "..."}], "returns": null, "documentation": ["Return the first item of *iterable*, or *default* if *iterable* is\nempty.\n\n> ```pycon\n> >>> first([0, 1, 2, 3])\n> 0\n> >>> first([], 'some default')\n> 'some default'\n> ```\n\nIf *default* is not provided and there are no items in the iterable,\nraise `ValueError`.\n\n{func}`first` is useful when you have a generator of expensive-to-retrieve\nvalues and want any arbitrary one. It is marginally shorter than\n`next(iter(iterable), default)`.\n"]}, {"name": "setuptools._vendor.more_itertools.more.last", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "default", "type": null, "default": "..."}], "returns": null, "documentation": ["Return the last item of *iterable*, or *default* if *iterable* is\nempty.\n\n> ```pycon\n> >>> last([0, 1, 2, 3])\n> 3\n> >>> last([], 'some default')\n> 'some default'\n> ```\n\nIf *default* is not provided and there are no items in the iterable,\nraise `ValueError`.\n"]}, {"name": "setuptools._vendor.more_itertools.more.nth_or_last", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": null}, {"name": "default", "type": null, "default": "..."}], "returns": null, "documentation": ["Return the nth or the last item of *iterable*,\nor *default* if *iterable* is empty.\n\n> ```pycon\n> >>> nth_or_last([0, 1, 2, 3], 2)\n> 2\n> >>> nth_or_last([0, 1], 2)\n> 1\n> >>> nth_or_last([], 0, 'some default')\n> 'some default'\n> ```\n\nIf *default* is not provided and there are no items in the iterable,\nraise `ValueError`.\n"]}, {"name": "setuptools._vendor.more_itertools.more.consumer", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}], "returns": null, "documentation": ["Decorator that automatically advances a PEP-342-style \"reverse iterator\"\nto its first yield point so you don't have to call `next()` on it\nmanually.\n\n> ```pycon\n> >>> @consumer\n> ... def tally():\n> ...     i = 0\n> ...     while True:\n> ...         print('Thing number %s is %s.' % (i, (yield)))\n> ...         i += 1\n> ...\n> >>> t = tally()\n> >>> t.send('red')\n> Thing number 0 is red.\n> >>> t.send('fish')\n> Thing number 1 is fish.\n> ```\n\nWithout the decorator, you would have to call `next(t)` before\n`t.send()` could be used.\n"]}, {"name": "setuptools._vendor.more_itertools.more.ilen", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Return the number of items in *iterable*.\n\n    >>> ilen(x for x in range(1000000) if x % 3 == 0)\n    333334\n\nThis consumes the iterable, so handle with care."]}, {"name": "setuptools._vendor.more_itertools.more.iterate", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}, {"name": "start", "type": null, "default": null}], "returns": null, "documentation": ["Return `start`, `func(start)`, `func(func(start))`, ...\n\n```pycon\n>>> from itertools import islice\n>>> list(islice(iterate(lambda x: 2*x, 1), 10))\n[1, 2, 4, 8, 16, 32, 64, 128, 256, 512]\n```\n"]}, {"name": "setuptools._vendor.more_itertools.more.with_iter", "asynchronous": false, "params": [{"name": "context_manager", "type": null, "default": null}], "returns": null, "documentation": ["Wrap an iterable in a `with` statement, so it closes once exhausted.\n\nFor example, this will close the file when the iterator is exhausted:\n\n```\nupper_lines = (line.upper() for line in with_iter(open('foo')))\n```\n\nAny context manager which returns an iterable is a candidate for\n`with_iter`.\n"]}, {"name": "setuptools._vendor.more_itertools.more.one", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "too_short", "type": null, "default": "..."}, {"name": "too_long", "type": null, "default": "..."}], "returns": null, "documentation": ["Return the first item from *iterable*, which is expected to contain only\nthat item. Raise an exception if *iterable* is empty or has more than one\nitem.\n\n{func}`one` is useful for ensuring that an iterable contains only one item.\nFor example, it can be used to retrieve the result of a database query\nthat is expected to return a single row.\n\nIf *iterable* is empty, `ValueError` will be raised. You may specify a\ndifferent exception with the *too_short* keyword:\n\n> ```pycon\n> >>> it = []\n> >>> one(it)  # doctest: +IGNORE_EXCEPTION_DETAIL\n> Traceback (most recent call last):\n> ...\n> ValueError: too many items in iterable (expected 1)'\n> >>> too_short = IndexError('too few items')\n> >>> one(it, too_short=too_short)  # doctest: +IGNORE_EXCEPTION_DETAIL\n> Traceback (most recent call last):\n> ...\n> IndexError: too few items\n> ```\n\nSimilarly, if *iterable* contains more than one item, `ValueError` will\nbe raised. You may specify a different exception with the *too_long*\nkeyword:\n\n> ```pycon\n> >>> it = ['too', 'many']\n> >>> one(it)  # doctest: +IGNORE_EXCEPTION_DETAIL\n> Traceback (most recent call last):\n> ...\n> ValueError: Expected exactly one item in iterable, but got 'too',\n> 'many', and perhaps more.\n> >>> too_long = RuntimeError\n> >>> one(it, too_long=too_long)  # doctest: +IGNORE_EXCEPTION_DETAIL\n> Traceback (most recent call last):\n> ...\n> RuntimeError\n> ```\n\nNote that {func}`one` attempts to advance *iterable* twice to ensure there\nis only one item. See {func}`spy` or {func}`peekable` to check iterable\ncontents less destructively.\n"]}, {"name": "setuptools._vendor.more_itertools.more.raise_", "asynchronous": false, "params": [{"name": "exception", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.strictly_n", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": null}, {"name": "too_short", "type": null, "default": "..."}, {"name": "too_long", "type": null, "default": "..."}], "returns": null, "documentation": ["Validate that *iterable* has exactly *n* items and return them if\nit does. If it has fewer than *n* items, call function *too_short*\nwith those items. If it has more than *n* items, call function\n*too_long* with the first `n + 1` items.\n\n> ```pycon\n> >>> iterable = ['a', 'b', 'c', 'd']\n> >>> n = 4\n> >>> list(strictly_n(iterable, n))\n> ['a', 'b', 'c', 'd']\n> ```\n\nNote that the returned iterable must be consumed in order for the check to\nbe made.\n\nBy default, *too_short* and *too_long* are functions that raise\n`ValueError`.\n\n> ```pycon\n> >>> list(strictly_n('ab', 3))  # doctest: +IGNORE_EXCEPTION_DETAIL\n> Traceback (most recent call last):\n> ...\n> ValueError: too few items in iterable (got 2)\n> ```\n>\n> ```pycon\n> >>> list(strictly_n('abc', 2))  # doctest: +IGNORE_EXCEPTION_DETAIL\n> Traceback (most recent call last):\n> ...\n> ValueError: too many items in iterable (got at least 3)\n> ```\n\nYou can instead supply functions that do something else.\n*too_short* will be called with the number of items in *iterable*.\n*too_long* will be called with `n + 1`.\n\n> ```pycon\n> >>> def too_short(item_count):\n> ...     raise RuntimeError\n> >>> it = strictly_n('abcd', 6, too_short=too_short)\n> >>> list(it)  # doctest: +IGNORE_EXCEPTION_DETAIL\n> Traceback (most recent call last):\n> ...\n> RuntimeError\n> ```\n>\n> ```pycon\n> >>> def too_long(item_count):\n> ...     print('The boss is going to hear about this')\n> >>> it = strictly_n('abcdef', 4, too_long=too_long)\n> >>> list(it)\n> The boss is going to hear about this\n> ['a', 'b', 'c', 'd']\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.distinct_permutations", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "r", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield successive distinct permutations of the elements in *iterable*.\n\n> ```pycon\n> >>> sorted(distinct_permutations([1, 0, 1]))\n> [(0, 1, 1), (1, 0, 1), (1, 1, 0)]\n> ```\n\nEquivalent to `set(permutations(iterable))`, except duplicates are not\ngenerated and thrown away. For larger input sequences this is much more\nefficient.\n\nDuplicate permutations arise when there are duplicated elements in the\ninput iterable. The number of items returned is\n`n! / (x_1! * x_2! * ... * x_n!)`, where `n` is the total number of\nitems input, and each `x_i` is the count of a distinct item in the input\nsequence.\n\nIf *r* is given, only the *r*-length permutations are yielded.\n\n> ```pycon\n> >>> sorted(distinct_permutations([1, 0, 1], r=2))\n> [(0, 1), (1, 0), (1, 1)]\n> >>> sorted(distinct_permutations(range(3), r=2))\n> [(0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1)]\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.intersperse", "asynchronous": false, "params": [{"name": "e", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": "..."}], "returns": null, "documentation": ["Intersperse filler element *e* among the items in *iterable*, leaving\n*n* items between each filler element.\n\n    >>> list(intersperse('!', [1, 2, 3, 4, 5]))\n    [1, '!', 2, '!', 3, '!', 4, '!', 5]\n\n    >>> list(intersperse(None, [1, 2, 3, 4, 5], n=2))\n    [1, 2, None, 3, 4, None, 5]"]}, {"name": "setuptools._vendor.more_itertools.more.unique_to_each", "asynchronous": false, "params": [{"name": "*iterables", "type": null, "default": null}], "returns": null, "documentation": ["Return the elements from each of the input iterables that aren't in the\nother input iterables.\n\nFor example, suppose you have a set of packages, each with a set of\ndependencies:\n\n```\n{'pkg_1': {'A', 'B'}, 'pkg_2': {'B', 'C'}, 'pkg_3': {'B', 'D'}}\n```\n\nIf you remove one package, which dependencies can also be removed?\n\nIf `pkg_1` is removed, then `A` is no longer necessary - it is not\nassociated with `pkg_2` or `pkg_3`. Similarly, `C` is only needed for\n`pkg_2`, and `D` is only needed for `pkg_3`:\n\n```\n>>> unique_to_each({'A', 'B'}, {'B', 'C'}, {'B', 'D'})\n[['A'], ['C'], ['D']]\n```\n\nIf there are duplicates in one input iterable that aren't in the others\nthey will be duplicated in the output. Input order is preserved:\n\n```\n>>> unique_to_each(\"mississippi\", \"missouri\")\n[['p', 'p'], ['o', 'u', 'r']]\n```\n\nIt is assumed that the elements of each iterable are hashable.\n"]}, {"name": "setuptools._vendor.more_itertools.more.windowed", "asynchronous": false, "params": [{"name": "seq", "type": null, "default": null}, {"name": "n", "type": null, "default": null}, {"name": "fillvalue", "type": null, "default": "..."}, {"name": "step", "type": null, "default": "..."}], "returns": null, "documentation": ["Return a sliding window of width *n* over the given iterable.\n\n> ```pycon\n> >>> all_windows = windowed([1, 2, 3, 4, 5], 3)\n> >>> list(all_windows)\n> [(1, 2, 3), (2, 3, 4), (3, 4, 5)]\n> ```\n\nWhen the window is larger than the iterable, *fillvalue* is used in place\nof missing values:\n\n> ```pycon\n> >>> list(windowed([1, 2, 3], 4))\n> [(1, 2, 3, None)]\n> ```\n\nEach window will advance in increments of *step*:\n\n> ```pycon\n> >>> list(windowed([1, 2, 3, 4, 5, 6], 3, fillvalue='!', step=2))\n> [(1, 2, 3), (3, 4, 5), (5, 6, '!')]\n> ```\n\nTo slide into the iterable's items, use {func}`chain` to add filler items\nto the left:\n\n> ```pycon\n> >>> iterable = [1, 2, 3, 4]\n> >>> n = 3\n> >>> padding = [None] * (n - 1)\n> >>> list(windowed(chain(padding, iterable), 3))\n> [(None, None, 1), (None, 1, 2), (1, 2, 3), (2, 3, 4)]\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.substrings", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Yield all of the substrings of *iterable*.\n\n    >>> [''.join(s) for s in substrings('more')]\n    ['m', 'o', 'r', 'e', 'mo', 'or', 're', 'mor', 'ore', 'more']\n\nNote that non-string iterables can also be subdivided.\n\n    >>> list(substrings([0, 1, 2]))\n    [(0,), (1,), (2,), (0, 1), (1, 2), (0, 1, 2)]"]}, {"name": "setuptools._vendor.more_itertools.more.substrings_indexes", "asynchronous": false, "params": [{"name": "seq", "type": null, "default": null}, {"name": "reverse", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield all substrings and their positions in *seq*\n\nThe items yielded will be a tuple of the form `(substr, i, j)`, where\n`substr == seq[i:j]`.\n\nThis function only works for iterables that support slicing, such as\n`str` objects.\n\n```pycon\n>>> for item in substrings_indexes('more'):\n...    print(item)\n('m', 0, 1)\n('o', 1, 2)\n('r', 2, 3)\n('e', 3, 4)\n('mo', 0, 2)\n('or', 1, 3)\n('re', 2, 4)\n('mor', 0, 3)\n('ore', 1, 4)\n('more', 0, 4)\n```\n\nSet *reverse* to `True` to yield the same items in the opposite order.\n"]}, {"name": "setuptools._vendor.more_itertools.more.spy", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": "..."}], "returns": null, "documentation": ["Return a 2-tuple with a list containing the first *n* elements of\n*iterable*, and an iterator with the same items as *iterable*.\nThis allows you to \"look ahead\" at the items in the iterable without\nadvancing it.\n\nThere is one item in the list by default:\n\n    >>> iterable = 'abcdefg'\n    >>> head, iterable = spy(iterable)\n    >>> head\n    ['a']\n    >>> list(iterable)\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\nYou may use unpacking to retrieve items instead of lists:\n\n    >>> (head,), iterable = spy('abcdefg')\n    >>> head\n    'a'\n    >>> (first, second), iterable = spy('abcdefg', 2)\n    >>> first\n    'a'\n    >>> second\n    'b'\n\nThe number of items requested can be larger than the number of items in\nthe iterable:\n\n    >>> iterable = [1, 2, 3, 4, 5]\n    >>> head, iterable = spy(iterable, 10)\n    >>> head\n    [1, 2, 3, 4, 5]\n    >>> list(iterable)\n    [1, 2, 3, 4, 5]"]}, {"name": "setuptools._vendor.more_itertools.more.interleave", "asynchronous": false, "params": [{"name": "*iterables", "type": null, "default": null}], "returns": null, "documentation": ["Return a new iterable yielding from each iterable in turn,\nuntil the shortest is exhausted.\n\n> ```pycon\n> >>> list(interleave([1, 2, 3], [4, 5], [6, 7, 8]))\n> [1, 4, 6, 2, 5, 7]\n> ```\n\nFor a version that doesn't terminate after the shortest iterable is\nexhausted, see {func}`interleave_longest`.\n"]}, {"name": "setuptools._vendor.more_itertools.more.interleave_longest", "asynchronous": false, "params": [{"name": "*iterables", "type": null, "default": null}], "returns": null, "documentation": ["Return a new iterable yielding from each iterable in turn,\nskipping any that are exhausted.\n\n> ```pycon\n> >>> list(interleave_longest([1, 2, 3], [4, 5], [6, 7, 8]))\n> [1, 4, 6, 2, 5, 7, 3, 8]\n> ```\n\nThis function produces the same output as {func}`roundrobin`, but may\nperform better for some inputs (in particular when the number of iterables\nis large).\n"]}, {"name": "setuptools._vendor.more_itertools.more.interleave_evenly", "asynchronous": false, "params": [{"name": "iterables", "type": null, "default": null}, {"name": "lengths", "type": null, "default": "..."}], "returns": null, "documentation": ["Interleave multiple iterables so that their elements are evenly distributed\nthroughout the output sequence.\n\n```pycon\n>>> iterables = [1, 2, 3, 4, 5], ['a', 'b']\n>>> list(interleave_evenly(iterables))\n[1, 2, 'a', 3, 4, 'b', 5]\n```\n\n```pycon\n>>> iterables = [[1, 2, 3], [4, 5], [6, 7, 8]]\n>>> list(interleave_evenly(iterables))\n[1, 6, 4, 2, 7, 3, 8, 5]\n```\n\nThis function requires iterables of known length. Iterables without\n`__len__()` can be used by manually specifying lengths with *lengths*:\n\n```pycon\n>>> from itertools import combinations, repeat\n>>> iterables = [combinations(range(4), 2), ['a', 'b', 'c']]\n>>> lengths = [4 * (4 - 1) // 2, 3]\n>>> list(interleave_evenly(iterables, lengths=lengths))\n[(0, 1), (0, 2), 'a', (0, 3), (1, 2), 'b', (1, 3), (2, 3), 'c']\n```\n\nBased on Bresenham's algorithm.\n"]}, {"name": "setuptools._vendor.more_itertools.more.collapse", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "base_type", "type": null, "default": "..."}, {"name": "levels", "type": null, "default": "..."}], "returns": null, "documentation": ["Flatten an iterable with multiple levels of nesting (e.g., a list of\nlists of tuples) into non-iterable types.\n\n> ```pycon\n> >>> iterable = [(1, 2), ([3, 4], [[5], [6]])]\n> >>> list(collapse(iterable))\n> [1, 2, 3, 4, 5, 6]\n> ```\n\nBinary and text strings are not considered iterable and\nwill not be collapsed.\n\nTo avoid collapsing other types, specify *base_type*:\n\n> ```pycon\n> >>> iterable = ['ab', ('cd', 'ef'), ['gh', 'ij']]\n> >>> list(collapse(iterable, base_type=tuple))\n> ['ab', ('cd', 'ef'), 'gh', 'ij']\n> ```\n\nSpecify *levels* to stop flattening after a certain level:\n\n```pycon\n>>> iterable = [('a', ['b']), ('c', ['d'])]\n>>> list(collapse(iterable))  # Fully flattened\n['a', 'b', 'c', 'd']\n>>> list(collapse(iterable, levels=1))  # Only one level flattened\n['a', ['b'], 'c', ['d']]\n```\n"]}, {"name": "setuptools._vendor.more_itertools.more.side_effect", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}, {"name": "chunk_size", "type": null, "default": "..."}, {"name": "before", "type": null, "default": "..."}, {"name": "after", "type": null, "default": "..."}], "returns": null, "documentation": ["Invoke *func* on each item in *iterable* (or on each *chunk_size* group\nof items) before yielding the item.\n\n`func` must be a function that takes a single argument. Its return value\nwill be discarded.\n\n*before* and *after* are optional functions that take no arguments. They\nwill be executed before iteration starts and after it ends, respectively.\n\n`side_effect` can be used for logging, updating progress bars, or anything\nthat is not functionally \"pure.\"\n\nEmitting a status message:\n\n    >>> from more_itertools import consume\n    >>> func = lambda item: print('Received {}'.format(item))\n    >>> consume(side_effect(func, range(2)))\n    Received 0\n    Received 1\n\nOperating on chunks of items:\n\n    >>> pair_sums = []\n    >>> func = lambda chunk: pair_sums.append(sum(chunk))\n    >>> list(side_effect(func, [0, 1, 2, 3, 4, 5], 2))\n    [0, 1, 2, 3, 4, 5]\n    >>> list(pair_sums)\n    [1, 5, 9]\n\nWriting to a file-like object:\n\n    >>> from io import StringIO\n    >>> from more_itertools import consume\n    >>> f = StringIO()\n    >>> func = lambda x: print(x, file=f)\n    >>> before = lambda: print(u'HEADER', file=f)\n    >>> after = f.close\n    >>> it = [u'a', u'b', u'c']\n    >>> consume(side_effect(func, it, before=before, after=after))\n    >>> f.closed\n    True"]}, {"name": "setuptools._vendor.more_itertools.more.sliced", "asynchronous": false, "params": [{"name": "seq", "type": null, "default": null}, {"name": "n", "type": null, "default": null}, {"name": "strict", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield slices of length *n* from the sequence *seq*.\n\n```pycon\n>>> list(sliced((1, 2, 3, 4, 5, 6), 3))\n[(1, 2, 3), (4, 5, 6)]\n```\n\nBy the default, the last yielded slice will have fewer than *n* elements\nif the length of *seq* is not divisible by *n*:\n\n```pycon\n>>> list(sliced((1, 2, 3, 4, 5, 6, 7, 8), 3))\n[(1, 2, 3), (4, 5, 6), (7, 8)]\n```\n\nIf the length of *seq* is not divisible by *n* and *strict* is\n`True`, then `ValueError` will be raised before the last\nslice is yielded.\n\nThis function will only work for iterables that support slicing.\nFor non-sliceable iterables, see {func}`chunked`.\n"]}, {"name": "setuptools._vendor.more_itertools.more.split_at", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "pred", "type": null, "default": null}, {"name": "maxsplit", "type": null, "default": "..."}, {"name": "keep_separator", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield lists of items from *iterable*, where each list is delimited by\nan item where callable *pred* returns `True`.\n\n> ```pycon\n> >>> list(split_at('abcdcba', lambda x: x == 'b'))\n> [['a'], ['c', 'd', 'c'], ['a']]\n> ```\n>\n> ```pycon\n> >>> list(split_at(range(10), lambda n: n % 2 == 1))\n> [[0], [2], [4], [6], [8], []]\n> ```\n\nAt most *maxsplit* splits are done. If *maxsplit* is not specified or -1,\nthen there is no limit on the number of splits:\n\n> ```pycon\n> >>> list(split_at(range(10), lambda n: n % 2 == 1, maxsplit=2))\n> [[0], [2], [4, 5, 6, 7, 8, 9]]\n> ```\n\nBy default, the delimiting items are not included in the output.\nTo include them, set *keep_separator* to `True`.\n\n> ```pycon\n> >>> list(split_at('abcdcba', lambda x: x == 'b', keep_separator=True))\n> [['a'], ['b'], ['c', 'd', 'c'], ['b'], ['a']]\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.split_before", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "pred", "type": null, "default": null}, {"name": "maxsplit", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield lists of items from *iterable*, where each list ends just before\nan item for which callable *pred* returns `True`:\n\n> ```pycon\n> >>> list(split_before('OneTwo', lambda s: s.isupper()))\n> [['O', 'n', 'e'], ['T', 'w', 'o']]\n> ```\n>\n> ```pycon\n> >>> list(split_before(range(10), lambda n: n % 3 == 0))\n> [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]\n> ```\n\nAt most *maxsplit* splits are done. If *maxsplit* is not specified or -1,\nthen there is no limit on the number of splits:\n\n> ```pycon\n> >>> list(split_before(range(10), lambda n: n % 3 == 0, maxsplit=2))\n> [[0, 1, 2], [3, 4, 5], [6, 7, 8, 9]]\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.split_after", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "pred", "type": null, "default": null}, {"name": "maxsplit", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield lists of items from *iterable*, where each list ends with an\nitem where callable *pred* returns `True`:\n\n> ```pycon\n> >>> list(split_after('one1two2', lambda s: s.isdigit()))\n> [['o', 'n', 'e', '1'], ['t', 'w', 'o', '2']]\n> ```\n>\n> ```pycon\n> >>> list(split_after(range(10), lambda n: n % 3 == 0))\n> [[0], [1, 2, 3], [4, 5, 6], [7, 8, 9]]\n> ```\n\nAt most *maxsplit* splits are done. If *maxsplit* is not specified or -1,\nthen there is no limit on the number of splits:\n\n> ```pycon\n> >>> list(split_after(range(10), lambda n: n % 3 == 0, maxsplit=2))\n> [[0], [1, 2, 3], [4, 5, 6, 7, 8, 9]]\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.split_when", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "pred", "type": null, "default": null}, {"name": "maxsplit", "type": null, "default": "..."}], "returns": null, "documentation": ["Split *iterable* into pieces based on the output of *pred*.\n*pred* should be a function that takes successive pairs of items and\nreturns `True` if the iterable should be split in between them.\n\nFor example, to find runs of increasing numbers, split the iterable when\nelement `i` is larger than element `i + 1`:\n\n> ```pycon\n> >>> list(split_when([1, 2, 3, 3, 2, 5, 2, 4, 2], lambda x, y: x > y))\n> [[1, 2, 3, 3], [2, 5], [2, 4], [2]]\n> ```\n\nAt most *maxsplit* splits are done. If *maxsplit* is not specified or -1,\nthen there is no limit on the number of splits:\n\n> ```pycon\n> >>> list(split_when([1, 2, 3, 3, 2, 5, 2, 4, 2],\n> ...                 lambda x, y: x > y, maxsplit=2))\n> [[1, 2, 3, 3], [2, 5], [2, 4, 2]]\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.split_into", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "sizes", "type": null, "default": null}], "returns": null, "documentation": ["Yield a list of sequential items from *iterable* of length 'n' for each\ninteger 'n' in *sizes*.\n\n> ```pycon\n> >>> list(split_into([1,2,3,4,5,6], [1,2,3]))\n> [[1], [2, 3], [4, 5, 6]]\n> ```\n\nIf the sum of *sizes* is smaller than the length of *iterable*, then the\nremaining items of *iterable* will not be returned.\n\n> ```pycon\n> >>> list(split_into([1,2,3,4,5,6], [2,3]))\n> [[1, 2], [3, 4, 5]]\n> ```\n\nIf the sum of *sizes* is larger than the length of *iterable*, fewer items\nwill be returned in the iteration that overruns *iterable* and further\nlists will be empty:\n\n> ```pycon\n> >>> list(split_into([1,2,3,4], [1,2,3,4]))\n> [[1], [2, 3], [4], []]\n> ```\n\nWhen a `None` object is encountered in *sizes*, the returned list will\ncontain items up to the end of *iterable* the same way that itertools.slice\ndoes:\n\n> ```pycon\n> >>> list(split_into([1,2,3,4,5,6,7,8,9,0], [2,3,None]))\n> [[1, 2], [3, 4, 5], [6, 7, 8, 9, 0]]\n> ```\n\n{func}`split_into` can be useful for grouping a series of items where the\nsizes of the groups are not uniform. An example would be where in a row\nfrom a table, multiple columns represent elements of the same feature\n(e.g. a point represented by x,y,z) but, the format is not the same for\nall columns.\n"]}, {"name": "setuptools._vendor.more_itertools.more.padded", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "fillvalue", "type": null, "default": "..."}, {"name": "n", "type": null, "default": "..."}, {"name": "next_multiple", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield the elements from *iterable*, followed by *fillvalue*, such that\nat least *n* items are emitted.\n\n> ```pycon\n> >>> list(padded([1, 2, 3], '?', 5))\n> [1, 2, 3, '?', '?']\n> ```\n\nIf *next_multiple* is `True`, *fillvalue* will be emitted until the\nnumber of items emitted is a multiple of *n*:\n\n> ```pycon\n> >>> list(padded([1, 2, 3, 4], n=3, next_multiple=True))\n> [1, 2, 3, 4, None, None]\n> ```\n\nIf *n* is `None`, *fillvalue* will be emitted indefinitely.\n\nTo create an *iterable* of exactly size *n*, you can truncate with\n{func}`islice`.\n\n> ```pycon\n> >>> list(islice(padded([1, 2, 3], '?'), 5))\n> [1, 2, 3, '?', '?']\n> >>> list(islice(padded([1, 2, 3, 4, 5, 6, 7, 8], '?'), 5))\n> [1, 2, 3, 4, 5]\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.repeat_each", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": "..."}], "returns": null, "documentation": ["Repeat each element in *iterable* *n* times.\n\n```pycon\n>>> list(repeat_each('ABC', 3))\n['A', 'A', 'A', 'B', 'B', 'B', 'C', 'C', 'C']\n```\n"]}, {"name": "setuptools._vendor.more_itertools.more.repeat_last", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "default", "type": null, "default": "..."}], "returns": null, "documentation": ["After the *iterable* is exhausted, keep yielding its last element.\n\n> ```pycon\n> >>> list(islice(repeat_last(range(3)), 5))\n> [0, 1, 2, 2, 2]\n> ```\n\nIf the iterable is empty, yield *default* forever:\n\n```\n>>> list(islice(repeat_last(range(0), 42), 5))\n[42, 42, 42, 42, 42]\n```\n"]}, {"name": "setuptools._vendor.more_itertools.more.distribute", "asynchronous": false, "params": [{"name": "n", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Distribute the items from *iterable* among *n* smaller iterables.\n\n> ```pycon\n> >>> group_1, group_2 = distribute(2, [1, 2, 3, 4, 5, 6])\n> >>> list(group_1)\n> [1, 3, 5]\n> >>> list(group_2)\n> [2, 4, 6]\n> ```\n\nIf the length of *iterable* is not evenly divisible by *n*, then the\nlength of the returned iterables will not be identical:\n\n> ```pycon\n> >>> children = distribute(3, [1, 2, 3, 4, 5, 6, 7])\n> >>> [list(c) for c in children]\n> [[1, 4, 7], [2, 5], [3, 6]]\n> ```\n\nIf the length of *iterable* is smaller than *n*, then the last returned\niterables will be empty:\n\n> ```pycon\n> >>> children = distribute(5, [1, 2, 3])\n> >>> [list(c) for c in children]\n> [[1], [2], [3], [], []]\n> ```\n\nThis function uses {func}`itertools.tee` and may require significant\nstorage.\n\nIf you need the order items in the smaller iterables to match the\noriginal iterable, see {func}`divide`.\n"]}, {"name": "setuptools._vendor.more_itertools.more.stagger", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "offsets", "type": null, "default": "..."}, {"name": "longest", "type": null, "default": "..."}, {"name": "fillvalue", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield tuples whose elements are offset from *iterable*.\nThe amount by which the `i`-th item in each tuple is offset is given by\nthe `i`-th item in *offsets*.\n\n> ```pycon\n> >>> list(stagger([0, 1, 2, 3]))\n> [(None, 0, 1), (0, 1, 2), (1, 2, 3)]\n> >>> list(stagger(range(8), offsets=(0, 2, 4)))\n> [(0, 2, 4), (1, 3, 5), (2, 4, 6), (3, 5, 7)]\n> ```\n\nBy default, the sequence will end when the final element of a tuple is the\nlast item in the iterable. To continue until the first element of a tuple\nis the last item in the iterable, set *longest* to `True`:\n\n```\n>>> list(stagger([0, 1, 2, 3], longest=True))\n[(None, 0, 1), (0, 1, 2), (1, 2, 3), (2, 3, None), (3, None, None)]\n```\n\nBy default, `None` will be used to replace offsets beyond the end of the\nsequence. Specify *fillvalue* to use some other value.\n"]}, {"name": "setuptools._vendor.more_itertools.more.zip_equal", "asynchronous": false, "params": [{"name": "*iterables", "type": null, "default": null}], "returns": null, "documentation": ["`zip` the input *iterables* together, but raise\n`UnequalIterablesError` if they aren't all the same length.\n\n> ```pycon\n> >>> it_1 = range(3)\n> >>> it_2 = iter('abc')\n> >>> list(zip_equal(it_1, it_2))\n> [(0, 'a'), (1, 'b'), (2, 'c')]\n> ```\n>\n> ```pycon\n> >>> it_1 = range(3)\n> >>> it_2 = iter('abcd')\n> >>> list(zip_equal(it_1, it_2)) # doctest: +IGNORE_EXCEPTION_DETAIL\n> Traceback (most recent call last):\n> ...\n> more_itertools.more.UnequalIterablesError: Iterables have different\n> lengths\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.zip_offset", "asynchronous": false, "params": [{"name": "*iterables", "type": null, "default": null}, {"name": "offsets", "type": null, "default": null}, {"name": "longest", "type": null, "default": "..."}, {"name": "fillvalue", "type": null, "default": "..."}], "returns": null, "documentation": ["`zip` the input *iterables* together, but offset the `i`-th iterable\nby the `i`-th item in *offsets*.\n\n> ```pycon\n> >>> list(zip_offset('0123', 'abcdef', offsets=(0, 1)))\n> [('0', 'b'), ('1', 'c'), ('2', 'd'), ('3', 'e')]\n> ```\n\nThis can be used as a lightweight alternative to SciPy or pandas to analyze\ndata sets in which some series have a lead or lag relationship.\n\nBy default, the sequence will end when the shortest iterable is exhausted.\nTo continue until the longest iterable is exhausted, set *longest* to\n`True`.\n\n> ```pycon\n> >>> list(zip_offset('0123', 'abcdef', offsets=(0, 1), longest=True))\n> [('0', 'b'), ('1', 'c'), ('2', 'd'), ('3', 'e'), (None, 'f')]\n> ```\n\nBy default, `None` will be used to replace offsets beyond the end of the\nsequence. Specify *fillvalue* to use some other value.\n"]}, {"name": "setuptools._vendor.more_itertools.more.sort_together", "asynchronous": false, "params": [{"name": "iterables", "type": null, "default": null}, {"name": "key_list", "type": null, "default": "..."}, {"name": "key", "type": null, "default": "..."}, {"name": "reverse", "type": null, "default": "..."}], "returns": null, "documentation": ["Return the input iterables sorted together, with *key_list* as the\npriority for sorting. All iterables are trimmed to the length of the\nshortest one.\n\nThis can be used like the sorting function in a spreadsheet. If each\niterable represents a column of data, the key list determines which\ncolumns are used for sorting.\n\nBy default, all iterables are sorted using the `0`-th iterable:\n\n```\n>>> iterables = [(4, 3, 2, 1), ('a', 'b', 'c', 'd')]\n>>> sort_together(iterables)\n[(1, 2, 3, 4), ('d', 'c', 'b', 'a')]\n```\n\nSet a different key list to sort according to another iterable.\nSpecifying multiple keys dictates how ties are broken:\n\n```\n>>> iterables = [(3, 1, 2), (0, 1, 0), ('c', 'b', 'a')]\n>>> sort_together(iterables, key_list=(1, 2))\n[(2, 3, 1), (0, 0, 1), ('a', 'c', 'b')]\n```\n\nTo sort by a function of the elements of the iterable, pass a *key*\nfunction. Its arguments are the elements of the iterables corresponding to\nthe key list:\n\n```\n>>> names = ('a', 'b', 'c')\n>>> lengths = (1, 2, 3)\n>>> widths = (5, 2, 1)\n>>> def area(length, width):\n...     return length * width\n>>> sort_together([names, lengths, widths], key_list=(1, 2), key=area)\n[('c', 'b', 'a'), (3, 2, 1), (1, 2, 5)]\n```\n\nSet *reverse* to `True` to sort in descending order.\n\n> ```pycon\n> >>> sort_together([(1, 2, 3), ('c', 'b', 'a')], reverse=True)\n> [(3, 2, 1), ('a', 'b', 'c')]\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.unzip", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["The inverse of {func}`zip`, this function disaggregates the elements\nof the zipped *iterable*.\n\nThe `i`-th iterable contains the `i`-th element from each element\nof the zipped iterable. The first element is used to determine the\nlength of the remaining elements.\n\n> ```pycon\n> >>> iterable = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n> >>> letters, numbers = unzip(iterable)\n> >>> list(letters)\n> ['a', 'b', 'c', 'd']\n> >>> list(numbers)\n> [1, 2, 3, 4]\n> ```\n\nThis is similar to using `zip(*iterable)`, but it avoids reading\n*iterable* into memory. Note, however, that this function uses\n{func}`itertools.tee` and thus may require significant storage.\n"]}, {"name": "setuptools._vendor.more_itertools.more.divide", "asynchronous": false, "params": [{"name": "n", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Divide the elements from *iterable* into *n* parts, maintaining\norder.\n\n> ```pycon\n> >>> group_1, group_2 = divide(2, [1, 2, 3, 4, 5, 6])\n> >>> list(group_1)\n> [1, 2, 3]\n> >>> list(group_2)\n> [4, 5, 6]\n> ```\n\nIf the length of *iterable* is not evenly divisible by *n*, then the\nlength of the returned iterables will not be identical:\n\n> ```pycon\n> >>> children = divide(3, [1, 2, 3, 4, 5, 6, 7])\n> >>> [list(c) for c in children]\n> [[1, 2, 3], [4, 5], [6, 7]]\n> ```\n\nIf the length of the iterable is smaller than n, then the last returned\niterables will be empty:\n\n> ```pycon\n> >>> children = divide(5, [1, 2, 3])\n> >>> [list(c) for c in children]\n> [[1], [2], [3], [], []]\n> ```\n\nThis function will exhaust the iterable before returning.\nIf order is not important, see {func}`distribute`, which does not first\npull the iterable into memory.\n"]}, {"name": "setuptools._vendor.more_itertools.more.always_iterable", "asynchronous": false, "params": [{"name": "obj", "type": null, "default": null}, {"name": "base_type", "type": null, "default": "..."}], "returns": null, "documentation": ["If *obj* is iterable, return an iterator over its items:\n\n```\n>>> obj = (1, 2, 3)\n>>> list(always_iterable(obj))\n[1, 2, 3]\n```\n\nIf *obj* is not iterable, return a one-item iterable containing *obj*:\n\n```\n>>> obj = 1\n>>> list(always_iterable(obj))\n[1]\n```\n\nIf *obj* is `None`, return an empty iterable:\n\n> ```pycon\n> >>> obj = None\n> >>> list(always_iterable(None))\n> []\n> ```\n\nBy default, binary and text strings are not considered iterable:\n\n```\n>>> obj = 'foo'\n>>> list(always_iterable(obj))\n['foo']\n```\n\nIf *base_type* is set, objects for which `isinstance(obj, base_type)`\nreturns `True` won't be considered iterable.\n\n> ```pycon\n> >>> obj = {'a': 1}\n> >>> list(always_iterable(obj))  # Iterate over the dict's keys\n> ['a']\n> >>> list(always_iterable(obj, base_type=dict))  # Treat dicts as a unit\n> [{'a': 1}]\n> ```\n\nSet *base_type* to `None` to avoid any special handling and treat objects\nPython considers iterable as iterable:\n\n> ```pycon\n> >>> obj = 'foo'\n> >>> list(always_iterable(obj, base_type=None))\n> ['f', 'o', 'o']\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.adjacent", "asynchronous": false, "params": [{"name": "predicate", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}, {"name": "distance", "type": null, "default": "..."}], "returns": null, "documentation": ["Return an iterable over `(bool, item)` tuples where the `item` is\ndrawn from *iterable* and the `bool` indicates whether\nthat item satisfies the *predicate* or is adjacent to an item that does.\n\nFor example, to find whether items are adjacent to a `3`:\n\n```\n>>> list(adjacent(lambda x: x == 3, range(6)))\n[(False, 0), (False, 1), (True, 2), (True, 3), (True, 4), (False, 5)]\n```\n\nSet *distance* to change what counts as adjacent. For example, to find\nwhether items are two places away from a `3`:\n\n> ```pycon\n> >>> list(adjacent(lambda x: x == 3, range(6), distance=2))\n> [(False, 0), (True, 1), (True, 2), (True, 3), (True, 4), (True, 5)]\n> ```\n\nThis is useful for contextualizing the results of a search function.\nFor example, a code comparison tool might want to identify lines that\nhave changed, but also surrounding lines to give the viewer of the diff\ncontext.\n\nThe predicate function will only be called once for each item in the\niterable.\n\nSee also {func}`groupby_transform`, which can be used with this function\nto group ranges of items with the same `bool` value.\n"]}, {"name": "setuptools._vendor.more_itertools.more.groupby_transform", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "keyfunc", "type": null, "default": "..."}, {"name": "valuefunc", "type": null, "default": "..."}, {"name": "reducefunc", "type": null, "default": "..."}], "returns": null, "documentation": ["An extension of {func}`itertools.groupby` that can apply transformations\nto the grouped data.\n\n- *keyfunc* is a function computing a key value for each item in *iterable*\n- *valuefunc* is a function that transforms the individual items from\n  *iterable* after grouping\n- *reducefunc* is a function that transforms each group of items\n\n```pycon\n>>> iterable = 'aAAbBBcCC'\n>>> keyfunc = lambda k: k.upper()\n>>> valuefunc = lambda v: v.lower()\n>>> reducefunc = lambda g: ''.join(g)\n>>> list(groupby_transform(iterable, keyfunc, valuefunc, reducefunc))\n[('A', 'aaa'), ('B', 'bbb'), ('C', 'ccc')]\n```\n\nEach optional argument defaults to an identity function if not specified.\n\n{func}`groupby_transform` is useful when grouping elements of an iterable\nusing a separate iterable as the key. To do this, {func}`zip` the iterables\nand pass a *keyfunc* that extracts the first element and a *valuefunc*\nthat extracts the second element:\n\n```\n>>> from operator import itemgetter\n>>> keys = [0, 0, 1, 1, 1, 2, 2, 2, 3]\n>>> values = 'abcdefghi'\n>>> iterable = zip(keys, values)\n>>> grouper = groupby_transform(iterable, itemgetter(0), itemgetter(1))\n>>> [(k, ''.join(g)) for k, g in grouper]\n[(0, 'ab'), (1, 'cde'), (2, 'fgh'), (3, 'i')]\n```\n\nNote that the order of items in the iterable is significant.\nOnly adjacent items are grouped together, so if you don't want any\nduplicate groups, you should sort the iterable by the key function.\n"]}, {"name": "setuptools._vendor.more_itertools.more.count_cycle", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": "..."}], "returns": null, "documentation": ["Cycle through the items from *iterable* up to *n* times, yielding\nthe number of completed cycles along with each item. If *n* is omitted the\nprocess repeats indefinitely.\n\n```pycon\n>>> list(count_cycle('AB', 3))\n[(0, 'A'), (0, 'B'), (1, 'A'), (1, 'B'), (2, 'A'), (2, 'B')]\n```\n"]}, {"name": "setuptools._vendor.more_itertools.more.mark_ends", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Yield 3-tuples of the form `(is_first, is_last, item)`.\n\n```pycon\n>>> list(mark_ends('ABC'))\n[(True, False, 'A'), (False, False, 'B'), (False, True, 'C')]\n```\n\nUse this when looping over an iterable to take special action on its first\nand/or last items:\n\n```pycon\n>>> iterable = ['Header', 100, 200, 'Footer']\n>>> total = 0\n>>> for is_first, is_last, item in mark_ends(iterable):\n...     if is_first:\n...         continue  # Skip the header\n...     if is_last:\n...         continue  # Skip the footer\n...     total += item\n>>> print(total)\n300\n```\n"]}, {"name": "setuptools._vendor.more_itertools.more.locate", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "pred", "type": null, "default": "..."}, {"name": "window_size", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield the index of each item in *iterable* for which *pred* returns\n`True`.\n\n*pred* defaults to {func}`bool`, which will select truthy items:\n\n> ```pycon\n> >>> list(locate([0, 1, 1, 0, 1, 0, 0]))\n> [1, 2, 4]\n> ```\n\nSet *pred* to a custom function to, e.g., find the indexes for a particular\nitem.\n\n> ```pycon\n> >>> list(locate(['a', 'b', 'c', 'b'], lambda x: x == 'b'))\n> [1, 3]\n> ```\n\nIf *window_size* is given, then the *pred* function will be called with\nthat many items. This enables searching for sub-sequences:\n\n> ```pycon\n> >>> iterable = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]\n> >>> pred = lambda *args: args == (1, 2, 3)\n> >>> list(locate(iterable, pred=pred, window_size=3))\n> [1, 5, 9]\n> ```\n\nUse with {func}`seekable` to find indexes and then retrieve the associated\nitems:\n\n> ```pycon\n> >>> from itertools import count\n> >>> from more_itertools import seekable\n> >>> source = (3 * n + 1 if (n % 2) else n // 2 for n in count())\n> >>> it = seekable(source)\n> >>> pred = lambda x: x > 100\n> >>> indexes = locate(it, pred=pred)\n> >>> i = next(indexes)\n> >>> it.seek(i)\n> >>> next(it)\n> 106\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.longest_common_prefix", "asynchronous": false, "params": [{"name": "iterables", "type": null, "default": null}], "returns": null, "documentation": ["Yield elements of the longest common prefix amongst given *iterables*.\n\n```pycon\n>>> ''.join(longest_common_prefix(['abcd', 'abc', 'abf']))\n'ab'\n```\n"]}, {"name": "setuptools._vendor.more_itertools.more.lstrip", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "pred", "type": null, "default": null}], "returns": null, "documentation": ["Yield the items from *iterable*, but strip any from the beginning\nfor which *pred* returns `True`.\n\nFor example, to remove a set of items from the start of an iterable:\n\n> ```pycon\n> >>> iterable = (None, False, None, 1, 2, None, 3, False, None)\n> >>> pred = lambda x: x in {None, False, ''}\n> >>> list(lstrip(iterable, pred))\n> [1, 2, None, 3, False, None]\n> ```\n\nThis function is analogous to to {func}`str.lstrip`, and is essentially\nan wrapper for {func}`itertools.dropwhile`.\n"]}, {"name": "setuptools._vendor.more_itertools.more.rstrip", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "pred", "type": null, "default": null}], "returns": null, "documentation": ["Yield the items from *iterable*, but strip any from the end\nfor which *pred* returns `True`.\n\nFor example, to remove a set of items from the end of an iterable:\n\n> ```pycon\n> >>> iterable = (None, False, None, 1, 2, None, 3, False, None)\n> >>> pred = lambda x: x in {None, False, ''}\n> >>> list(rstrip(iterable, pred))\n> [None, False, None, 1, 2, None, 3]\n> ```\n\nThis function is analogous to {func}`str.rstrip`.\n"]}, {"name": "setuptools._vendor.more_itertools.more.strip", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "pred", "type": null, "default": null}], "returns": null, "documentation": ["Yield the items from *iterable*, but strip any from the\nbeginning and end for which *pred* returns `True`.\n\nFor example, to remove a set of items from both ends of an iterable:\n\n> ```pycon\n> >>> iterable = (None, False, None, 1, 2, None, 3, False, None)\n> >>> pred = lambda x: x in {None, False, ''}\n> >>> list(strip(iterable, pred))\n> [1, 2, None, 3]\n> ```\n\nThis function is analogous to {func}`str.strip`.\n"]}, {"name": "setuptools._vendor.more_itertools.more._islice_helper", "asynchronous": false, "params": [{"name": "it", "type": null, "default": null}, {"name": "s", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.always_reversible", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["An extension of {func}`reversed` that supports all iterables, not\njust those which implement the `Reversible` or `Sequence` protocols.\n\n> ```pycon\n> >>> print(*always_reversible(x for x in range(3)))\n> 2 1 0\n> ```\n\nIf the iterable is already reversible, this function returns the\nresult of {func}`reversed()`. If the iterable is not reversible,\nthis function will cache the remaining items in the iterable and\nyield them in reverse order, which may require significant storage.\n"]}, {"name": "setuptools._vendor.more_itertools.more.consecutive_groups", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "ordering", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield groups of consecutive items using {func}`itertools.groupby`.\nThe *ordering* function determines whether two items are adjacent by\nreturning their position.\n\nBy default, the ordering function is the identity function. This is\nsuitable for finding runs of numbers:\n\n> ```pycon\n> >>> iterable = [1, 10, 11, 12, 20, 30, 31, 32, 33, 40]\n> >>> for group in consecutive_groups(iterable):\n> ...     print(list(group))\n> [1]\n> [10, 11, 12]\n> [20]\n> [30, 31, 32, 33]\n> [40]\n> ```\n\nFor finding runs of adjacent letters, try using the {meth}`index` method\nof a string of letters:\n\n> ```pycon\n> >>> from string import ascii_lowercase\n> >>> iterable = 'abcdfgilmnop'\n> >>> ordering = ascii_lowercase.index\n> >>> for group in consecutive_groups(iterable, ordering):\n> ...     print(list(group))\n> ['a', 'b', 'c', 'd']\n> ['f', 'g']\n> ['i']\n> ['l', 'm', 'n', 'o', 'p']\n> ```\n\nEach group of consecutive items is an iterator that shares it source with\n*iterable*. When an an output group is advanced, the previous group is\nno longer available unless its elements are copied (e.g., into a `list`).\n\n> ```pycon\n> >>> iterable = [1, 2, 11, 12, 21, 22]\n> >>> saved_groups = []\n> >>> for group in consecutive_groups(iterable):\n> ...     saved_groups.append(list(group))  # Copy group elements\n> >>> saved_groups\n> [[1, 2], [11, 12], [21, 22]]\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.difference", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "func", "type": null, "default": "..."}, {"name": "initial", "type": null, "default": "..."}], "returns": null, "documentation": ["This function is the inverse of {func}`itertools.accumulate`. By default\nit will compute the first difference of *iterable* using\n{func}`operator.sub`:\n\n> ```pycon\n> >>> from itertools import accumulate\n> >>> iterable = accumulate([0, 1, 2, 3, 4])  # produces 0, 1, 3, 6, 10\n> >>> list(difference(iterable))\n> [0, 1, 2, 3, 4]\n> ```\n\n*func* defaults to {func}`operator.sub`, but other functions can be\nspecified. They will be applied as follows:\n\n```\nA, B, C, D, ... --> A, func(B, A), func(C, B), func(D, C), ...\n```\n\nFor example, to do progressive division:\n\n> ```pycon\n> >>> iterable = [1, 2, 6, 24, 120]\n> >>> func = lambda x, y: x // y\n> >>> list(difference(iterable, func))\n> [1, 2, 3, 4, 5]\n> ```\n\nIf the *initial* keyword is set, the first element will be skipped when\ncomputing successive differences.\n\n> ```pycon\n> >>> it = [10, 11, 13, 16]  # from accumulate([1, 2, 3], initial=10)\n> >>> list(difference(it, initial=10))\n> [1, 2, 3]\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.exactly_n", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": null}, {"name": "predicate", "type": null, "default": "..."}], "returns": null, "documentation": ["Return `True` if exactly `n` items in the iterable are `True`\naccording to the *predicate* function.\n\n> ```pycon\n> >>> exactly_n([True, True, False], 2)\n> True\n> >>> exactly_n([True, True, False], 1)\n> False\n> >>> exactly_n([0, 1, 2, 3, 4, 5], 3, lambda x: x < 3)\n> True\n> ```\n\nThe iterable will be advanced until `n + 1` truthy items are encountered,\nso avoid calling it on infinite iterables.\n"]}, {"name": "setuptools._vendor.more_itertools.more.circular_shifts", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Return a list of circular shifts of *iterable*.\n\n```pycon\n>>> circular_shifts(range(4))\n[(0, 1, 2, 3), (1, 2, 3, 0), (2, 3, 0, 1), (3, 0, 1, 2)]\n```\n"]}, {"name": "setuptools._vendor.more_itertools.more.make_decorator", "asynchronous": false, "params": [{"name": "wrapping_func", "type": null, "default": null}, {"name": "result_index", "type": null, "default": "..."}], "returns": null, "documentation": ["Return a decorator version of *wrapping_func*, which is a function that\nmodifies an iterable. *result_index* is the position in that function's\nsignature where the iterable goes.\n\nThis lets you use itertools on the \"production end,\" i.e. at function\ndefinition. This can augment what the function returns without changing the\nfunction's code.\n\nFor example, to produce a decorator version of {func}`chunked`:\n\n> ```pycon\n> >>> from more_itertools import chunked\n> >>> chunker = make_decorator(chunked, result_index=0)\n> >>> @chunker(3)\n> ... def iter_range(n):\n> ...     return iter(range(n))\n> ...\n> >>> list(iter_range(9))\n> [[0, 1, 2], [3, 4, 5], [6, 7, 8]]\n> ```\n\nTo only allow truthy items to be returned:\n\n> ```pycon\n> >>> truth_serum = make_decorator(filter, result_index=1)\n> >>> @truth_serum(bool)\n> ... def boolean_test():\n> ...     return [0, 1, '', ' ', False, True]\n> ...\n> >>> list(boolean_test())\n> [1, ' ', True]\n> ```\n\nThe {func}`peekable` and {func}`seekable` wrappers make for practical\ndecorators:\n\n> ```pycon\n> >>> from more_itertools import peekable\n> >>> peekable_function = make_decorator(peekable)\n> >>> @peekable_function()\n> ... def str_range(*args):\n> ...     return (str(x) for x in range(*args))\n> ...\n> >>> it = str_range(1, 20, 2)\n> >>> next(it), next(it), next(it)\n> ('1', '3', '5')\n> >>> it.peek()\n> '7'\n> >>> next(it)\n> '7'\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.map_reduce", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "keyfunc", "type": null, "default": null}, {"name": "valuefunc", "type": null, "default": "..."}, {"name": "reducefunc", "type": null, "default": "..."}], "returns": null, "documentation": ["Return a dictionary that maps the items in *iterable* to categories\ndefined by *keyfunc*, transforms them with *valuefunc*, and\nthen summarizes them by category with *reducefunc*.\n\n*valuefunc* defaults to the identity function if it is unspecified.\nIf *reducefunc* is unspecified, no summarization takes place:\n\n> ```pycon\n> >>> keyfunc = lambda x: x.upper()\n> >>> result = map_reduce('abbccc', keyfunc)\n> >>> sorted(result.items())\n> [('A', ['a']), ('B', ['b', 'b']), ('C', ['c', 'c', 'c'])]\n> ```\n\nSpecifying *valuefunc* transforms the categorized items:\n\n> ```pycon\n> >>> keyfunc = lambda x: x.upper()\n> >>> valuefunc = lambda x: 1\n> >>> result = map_reduce('abbccc', keyfunc, valuefunc)\n> >>> sorted(result.items())\n> [('A', [1]), ('B', [1, 1]), ('C', [1, 1, 1])]\n> ```\n\nSpecifying *reducefunc* summarizes the categorized items:\n\n> ```pycon\n> >>> keyfunc = lambda x: x.upper()\n> >>> valuefunc = lambda x: 1\n> >>> reducefunc = sum\n> >>> result = map_reduce('abbccc', keyfunc, valuefunc, reducefunc)\n> >>> sorted(result.items())\n> [('A', 1), ('B', 2), ('C', 3)]\n> ```\n\nYou may want to filter the input iterable before applying the map/reduce\nprocedure:\n\n> ```pycon\n> >>> all_items = range(30)\n> >>> items = [x for x in all_items if 10 <= x <= 20]  # Filter\n> >>> keyfunc = lambda x: x % 2  # Evens map to 0; odds to 1\n> >>> categories = map_reduce(items, keyfunc=keyfunc)\n> >>> sorted(categories.items())\n> [(0, [10, 12, 14, 16, 18, 20]), (1, [11, 13, 15, 17, 19])]\n> >>> summaries = map_reduce(items, keyfunc=keyfunc, reducefunc=sum)\n> >>> sorted(summaries.items())\n> [(0, 90), (1, 75)]\n> ```\n\nNote that all items in the iterable are gathered into a list before the\nsummarization step, which may require significant storage.\n\nThe returned object is a {obj}`collections.defaultdict` with the\n`default_factory` set to `None`, such that it behaves like a normal\ndictionary.\n"]}, {"name": "setuptools._vendor.more_itertools.more.rlocate", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "pred", "type": null, "default": "..."}, {"name": "window_size", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield the index of each item in *iterable* for which *pred* returns\n`True`, starting from the right and moving left.\n\n*pred* defaults to {func}`bool`, which will select truthy items:\n\n> ```pycon\n> >>> list(rlocate([0, 1, 1, 0, 1, 0, 0]))  # Truthy at 1, 2, and 4\n> [4, 2, 1]\n> ```\n\nSet *pred* to a custom function to, e.g., find the indexes for a particular\nitem:\n\n> ```pycon\n> >>> iterable = iter('abcb')\n> >>> pred = lambda x: x == 'b'\n> >>> list(rlocate(iterable, pred))\n> [3, 1]\n> ```\n\nIf *window_size* is given, then the *pred* function will be called with\nthat many items. This enables searching for sub-sequences:\n\n> ```pycon\n> >>> iterable = [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]\n> >>> pred = lambda *args: args == (1, 2, 3)\n> >>> list(rlocate(iterable, pred=pred, window_size=3))\n> [9, 5, 1]\n> ```\n\nBeware, this function won't return anything for infinite iterables.\nIf *iterable* is reversible, `rlocate` will reverse it and search from\nthe right. Otherwise, it will search from the left and return the results\nin reverse order.\n\nSee {func}`locate` to for other example applications.\n"]}, {"name": "setuptools._vendor.more_itertools.more.replace", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "pred", "type": null, "default": null}, {"name": "substitutes", "type": null, "default": null}, {"name": "count", "type": null, "default": "..."}, {"name": "window_size", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield the items from *iterable*, replacing the items for which *pred*\nreturns `True` with the items from the iterable *substitutes*.\n\n> ```pycon\n> >>> iterable = [1, 1, 0, 1, 1, 0, 1, 1]\n> >>> pred = lambda x: x == 0\n> >>> substitutes = (2, 3)\n> >>> list(replace(iterable, pred, substitutes))\n> [1, 1, 2, 3, 1, 1, 2, 3, 1, 1]\n> ```\n\nIf *count* is given, the number of replacements will be limited:\n\n> ```pycon\n> >>> iterable = [1, 1, 0, 1, 1, 0, 1, 1, 0]\n> >>> pred = lambda x: x == 0\n> >>> substitutes = [None]\n> >>> list(replace(iterable, pred, substitutes, count=2))\n> [1, 1, None, 1, 1, None, 1, 1, 0]\n> ```\n\nUse *window_size* to control the number of items passed as arguments to\n*pred*. This allows for locating and replacing subsequences.\n\n> ```pycon\n> >>> iterable = [0, 1, 2, 5, 0, 1, 2, 5]\n> >>> window_size = 3\n> >>> pred = lambda *args: args == (0, 1, 2)  # 3 items passed to pred\n> >>> substitutes = [3, 4] # Splice in these items\n> >>> list(replace(iterable, pred, substitutes, window_size=window_size))\n> [3, 4, 5, 3, 4, 5]\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.partitions", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Yield all possible order-preserving partitions of *iterable*.\n\n```pycon\n>>> iterable = 'abc'\n>>> for part in partitions(iterable):\n...     print([''.join(p) for p in part])\n['abc']\n['a', 'bc']\n['ab', 'c']\n['a', 'b', 'c']\n```\n\nThis is unrelated to {func}`partition`.\n"]}, {"name": "setuptools._vendor.more_itertools.more.set_partitions", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "k", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield the set partitions of *iterable* into *k* parts. Set partitions are\nnot order-preserving.\n\n```pycon\n>>> iterable = 'abc'\n>>> for part in set_partitions(iterable, 2):\n...     print([''.join(p) for p in part])\n['a', 'bc']\n['ab', 'c']\n['b', 'ac']\n```\n\nIf *k* is not given, every set partition is generated.\n\n```pycon\n>>> iterable = 'abc'\n>>> for part in set_partitions(iterable):\n...     print([''.join(p) for p in part])\n['abc']\n['a', 'bc']\n['ab', 'c']\n['b', 'ac']\n['a', 'b', 'c']\n```\n"]}, {"name": "setuptools._vendor.more_itertools.more.only", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "default", "type": null, "default": "..."}, {"name": "too_long", "type": null, "default": "..."}], "returns": null, "documentation": ["If *iterable* has only one item, return it.\nIf it has zero items, return *default*.\nIf it has more than one item, raise the exception given by *too_long*,\nwhich is `ValueError` by default.\n\n```pycon\n>>> only([], default='missing')\n'missing'\n>>> only([1])\n1\n>>> only([1, 2])  # doctest: +IGNORE_EXCEPTION_DETAIL\nTraceback (most recent call last):\n...\nValueError: Expected exactly one item in iterable, but got 1, 2,\n and perhaps more.'\n>>> only([1, 2], too_long=TypeError)  # doctest: +IGNORE_EXCEPTION_DETAIL\nTraceback (most recent call last):\n...\nTypeError\n```\n\nNote that {func}`only` attempts to advance *iterable* twice to ensure there\nis only one item. See {func}`spy` or {func}`peekable` to check\niterable contents less destructively.\n"]}, {"name": "setuptools._vendor.more_itertools.more._ichunk", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.ichunked", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": null}], "returns": null, "documentation": ["Break *iterable* into sub-iterables with *n* elements each.\n{func}`ichunked` is like {func}`chunked`, but it yields iterables\ninstead of lists.\n\nIf the sub-iterables are read in order, the elements of *iterable*\nwon't be stored in memory.\nIf they are read out of order, {func}`itertools.tee` is used to cache\nelements as necessary.\n\n```pycon\n>>> from itertools import count\n>>> all_chunks = ichunked(count(), 4)\n>>> c_1, c_2, c_3 = next(all_chunks), next(all_chunks), next(all_chunks)\n>>> list(c_2)  # c_1's elements have been cached; c_3's haven't been\n[4, 5, 6, 7]\n>>> list(c_1)\n[0, 1, 2, 3]\n>>> list(c_3)\n[8, 9, 10, 11]\n```\n"]}, {"name": "setuptools._vendor.more_itertools.more.iequals", "asynchronous": false, "params": [{"name": "*iterables", "type": null, "default": null}], "returns": null, "documentation": ["Return `True` if all given *iterables* are equal to each other,\nwhich means that they contain the same elements in the same order.\n\nThe function is useful for comparing iterables of different data types\nor iterables that do not support equality checks.\n\n```pycon\n>>> iequals(\"abc\", ['a', 'b', 'c'], ('a', 'b', 'c'), iter(\"abc\"))\nTrue\n```\n\n```pycon\n>>> iequals(\"abc\", \"acb\")\nFalse\n```\n\nNot to be confused with {func}`all_equal`, which checks whether all\nelements of iterable are equal to each other.\n"]}, {"name": "setuptools._vendor.more_itertools.more.distinct_combinations", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "r", "type": null, "default": null}], "returns": null, "documentation": ["Yield the distinct combinations of *r* items taken from *iterable*.\n\n> ```pycon\n> >>> list(distinct_combinations([0, 0, 1], 2))\n> [(0, 0), (0, 1)]\n> ```\n\nEquivalent to `set(combinations(iterable))`, except duplicates are not\ngenerated and thrown away. For larger input sequences this is much more\nefficient.\n"]}, {"name": "setuptools._vendor.more_itertools.more.filter_except", "asynchronous": false, "params": [{"name": "validator", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}, {"name": "*exceptions", "type": null, "default": null}], "returns": null, "documentation": ["Yield the items from *iterable* for which the *validator* function does\nnot raise one of the specified *exceptions*.\n\n*validator* is called for each item in *iterable*.\nIt should be a function that accepts one argument and raises an exception\nif that item is not valid.\n\n```pycon\n>>> iterable = ['1', '2', 'three', '4', None]\n>>> list(filter_except(int, iterable, ValueError, TypeError))\n['1', '2', '4']\n```\n\nIf an exception other than one given by *exceptions* is raised by\n*validator*, it is raised like normal.\n"]}, {"name": "setuptools._vendor.more_itertools.more.map_except", "asynchronous": false, "params": [{"name": "function", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}, {"name": "*exceptions", "type": null, "default": null}], "returns": null, "documentation": ["Transform each item from *iterable* with *function* and yield the\nresult, unless *function* raises one of the specified *exceptions*.\n\n*function* is called to transform each item in *iterable*.\nIt should accept one argument.\n\n```pycon\n>>> iterable = ['1', '2', 'three', '4', None]\n>>> list(map_except(int, iterable, ValueError, TypeError))\n[1, 2, 4]\n```\n\nIf an exception other than one given by *exceptions* is raised by\n*function*, it is raised like normal.\n"]}, {"name": "setuptools._vendor.more_itertools.more.map_if", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "pred", "type": null, "default": null}, {"name": "func", "type": null, "default": null}, {"name": "func_else", "type": null, "default": "..."}], "returns": null, "documentation": ["Evaluate each item from *iterable* using *pred*. If the result is\nequivalent to `True`, transform the item with *func* and yield it.\nOtherwise, transform the item with *func_else* and yield it.\n\n*pred*, *func*, and *func_else* should each be functions that accept\none argument. By default, *func_else* is the identity function.\n\n```pycon\n>>> from math import sqrt\n>>> iterable = list(range(-5, 5))\n>>> iterable\n[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]\n>>> list(map_if(iterable, lambda x: x > 3, lambda x: 'toobig'))\n[-5, -4, -3, -2, -1, 0, 1, 2, 3, 'toobig']\n>>> list(map_if(iterable, lambda x: x >= 0,\n... lambda x: f'{sqrt(x):.2f}', lambda x: None))\n[None, None, None, None, None, '0.00', '1.00', '1.41', '1.73', '2.00']\n```\n"]}, {"name": "setuptools._vendor.more_itertools.more._sample_unweighted", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "k", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more._sample_weighted", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "k", "type": null, "default": null}, {"name": "weights", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.sample", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "k", "type": null, "default": null}, {"name": "weights", "type": null, "default": "..."}], "returns": null, "documentation": ["Return a *k*-length list of elements chosen (without replacement)\nfrom the *iterable*. Like {func}`random.sample`, but works on iterables\nof unknown length.\n\n```pycon\n>>> iterable = range(100)\n>>> sample(iterable, 5)  # doctest: +SKIP\n[81, 60, 96, 16, 4]\n```\n\nAn iterable with *weights* may also be given:\n\n```pycon\n>>> iterable = range(100)\n>>> weights = (i * i + 1 for i in range(100))\n>>> sampled = sample(iterable, 5, weights=weights)  # doctest: +SKIP\n[79, 67, 74, 66, 78]\n```\n\nThe algorithm can also be used to generate weighted random permutations.\nThe relative weight of each item determines the probability that it\nappears late in the permutation.\n\n```pycon\n>>> data = \"abcdefgh\"\n>>> weights = range(1, len(data) + 1)\n>>> sample(data, k=len(data), weights=weights)  # doctest: +SKIP\n['c', 'a', 'b', 'e', 'g', 'd', 'h', 'f']\n```\n"]}, {"name": "setuptools._vendor.more_itertools.more.is_sorted", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "key", "type": null, "default": "..."}, {"name": "reverse", "type": null, "default": "..."}, {"name": "strict", "type": null, "default": "..."}], "returns": null, "documentation": ["Returns `True` if the items of iterable are in sorted order, and\n`False` otherwise. *key* and *reverse* have the same meaning that they do\nin the built-in {func}`sorted` function.\n\n```pycon\n>>> is_sorted(['1', '2', '3', '4', '5'], key=int)\nTrue\n>>> is_sorted([5, 4, 3, 1, 2], reverse=True)\nFalse\n```\n\nIf *strict*, tests for strict sorting, that is, returns `False` if equal\nelements are found:\n\n```pycon\n>>> is_sorted([1, 2, 2])\nTrue\n>>> is_sorted([1, 2, 2], strict=True)\nFalse\n```\n\nThe function returns `False` after encountering the first out-of-order\nitem. If there are no out-of-order items, the iterable is exhausted.\n"]}, {"name": "setuptools._vendor.more_itertools.more.windowed_complete", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": null}], "returns": null, "documentation": ["Yield `(beginning, middle, end)` tuples, where:\n\n- Each `middle` has *n* items from *iterable*\n- Each `beginning` has the items before the ones in `middle`\n- Each `end` has the items after the ones in `middle`\n\n```pycon\n>>> iterable = range(7)\n>>> n = 3\n>>> for beginning, middle, end in windowed_complete(iterable, n):\n...     print(beginning, middle, end)\n() (0, 1, 2) (3, 4, 5, 6)\n(0,) (1, 2, 3) (4, 5, 6)\n(0, 1) (2, 3, 4) (5, 6)\n(0, 1, 2) (3, 4, 5) (6,)\n(0, 1, 2, 3) (4, 5, 6) ()\n```\n\nNote that *n* must be at least 0 and most equal to the length of\n*iterable*.\n\nThis function will exhaust the iterable and may require significant\nstorage.\n"]}, {"name": "setuptools._vendor.more_itertools.more.all_unique", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "key", "type": null, "default": "..."}], "returns": null, "documentation": ["Returns `True` if all the elements of *iterable* are unique (no two\nelements are equal).\n\n> ```pycon\n> >>> all_unique('ABCB')\n> False\n> ```\n\nIf a *key* function is specified, it will be used to make comparisons.\n\n> ```pycon\n> >>> all_unique('ABCb')\n> True\n> >>> all_unique('ABCb', str.lower)\n> False\n> ```\n\nThe function returns as soon as the first non-unique element is\nencountered. Iterables with a mix of hashable and unhashable items can\nbe used, but the function will be slower for unhashable items.\n"]}, {"name": "setuptools._vendor.more_itertools.more.nth_product", "asynchronous": false, "params": [{"name": "index", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}], "returns": null, "documentation": ["Equivalent to `list(product(*args))[index]`.\n\nThe products of *args* can be ordered lexicographically.\n{func}`nth_product` computes the product at sort position *index* without\ncomputing the previous products.\n\n> ```pycon\n> >>> nth_product(8, range(2), range(2), range(2), range(2))\n> (1, 0, 0, 0)\n> ```\n\n`IndexError` will be raised if the given *index* is invalid.\n"]}, {"name": "setuptools._vendor.more_itertools.more.nth_permutation", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "r", "type": null, "default": null}, {"name": "index", "type": null, "default": null}], "returns": null, "documentation": ["Equivalent to `` list(permutations(iterable, r))[index]` ``\n\nThe subsequences of *iterable* that are of length *r* where order is\nimportant can be ordered lexicographically. {func}`nth_permutation`\ncomputes the subsequence at sort position *index* directly, without\ncomputing the previous subsequences.\n\n> ```pycon\n> >>> nth_permutation('ghijk', 2, 5)\n> ('h', 'i')\n> ```\n\n`ValueError` will be raised If *r* is negative or greater than the length\nof *iterable*.\n`IndexError` will be raised if the given *index* is invalid.\n"]}, {"name": "setuptools._vendor.more_itertools.more.nth_combination_with_replacement", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "r", "type": null, "default": null}, {"name": "index", "type": null, "default": null}], "returns": null, "documentation": ["Equivalent to\n`list(combinations_with_replacement(iterable, r))[index]`.\n\nThe subsequences with repetition of *iterable* that are of length *r* can\nbe ordered lexicographically. {func}`nth_combination_with_replacement`\ncomputes the subsequence at sort position *index* directly, without\ncomputing the previous subsequences with replacement.\n\n> ```pycon\n> >>> nth_combination_with_replacement(range(5), 3, 5)\n> (0, 1, 1)\n> ```\n\n`ValueError` will be raised If *r* is negative or greater than the length\nof *iterable*.\n`IndexError` will be raised if the given *index* is invalid.\n"]}, {"name": "setuptools._vendor.more_itertools.more.value_chain", "asynchronous": false, "params": [{"name": "*args", "type": null, "default": null}], "returns": null, "documentation": ["Yield all arguments passed to the function in the same order in which\nthey were passed. If an argument itself is iterable then iterate over its\nvalues.\n\n    >>> list(value_chain(1, 2, 3, [4, 5, 6]))\n    [1, 2, 3, 4, 5, 6]\n\nBinary and text strings are not considered iterable and are emitted\nas-is:\n\n    >>> list(value_chain('12', '34', ['56', '78']))\n    ['12', '34', '56', '78']\n\nPre- or postpend a single element to an iterable:\n\n    >>> list(value_chain(1, [2, 3, 4, 5, 6]))\n    [1, 2, 3, 4, 5, 6]\n    >>> list(value_chain([1, 2, 3, 4, 5], 6))\n    [1, 2, 3, 4, 5, 6]\n\nMultiple levels of nesting are not flattened."]}, {"name": "setuptools._vendor.more_itertools.more.product_index", "asynchronous": false, "params": [{"name": "element", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}], "returns": null, "documentation": ["Equivalent to `list(product(*args)).index(element)`\n\nThe products of *args* can be ordered lexicographically.\n{func}`product_index` computes the first index of *element* without\ncomputing the previous products.\n\n> ```pycon\n> >>> product_index([8, 2], range(10), range(5))\n> 42\n> ```\n\n`ValueError` will be raised if the given *element* isn't in the product\nof *args*.\n"]}, {"name": "setuptools._vendor.more_itertools.more.combination_index", "asynchronous": false, "params": [{"name": "element", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Equivalent to `list(combinations(iterable, r)).index(element)`\n\nThe subsequences of *iterable* that are of length *r* can be ordered\nlexicographically. {func}`combination_index` computes the index of the\nfirst *element*, without computing the previous combinations.\n\n> ```pycon\n> >>> combination_index('adf', 'abcdefg')\n> 10\n> ```\n\n`ValueError` will be raised if the given *element* isn't one of the\ncombinations of *iterable*.\n"]}, {"name": "setuptools._vendor.more_itertools.more.combination_with_replacement_index", "asynchronous": false, "params": [{"name": "element", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Equivalent to\n`list(combinations_with_replacement(iterable, r)).index(element)`\n\nThe subsequences with repetition of *iterable* that are of length *r* can\nbe ordered lexicographically. {func}`combination_with_replacement_index`\ncomputes the index of the first *element*, without computing the previous\ncombinations with replacement.\n\n> ```pycon\n> >>> combination_with_replacement_index('adf', 'abcdefg')\n> 20\n> ```\n\n`ValueError` will be raised if the given *element* isn't one of the\ncombinations with replacement of *iterable*.\n"]}, {"name": "setuptools._vendor.more_itertools.more.permutation_index", "asynchronous": false, "params": [{"name": "element", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Equivalent to `` list(permutations(iterable, r)).index(element)` ``\n\nThe subsequences of *iterable* that are of length *r* where order is\nimportant can be ordered lexicographically. {func}`permutation_index`\ncomputes the index of the first *element* directly, without computing\nthe previous permutations.\n\n> ```pycon\n> >>> permutation_index([1, 3, 2], range(5))\n> 19\n> ```\n\n`ValueError` will be raised if the given *element* isn't one of the\npermutations of *iterable*.\n"]}, {"name": "setuptools._vendor.more_itertools.more.chunked_even", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": null}], "returns": null, "documentation": ["Break *iterable* into lists of approximately length *n*.\nItems are distributed such the lengths of the lists differ by at most\n1 item.\n\n```pycon\n>>> iterable = [1, 2, 3, 4, 5, 6, 7]\n>>> n = 3\n>>> list(chunked_even(iterable, n))  # List lengths: 3, 2, 2\n[[1, 2, 3], [4, 5], [6, 7]]\n>>> list(chunked(iterable, n))  # List lengths: 3, 3, 1\n[[1, 2, 3], [4, 5, 6], [7]]\n```\n"]}, {"name": "setuptools._vendor.more_itertools.more.zip_broadcast", "asynchronous": false, "params": [{"name": "*objects", "type": null, "default": null}, {"name": "scalar_types", "type": null, "default": "..."}, {"name": "strict", "type": null, "default": "..."}], "returns": null, "documentation": ["A version of {func}`zip` that \"broadcasts\" any scalar\n(i.e., non-iterable) items into output tuples.\n\n```pycon\n>>> iterable_1 = [1, 2, 3]\n>>> iterable_2 = ['a', 'b', 'c']\n>>> scalar = '_'\n>>> list(zip_broadcast(iterable_1, iterable_2, scalar))\n[(1, 'a', '_'), (2, 'b', '_'), (3, 'c', '_')]\n```\n\nThe *scalar_types* keyword argument determines what types are considered\nscalar. It is set to `(str, bytes)` by default. Set it to `None` to\ntreat strings and byte strings as iterable:\n\n```pycon\n>>> list(zip_broadcast('abc', 0, 'xyz', scalar_types=None))\n[('a', 0, 'x'), ('b', 0, 'y'), ('c', 0, 'z')]\n```\n\nIf the *strict* keyword argument is `True`, then\n`UnequalIterablesError` will be raised if any of the iterables have\ndifferent lengths.\n"]}, {"name": "setuptools._vendor.more_itertools.more.unique_in_window", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "n", "type": null, "default": null}, {"name": "key", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield the items from *iterable* that haven't been seen recently.\n*n* is the size of the lookback window.\n\n    >>> iterable = [0, 1, 0, 2, 3, 0]\n    >>> n = 3\n    >>> list(unique_in_window(iterable, n))\n    [0, 1, 2, 3, 0]\n\nThe *key* function, if provided, will be used to determine uniqueness:\n\n    >>> list(unique_in_window('abAcda', 3, key=lambda x: x.lower()))\n    ['a', 'b', 'c', 'd', 'a']\n\nThe items in *iterable* must be hashable."]}, {"name": "setuptools._vendor.more_itertools.more.duplicates_everseen", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "key", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield duplicate elements after their first appearance.\n\n```pycon\n>>> list(duplicates_everseen('mississippi'))\n['s', 'i', 's', 's', 'i', 'p', 'i']\n>>> list(duplicates_everseen('AaaBbbCccAaa', str.lower))\n['a', 'a', 'b', 'b', 'c', 'c', 'A', 'a', 'a']\n```\n\nThis function is analogous to {func}`unique_everseen` and is subject to\nthe same performance considerations.\n"]}, {"name": "setuptools._vendor.more_itertools.more.duplicates_justseen", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "key", "type": null, "default": "..."}], "returns": null, "documentation": ["Yields serially-duplicate elements after their first appearance.\n\n```pycon\n>>> list(duplicates_justseen('mississippi'))\n['s', 's', 'p']\n>>> list(duplicates_justseen('AaaBbbCccAaa', str.lower))\n['a', 'a', 'b', 'b', 'c', 'c', 'a', 'a']\n```\n\nThis function is analogous to {func}`unique_justseen`.\n"]}, {"name": "setuptools._vendor.more_itertools.more.classify_unique", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "key", "type": null, "default": "..."}], "returns": null, "documentation": ["Classify each element in terms of its uniqueness.\n\nFor each element in the input iterable, return a 3-tuple consisting of:\n\n1. The element itself\n2. `False` if the element is equal to the one preceding it in the input,\n   `True` otherwise (i.e. the equivalent of {func}`unique_justseen`)\n3. `False` if this element has been seen anywhere in the input before,\n   `True` otherwise (i.e. the equivalent of {func}`unique_everseen`)\n\n```pycon\n>>> list(classify_unique('otto'))    # doctest: +NORMALIZE_WHITESPACE\n[('o', True,  True),\n ('t', True,  True),\n ('t', False, False),\n ('o', True,  False)]\n```\n\nThis function is analogous to {func}`unique_everseen` and is subject to\nthe same performance considerations.\n"]}, {"name": "setuptools._vendor.more_itertools.more.minmax", "asynchronous": false, "params": [{"name": "iterable_or_value", "type": null, "default": null}, {"name": "*others", "type": null, "default": null}, {"name": "key", "type": null, "default": "..."}, {"name": "default", "type": null, "default": "..."}], "returns": null, "documentation": ["Returns both the smallest and largest items in an iterable\nor the largest of two or more arguments.\n\n> ```pycon\n> >>> minmax([3, 1, 5])\n> (1, 5)\n> ```\n>\n> ```pycon\n> >>> minmax(4, 2, 6)\n> (2, 6)\n> ```\n\nIf a *key* function is provided, it will be used to transform the input\nitems for comparison.\n\n> ```pycon\n> >>> minmax([5, 30], key=str)  # '30' sorts before '5'\n> (30, 5)\n> ```\n\nIf a *default* value is provided, it will be returned if there are no\ninput items.\n\n> ```pycon\n> >>> minmax([], default=(0, 0))\n> (0, 0)\n> ```\n\nOtherwise `ValueError` is raised.\n\nThis function is based on the\n[recipe](http://code.activestate.com/recipes/577916/) by\nRaymond Hettinger and takes care to minimize the number of comparisons\nperformed.\n"]}, {"name": "setuptools._vendor.more_itertools.more.constrained_batches", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "max_size", "type": null, "default": null}, {"name": "max_count", "type": null, "default": "..."}, {"name": "get_len", "type": null, "default": "..."}, {"name": "strict", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield batches of items from *iterable* with a combined size limited by\n*max_size*.\n\n```pycon\n>>> iterable = [b'12345', b'123', b'12345678', b'1', b'1', b'12', b'1']\n>>> list(constrained_batches(iterable, 10))\n[(b'12345', b'123'), (b'12345678', b'1', b'1'), (b'12', b'1')]\n```\n\nIf a *max_count* is supplied, the number of items per batch is also\nlimited:\n\n```pycon\n>>> iterable = [b'12345', b'123', b'12345678', b'1', b'1', b'12', b'1']\n>>> list(constrained_batches(iterable, 10, max_count = 2))\n[(b'12345', b'123'), (b'12345678', b'1'), (b'1', b'12'), (b'1',)]\n```\n\nIf a *get_len* function is supplied, use that instead of {func}`len` to\ndetermine item size.\n\nIf *strict* is `True`, raise `ValueError` if any single item is bigger\nthan *max_size*. Otherwise, allow single items to exceed *max_size*.\n"]}, {"name": "setuptools._vendor.more_itertools.more.gray_product", "asynchronous": false, "params": [{"name": "*iterables", "type": null, "default": null}], "returns": null, "documentation": ["Like {func}`itertools.product`, but return tuples in an order such\nthat only one element in the generated tuple changes from one iteration\nto the next.\n\n> ```pycon\n> >>> list(gray_product('AB','CD'))\n> [('A', 'C'), ('B', 'C'), ('B', 'D'), ('A', 'D')]\n> ```\n\nThis function consumes all of the input iterables before producing output.\nIf any of the input iterables have fewer than two items, `ValueError`\nis raised.\n\nFor information on the algorithm, see\n[this section](https://www-cs-faculty.stanford.edu/~knuth/fasc2a.ps.gz)\nof Donald Knuth's *The Art of Computer Programming*.\n"]}, {"name": "setuptools._vendor.more_itertools.more.partial_product", "asynchronous": false, "params": [{"name": "*iterables", "type": null, "default": null}], "returns": null, "documentation": ["Yields tuples containing one item from each iterator, with subsequent\ntuples changing a single item at a time by advancing each iterator until it\nis exhausted. This sequence guarantees every value in each iterable is\noutput at least once without generating all possible combinations.\n\nThis may be useful, for example, when testing an expensive function.\n\n    >>> list(partial_product('AB', 'C', 'DEF'))\n    [('A', 'C', 'D'), ('B', 'C', 'D'), ('B', 'C', 'E'), ('B', 'C', 'F')]"]}, {"name": "setuptools._vendor.more_itertools.more.takewhile_inclusive", "asynchronous": false, "params": [{"name": "predicate", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["A variant of {func}`takewhile` that yields one additional element.\n\n> ```pycon\n> >>> list(takewhile_inclusive(lambda x: x < 5, [1, 4, 6, 4, 1]))\n> [1, 4, 6]\n> ```\n\n{func}`takewhile` would return `[1, 4]`.\n"]}, {"name": "setuptools._vendor.more_itertools.more.outer_product", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}, {"name": "xs", "type": null, "default": null}, {"name": "ys", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["A generalized outer product that applies a binary function to all\npairs of items. Returns a 2D matrix with `len(xs)` rows and `len(ys)`\ncolumns.\nAlso accepts `*args` and `**kwargs` that are passed to `func`.\n\nMultiplication table:\n\n```pycon\n>>> list(outer_product(mul, range(1, 4), range(1, 6)))\n[(1, 2, 3, 4, 5), (2, 4, 6, 8, 10), (3, 6, 9, 12, 15)]\n```\n\nCross tabulation:\n\n```pycon\n>>> xs = ['A', 'B', 'A', 'A', 'B', 'B', 'A', 'A', 'B', 'B']\n>>> ys = ['X', 'X', 'X', 'Y', 'Z', 'Z', 'Y', 'Y', 'Z', 'Z']\n>>> rows = list(zip(xs, ys))\n>>> count_rows = lambda x, y: rows.count((x, y))\n>>> list(outer_product(count_rows, sorted(set(xs)), sorted(set(ys))))\n[(2, 3, 0), (1, 0, 4)]\n```\n\nUsage with `*args` and `**kwargs`:\n\n```pycon\n>>> animals = ['cat', 'wolf', 'mouse']\n>>> list(outer_product(min, animals, animals, key=len))\n[('cat', 'cat', 'cat'), ('cat', 'wolf', 'wolf'), ('cat', 'wolf', 'mouse')]\n```\n"]}, {"name": "setuptools._vendor.more_itertools.more.iter_suppress", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "*exceptions", "type": null, "default": null}], "returns": null, "documentation": ["Yield each of the items from *iterable*. If the iteration raises one of\nthe specified *exceptions*, that exception will be suppressed and iteration\nwill stop.\n\n```pycon\n>>> from itertools import chain\n>>> def breaks_at_five(x):\n...     while True:\n...         if x >= 5:\n...             raise RuntimeError\n...         yield x\n...         x += 1\n>>> it_1 = iter_suppress(breaks_at_five(1), RuntimeError)\n>>> it_2 = iter_suppress(breaks_at_five(2), RuntimeError)\n>>> list(chain(it_1, it_2))\n[1, 2, 3, 4, 2, 3, 4]\n```\n"]}, {"name": "setuptools._vendor.more_itertools.more.filter_map", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Apply *func* to every element of *iterable*, yielding only those which\nare not `None`.\n\n```pycon\n>>> elems = ['1', 'a', '2', 'b', '3']\n>>> list(filter_map(lambda s: int(s) if s.isnumeric() else None, elems))\n[1, 2, 3]\n```\n"]}, {"name": "setuptools._vendor.more_itertools.more.powerset_of_sets", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Yields all possible subsets of the iterable.\n\n> ```pycon\n> >>> list(powerset_of_sets([1, 2, 3]))  # doctest: +SKIP\n> [set(), {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}]\n> >>> list(powerset_of_sets([1, 1, 0]))  # doctest: +SKIP\n> [set(), {1}, {0}, {0, 1}]\n> ```\n\n{func}`powerset_of_sets` takes care to minimize the number\nof hash operations performed.\n"]}, {"name": "setuptools._vendor.more_itertools.more.join_mappings", "asynchronous": false, "params": [{"name": "**field_to_map", "type": null, "default": null}], "returns": null, "documentation": ["Joins multiple mappings together using their common keys.\n\n```pycon\n>>> user_scores = {'elliot': 50, 'claris': 60}\n>>> user_times = {'elliot': 30, 'claris': 40}\n>>> join_mappings(score=user_scores, time=user_times)\n{'elliot': {'score': 50, 'time': 30}, 'claris': {'score': 60, 'time': 40}}\n```\n"]}, {"name": "setuptools._vendor.more_itertools.more._complex_sumprod", "asynchronous": false, "params": [{"name": "v1", "type": null, "default": null}, {"name": "v2", "type": null, "default": null}], "returns": null, "documentation": ["High precision sumprod() for complex numbers.\nUsed by {func}`dft` and {func}`idft`.\n"]}, {"name": "setuptools._vendor.more_itertools.more.dft", "asynchronous": false, "params": [{"name": "xarr", "type": null, "default": null}], "returns": null, "documentation": ["Discrete Fourier Tranform. *xarr* is a sequence of complex numbers.\nYields the components of the corresponding transformed output vector.\n\n```pycon\n>>> import cmath\n>>> xarr = [1, 2-1j, -1j, -1+2j]\n>>> Xarr = [2, -2-2j, -2j, 4+4j]\n>>> all(map(cmath.isclose, dft(xarr), Xarr))\nTrue\n```\n\nSee {func}`idft` for the inverse Discrete Fourier Transform.\n"]}, {"name": "setuptools._vendor.more_itertools.more.idft", "asynchronous": false, "params": [{"name": "Xarr", "type": null, "default": null}], "returns": null, "documentation": ["Inverse Discrete Fourier Tranform. *Xarr* is a sequence of\ncomplex numbers. Yields the components of the corresponding\ninverse-transformed output vector.\n\n```pycon\n>>> import cmath\n>>> xarr = [1, 2-1j, -1j, -1+2j]\n>>> Xarr = [2, -2-2j, -2j, 4+4j]\n>>> all(map(cmath.isclose, idft(Xarr), xarr))\nTrue\n```\n\nSee {func}`dft` for the Discrete Fourier Transform.\n"]}, {"name": "setuptools._vendor.more_itertools.more.doublestarmap", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Apply *func* to every item of *iterable* by dictionary unpacking\nthe item into *func*.\n\nThe difference between {func}`itertools.starmap` and {func}`doublestarmap`\nparallels the distinction between `func(*a)` and `func(**a)`.\n\n```pycon\n>>> iterable = [{'a': 1, 'b': 2}, {'a': 40, 'b': 60}]\n>>> list(doublestarmap(lambda a, b: a + b, iterable))\n[3, 100]\n```\n\n`TypeError` will be raised if *func*'s signature doesn't match the\nmapping contained in *iterable* or if *iterable* does not contain mappings.\n"]}], "variables": [{"name": "setuptools._vendor.more_itertools.more._fsumprod", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.more_itertools.more.peekable", "bases": [], "methods": [{"name": "setuptools._vendor.more_itertools.more.peekable.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.peekable.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.peekable.__bool__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.peekable.peek", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "default", "type": null, "default": "..."}], "returns": null, "documentation": ["Return the item that will be next returned from `next()`.\n\nReturn `default` if there are no items left. If `default` is not\nprovided, raise `StopIteration`.\n"]}, {"name": "setuptools._vendor.more_itertools.more.peekable.prepend", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*items", "type": null, "default": null}], "returns": null, "documentation": ["Stack up items to be the next ones returned from `next()` or\n`self.peek()`. The items will be returned in\nfirst in, first out order:\n\n```\n>>> p = peekable([1, 2, 3])\n>>> p.prepend(10, 11, 12)\n>>> next(p)\n10\n>>> list(p)\n[11, 12, 1, 2, 3]\n```\n\nIt is possible, by prepending items, to \"resurrect\" a peekable that\npreviously raised `StopIteration`.\n\n> ```pycon\n> >>> p = peekable([])\n> >>> next(p)\n> Traceback (most recent call last):\n>   ...\n> StopIteration\n> >>> p.prepend(1)\n> >>> next(p)\n> 1\n> >>> next(p)\n> Traceback (most recent call last):\n>   ...\n> StopIteration\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.peekable.__next__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.peekable._get_slice", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "index", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.peekable.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "index", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Wrap an iterator to allow lookahead and prepending elements.\n\nCall {meth}`peek` on the result to get the value that will be returned\nby {func}`next`. This won't advance the iterator:\n\n> ```pycon\n> >>> p = peekable(['a', 'b'])\n> >>> p.peek()\n> 'a'\n> >>> next(p)\n> 'a'\n> ```\n\nPass {meth}`peek` a default value to return that instead of raising\n`StopIteration` when the iterator is exhausted.\n\n> ```pycon\n> >>> p = peekable([])\n> >>> p.peek('hi')\n> 'hi'\n> ```\n\npeekables also offer a {meth}`prepend` method, which \"inserts\" items\nat the head of the iterable:\n\n> ```pycon\n> >>> p = peekable([1, 2, 3])\n> >>> p.prepend(10, 11, 12)\n> >>> next(p)\n> 10\n> >>> p.peek()\n> 11\n> >>> list(p)\n> [11, 12, 1, 2, 3]\n> ```\n\npeekables can be indexed. Index 0 is the item that will be returned by\n{func}`next`, index 1 is the item after that, and so on:\nThe values up to the given index will be cached.\n\n> ```pycon\n> >>> p = peekable(['a', 'b', 'c', 'd'])\n> >>> p[0]\n> 'a'\n> >>> p[1]\n> 'b'\n> >>> next(p)\n> 'a'\n> ```\n\nNegative indexes are supported, but be aware that they will cache the\nremaining items in the source iterator, which may require significant\nstorage.\n\nTo check whether a peekable is exhausted, check its truth value:\n\n> ```pycon\n> >>> p = peekable(['a', 'b'])\n> >>> if p:  # peekable has items\n> ...     list(p)\n> ['a', 'b']\n> >>> if not p:  # peekable is exhausted\n> ...     list(p)\n> []\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.bucket", "bases": [], "methods": [{"name": "setuptools._vendor.more_itertools.more.bucket.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}, {"name": "key", "type": null, "default": null}, {"name": "validator", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.bucket.__contains__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.bucket._get_values", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": ["Helper to yield items from the parent iterator that match *value*.\nItems that don't match are stored in the local cache as they\nare encountered."]}, {"name": "setuptools._vendor.more_itertools.more.bucket.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.bucket.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Wrap *iterable* and return an object that buckets the iterable into\nchild iterables based on a *key* function.\n\n    >>> iterable = ['a1', 'b1', 'c1', 'a2', 'b2', 'c2', 'b3']\n    >>> s = bucket(iterable, key=lambda x: x[0])  # Bucket by 1st character\n    >>> sorted(list(s))  # Get the keys\n    ['a', 'b', 'c']\n    >>> a_iterable = s['a']\n    >>> next(a_iterable)\n    'a1'\n    >>> next(a_iterable)\n    'a2'\n    >>> list(s['b'])\n    ['b1', 'b2', 'b3']\n\nThe original iterable will be advanced and its items will be cached until\nthey are used by the child iterables. This may require significant storage.\n\nBy default, attempting to select a bucket to which no items belong  will\nexhaust the iterable and cache all values.\nIf you specify a *validator* function, selected buckets will instead be\nchecked against it.\n\n    >>> from itertools import count\n    >>> it = count(1, 2)  # Infinite sequence of odd numbers\n    >>> key = lambda x: x % 10  # Bucket by last digit\n    >>> validator = lambda x: x in {1, 3, 5, 7, 9}  # Odd digits only\n    >>> s = bucket(it, key=key, validator=validator)\n    >>> 2 in s\n    False\n    >>> list(s[2])\n    []"]}, {"name": "setuptools._vendor.more_itertools.more.numeric_range", "bases": ["abc.Sequence", "abc.Hashable"], "methods": [{"name": "setuptools._vendor.more_itertools.more.numeric_range.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.numeric_range.__bool__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.numeric_range.__contains__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "elem", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.numeric_range.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.numeric_range.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.numeric_range.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.numeric_range.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.numeric_range.__len__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.numeric_range._len", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.numeric_range.__reduce__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.numeric_range.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.numeric_range.__reversed__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.numeric_range.count", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.numeric_range.index", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.numeric_range._get_by_index", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "i", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.more_itertools.more.numeric_range._EMPTY_HASH", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["An extension of the built-in `range()` function whose arguments can\nbe any orderable numeric type.\n\nWith only *stop* specified, *start* defaults to `0` and *step*\ndefaults to `1`. The output items will match the type of *stop*:\n\n> ```pycon\n> >>> list(numeric_range(3.5))\n> [0.0, 1.0, 2.0, 3.0]\n> ```\n\nWith only *start* and *stop* specified, *step* defaults to `1`. The\noutput items will match the type of *start*:\n\n> ```pycon\n> >>> from decimal import Decimal\n> >>> start = Decimal('2.1')\n> >>> stop = Decimal('5.1')\n> >>> list(numeric_range(start, stop))\n> [Decimal('2.1'), Decimal('3.1'), Decimal('4.1')]\n> ```\n\nWith *start*, *stop*, and *step* specified the output items will match\nthe type of `start + step`:\n\n> ```pycon\n> >>> from fractions import Fraction\n> >>> start = Fraction(1, 2)  # Start at 1/2\n> >>> stop = Fraction(5, 2)  # End at 5/2\n> >>> step = Fraction(1, 2)  # Count by 1/2\n> >>> list(numeric_range(start, stop, step))\n> [Fraction(1, 2), Fraction(1, 1), Fraction(3, 2), Fraction(2, 1)]\n> ```\n\nIf *step* is zero, `ValueError` is raised. Negative steps are supported:\n\n> ```pycon\n> >>> list(numeric_range(3, -1, -1.0))\n> [3.0, 2.0, 1.0, 0.0]\n> ```\n\nBe aware of the limitations of floating point numbers; the representation\nof the yielded numbers may be surprising.\n\n`datetime.datetime` objects can be used for *start* and *stop*, if *step*\nis a `datetime.timedelta` object:\n\n> ```pycon\n> >>> import datetime\n> >>> start = datetime.datetime(2019, 1, 1)\n> >>> stop = datetime.datetime(2019, 1, 3)\n> >>> step = datetime.timedelta(days=1)\n> >>> items = iter(numeric_range(start, stop, step))\n> >>> next(items)\n> datetime.datetime(2019, 1, 1, 0, 0)\n> >>> next(items)\n> datetime.datetime(2019, 1, 2, 0, 0)\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.islice_extended", "bases": [], "methods": [{"name": "setuptools._vendor.more_itertools.more.islice_extended.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.islice_extended.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.islice_extended.__next__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.islice_extended.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An extension of {func}`itertools.islice` that supports negative values\nfor *stop*, *start*, and *step*.\n\n> ```pycon\n> >>> iterable = iter('abcdefgh')\n> >>> list(islice_extended(iterable, -4, -1))\n> ['e', 'f', 'g']\n> ```\n\nSlices with negative values require some caching of *iterable*, but this\nfunction takes care to minimize the amount of memory required.\n\nFor example, you can use a negative step with an infinite iterator:\n\n> ```pycon\n> >>> from itertools import count\n> >>> list(islice_extended(count(), 110, 99, -2))\n> [110, 108, 106, 104, 102, 100]\n> ```\n\nYou can also use slice notation directly:\n\n> ```pycon\n> >>> iterable = map(str, count())\n> >>> it = islice_extended(iterable)[10:20:2]\n> >>> list(it)\n> ['10', '12', '14', '16', '18']\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.SequenceView", "bases": ["Sequence"], "methods": [{"name": "setuptools._vendor.more_itertools.more.SequenceView.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "target", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.SequenceView.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "index", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.SequenceView.__len__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.SequenceView.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Return a read-only view of the sequence object *target*.\n\n{class}`SequenceView` objects are analogous to Python's built-in\n\"dictionary view\" types. They provide a dynamic view of a sequence's items,\nmeaning that when the sequence updates, so does the view.\n\n> ```pycon\n> >>> seq = ['0', '1', '2']\n> >>> view = SequenceView(seq)\n> >>> view\n> SequenceView(['0', '1', '2'])\n> >>> seq.append('3')\n> >>> view\n> SequenceView(['0', '1', '2', '3'])\n> ```\n\nSequence views support indexing, slicing, and length queries. They act\nlike the underlying sequence, except they don't allow assignment:\n\n> ```pycon\n> >>> view[1]\n> '1'\n> >>> view[1:-1]\n> ['1', '2']\n> >>> len(view)\n> 4\n> ```\n\nSequence views are useful as an alternative to copying, as they don't\nrequire (much) extra storage.\n"]}, {"name": "setuptools._vendor.more_itertools.more.seekable", "bases": [], "methods": [{"name": "setuptools._vendor.more_itertools.more.seekable.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}, {"name": "maxlen", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.seekable.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.seekable.__next__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.seekable.__bool__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.seekable.peek", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "default", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.seekable.elements", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.seekable.seek", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "index", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.seekable.relative_seek", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "count", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Wrap an iterator to allow for seeking backward and forward. This\nprogressively caches the items in the source iterable so they can be\nre-visited.\n\nCall {meth}`seek` with an index to seek to that position in the source\niterable.\n\nTo \"reset\" an iterator, seek to `0`:\n\n> ```pycon\n> >>> from itertools import count\n> >>> it = seekable((str(n) for n in count()))\n> >>> next(it), next(it), next(it)\n> ('0', '1', '2')\n> >>> it.seek(0)\n> >>> next(it), next(it), next(it)\n> ('0', '1', '2')\n> >>> next(it)\n> '3'\n> ```\n\nYou can also seek forward:\n\n> ```pycon\n> >>> it = seekable((str(n) for n in range(20)))\n> >>> it.seek(10)\n> >>> next(it)\n> '10'\n> >>> it.relative_seek(-2)  # Seeking relative to the current position\n> >>> next(it)\n> '9'\n> >>> it.seek(20)  # Seeking past the end of the source isn't a problem\n> >>> list(it)\n> []\n> >>> it.seek(0)  # Resetting works even after hitting the end\n> >>> next(it), next(it), next(it)\n> ('0', '1', '2')\n> ```\n\nCall {meth}`peek` to look ahead one item without advancing the iterator:\n\n> ```pycon\n> >>> it = seekable('1234')\n> >>> it.peek()\n> '1'\n> >>> list(it)\n> ['1', '2', '3', '4']\n> >>> it.peek(default='empty')\n> 'empty'\n> ```\n\nBefore the iterator is at its end, calling {func}`bool` on it will return\n`True`. After it will return `False`:\n\n> ```pycon\n> >>> it = seekable('5678')\n> >>> bool(it)\n> True\n> >>> list(it)\n> ['5', '6', '7', '8']\n> >>> bool(it)\n> False\n> ```\n\nYou may view the contents of the cache with the {meth}`elements` method.\nThat returns a {class}`SequenceView`, a view that updates automatically:\n\n> ```pycon\n> >>> it = seekable((str(n) for n in range(10)))\n> >>> next(it), next(it), next(it)\n> ('0', '1', '2')\n> >>> elements = it.elements()\n> >>> elements\n> SequenceView(['0', '1', '2'])\n> >>> next(it)\n> '3'\n> >>> elements\n> SequenceView(['0', '1', '2', '3'])\n> ```\n\nBy default, the cache grows as the source iterable progresses, so beware of\nwrapping very large or infinite iterables. Supply *maxlen* to limit the\nsize of the cache (this of course limits how far back you can seek).\n\n> ```pycon\n> >>> from itertools import count\n> >>> it = seekable((str(n) for n in count()), maxlen=2)\n> >>> next(it), next(it), next(it), next(it)\n> ('0', '1', '2', '3')\n> >>> list(it.elements())\n> ['2', '3']\n> >>> it.seek(0)\n> >>> next(it), next(it), next(it), next(it)\n> ('2', '3', '4', '5')\n> >>> next(it)\n> '6'\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.run_length", "bases": [], "methods": [{"name": "setuptools._vendor.more_itertools.more.run_length.encode", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.run_length.decode", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["{func}`run_length.encode` compresses an iterable with run-length encoding.\nIt yields groups of repeated items with the count of how many times they\nwere repeated:\n\n> ```pycon\n> >>> uncompressed = 'abbcccdddd'\n> >>> list(run_length.encode(uncompressed))\n> [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n> ```\n\n{func}`run_length.decode` decompresses an iterable that was previously\ncompressed with run-length encoding. It yields the items of the\ndecompressed iterable:\n\n> ```pycon\n> >>> compressed = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n> >>> list(run_length.decode(compressed))\n> ['a', 'b', 'b', 'c', 'c', 'c', 'd', 'd', 'd', 'd']\n> ```\n"]}, {"name": "setuptools._vendor.more_itertools.more.time_limited", "bases": [], "methods": [{"name": "setuptools._vendor.more_itertools.more.time_limited.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "limit_seconds", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.time_limited.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.time_limited.__next__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Yield items from *iterable* until *limit_seconds* have passed.\nIf the time limit expires before all items have been yielded, the\n`timed_out` parameter will be set to `True`.\n\n```pycon\n>>> from time import sleep\n>>> def generator():\n...     yield 1\n...     yield 2\n...     sleep(0.2)\n...     yield 3\n>>> iterable = time_limited(0.1, generator())\n>>> list(iterable)\n[1, 2]\n>>> iterable.timed_out\nTrue\n```\n\nNote that the time is checked before each item is yielded, and iteration\nstops if the time elapsed is greater than *limit_seconds*. If your time\nlimit is 1 second, but it takes 2 seconds to generate the first item from\nthe iterable, the function will run for 2 seconds and not yield anything.\nAs a special case, when *limit_seconds* is zero, the iterator never\nreturns anything.\n"]}, {"name": "setuptools._vendor.more_itertools.more.AbortThread", "bases": ["BaseException"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.callback_iter", "bases": [], "methods": [{"name": "setuptools._vendor.more_itertools.more.callback_iter.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "func", "type": null, "default": null}, {"name": "callback_kwd", "type": null, "default": "..."}, {"name": "wait_seconds", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.callback_iter.__enter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.callback_iter.__exit__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "exc_type", "type": null, "default": null}, {"name": "exc_value", "type": null, "default": null}, {"name": "traceback", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.callback_iter.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.callback_iter.__next__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.callback_iter.done", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.callback_iter.result", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.callback_iter._reader", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Convert a function that uses callbacks to an iterator.\n\nLet *func* be a function that takes a `callback` keyword argument.\nFor example:\n\n```pycon\n>>> def func(callback=None):\n...     for i, c in [(1, 'a'), (2, 'b'), (3, 'c')]:\n...         if callback:\n...             callback(i, c)\n...     return 4\n```\n\nUse `with callback_iter(func)` to get an iterator over the parameters\nthat are delivered to the callback.\n\n```pycon\n>>> with callback_iter(func) as it:\n...     for args, kwargs in it:\n...         print(args)\n(1, 'a')\n(2, 'b')\n(3, 'c')\n```\n\nThe function will be called in a background thread. The `done` property\nindicates whether it has completed execution.\n\n```pycon\n>>> it.done\nTrue\n```\n\nIf it completes successfully, its return value will be available\nin the `result` property.\n\n```pycon\n>>> it.result\n4\n```\n\nNotes:\n\n- If the function uses some keyword argument besides `callback`, supply\n  *callback_kwd*.\n- If it finished executing, but raised an exception, accessing the\n  `result` property will raise the same exception.\n- If it hasn't finished executing, accessing the `result`\n  property from within the `with` block will raise `RuntimeError`.\n- If it hasn't finished executing, accessing the `result` property from\n  outside the `with` block will raise a\n  `more_itertools.AbortThread` exception.\n- Provide *wait_seconds* to adjust how frequently the it is polled for\n  output.\n"]}, {"name": "setuptools._vendor.more_itertools.more.countable", "bases": [], "methods": [{"name": "setuptools._vendor.more_itertools.more.countable.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.countable.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.more_itertools.more.countable.__next__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Wrap *iterable* and keep a count of how many items have been consumed.\n\nThe `items_seen` attribute starts at `0` and increments as the iterable\nis consumed:\n\n> ```pycon\n> >>> iterable = map(str, range(10))\n> >>> it = countable(iterable)\n> >>> it.items_seen\n> 0\n> >>> next(it), next(it)\n> ('0', '1')\n> >>> list(it)\n> ['2', '3', '4', '5', '6', '7', '8', '9']\n> >>> it.items_seen\n> 10\n> ```\n"]}], "exports": [{"name": "setuptools._vendor.more_itertools.more.AbortThread", "xref": {"fqname": "setuptools._vendor.more_itertools.more.AbortThread", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.adjacent", "xref": {"fqname": "setuptools._vendor.more_itertools.more.adjacent", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.all_unique", "xref": {"fqname": "setuptools._vendor.more_itertools.more.all_unique", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.always_iterable", "xref": {"fqname": "setuptools._vendor.more_itertools.more.always_iterable", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.always_reversible", "xref": {"fqname": "setuptools._vendor.more_itertools.more.always_reversible", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.bucket", "xref": {"fqname": "setuptools._vendor.more_itertools.more.bucket", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.callback_iter", "xref": {"fqname": "setuptools._vendor.more_itertools.more.callback_iter", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.chunked", "xref": {"fqname": "setuptools._vendor.more_itertools.more.chunked", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.chunked_even", "xref": {"fqname": "setuptools._vendor.more_itertools.more.chunked_even", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.circular_shifts", "xref": {"fqname": "setuptools._vendor.more_itertools.more.circular_shifts", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.classify_unique", "xref": {"fqname": "setuptools._vendor.more_itertools.more.classify_unique", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.collapse", "xref": {"fqname": "setuptools._vendor.more_itertools.more.collapse", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.combination_index", "xref": {"fqname": "setuptools._vendor.more_itertools.more.combination_index", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.combination_with_replacement_index", "xref": {"fqname": "setuptools._vendor.more_itertools.more.combination_with_replacement_index", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.consecutive_groups", "xref": {"fqname": "setuptools._vendor.more_itertools.more.consecutive_groups", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.constrained_batches", "xref": {"fqname": "setuptools._vendor.more_itertools.more.constrained_batches", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.consumer", "xref": {"fqname": "setuptools._vendor.more_itertools.more.consumer", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.count_cycle", "xref": {"fqname": "setuptools._vendor.more_itertools.more.count_cycle", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.countable", "xref": {"fqname": "setuptools._vendor.more_itertools.more.countable", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.dft", "xref": {"fqname": "setuptools._vendor.more_itertools.more.dft", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.difference", "xref": {"fqname": "setuptools._vendor.more_itertools.more.difference", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.distinct_combinations", "xref": {"fqname": "setuptools._vendor.more_itertools.more.distinct_combinations", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.distinct_permutations", "xref": {"fqname": "setuptools._vendor.more_itertools.more.distinct_permutations", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.distribute", "xref": {"fqname": "setuptools._vendor.more_itertools.more.distribute", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.divide", "xref": {"fqname": "setuptools._vendor.more_itertools.more.divide", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.doublestarmap", "xref": {"fqname": "setuptools._vendor.more_itertools.more.doublestarmap", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.duplicates_everseen", "xref": {"fqname": "setuptools._vendor.more_itertools.more.duplicates_everseen", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.duplicates_justseen", "xref": {"fqname": "setuptools._vendor.more_itertools.more.duplicates_justseen", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.exactly_n", "xref": {"fqname": "setuptools._vendor.more_itertools.more.exactly_n", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.filter_except", "xref": {"fqname": "setuptools._vendor.more_itertools.more.filter_except", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.filter_map", "xref": {"fqname": "setuptools._vendor.more_itertools.more.filter_map", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.first", "xref": {"fqname": "setuptools._vendor.more_itertools.more.first", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.gray_product", "xref": {"fqname": "setuptools._vendor.more_itertools.more.gray_product", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.groupby_transform", "xref": {"fqname": "setuptools._vendor.more_itertools.more.groupby_transform", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.ichunked", "xref": {"fqname": "setuptools._vendor.more_itertools.more.ichunked", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.idft", "xref": {"fqname": "setuptools._vendor.more_itertools.more.idft", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.iequals", "xref": {"fqname": "setuptools._vendor.more_itertools.more.iequals", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.ilen", "xref": {"fqname": "setuptools._vendor.more_itertools.more.ilen", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.interleave", "xref": {"fqname": "setuptools._vendor.more_itertools.more.interleave", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.interleave_evenly", "xref": {"fqname": "setuptools._vendor.more_itertools.more.interleave_evenly", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.interleave_longest", "xref": {"fqname": "setuptools._vendor.more_itertools.more.interleave_longest", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.intersperse", "xref": {"fqname": "setuptools._vendor.more_itertools.more.intersperse", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.is_sorted", "xref": {"fqname": "setuptools._vendor.more_itertools.more.is_sorted", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.islice_extended", "xref": {"fqname": "setuptools._vendor.more_itertools.more.islice_extended", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.iter_suppress", "xref": {"fqname": "setuptools._vendor.more_itertools.more.iter_suppress", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.iterate", "xref": {"fqname": "setuptools._vendor.more_itertools.more.iterate", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.join_mappings", "xref": {"fqname": "setuptools._vendor.more_itertools.more.join_mappings", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.last", "xref": {"fqname": "setuptools._vendor.more_itertools.more.last", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.locate", "xref": {"fqname": "setuptools._vendor.more_itertools.more.locate", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.longest_common_prefix", "xref": {"fqname": "setuptools._vendor.more_itertools.more.longest_common_prefix", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.lstrip", "xref": {"fqname": "setuptools._vendor.more_itertools.more.lstrip", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.make_decorator", "xref": {"fqname": "setuptools._vendor.more_itertools.more.make_decorator", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.map_except", "xref": {"fqname": "setuptools._vendor.more_itertools.more.map_except", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.map_if", "xref": {"fqname": "setuptools._vendor.more_itertools.more.map_if", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.map_reduce", "xref": {"fqname": "setuptools._vendor.more_itertools.more.map_reduce", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.mark_ends", "xref": {"fqname": "setuptools._vendor.more_itertools.more.mark_ends", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.minmax", "xref": {"fqname": "setuptools._vendor.more_itertools.more.minmax", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.nth_combination_with_replacement", "xref": {"fqname": "setuptools._vendor.more_itertools.more.nth_combination_with_replacement", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.nth_or_last", "xref": {"fqname": "setuptools._vendor.more_itertools.more.nth_or_last", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.nth_permutation", "xref": {"fqname": "setuptools._vendor.more_itertools.more.nth_permutation", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.nth_product", "xref": {"fqname": "setuptools._vendor.more_itertools.more.nth_product", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.numeric_range", "xref": {"fqname": "setuptools._vendor.more_itertools.more.numeric_range", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.one", "xref": {"fqname": "setuptools._vendor.more_itertools.more.one", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.only", "xref": {"fqname": "setuptools._vendor.more_itertools.more.only", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.outer_product", "xref": {"fqname": "setuptools._vendor.more_itertools.more.outer_product", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.padded", "xref": {"fqname": "setuptools._vendor.more_itertools.more.padded", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.partial_product", "xref": {"fqname": "setuptools._vendor.more_itertools.more.partial_product", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.partitions", "xref": {"fqname": "setuptools._vendor.more_itertools.more.partitions", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.peekable", "xref": {"fqname": "setuptools._vendor.more_itertools.more.peekable", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.permutation_index", "xref": {"fqname": "setuptools._vendor.more_itertools.more.permutation_index", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.powerset_of_sets", "xref": {"fqname": "setuptools._vendor.more_itertools.more.powerset_of_sets", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.product_index", "xref": {"fqname": "setuptools._vendor.more_itertools.more.product_index", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.raise_", "xref": {"fqname": "setuptools._vendor.more_itertools.more.raise_", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.repeat_each", "xref": {"fqname": "setuptools._vendor.more_itertools.more.repeat_each", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.repeat_last", "xref": {"fqname": "setuptools._vendor.more_itertools.more.repeat_last", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.replace", "xref": {"fqname": "setuptools._vendor.more_itertools.more.replace", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.rlocate", "xref": {"fqname": "setuptools._vendor.more_itertools.more.rlocate", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.rstrip", "xref": {"fqname": "setuptools._vendor.more_itertools.more.rstrip", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.run_length", "xref": {"fqname": "setuptools._vendor.more_itertools.more.run_length", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.sample", "xref": {"fqname": "setuptools._vendor.more_itertools.more.sample", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.seekable", "xref": {"fqname": "setuptools._vendor.more_itertools.more.seekable", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.SequenceView", "xref": {"fqname": "setuptools._vendor.more_itertools.more.SequenceView", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.set_partitions", "xref": {"fqname": "setuptools._vendor.more_itertools.more.set_partitions", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.side_effect", "xref": {"fqname": "setuptools._vendor.more_itertools.more.side_effect", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.sliced", "xref": {"fqname": "setuptools._vendor.more_itertools.more.sliced", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.sort_together", "xref": {"fqname": "setuptools._vendor.more_itertools.more.sort_together", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.split_after", "xref": {"fqname": "setuptools._vendor.more_itertools.more.split_after", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.split_at", "xref": {"fqname": "setuptools._vendor.more_itertools.more.split_at", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.split_before", "xref": {"fqname": "setuptools._vendor.more_itertools.more.split_before", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.split_into", "xref": {"fqname": "setuptools._vendor.more_itertools.more.split_into", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.split_when", "xref": {"fqname": "setuptools._vendor.more_itertools.more.split_when", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.spy", "xref": {"fqname": "setuptools._vendor.more_itertools.more.spy", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.stagger", "xref": {"fqname": "setuptools._vendor.more_itertools.more.stagger", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.strictly_n", "xref": {"fqname": "setuptools._vendor.more_itertools.more.strictly_n", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.strip", "xref": {"fqname": "setuptools._vendor.more_itertools.more.strip", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.substrings", "xref": {"fqname": "setuptools._vendor.more_itertools.more.substrings", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.substrings_indexes", "xref": {"fqname": "setuptools._vendor.more_itertools.more.substrings_indexes", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.takewhile_inclusive", "xref": {"fqname": "setuptools._vendor.more_itertools.more.takewhile_inclusive", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.time_limited", "xref": {"fqname": "setuptools._vendor.more_itertools.more.time_limited", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.UnequalIterablesError", "xref": {"fqname": "setuptools._vendor.more_itertools.more.recipes.UnequalIterablesError", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.unique_in_window", "xref": {"fqname": "setuptools._vendor.more_itertools.more.unique_in_window", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.unique_to_each", "xref": {"fqname": "setuptools._vendor.more_itertools.more.unique_to_each", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.unzip", "xref": {"fqname": "setuptools._vendor.more_itertools.more.unzip", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.value_chain", "xref": {"fqname": "setuptools._vendor.more_itertools.more.value_chain", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.windowed", "xref": {"fqname": "setuptools._vendor.more_itertools.more.windowed", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.windowed_complete", "xref": {"fqname": "setuptools._vendor.more_itertools.more.windowed_complete", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.with_iter", "xref": {"fqname": "setuptools._vendor.more_itertools.more.with_iter", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.zip_broadcast", "xref": {"fqname": "setuptools._vendor.more_itertools.more.zip_broadcast", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.zip_equal", "xref": {"fqname": "setuptools._vendor.more_itertools.more.zip_equal", "project": null}}, {"name": "setuptools._vendor.more_itertools.more.zip_offset", "xref": {"fqname": "setuptools._vendor.more_itertools.more.zip_offset", "project": null}}]}, {"name": "setuptools._vendor.importlib_metadata", "documentation": [], "functions": [{"name": "setuptools._vendor.importlib_metadata.distribution", "asynchronous": false, "params": [{"name": "distribution_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Distribution", "xref": {"fqname": "setuptools._vendor.importlib_metadata.Distribution", "project": null}, "params": null}, "documentation": ["Get the `Distribution` instance for the named package.\n\n```\nparam distribution_name\n\nThe name of the distribution package as a string.\n\nreturn\n\nA Distribution instance (or subclass thereof).\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata.distributions", "asynchronous": false, "params": [{"name": "**kwargs", "type": null, "default": null}], "returns": {"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "Distribution", "xref": {"fqname": "setuptools._vendor.importlib_metadata.Distribution", "project": null}, "params": null}]}, "documentation": ["Get all `Distribution` instances in the current environment.\n\n```\nreturn\n\nAn iterable of Distribution instances.\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata.metadata", "asynchronous": false, "params": [{"name": "distribution_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "_meta.PackageMetadata", "xref": {"fqname": "setuptools._vendor.importlib_metadata.._meta.PackageMetadata", "project": null}, "params": null}, "documentation": ["Get the metadata for the named package.\n\n```\nparam distribution_name\n\nThe name of the distribution package to query.\n\nreturn\n\nA PackageMetadata containing the parsed metadata.\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata.version", "asynchronous": false, "params": [{"name": "distribution_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Get the version string for the named package.\n\n```\nparam distribution_name\n\nThe name of the distribution package to query.\n\nreturn\n\nThe version string for the package as defined in the package's\n\"Version\" metadata key.\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata.entry_points", "asynchronous": false, "params": [{"name": "**params", "type": null, "default": null}], "returns": {"name": "EntryPoints", "xref": {"fqname": "setuptools._vendor.importlib_metadata.EntryPoints", "project": null}, "params": null}, "documentation": ["Return EntryPoint objects for all installed packages.\n\nPass selection parameters (group or name) to filter the\nresult to entry points matching those properties (see\nEntryPoints.select()).\n\n```\nreturn\n\nEntryPoints for all installed packages.\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata.files", "asynchronous": false, "params": [{"name": "distribution_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "PackagePath", "xref": {"fqname": "setuptools._vendor.importlib_metadata.PackagePath", "project": null}, "params": null}]}]}, "documentation": ["Return a list of files for the named package.\n\n```\nparam distribution_name\n\nThe name of the distribution package to query.\n\nreturn\n\nList of files composing the distribution.\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata.requires", "asynchronous": false, "params": [{"name": "distribution_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": ["Return a list of requirements for the named package.\n\n```\nreturn\n\nAn iterable of requirements, suitable for\npackaging.requirement.Requirement.\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata.packages_distributions", "asynchronous": false, "params": [], "returns": {"name": "Mapping", "xref": {"fqname": "typing.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": ["Return a mapping of top-level packages to their\ndistributions.\n\n```pycon\n>>> import collections.abc\n>>> pkgs = packages_distributions()\n>>> all(isinstance(dist, collections.abc.Sequence) for dist in pkgs.values())\nTrue\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata._top_level_declared", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata._topmost", "asynchronous": false, "params": [{"name": "name", "type": {"name": "PackagePath", "xref": {"fqname": "setuptools._vendor.importlib_metadata.PackagePath", "project": null}, "params": null}, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Return the top-most parent as long as there is a parent."]}, {"name": "setuptools._vendor.importlib_metadata._get_toplevel_name", "asynchronous": false, "params": [{"name": "name", "type": {"name": "PackagePath", "xref": {"fqname": "setuptools._vendor.importlib_metadata.PackagePath", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Infer a possibly importable module name from a name presumed on\nsys.path.\n\n```pycon\n>>> _get_toplevel_name(PackagePath('foo.py'))\n'foo'\n>>> _get_toplevel_name(PackagePath('foo'))\n'foo'\n>>> _get_toplevel_name(PackagePath('foo.pyc'))\n'foo'\n>>> _get_toplevel_name(PackagePath('foo/__init__.py'))\n'foo'\n>>> _get_toplevel_name(PackagePath('foo.pth'))\n'foo.pth'\n>>> _get_toplevel_name(PackagePath('foo.dist-info'))\n'foo.dist-info'\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata._top_level_inferred", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools._vendor.importlib_metadata._unique", "type": null, "documentation": ["Wrapper for `distributions` to return unique distributions by name.\n"]}], "classes": [{"name": "setuptools._vendor.importlib_metadata.PackageNotFoundError", "bases": ["ModuleNotFoundError"], "methods": [{"name": "setuptools._vendor.importlib_metadata.PackageNotFoundError.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.PackageNotFoundError.name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["The package was not found."]}, {"name": "setuptools._vendor.importlib_metadata.Sectioned", "bases": [], "methods": [{"name": "setuptools._vendor.importlib_metadata.Sectioned.section_pairs", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "text", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.Sectioned.read", "asynchronous": false, "params": [{"name": "text", "type": null, "default": null}, {"name": "filter_", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.Sectioned.valid", "asynchronous": false, "params": [{"name": "line", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.importlib_metadata.Sectioned._sample", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A simple entry point config parser for performance\n\n```pycon\n>>> for item in Sectioned.read(Sectioned._sample):\n...     print(item)\nPair(name='sec1', value='# comments ignored')\nPair(name='sec1', value='a = 1')\nPair(name='sec1', value='b = 2')\nPair(name='sec2', value='a = 2')\n```\n\n```pycon\n>>> res = Sectioned.section_pairs(Sectioned._sample)\n>>> item = next(res)\n>>> item.name\n'sec1'\n>>> item.value\nPair(name='a', value='1')\n>>> item = next(res)\n>>> item.value\nPair(name='b', value='2')\n>>> item = next(res)\n>>> item.name\n'sec2'\n>>> item.value\nPair(name='a', value='2')\n>>> list(res)\n[]\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata.EntryPoint", "bases": [], "methods": [{"name": "setuptools._vendor.importlib_metadata.EntryPoint.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "group", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.EntryPoint.load", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": ["Load the entry point from its definition. If only a module\nis indicated by the value, return that module. Otherwise,\nreturn the named object."]}, {"name": "setuptools._vendor.importlib_metadata.EntryPoint.module", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.EntryPoint.attr", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.EntryPoint.extras", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.EntryPoint._for", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.EntryPoint.matches", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "**params", "type": null, "default": null}], "returns": null, "documentation": ["EntryPoint matches the given parameters.\n\n```pycon\n>>> ep = EntryPoint(group='foo', name='bar', value='bing:bong [extra1, extra2]')\n>>> ep.matches(group='foo')\nTrue\n>>> ep.matches(name='bar', value='bing:bong [extra1, extra2]')\nTrue\n>>> ep.matches(group='foo', name='other')\nFalse\n>>> ep.matches()\nTrue\n>>> ep.matches(extras=['extra1', 'extra2'])\nTrue\n>>> ep.matches(module='bing')\nTrue\n>>> ep.matches(attr='bong')\nTrue\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata.EntryPoint._key", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.EntryPoint.__lt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.EntryPoint.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.EntryPoint.__setattr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.EntryPoint.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.EntryPoint.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.importlib_metadata.EntryPoint.pattern", "type": null, "documentation": ["A regular expression describing the syntax for an entry point,\nwhich might look like:\n\n    - module\n    - package.module\n    - package.module:attribute\n    - package.module:object.attribute\n    - package.module:attr [extra1, extra2]\n\nOther combinations are possible as well.\n\nThe expression is lenient about whitespace around the ':',\nfollowing the attr, and following any extras."]}, {"name": "setuptools._vendor.importlib_metadata.EntryPoint.name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.EntryPoint.value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.EntryPoint.group", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.EntryPoint.dist", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["An entry point as defined by Python packaging conventions.\n\nSee [the packaging docs on entry points](https://packaging.python.org/specifications/entry-points/)\nfor more information.\n\n```pycon\n>>> ep = EntryPoint(\n...     name=None, group=None, value='package.module:attr [extra1, extra2]')\n>>> ep.module\n'package.module'\n>>> ep.attr\n'attr'\n>>> ep.extras\n['extra1', 'extra2']\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata.EntryPoints", "bases": ["tuple"], "methods": [{"name": "setuptools._vendor.importlib_metadata.EntryPoints.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "EntryPoint", "xref": {"fqname": "setuptools._vendor.importlib_metadata.EntryPoint", "project": null}, "params": null}, "documentation": ["Get the EntryPoint in self matching name."]}, {"name": "setuptools._vendor.importlib_metadata.EntryPoints.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Repr with classname and tuple constructor to\nsignal that we deviate from regular tuple behavior."]}, {"name": "setuptools._vendor.importlib_metadata.EntryPoints.select", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "**params", "type": null, "default": null}], "returns": {"name": "EntryPoints", "xref": {"fqname": "setuptools._vendor.importlib_metadata.EntryPoints", "project": null}, "params": null}, "documentation": ["Select entry points from self that match the\ngiven parameters (typically group and/or name)."]}, {"name": "setuptools._vendor.importlib_metadata.EntryPoints.names", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Set", "xref": {"fqname": "typing.Set", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Return the set of all names of all entry points."]}, {"name": "setuptools._vendor.importlib_metadata.EntryPoints.groups", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Set", "xref": {"fqname": "typing.Set", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Return the set of all groups of all entry points."]}, {"name": "setuptools._vendor.importlib_metadata.EntryPoints._from_text_for", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "text", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.EntryPoints._from_text", "asynchronous": false, "params": [{"name": "text", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.importlib_metadata.EntryPoints.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["An immutable collection of selectable EntryPoint objects."]}, {"name": "setuptools._vendor.importlib_metadata.PackagePath", "bases": ["pathlib.PurePosixPath"], "methods": [{"name": "setuptools._vendor.importlib_metadata.PackagePath.read_text", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "encoding", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.PackagePath.read_binary", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.PackagePath.locate", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "SimplePath", "xref": {"fqname": "setuptools._vendor.importlib_metadata._meta.SimplePath", "project": null}, "params": null}, "documentation": ["Return a path-like object for this path"]}], "class_variables": [{"name": "setuptools._vendor.importlib_metadata.PackagePath.hash", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "FileHash", "xref": {"fqname": "FileHash", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.PackagePath.size", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.PackagePath.dist", "type": {"name": "Distribution", "xref": {"fqname": "Distribution", "project": null}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A reference to a path in a package"]}, {"name": "setuptools._vendor.importlib_metadata.FileHash", "bases": [], "methods": [{"name": "setuptools._vendor.importlib_metadata.FileHash.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.FileHash.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.Distribution", "bases": [], "methods": [{"name": "setuptools._vendor.importlib_metadata.Distribution.read_text", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Attempt to load metadata file given by the name.\n\nPython distribution metadata is organized by blobs of text\ntypically represented as \"files\" in the metadata directory\n(e.g. package-1.0.dist-info). These files include things\nlike:\n\n- METADATA: The distribution metadata including fields\n  like Name and Version and Description.\n- entry_points.txt: A series of entry points as defined in\n  [the entry points spec](https://packaging.python.org/en/latest/specifications/entry-points/#file-format).\n- RECORD: A record of files according to\n  [this recording spec](https://packaging.python.org/en/latest/specifications/recording-installed-packages/#the-record-file).\n\nA package may provide any set of files, including those\nnot listed here or none at all.\n\n```\nparam filename\n\nThe name of the file in the distribution info.\n\nreturn\n\nThe text if found, otherwise None.\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata.Distribution.locate_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": {"name": "str | os.PathLike[str]", "xref": null, "params": null}, "default": null}], "returns": {"name": "SimplePath", "xref": {"fqname": "setuptools._vendor.importlib_metadata._meta.SimplePath", "project": null}, "params": null}, "documentation": ["Given a path to a file in this distribution, return a SimplePath\nto it."]}, {"name": "setuptools._vendor.importlib_metadata.Distribution.from_name", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Distribution", "xref": {"fqname": "setuptools._vendor.importlib_metadata.Distribution", "project": null}, "params": null}, "documentation": ["Return the Distribution for the given package name.\n\n```\nparam name\n\nThe name of the distribution package to search for.\n\nreturn\n\nThe Distribution instance (or subclass thereof) for the named\npackage, if found.\n\nraises PackageNotFoundError\n\nWhen the named package's distribution\nmetadata cannot be found.\n\nraises ValueError\n\nWhen an invalid value is supplied for name.\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata.Distribution.discover", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "context", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "DistributionFinder.Context", "xref": {"fqname": "DistributionFinder.Context", "project": null}, "params": null}]}, "default": "..."}, {"name": "**kwargs", "type": null, "default": null}], "returns": {"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "Distribution", "xref": {"fqname": "setuptools._vendor.importlib_metadata.Distribution", "project": null}, "params": null}]}, "documentation": ["Return an iterable of Distribution objects for all packages.\n\nPass a `context` or pass keyword arguments for constructing\na context.\n\n```\ncontext\n\nA DistributionFinder.Context object.\n\nreturn\n\nIterable of Distribution objects for packages matching\nthe context.\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata.Distribution.at", "asynchronous": false, "params": [{"name": "path", "type": {"name": "str | os.PathLike[str]", "xref": null, "params": null}, "default": null}], "returns": {"name": "Distribution", "xref": {"fqname": "setuptools._vendor.importlib_metadata.Distribution", "project": null}, "params": null}, "documentation": ["Return a Distribution for the indicated metadata path.\n\n```\nparam path\n\na string or path-like object\n\nreturn\n\na concrete Distribution instance for the path\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata.Distribution._discover_resolvers", "asynchronous": false, "params": [], "returns": null, "documentation": ["Search the meta_path for resolvers (MetadataPathFinders)."]}, {"name": "setuptools._vendor.importlib_metadata.Distribution.metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "_meta.PackageMetadata", "xref": {"fqname": "setuptools._vendor.importlib_metadata.._meta.PackageMetadata", "project": null}, "params": null}, "documentation": ["Return the parsed metadata for this Distribution.\n\nThe returned object will have keys that name the various bits of\nmetadata per the\n`Core metadata specifications <https://packaging.python.org/en/latest/specifications/core-metadata/#core-metadata>`_.\n\nCustom providers may provide the METADATA file or override this\nproperty."]}, {"name": "setuptools._vendor.importlib_metadata.Distribution.name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return the 'Name' metadata for the distribution package."]}, {"name": "setuptools._vendor.importlib_metadata.Distribution._normalized_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return a normalized version of the name."]}, {"name": "setuptools._vendor.importlib_metadata.Distribution.version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return the 'Version' metadata for the distribution package."]}, {"name": "setuptools._vendor.importlib_metadata.Distribution.entry_points", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "EntryPoints", "xref": {"fqname": "setuptools._vendor.importlib_metadata.EntryPoints", "project": null}, "params": null}, "documentation": ["Return EntryPoints for this distribution.\n\nCustom providers may provide the `entry_points.txt` file\nor override this property.\n"]}, {"name": "setuptools._vendor.importlib_metadata.Distribution.files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "PackagePath", "xref": {"fqname": "setuptools._vendor.importlib_metadata.PackagePath", "project": null}, "params": null}]}]}, "documentation": ["Files in this distribution.\n\n```\nreturn\n\nList of PackagePath for this distribution or None\n```\n\nResult is `None` if the metadata file that enumerates files\n(i.e. RECORD for dist-info, or installed-files.txt or\nSOURCES.txt for egg-info) is missing.\nResult may be empty if the metadata exists but is empty.\n\nCustom providers are recommended to provide a \"RECORD\" file (in\n`read_text`) or override this property to allow for callers to be\nable to resolve filenames provided by the package.\n"]}, {"name": "setuptools._vendor.importlib_metadata.Distribution._read_files_distinfo", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Read the lines of RECORD."]}, {"name": "setuptools._vendor.importlib_metadata.Distribution._read_files_egginfo_installed", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Read installed-files.txt and return lines in a similar\nCSV-parsable format as RECORD: each file must be placed\nrelative to the site-packages directory and must also be\nquoted (since file names can contain literal commas).\n\nThis file is written when the package is installed by pip,\nbut it might not be written for other installation methods.\nAssume the file is accurate if it exists."]}, {"name": "setuptools._vendor.importlib_metadata.Distribution._read_files_egginfo_sources", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Read SOURCES.txt and return lines in a similar CSV-parsable\nformat as RECORD: each file name must be quoted (since it\nmight contain literal commas).\n\nNote that SOURCES.txt is not a reliable source for what\nfiles are installed by a package. This file is generated\nfor a source archive, and the files that are present\nthere (e.g. setup.py) may not correctly reflect the files\nthat are present after the package has been installed."]}, {"name": "setuptools._vendor.importlib_metadata.Distribution.requires", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": ["Generated requirements specified for this Distribution"]}, {"name": "setuptools._vendor.importlib_metadata.Distribution._read_dist_info_reqs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.Distribution._read_egg_info_reqs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.Distribution._deps_from_requires_text", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "source", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.Distribution._convert_egg_info_reqs_to_simple_reqs", "asynchronous": false, "params": [{"name": "sections", "type": null, "default": null}], "returns": null, "documentation": ["Historically, setuptools would solicit and store 'extra'\nrequirements, including those with environment markers,\nin separate sections. More modern tools expect each\ndependency to be defined separately, with any relevant\nextras and environment markers attached directly to that\nrequirement. This method converts the former to the\nlatter. See _test_deps_from_requires_text for an example."]}, {"name": "setuptools._vendor.importlib_metadata.Distribution.origin", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.Distribution._load_json", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An abstract Python distribution package.\n\nCustom providers may derive from this class and define\nthe abstract methods to provide a concrete implementation\nfor their environment. Some providers may opt to override\nthe default implementation of some properties to bypass\nthe file-reading mechanism."]}, {"name": "setuptools._vendor.importlib_metadata.DistributionFinder", "bases": ["MetaPathFinder"], "methods": [{"name": "setuptools._vendor.importlib_metadata.DistributionFinder.find_distributions", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "context", "type": null, "default": "..."}], "returns": {"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "Distribution", "xref": {"fqname": "setuptools._vendor.importlib_metadata.Distribution", "project": null}, "params": null}]}, "documentation": ["Find distributions.\n\nReturn an iterable of all Distribution instances capable of\nloading the metadata for packages matching the `context`,\na DistributionFinder.Context instance.\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [{"name": "setuptools._vendor.importlib_metadata.DistributionFinder.Context", "bases": [], "methods": [{"name": "setuptools._vendor.importlib_metadata.DistributionFinder.Context.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.DistributionFinder.Context.path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["The sequence of directory path that a distribution finder\nshould search.\n\nTypically refers to Python installed package paths such as\n\"site-packages\" directories and defaults to `sys.path`.\n"]}], "class_variables": [{"name": "setuptools._vendor.importlib_metadata.DistributionFinder.Context.name", "type": null, "documentation": ["Specific name for which a distribution finder should match.\nA name of `None` matches all distributions.\n"]}], "instance_variables": [], "inner_classes": [], "documentation": ["Keyword arguments presented by the caller to\n`distributions()` or `Distribution.discover()`\nto narrow the scope of a search for distributions\nin all DistributionFinders.\n\nEach DistributionFinder may expect any parameters\nand should attempt to honor the canonical\nparameters defined below when appropriate.\n\nThis mechanism gives a custom provider a means to\nsolicit additional details from the caller beyond\n\"name\" and \"path\" when searching distributions.\nFor example, imagine a provider that exposes suites\nof packages in either a \"public\" or \"private\" `realm`.\nA caller may wish to query only for distributions in\na particular realm and could call\n`distributions(realm=\"private\")` to signal to the\ncustom provider to only include distributions from that\nrealm.\n"]}], "documentation": ["A MetaPathFinder capable of discovering installed distributions.\n\nCustom providers should implement this interface in order to\nsupply metadata."]}, {"name": "setuptools._vendor.importlib_metadata.FastPath", "bases": [], "methods": [{"name": "setuptools._vendor.importlib_metadata.FastPath.__new__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "root", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.FastPath.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "root", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.FastPath.joinpath", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "child", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.FastPath.children", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.FastPath.zip_children", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.FastPath.search", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.FastPath.mtime", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.FastPath.lookup", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "mtime", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Micro-optimized class for searching a root for children.\n\nRoot is a path on the file system that may contain metadata\ndirectories either as natural directories or within a zip file.\n\n```pycon\n>>> FastPath('').children()\n['...']\n```\n\nFastPath objects are cached and recycled for any given root.\n\n```pycon\n>>> FastPath('foobar') is FastPath('foobar')\nTrue\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata.Lookup", "bases": [], "methods": [{"name": "setuptools._vendor.importlib_metadata.Lookup.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": {"name": "FastPath", "xref": {"fqname": "setuptools._vendor.importlib_metadata.FastPath", "project": null}, "params": null}, "default": null}], "returns": null, "documentation": ["Calculate all of the children representing metadata.\n\nFrom the children in the path, calculate early all of the\nchildren that appear to represent metadata (infos) or legacy\nmetadata (eggs)."]}, {"name": "setuptools._vendor.importlib_metadata.Lookup.search", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prepared", "type": {"name": "Prepared", "xref": {"fqname": "Prepared", "project": null}, "params": null}, "default": null}], "returns": null, "documentation": ["Yield all infos and eggs matching the Prepared query."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A micro-optimized class for searching a (fast) path for metadata."]}, {"name": "setuptools._vendor.importlib_metadata.Prepared", "bases": [], "methods": [{"name": "setuptools._vendor.importlib_metadata.Prepared.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.Prepared.normalize", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["PEP 503 normalization plus dashes as underscores."]}, {"name": "setuptools._vendor.importlib_metadata.Prepared.legacy_normalize", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Normalize the package name as found in the convention in\nolder packaging tools versions and specs."]}, {"name": "setuptools._vendor.importlib_metadata.Prepared.__bool__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.importlib_metadata.Prepared.normalized", "type": null, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.Prepared.legacy_normalized", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A prepared search query for metadata on a possibly-named package.\n\nPre-calculates the normalization to prevent repeated operations.\n\n```pycon\n>>> none = Prepared(None)\n>>> none.normalized\n>>> none.legacy_normalized\n>>> bool(none)\nFalse\n>>> sample = Prepared('Sample__Pkg-name.foo')\n>>> sample.normalized\n'sample_pkg_name_foo'\n>>> sample.legacy_normalized\n'sample__pkg_name.foo'\n>>> bool(sample)\nTrue\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata.MetadataPathFinder", "bases": ["NullFinder", "DistributionFinder"], "methods": [{"name": "setuptools._vendor.importlib_metadata.MetadataPathFinder.find_distributions", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "context", "type": null, "default": "..."}], "returns": {"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "PathDistribution", "xref": {"fqname": "PathDistribution", "project": null}, "params": null}]}, "documentation": ["Find distributions.\n\nReturn an iterable of all Distribution instances capable of\nloading the metadata for packages matching `context.name`\n(or all names if `None` indicated) along the paths in the list\nof directories `context.path`.\n"]}, {"name": "setuptools._vendor.importlib_metadata.MetadataPathFinder._search_paths", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "paths", "type": null, "default": null}], "returns": null, "documentation": ["Find metadata directories in paths heuristically."]}, {"name": "setuptools._vendor.importlib_metadata.MetadataPathFinder.invalidate_caches", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A degenerate finder for distribution packages on the file system.\n\nThis finder supplies only a find_distributions() method for versions\nof Python that do not have a PathFinder find_distributions()."]}, {"name": "setuptools._vendor.importlib_metadata.PathDistribution", "bases": ["Distribution"], "methods": [{"name": "setuptools._vendor.importlib_metadata.PathDistribution.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": {"name": "SimplePath", "xref": {"fqname": "setuptools._vendor.importlib_metadata._meta.SimplePath", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Construct a distribution.\n\n```\nparam path\n\nSimplePath indicating the metadata directory.\n```\n"]}, {"name": "setuptools._vendor.importlib_metadata.PathDistribution.read_text", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "filename", "type": {"name": "str | os.PathLike[str]", "xref": null, "params": null}, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.PathDistribution.locate_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": {"name": "str | os.PathLike[str]", "xref": null, "params": null}, "default": null}], "returns": {"name": "SimplePath", "xref": {"fqname": "setuptools._vendor.importlib_metadata._meta.SimplePath", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.importlib_metadata.PathDistribution._normalized_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Performance optimization: where possible, resolve the\nnormalized name from the file system path."]}, {"name": "setuptools._vendor.importlib_metadata.PathDistribution._name_from_stem", "asynchronous": false, "params": [{"name": "stem", "type": null, "default": null}], "returns": null, "documentation": ["```pycon\n>>> PathDistribution._name_from_stem('foo-3.0.egg-info')\n'foo'\n>>> PathDistribution._name_from_stem('CherryPy-3.0.dist-info')\n'CherryPy'\n>>> PathDistribution._name_from_stem('face.egg-info')\n'face'\n>>> PathDistribution._name_from_stem('foo.bar')\n```\n"]}], "class_variables": [{"name": "setuptools._vendor.importlib_metadata.PathDistribution.read_text.__doc__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": [{"name": "setuptools._vendor.importlib_metadata.Distribution", "xref": {"fqname": "setuptools._vendor.importlib_metadata.Distribution", "project": null}}, {"name": "setuptools._vendor.importlib_metadata.distribution", "xref": {"fqname": "setuptools._vendor.importlib_metadata.distribution", "project": null}}, {"name": "setuptools._vendor.importlib_metadata.DistributionFinder", "xref": {"fqname": "setuptools._vendor.importlib_metadata.DistributionFinder", "project": null}}, {"name": "setuptools._vendor.importlib_metadata.distributions", "xref": {"fqname": "setuptools._vendor.importlib_metadata.distributions", "project": null}}, {"name": "setuptools._vendor.importlib_metadata.entry_points", "xref": {"fqname": "setuptools._vendor.importlib_metadata.entry_points", "project": null}}, {"name": "setuptools._vendor.importlib_metadata.files", "xref": {"fqname": "setuptools._vendor.importlib_metadata.files", "project": null}}, {"name": "setuptools._vendor.importlib_metadata.metadata", "xref": {"fqname": "setuptools._vendor.importlib_metadata.metadata", "project": null}}, {"name": "setuptools._vendor.importlib_metadata.PackageMetadata", "xref": {"fqname": "setuptools._vendor.importlib_metadata._meta.PackageMetadata", "project": null}}, {"name": "setuptools._vendor.importlib_metadata.PackageNotFoundError", "xref": {"fqname": "setuptools._vendor.importlib_metadata.PackageNotFoundError", "project": null}}, {"name": "setuptools._vendor.importlib_metadata.packages_distributions", "xref": {"fqname": "setuptools._vendor.importlib_metadata.packages_distributions", "project": null}}, {"name": "setuptools._vendor.importlib_metadata.requires", "xref": {"fqname": "setuptools._vendor.importlib_metadata.requires", "project": null}}, {"name": "setuptools._vendor.importlib_metadata.version", "xref": {"fqname": "setuptools._vendor.importlib_metadata.version", "project": null}}]}, {"name": "setuptools._vendor.typing_extensions", "documentation": [], "functions": [{"name": "setuptools._vendor.typing_extensions._should_collect_from_parameters", "asynchronous": false, "params": [{"name": "t", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._should_collect_from_parameters", "asynchronous": false, "params": [{"name": "t", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._should_collect_from_parameters", "asynchronous": false, "params": [{"name": "t", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.final", "asynchronous": false, "params": [{"name": "f", "type": null, "default": null}], "returns": null, "documentation": ["This decorator can be used to indicate to type checkers that\nthe decorated method cannot be overridden, and decorated class\ncannot be subclassed. For example:\n\n> class Base:\n>\n> : @final\n>   def done(self) -> None:\n>\n>   > ...\n>\n> class Sub(Base):\n> : def done(self) -> None: # Error reported by type checker\n>\n>   : ...\n>\n> @final\n> class Leaf:\n>\n> > ...\n>\n> class Other(Leaf): # Error reported by type checker\n>\n> : ...\n\nThere is no runtime checking of these properties. The decorator\nsets the `__final__` attribute to `True` on the decorated object\nto allow runtime introspection.\n", "@final exists in 3.8+, but we backport it for all versions", "before 3.11 to keep support for the __final__ attribute.", "See https://bugs.python.org/issue46342"]}, {"name": "setuptools._vendor.typing_extensions.IntVar", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._flatten_literal_params", "asynchronous": false, "params": [{"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": ["An internal helper for Literal creation: flatten Literals among parameters"]}, {"name": "setuptools._vendor.typing_extensions._value_and_type_iter", "asynchronous": false, "params": [{"name": "params", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.overload", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}], "returns": null, "documentation": ["Decorator for overloaded functions/methods.\n\nIn a stub file, place two or more stub definitions for the same\nfunction in a row, each decorated with @overload.  For example:\n\n@overload\ndef utf8(value: None) -> None: ...\n@overload\ndef utf8(value: bytes) -> bytes: ...\n@overload\ndef utf8(value: str) -> bytes: ...\n\nIn a non-stub file (i.e. a regular .py file), do the same but\nfollow it with an implementation.  The implementation should *not*\nbe decorated with @overload.  For example:\n\n@overload\ndef utf8(value: None) -> None: ...\n@overload\ndef utf8(value: bytes) -> bytes: ...\n@overload\ndef utf8(value: str) -> bytes: ...\ndef utf8(value):\n    # implementation goes here\n\nThe overloads for a function can be retrieved at runtime using the\nget_overloads() function."]}, {"name": "setuptools._vendor.typing_extensions.get_overloads", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}], "returns": null, "documentation": ["Return all defined overloads for *func* as a sequence."]}, {"name": "setuptools._vendor.typing_extensions.clear_overloads", "asynchronous": false, "params": [], "returns": null, "documentation": ["Clear all overloads in the registry."]}, {"name": "setuptools._vendor.typing_extensions._is_dunder", "asynchronous": false, "params": [{"name": "attr", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._get_protocol_attrs", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._caller", "asynchronous": false, "params": [{"name": "depth", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._allow_reckless_class_checks", "asynchronous": false, "params": [{"name": "depth", "type": null, "default": "..."}], "returns": null, "documentation": ["Allow instance and class checks for special stdlib modules.\nThe abc and functools modules indiscriminately call isinstance() and\nissubclass() on the whole MRO of a user class, which may contain protocols."]}, {"name": "setuptools._vendor.typing_extensions._no_init", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._type_check_issubclass_arg_1", "asynchronous": false, "params": [{"name": "arg", "type": null, "default": null}], "returns": null, "documentation": ["Raise TypeError if `arg` is not an instance of `type`\nin `issubclass(arg, <protocol>)`.\n\nIn most cases, this is verified by type.__subclasscheck__.\nChecking it again unnecessarily would slow down issubclass() checks,\nso, we don't perform this check unless we absolutely have to.\n\nFor various error paths, however,\nwe want to ensure that *this* error message is shown to the user\nwhere relevant, rather than a typing.py-specific error message."]}, {"name": "setuptools._vendor.typing_extensions._proto_hook", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.runtime_checkable", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": null, "documentation": ["Mark a protocol class as a runtime protocol.\n\nSuch protocol can be used with isinstance() and issubclass().\nRaise TypeError if applied to a non-protocol class.\nThis allows a simple-minded structural check very similar to\none trick ponies in collections.abc such as Iterable.\n\nFor example:\n\n```\n@runtime_checkable\nclass Closable(Protocol):\n    def close(self): ...\n\nassert isinstance(open('/some/file'), Closable)\n```\n\nWarning: this will check only the presence of the required methods,\nnot their type signatures!\n"]}, {"name": "setuptools._vendor.typing_extensions._ensure_subclassable", "asynchronous": false, "params": [{"name": "mro_entries", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._get_typeddict_qualifiers", "asynchronous": false, "params": [{"name": "annotation_type", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypedDict", "asynchronous": false, "params": [{"name": "typename", "type": null, "default": null}, {"name": "fields", "type": null, "default": "..."}, {"name": "total", "type": null, "default": "..."}, {"name": "closed", "type": null, "default": "..."}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["A simple typed namespace. At runtime it is equivalent to a plain dict.\n\nTypedDict creates a dictionary type such that a type checker will expect all\ninstances to have a certain set of keys, where each key is\nassociated with a value of a consistent type. This expectation\nis not checked at runtime.\n\nUsage:\n\n```\nclass Point2D(TypedDict):\n    x: int\n    y: int\n    label: str\n\na: Point2D = {'x': 1, 'y': 2, 'label': 'good'}  # OK\nb: Point2D = {'z': 3, 'label': 'bad'}           # Fails type check\n\nassert Point2D(x=1, y=2, label='first') == dict(x=1, y=2, label='first')\n```\n\nThe type info can be accessed via the Point2D.\\_\\_annotations\\_\\_ dict, and\nthe Point2D.\\_\\_required_keys\\_\\_ and Point2D.\\_\\_optional_keys\\_\\_ frozensets.\nTypedDict supports an additional equivalent form:\n\n```\nPoint2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})\n```\n\nBy default, all keys must be present in a TypedDict. It is possible\nto override this by specifying totality:\n\n```\nclass Point2D(TypedDict, total=False):\n    x: int\n    y: int\n```\n\nThis means that a Point2D TypedDict can have any of the keys omitted. A type\nchecker is only expected to support a literal False or True as the value of\nthe total argument. True is the default, and makes all items defined in the\nclass body be required.\n\nThe Required and NotRequired special forms can also be used to mark\nindividual keys as being required or not required:\n\n```\nclass Point2D(TypedDict):\n    x: int  # the \"x\" key must always be present (Required is the default)\n    y: NotRequired[int]  # the \"y\" key can be omitted\n```\n\nSee PEP 655 for more details on Required and NotRequired.\n"]}, {"name": "setuptools._vendor.typing_extensions.is_typeddict", "asynchronous": false, "params": [{"name": "tp", "type": null, "default": null}], "returns": null, "documentation": ["Check if an annotation is a TypedDict class\n\nFor example::\n\n: class Film(TypedDict):\n\n  : title: str\n    year: int\n\n  is_typeddict(Film) # => True\n  is_typeddict(Union[list, str]) # => False\n"]}, {"name": "setuptools._vendor.typing_extensions.assert_type", "asynchronous": false, "params": [{"name": "val", "type": null, "default": null}, {"name": "typ", "type": null, "default": null}], "returns": null, "documentation": ["Assert (to the type checker) that the value is of the given type.\n\nWhen the type checker encounters a call to assert_type(), it\nemits an error if the value is not of the specified type:\n\n```\ndef greet(name: str) -> None:\n    assert_type(name, str)  # ok\n    assert_type(name, int)  # type checker error\n```\n\nAt runtime this returns the first argument unchanged and otherwise\ndoes nothing.\n"]}, {"name": "setuptools._vendor.typing_extensions._strip_extras", "asynchronous": false, "params": [{"name": "t", "type": null, "default": null}], "returns": null, "documentation": ["Strips Annotated, Required and NotRequired from a given type.", "replaces _strip_annotations()"]}, {"name": "setuptools._vendor.typing_extensions.get_type_hints", "asynchronous": false, "params": [{"name": "obj", "type": null, "default": null}, {"name": "globalns", "type": null, "default": "..."}, {"name": "localns", "type": null, "default": "..."}, {"name": "include_extras", "type": null, "default": "..."}], "returns": null, "documentation": ["Return type hints for an object.\n\nThis is often the same as obj.__annotations__, but it handles\nforward references encoded as string literals, adds Optional[t] if a\ndefault value equal to None is set and recursively replaces all\n'Annotated[T, ...]', 'Required[T]' or 'NotRequired[T]' with 'T'\n(unless 'include_extras=True').\n\nThe argument may be a module, class, method, or function. The annotations\nare returned as a dictionary. For classes, annotations include also\ninherited members.\n\nTypeError is raised if the argument is not of a type that can contain\nannotations, and an empty dictionary is returned if no annotations are\npresent.\n\nBEWARE -- the behavior of globalns and localns is counterintuitive\n(unless you are familiar with how eval() and exec() work).  The\nsearch order is locals first, then globals.\n\n- If no dict arguments are passed, an attempt is made to use the\n  globals from obj (or the respective module's globals for classes),\n  and these are also used as the locals.  If the object does not appear\n  to have globals, an empty dictionary is used.\n\n- If one dict argument is passed, it is used for both globals and\n  locals.\n\n- If two dict arguments are passed, they specify globals and\n  locals, respectively."]}, {"name": "setuptools._vendor.typing_extensions.get_origin", "asynchronous": false, "params": [{"name": "tp", "type": null, "default": null}], "returns": null, "documentation": ["Get the unsubscripted version of a type.\n\nThis supports generic types, Callable, Tuple, Union, Literal, Final, ClassVar\nand Annotated. Return None for unsupported types. Examples:\n\n```\nget_origin(Literal[42]) is Literal\nget_origin(int) is None\nget_origin(ClassVar[int]) is ClassVar\nget_origin(Generic) is Generic\nget_origin(Generic[T]) is Generic\nget_origin(Union[T, int]) is Union\nget_origin(List[Tuple[T, T]][int]) == list\nget_origin(P.args) is P\n```\n"]}, {"name": "setuptools._vendor.typing_extensions.get_args", "asynchronous": false, "params": [{"name": "tp", "type": null, "default": null}], "returns": null, "documentation": ["Get type arguments with all substitutions performed.\n\nFor unions, basic simplifications used by Union constructor are performed.\nExamples:\n\n```\nget_args(Dict[str, int]) == (str, int)\nget_args(int) == ()\nget_args(Union[int, Union[T, int], str][int]) == (int, str)\nget_args(Union[int, Tuple[T, int]][str]) == (int, Tuple[str, int])\nget_args(Callable[[], T][int]) == ([], int)\n```\n"]}, {"name": "setuptools._vendor.typing_extensions.TypeAlias", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": ["Special marker indicating that an assignment should\nbe recognized as a proper type alias definition by type\ncheckers.\n\nFor example:\n\n```\nPredicate: TypeAlias = Callable[..., bool]\n```\n\nIt's invalid when used anywhere except as in the example above.\n"]}, {"name": "setuptools._vendor.typing_extensions._set_default", "asynchronous": false, "params": [{"name": "type_param", "type": null, "default": null}, {"name": "default", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._set_module", "asynchronous": false, "params": [{"name": "typevarlike", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._concatenate_getitem", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": ["3.8-3.9"]}, {"name": "setuptools._vendor.typing_extensions.Concatenate", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": ["Used in conjunction with `ParamSpec` and `Callable` to represent a\nhigher order function which adds, removes or transforms parameters of a\ncallable.\n\nFor example:\n\n```\nCallable[Concatenate[int, P], int]\n```\n\nSee PEP 612 for detailed information.\n"]}, {"name": "setuptools._vendor.typing_extensions.TypeGuard", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": ["Special typing form used to annotate the return type of a user-defined\ntype guard function. `TypeGuard` only accepts a single type argument.\nAt runtime, functions marked this way should return a boolean.\n\n`TypeGuard` aims to benefit *type narrowing* -- a technique used by static\ntype checkers to determine a more precise type of an expression within a\nprogram's code flow. Usually type narrowing is done by analyzing\nconditional code flow and applying the narrowing to a block of code. The\nconditional expression here is sometimes referred to as a \"type guard\".\n\nSometimes it would be convenient to use a user-defined boolean function\nas a type guard. Such a function should use `TypeGuard[...]` as its\nreturn type to alert static type checkers to this intention.\n\nUsing `-> TypeGuard` tells the static type checker that for a given\nfunction:\n\n1. The return value is a boolean.\n\n2\\. If the return value is `True`, the type of its argument\nis the type inside `TypeGuard`.\n\nFor example:\n\n```\ndef is_str(val: Union[str, float]):\n    # \"isinstance\" type guard\n    if isinstance(val, str):\n        # Type of ``val`` is narrowed to ``str``\n        ...\n    else:\n        # Else, type of ``val`` is narrowed to ``float``.\n        ...\n```\n\nStrict type narrowing is not enforced -- `TypeB` need not be a narrower\nform of `TypeA` (it can even be a wider form) and this may lead to\ntype-unsafe results. The main reason is to allow for things like\nnarrowing `List[object]` to `List[str]` even though the latter is not\na subtype of the former, since `List` is invariant. The responsibility of\nwriting type-safe type guards is left to the user.\n\n`TypeGuard` also works with type variables. For more information, see\nPEP 647 (User-Defined Type Guards).\n"]}, {"name": "setuptools._vendor.typing_extensions.TypeIs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": ["Special typing form used to annotate the return type of a user-defined\ntype narrower function. `TypeIs` only accepts a single type argument.\nAt runtime, functions marked this way should return a boolean.\n\n`TypeIs` aims to benefit *type narrowing* -- a technique used by static\ntype checkers to determine a more precise type of an expression within a\nprogram's code flow. Usually type narrowing is done by analyzing\nconditional code flow and applying the narrowing to a block of code. The\nconditional expression here is sometimes referred to as a \"type guard\".\n\nSometimes it would be convenient to use a user-defined boolean function\nas a type guard. Such a function should use `TypeIs[...]` as its\nreturn type to alert static type checkers to this intention.\n\nUsing `-> TypeIs` tells the static type checker that for a given\nfunction:\n\n1. The return value is a boolean.\n\n2\\. If the return value is `True`, the type of its argument\nis the intersection of the type inside `TypeGuard` and the argument's\npreviously known type.\n\nFor example:\n\n```\ndef is_awaitable(val: object) -> TypeIs[Awaitable[Any]]:\n    return hasattr(val, '__await__')\n\ndef f(val: Union[int, Awaitable[int]]) -> int:\n    if is_awaitable(val):\n        assert_type(val, Awaitable[int])\n    else:\n        assert_type(val, int)\n```\n\n`TypeIs` also works with type variables. For more information, see\nPEP 742 (Narrowing types with TypeIs).\n"]}, {"name": "setuptools._vendor.typing_extensions.LiteralString", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "params", "type": null, "default": null}], "returns": null, "documentation": ["Represents an arbitrary literal string.\n\nExample:\n\n```\nfrom typing_extensions import LiteralString\n\ndef query(sql: LiteralString) -> ...:\n    ...\n\nquery(\"SELECT * FROM table\")  # ok\nquery(f\"SELECT * FROM {input()}\")  # not ok\n```\n\nSee PEP 675 for details.\n"]}, {"name": "setuptools._vendor.typing_extensions.Self", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "params", "type": null, "default": null}], "returns": null, "documentation": ["Used to spell the type of \"self\" in classes.\n\nExample:\n\n```\nfrom typing import Self\n\nclass ReturnsSelf:\n    def parse(self, data: bytes) -> Self:\n        ...\n        return self\n```\n"]}, {"name": "setuptools._vendor.typing_extensions.Never", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "params", "type": null, "default": null}], "returns": null, "documentation": ["The bottom type, a type that has no members.\n\nThis can be used to define a function that should never be\ncalled, or a function that never returns:\n\n```\nfrom typing_extensions import Never\n\ndef never_call_me(arg: Never) -> None:\n    pass\n\ndef int_or_str(arg: int | str) -> None:\n    never_call_me(arg)  # type checker error\n    match arg:\n        case int():\n            print(\"It's an int\")\n        case str():\n            print(\"It's a str\")\n        case _:\n            never_call_me(arg)  # ok, arg is of type Never\n```\n"]}, {"name": "setuptools._vendor.typing_extensions.Required", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": ["A special typing construct to mark a key of a total=False TypedDict\nas required. For example:\n\n    class Movie(TypedDict, total=False):\n        title: Required[str]\n        year: int\n\n    m = Movie(\n        title='The Matrix',  # typechecker error if key is omitted\n        year=1999,\n    )\n\nThere is no runtime checking that a required key is actually provided\nwhen instantiating a related TypedDict."]}, {"name": "setuptools._vendor.typing_extensions.NotRequired", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": ["A special typing construct to mark a key of a TypedDict as\npotentially missing. For example:\n\n    class Movie(TypedDict):\n        title: str\n        year: NotRequired[int]\n\n    m = Movie(\n        title='The Matrix',  # typechecker error if key is omitted\n        year=1999,\n    )"]}, {"name": "setuptools._vendor.typing_extensions.ReadOnly", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": ["A special typing construct to mark an item of a TypedDict as read-only.\n\nFor example:\n\n    class Movie(TypedDict):\n        title: ReadOnly[str]\n        year: int\n\n    def mutate_movie(m: Movie) -> None:\n        m[\"year\"] = 1992  # allowed\n        m[\"title\"] = \"The Matrix\"  # typechecker error\n\nThere is no runtime checking for this property."]}, {"name": "setuptools._vendor.typing_extensions._is_unpack", "asynchronous": false, "params": [{"name": "obj", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Unpack", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._is_unpack", "asynchronous": false, "params": [{"name": "obj", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._is_unpack", "asynchronous": false, "params": [{"name": "obj", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._unpack_args", "asynchronous": false, "params": [{"name": "*args", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.reveal_type", "asynchronous": false, "params": [{"name": "obj", "type": {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}, "default": null}], "returns": {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}, "documentation": ["Reveal the inferred type of a variable.\n\nWhen a static type checker encounters a call to `reveal_type()`,\nit will emit the inferred type of the argument:\n\n```\nx: int = 1\nreveal_type(x)\n```\n\nRunning a static type checker (e.g., `mypy`) on this example\nwill produce output similar to 'Revealed type is \"builtins.int\"'.\n\nAt runtime, the function prints the runtime type of the\nargument and returns it unchanged.\n"]}, {"name": "setuptools._vendor.typing_extensions.assert_never", "asynchronous": false, "params": [{"name": "arg", "type": {"name": "Never", "xref": {"fqname": "Never", "project": null}, "params": null}, "default": null}], "returns": {"name": "Never", "xref": {"fqname": "Never", "project": null}, "params": null}, "documentation": ["Assert to the type checker that a line of code is unreachable.\n\nExample:\n\n```\ndef int_or_str(arg: int | str) -> None:\n    match arg:\n        case int():\n            print(\"It's an int\")\n        case str():\n            print(\"It's a str\")\n        case _:\n            assert_never(arg)\n```\n\nIf a type checker finds that a call to assert_never() is\nreachable, it will emit an error.\n\nAt runtime, this throws an exception when called.\n"]}, {"name": "setuptools._vendor.typing_extensions.dataclass_transform", "asynchronous": false, "params": [{"name": "eq_default", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "order_default", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "kw_only_default", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "frozen_default", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "field_specifiers", "type": {"name": "typing.Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "typing.Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "typing.Type", "xref": {"fqname": "typing.Type", "project": "--std--"}, "params": [{"name": "typing.Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, {"name": "typing.Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": [{"name": "...", "xref": null, "params": null}, {"name": "typing.Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}]}, {"name": "...", "xref": null, "params": null}]}, "default": "..."}, {"name": "**kwargs", "type": {"name": "typing.Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "typing.Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": [{"name": "", "xref": null, "params": [{"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}]}, {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}]}, "documentation": ["Decorator that marks a function, class, or metaclass as providing\ndataclass-like behavior.\n\nExample:\n\n> from typing_extensions import dataclass_transform\n>\n> \\_T = TypeVar(\"\\_T\")\n>\n> \\# Used on a decorator function\n> @dataclass_transform()\n> def create_model(cls: type[\\_T]) -> type\\[\\_T\\]:\n>\n> > ...\n> > return cls\n>\n> @create_model\n> class CustomerModel:\n>\n> > id: int\n> > name: str\n>\n> \\# Used on a base class\n> @dataclass_transform()\n> class ModelBase: ...\n>\n> class CustomerModel(ModelBase):\n>\n> : id: int\n>   name: str\n>\n> \\# Used on a metaclass\n> @dataclass_transform()\n> class ModelMeta(type): ...\n>\n> class ModelBase(metaclass=ModelMeta): ...\n>\n> class CustomerModel(ModelBase):\n>\n> : id: int\n>   name: str\n\nEach of the `CustomerModel` classes defined in this example will now\nbehave similarly to a dataclass created with the `@dataclasses.dataclass`\ndecorator. For example, the type checker will synthesize an `__init__`\nmethod.\n\nThe arguments to this decorator can be used to customize this behavior:\n\\- `eq_default` indicates whether the `eq` parameter is assumed to be\n\n> True or False if it is omitted by the caller.\n\n- `order_default` indicates whether the `order` parameter is\n  assumed to be True or False if it is omitted by the caller.\n- `kw_only_default` indicates whether the `kw_only` parameter is\n  assumed to be True or False if it is omitted by the caller.\n- `frozen_default` indicates whether the `frozen` parameter is\n  assumed to be True or False if it is omitted by the caller.\n- `field_specifiers` specifies a static list of supported classes\n  or functions that describe fields, similar to `dataclasses.field()`.\n\nAt runtime, this decorator records its arguments in the\n`__dataclass_transform__` attribute on the decorated object.\n\nSee PEP 681 for details.\n"]}, {"name": "setuptools._vendor.typing_extensions.override", "asynchronous": false, "params": [{"name": "arg", "type": {"name": "_F", "xref": {"fqname": "_F", "project": null}, "params": null}, "default": null}], "returns": {"name": "_F", "xref": {"fqname": "_F", "project": null}, "params": null}, "documentation": ["Indicate that a method is intended to override a method in a base class.\n\nUsage:\n\n> class Base:\n> : def method(self) -> None:\n>\n>   : pass\n>\n> class Child(Base):\n>\n> : @override\n>   def method(self) -> None:\n>\n>   > super().method()\n\nWhen this decorator is applied to a method, the type checker will\nvalidate that it overrides a method with the same name on a base class.\nThis helps prevent bugs that may occur when a base class is changed\nwithout an equivalent change to a child class.\n\nThere is no runtime checking of these properties. The decorator\nsets the `__override__` attribute to `True` on the decorated object\nto allow runtime introspection.\n\nSee PEP 698 for details.\n"]}, {"name": "setuptools._vendor.typing_extensions._check_generic", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}, {"name": "elen", "type": null, "default": "..."}], "returns": null, "documentation": ["Check correct count for parameters of a generic cls (internal helper).\n\nThis gives a nice error message in case of count mismatch."]}, {"name": "setuptools._vendor.typing_extensions._check_generic", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}, {"name": "elen", "type": null, "default": null}], "returns": null, "documentation": ["Check correct count for parameters of a generic cls (internal helper).\n\nThis gives a nice error message in case of count mismatch.", "Python 3.11+"]}, {"name": "setuptools._vendor.typing_extensions._has_generic_or_protocol_as_origin", "asynchronous": false, "params": [], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._is_unpacked_typevartuple", "asynchronous": false, "params": [{"name": "x", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._collect_type_vars", "asynchronous": false, "params": [{"name": "types", "type": null, "default": null}, {"name": "typevar_types", "type": null, "default": "..."}], "returns": null, "documentation": ["Collect all type variable contained in types in order of\nfirst appearance (lexicographic order). For example:\n\n```\n_collect_type_vars((T, List[S, T])) == (T, S)\n```\n"]}, {"name": "setuptools._vendor.typing_extensions._collect_parameters", "asynchronous": false, "params": [{"name": "args", "type": null, "default": null}], "returns": null, "documentation": ["Collect all type variables and parameter specifications in args\nin order of first appearance (lexicographic order).\n\nFor example:\n\n```\nassert _collect_parameters((T, Callable[P, T])) == (T, P)\n```\n"]}, {"name": "setuptools._vendor.typing_extensions._make_nmtuple", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}, {"name": "types", "type": null, "default": null}, {"name": "module", "type": null, "default": null}, {"name": "defaults", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._namedtuple_mro_entries", "asynchronous": false, "params": [{"name": "bases", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.NamedTuple", "asynchronous": false, "params": [{"name": "typename", "type": null, "default": null}, {"name": "fields", "type": null, "default": "..."}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["Typed version of namedtuple.\n\nUsage:\n\n```\nclass Employee(NamedTuple):\n    name: str\n    id: int\n```\n\nThis is equivalent to:\n\n```\nEmployee = collections.namedtuple('Employee', ['name', 'id'])\n```\n\nThe resulting class has an extra \\_\\_annotations\\_\\_ attribute, giving a\ndict that maps field names to types. (The field names are also in\nthe \\_fields attribute, which is part of the namedtuple API.)\nAn alternative equivalent functional syntax is also accepted:\n\n```\nEmployee = NamedTuple('Employee', [('name', str), ('id', int)])\n```\n"]}, {"name": "setuptools._vendor.typing_extensions.get_original_bases", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": null, "documentation": ["Return the class's \"original\" bases prior to modification by `__mro_entries__`.\n\nExamples:\n\n```\nfrom typing import TypeVar, Generic\nfrom typing_extensions import NamedTuple, TypedDict\n\nT = TypeVar(\"T\")\nclass Foo(Generic[T]): ...\nclass Bar(Foo[int], float): ...\nclass Baz(list[str]): ...\nEggs = NamedTuple(\"Eggs\", [(\"a\", int), (\"b\", str)])\nSpam = TypedDict(\"Spam\", {\"a\": int, \"b\": str})\n\nassert get_original_bases(Bar) == (Foo[int], float)\nassert get_original_bases(Baz) == (list[str],)\nassert get_original_bases(Eggs) == (NamedTuple,)\nassert get_original_bases(Spam) == (TypedDict,)\nassert get_original_bases(int) == (object,)\n```\n"]}, {"name": "setuptools._vendor.typing_extensions._is_unionable", "asynchronous": false, "params": [{"name": "obj", "type": null, "default": null}], "returns": null, "documentation": ["Corresponds to is_unionable() in unionobject.c in CPython."]}, {"name": "setuptools._vendor.typing_extensions.is_protocol", "asynchronous": false, "params": [{"name": "tp", "type": {"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Return True if the given type is a Protocol.\n\nExample:\n\n```\n>>> from typing_extensions import Protocol, is_protocol\n>>> class P(Protocol):\n...     def a(self) -> str: ...\n...     b: int\n>>> is_protocol(P)\nTrue\n>>> is_protocol(int)\nFalse\n```\n"]}, {"name": "setuptools._vendor.typing_extensions.get_protocol_members", "asynchronous": false, "params": [{"name": "tp", "type": {"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "typing.FrozenSet", "xref": {"fqname": "typing.FrozenSet", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Return the set of members defined in a Protocol.\n\nExample:\n\n```\n>>> from typing_extensions import Protocol, get_protocol_members\n>>> class P(Protocol):\n...     def a(self) -> str: ...\n...     b: int\n>>> get_protocol_members(P)\nfrozenset({'a', 'b'})\n```\n\nRaise a TypeError for arguments that are not Protocols.\n"]}], "variables": [{"name": "setuptools._vendor.typing_extensions.PEP_560", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.GenericMeta", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._PEP_696_IMPLEMENTED", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._marker", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.NoReturn", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.T", "type": null, "documentation": ["Any type."]}, {"name": "setuptools._vendor.typing_extensions.KT", "type": null, "documentation": ["Key type."]}, {"name": "setuptools._vendor.typing_extensions.VT", "type": null, "documentation": ["Value type."]}, {"name": "setuptools._vendor.typing_extensions.T_co", "type": null, "documentation": ["Any type covariant containers."]}, {"name": "setuptools._vendor.typing_extensions.T_contra", "type": null, "documentation": ["Ditto contravariant."]}, {"name": "setuptools._vendor.typing_extensions.ClassVar", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Final", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.final", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Literal", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Literal", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._overload_dummy", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.overload", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.get_overloads", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.clear_overloads", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._overload_registry", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Type", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Awaitable", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Coroutine", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.AsyncIterable", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.AsyncIterator", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Deque", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.DefaultDict", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.OrderedDict", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Counter", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ChainMap", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Text", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TYPE_CHECKING", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._special_generic_alias_base", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._NoneType", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Generator", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.AsyncGenerator", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ContextManager", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.AsyncContextManager", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._PROTO_ALLOWLIST", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._EXCLUDED_ATTRS", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Protocol", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.runtime_checkable", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.runtime", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.SupportsInt", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.SupportsFloat", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.SupportsComplex", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.SupportsBytes", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.SupportsIndex", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.SupportsAbs", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.SupportsRound", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._PEP_728_IMPLEMENTED", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypedDict", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._TypedDictMeta", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.is_typeddict", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._TAKES_MODULE", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._TypedDict", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._TYPEDDICT_TYPES", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._TYPEDDICT_TYPES", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.assert_type", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.get_type_hints", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Annotated", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._AnnotatedAlias", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.get_origin", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.get_args", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._BaseGenericAlias", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._typing_GenericAlias", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeAlias", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeAlias", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.NoDefault", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.NoDefault", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ParamSpecArgs", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ParamSpecKwargs", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Concatenate", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._ConcatenateGenericAlias", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Concatenate", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeGuard", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeGuard", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeIs", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeIs", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.LiteralString", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Self", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Never", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Required", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.NotRequired", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Required", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.NotRequired", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ReadOnly", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ReadOnly", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._UNPACK_DOC", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Unpack", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Unpack", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.reveal_type", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._ASSERT_NEVER_REPR_MAX_LENGTH", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._ASSERT_NEVER_REPR_MAX_LENGTH", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.assert_never", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.dataclass_transform", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.override", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._F", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.deprecated", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._T", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.typing._check_generic", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._TYPEVARTUPLE_TYPES", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.typing._collect_type_vars", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.typing._collect_parameters", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.NamedTuple", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._prohibited_namedtuple_fields", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._special_namedtuple_fields", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._NamedTuple", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Buffer", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.get_original_bases", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.NewType", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeAliasType", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.is_protocol", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.get_protocol_members", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Doc", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._CapsuleType", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._CAPI", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._CapsuleType", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.CapsuleType", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.AbstractSet", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.AnyStr", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.BinaryIO", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Callable", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Collection", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Container", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Dict", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ForwardRef", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.FrozenSet", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Generic", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Hashable", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.IO", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ItemsView", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Iterable", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Iterator", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.KeysView", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.List", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Mapping", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.MappingView", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Match", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.MutableMapping", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.MutableSequence", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.MutableSet", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Optional", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Pattern", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Reversible", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Sequence", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Set", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Sized", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TextIO", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Tuple", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Union", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ValuesView", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.cast", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.no_type_check", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.no_type_check_decorator", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.typing_extensions._Sentinel", "bases": [], "methods": [{"name": "setuptools._vendor.typing_extensions._Sentinel.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["The functions below are modified copies of typing internal helpers.", "They are needed by _ProtocolMeta and they provide support for PEP 646."]}, {"name": "setuptools._vendor.typing_extensions._AnyMeta", "bases": ["type"], "methods": [{"name": "setuptools._vendor.typing_extensions._AnyMeta.__instancecheck__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "obj", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._AnyMeta.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Any", "bases": [], "methods": [{"name": "setuptools._vendor.typing_extensions.Any.__new__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Special type indicating an unconstrained type.\n- Any is compatible with every type.\n- Any assumed to have all methods.\n- All values assumed to be instances of Any.\nNote that all the above statements are true from the point of view of\nstatic type checkers. At runtime, Any should not be used with instance\nchecks."]}, {"name": "setuptools._vendor.typing_extensions._ExtensionsSpecialForm", "bases": ["typing._SpecialForm"], "methods": [{"name": "setuptools._vendor.typing_extensions._ExtensionsSpecialForm.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions._LiteralGenericAlias", "bases": ["typing._GenericAlias"], "methods": [{"name": "setuptools._vendor.typing_extensions._LiteralGenericAlias.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._LiteralGenericAlias.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions._LiteralForm", "bases": ["_ExtensionsSpecialForm"], "methods": [{"name": "setuptools._vendor.typing_extensions._LiteralForm.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "doc", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._LiteralForm.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions._SpecialGenericAlias", "bases": ["_special_generic_alias_base"], "methods": [{"name": "setuptools._vendor.typing_extensions._SpecialGenericAlias.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "origin", "type": null, "default": null}, {"name": "nparams", "type": null, "default": null}, {"name": "inst", "type": null, "default": "..."}, {"name": "name", "type": null, "default": "..."}, {"name": "defaults", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._SpecialGenericAlias.__setattr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "attr", "type": null, "default": null}, {"name": "val", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._SpecialGenericAlias.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "params", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions._ProtocolMeta", "bases": [], "methods": [{"name": "setuptools._vendor.typing_extensions._ProtocolMeta.__new__", "asynchronous": false, "params": [{"name": "mcls", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "bases", "type": null, "default": null}, {"name": "namespace", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["This metaclass is somewhat unfortunate,", "but is necessary for several reasons...", "NOTE: DO NOT call super() in any methods in this class", "That would call the methods on typing._ProtocolMeta on Python 3.8-3.11", "and those are slow"]}, {"name": "setuptools._vendor.typing_extensions._ProtocolMeta.__init__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._ProtocolMeta.__subclasscheck__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._ProtocolMeta.__instancecheck__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "instance", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._ProtocolMeta.__eq__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._ProtocolMeta.__hash__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["This has to be defined, or the abc-module cache", "complains about classes with this metaclass being unhashable,", "if we define only __eq__!"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Inheriting from typing._ProtocolMeta isn't actually desirable,", "but is necessary to allow typing.Protocol and typing_extensions.Protocol", "to mix without getting TypeErrors about \"metaclass conflict\""]}, {"name": "setuptools._vendor.typing_extensions.Protocol", "bases": ["typing.Generic"], "methods": [{"name": "setuptools._vendor.typing_extensions.Protocol.__init_subclass__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions.Protocol.__doc__", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Protocol.__slots__", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Protocol._is_protocol", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Protocol._is_runtime_protocol", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions.SupportsInt", "bases": ["Protocol"], "methods": [{"name": "setuptools._vendor.typing_extensions.SupportsInt.__int__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions.SupportsInt.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["An ABC with one abstract method __int__."]}, {"name": "setuptools._vendor.typing_extensions.SupportsFloat", "bases": ["Protocol"], "methods": [{"name": "setuptools._vendor.typing_extensions.SupportsFloat.__float__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "float", "xref": {"fqname": "functions.float", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions.SupportsFloat.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["An ABC with one abstract method __float__."]}, {"name": "setuptools._vendor.typing_extensions.SupportsComplex", "bases": ["Protocol"], "methods": [{"name": "setuptools._vendor.typing_extensions.SupportsComplex.__complex__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "complex", "xref": {"fqname": "functions.complex", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions.SupportsComplex.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["An ABC with one abstract method __complex__."]}, {"name": "setuptools._vendor.typing_extensions.SupportsBytes", "bases": ["Protocol"], "methods": [{"name": "setuptools._vendor.typing_extensions.SupportsBytes.__bytes__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions.SupportsBytes.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["An ABC with one abstract method __bytes__."]}, {"name": "setuptools._vendor.typing_extensions.SupportsIndex", "bases": ["Protocol"], "methods": [{"name": "setuptools._vendor.typing_extensions.SupportsIndex.__index__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions.SupportsIndex.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions.SupportsAbs", "bases": [], "methods": [{"name": "setuptools._vendor.typing_extensions.SupportsAbs.__abs__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "T_co", "xref": {"fqname": "T_co", "project": null}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions.SupportsAbs.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["An ABC with one abstract method __abs__ that is covariant in its return type."]}, {"name": "setuptools._vendor.typing_extensions.SupportsRound", "bases": [], "methods": [{"name": "setuptools._vendor.typing_extensions.SupportsRound.__round__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "ndigits", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "T_co", "xref": {"fqname": "T_co", "project": null}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions.SupportsRound.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["An ABC with one abstract method __round__ that is covariant in its return type."]}, {"name": "setuptools._vendor.typing_extensions._TypedDictMeta", "bases": ["type"], "methods": [{"name": "setuptools._vendor.typing_extensions._TypedDictMeta.__new__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "bases", "type": null, "default": null}, {"name": "ns", "type": null, "default": null}, {"name": "total", "type": null, "default": "..."}, {"name": "closed", "type": null, "default": "..."}], "returns": null, "documentation": ["Create new typed dict class object.\n\nThis method is called when TypedDict is subclassed,\nor when TypedDict is instantiated. This way\nTypedDict supports all three syntax forms described in its docstring.\nSubclasses and instances of TypedDict return actual dictionaries."]}, {"name": "setuptools._vendor.typing_extensions._TypedDictMeta.__subclasscheck__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions._TypedDictMeta.__call__", "type": null, "documentation": ["static method"]}, {"name": "setuptools._vendor.typing_extensions._TypedDictMeta.__instancecheck__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions._AnnotatedAlias", "bases": ["typing._GenericAlias"], "methods": [{"name": "setuptools._vendor.typing_extensions._AnnotatedAlias.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "origin", "type": null, "default": null}, {"name": "metadata", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._AnnotatedAlias.copy_with", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "params", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._AnnotatedAlias.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._AnnotatedAlias.__reduce__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._AnnotatedAlias.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._AnnotatedAlias.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Runtime representation of an annotated type.\n\nAt its core 'Annotated[t, dec1, dec2, ...]' is an alias for the type 't'\nwith extra annotations. The alias behaves like a normal typing alias,\ninstantiating is the same as instantiating the underlying type, binding\nit to types is also the same."]}, {"name": "setuptools._vendor.typing_extensions.Annotated", "bases": [], "methods": [{"name": "setuptools._vendor.typing_extensions.Annotated.__new__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Annotated.__class_getitem__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "params", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Annotated.__init_subclass__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions.Annotated.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Add context specific metadata to a type.\n\nExample: Annotated[int, runtime_check.Unsigned] indicates to the\nhypothetical runtime_check module that this type is an unsigned int.\nEvery other consumer of this type can ignore this metadata and treat\nthis type as int.\n\nThe first argument to Annotated must be a valid type (and will be in\nthe \\_\\_origin\\_\\_ field), the remaining arguments are kept as a tuple in\nthe \\_\\_extra\\_\\_ field.\n\nDetails:\n\n- It's an error to call `Annotated` with less than two arguments.\n\n- Nested Annotated are flattened:\n\n  ```\n  Annotated[Annotated[T, Ann1, Ann2], Ann3] == Annotated[T, Ann1, Ann2, Ann3]\n  ```\n\n- Instantiating an annotated type is equivalent to instantiating the\n\nunderlying type:\n\n```\nAnnotated[C, Ann1](5) == C(5)\n```\n\n- Annotated can be used as a generic type alias:\n\n  ```\n  Optimized = Annotated[T, runtime.Optimize()]\n  Optimized[int] == Annotated[int, runtime.Optimize()]\n\n  OptimizedList = Annotated[List[T], runtime.Optimize()]\n  OptimizedList[int] == Annotated[List[int], runtime.Optimize()]\n  ```\n"]}, {"name": "setuptools._vendor.typing_extensions.NoDefaultTypeMeta", "bases": ["type"], "methods": [{"name": "setuptools._vendor.typing_extensions.NoDefaultTypeMeta.__setattr__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "attr", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions.NoDefaultType", "bases": [], "methods": [{"name": "setuptools._vendor.typing_extensions.NoDefaultType.__new__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.NoDefaultType.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.NoDefaultType.__reduce__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions.NoDefaultType.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["The type of the NoDefault singleton."]}, {"name": "setuptools._vendor.typing_extensions._DefaultMixin", "bases": [], "methods": [], "class_variables": [{"name": "setuptools._vendor.typing_extensions._DefaultMixin.__slots__", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._DefaultMixin.__init__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Mixin for TypeVarLike defaults."]}, {"name": "setuptools._vendor.typing_extensions._TypeVarLikeMeta", "bases": ["type"], "methods": [{"name": "setuptools._vendor.typing_extensions._TypeVarLikeMeta.__instancecheck__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "__instance", "type": {"name": "Any", "xref": {"fqname": "setuptools._vendor.typing_extensions.Any", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Classes using this metaclass must provide a _backported_typevarlike ClassVar"]}, {"name": "setuptools._vendor.typing_extensions.TypeVar", "bases": [], "methods": [{"name": "setuptools._vendor.typing_extensions.TypeVar.__new__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "*constraints", "type": null, "default": null}, {"name": "bound", "type": null, "default": "..."}, {"name": "covariant", "type": null, "default": "..."}, {"name": "contravariant", "type": null, "default": "..."}, {"name": "default", "type": null, "default": "..."}, {"name": "infer_variance", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeVar.__init_subclass__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions.TypeVar._backported_typevarlike", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Type variable.", "Add default and infer_variance parameters from PEP 696 and 695"]}, {"name": "setuptools._vendor.typing_extensions._Immutable", "bases": [], "methods": [{"name": "setuptools._vendor.typing_extensions._Immutable.__copy__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._Immutable.__deepcopy__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "memo", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions._Immutable.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Mixin to indicate that object should not be copied."]}, {"name": "setuptools._vendor.typing_extensions.ParamSpecArgs", "bases": ["_Immutable"], "methods": [{"name": "setuptools._vendor.typing_extensions.ParamSpecArgs.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "origin", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ParamSpecArgs.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ParamSpecArgs.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["The args for a ParamSpec object.\n\nGiven a ParamSpec object P, P.args is an instance of ParamSpecArgs.\n\nParamSpecArgs objects have a reference back to their ParamSpec:\n\nP.args.__origin__ is P\n\nThis type is meant for runtime introspection and has no special meaning to\nstatic type checkers."]}, {"name": "setuptools._vendor.typing_extensions.ParamSpecKwargs", "bases": ["_Immutable"], "methods": [{"name": "setuptools._vendor.typing_extensions.ParamSpecKwargs.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "origin", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ParamSpecKwargs.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ParamSpecKwargs.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["The kwargs for a ParamSpec object.\n\nGiven a ParamSpec object P, P.kwargs is an instance of ParamSpecKwargs.\n\nParamSpecKwargs objects have a reference back to their ParamSpec:\n\nP.kwargs.__origin__ is P\n\nThis type is meant for runtime introspection and has no special meaning to\nstatic type checkers."]}, {"name": "setuptools._vendor.typing_extensions.ParamSpec", "bases": [], "methods": [{"name": "setuptools._vendor.typing_extensions.ParamSpec.__new__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "bound", "type": null, "default": "..."}, {"name": "covariant", "type": null, "default": "..."}, {"name": "contravariant", "type": null, "default": "..."}, {"name": "infer_variance", "type": null, "default": "..."}, {"name": "default", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ParamSpec.__init_subclass__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions.ParamSpec._backported_typevarlike", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Parameter specification.", "Add default parameter - PEP 696"]}, {"name": "setuptools._vendor.typing_extensions.ParamSpec", "bases": ["list", "_DefaultMixin"], "methods": [{"name": "setuptools._vendor.typing_extensions.ParamSpec.args", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ParamSpec.kwargs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ParamSpec.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "bound", "type": null, "default": "..."}, {"name": "covariant", "type": null, "default": "..."}, {"name": "contravariant", "type": null, "default": "..."}, {"name": "infer_variance", "type": null, "default": "..."}, {"name": "default", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ParamSpec.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ParamSpec.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ParamSpec.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ParamSpec.__reduce__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.ParamSpec.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["Hack to get typing._type_check to pass."]}], "class_variables": [{"name": "setuptools._vendor.typing_extensions.ParamSpec.__class__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Parameter specification variable.\n\nUsage:\n\n```\nP = ParamSpec('P')\n```\n\nParameter specification variables exist primarily for the benefit of static\ntype checkers. They are used to forward the parameter types of one\ncallable to another callable, a pattern commonly found in higher order\nfunctions and decorators. They are only valid when used in `Concatenate`,\nor s the first argument to `Callable`. In Python 3.10 and higher,\nthey are also supported in user-defined Generics at runtime.\nSee class Generic for more information on generic types. An\nexample for annotating a decorator:\n\n```\nT = TypeVar('T')\nP = ParamSpec('P')\n\ndef add_logging(f: Callable[P, T]) -> Callable[P, T]:\n    '''A type-safe decorator to add logging to a function.'''\n    def inner(*args: P.args, **kwargs: P.kwargs) -> T:\n        logging.info(f'{f.__name__} was called')\n        return f(*args, **kwargs)\n    return inner\n\n@add_logging\ndef add_two(x: float, y: float) -> float:\n    '''Add two numbers together.'''\n    return x + y\n```\n\nParameter specification variables defined with covariant=True or\ncontravariant=True can be used to declare covariant or contravariant\ngeneric types. These keyword arguments are valid, but their actual semantics\nare yet to be decided. See PEP 612 for details.\n\nParameter specification variables can be introspected. e.g.:\n\n> P.\\_\\_name\\_\\_ == 'T'\n> P.\\_\\_bound\\_\\_ == None\n> P.\\_\\_covariant\\_\\_ == False\n> P.\\_\\_contravariant\\_\\_ == False\n\nNote that only parameter specification variables defined in global scope can\nbe pickled.\n", "Inherits from list as a workaround for Callable checks in Python < 3.9.2."]}, {"name": "setuptools._vendor.typing_extensions._ConcatenateGenericAlias", "bases": ["list"], "methods": [{"name": "setuptools._vendor.typing_extensions._ConcatenateGenericAlias.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "origin", "type": null, "default": null}, {"name": "args", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._ConcatenateGenericAlias.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._ConcatenateGenericAlias.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._ConcatenateGenericAlias.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["Hack to get typing._type_check to pass in Generic."]}, {"name": "setuptools._vendor.typing_extensions._ConcatenateGenericAlias.__parameters__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions._ConcatenateGenericAlias.__class__", "type": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._ConcatenateGenericAlias._special", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Inherits from list as a workaround for Callable checks in Python < 3.9.2."]}, {"name": "setuptools._vendor.typing_extensions._ConcatenateForm", "bases": ["_ExtensionsSpecialForm"], "methods": [{"name": "setuptools._vendor.typing_extensions._ConcatenateForm.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions._TypeGuardForm", "bases": ["_ExtensionsSpecialForm"], "methods": [{"name": "setuptools._vendor.typing_extensions._TypeGuardForm.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions._TypeIsForm", "bases": ["_ExtensionsSpecialForm"], "methods": [{"name": "setuptools._vendor.typing_extensions._TypeIsForm.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions._SpecialForm", "bases": ["typing._Final"], "methods": [{"name": "setuptools._vendor.typing_extensions._SpecialForm.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "getitem", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._SpecialForm.__getattr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._SpecialForm.__mro_entries__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "bases", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._SpecialForm.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._SpecialForm.__reduce__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._SpecialForm.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwds", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._SpecialForm.__or__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._SpecialForm.__ror__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._SpecialForm.__instancecheck__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "obj", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._SpecialForm.__subclasscheck__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "cls", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions._SpecialForm.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions._SpecialForm.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Vendored from cpython typing._SpecialFrom"]}, {"name": "setuptools._vendor.typing_extensions._RequiredForm", "bases": ["_ExtensionsSpecialForm"], "methods": [{"name": "setuptools._vendor.typing_extensions._RequiredForm.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions._ReadOnlyForm", "bases": ["_ExtensionsSpecialForm"], "methods": [{"name": "setuptools._vendor.typing_extensions._ReadOnlyForm.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions._UnpackSpecialForm", "bases": ["_ExtensionsSpecialForm"], "methods": [{"name": "setuptools._vendor.typing_extensions._UnpackSpecialForm.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "getitem", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions._UnpackAlias", "bases": ["typing._GenericAlias"], "methods": [{"name": "setuptools._vendor.typing_extensions._UnpackAlias.__typing_unpacked_tuple_args__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions._UnpackAlias.__class__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions._UnpackAlias", "bases": ["typing._GenericAlias"], "methods": [], "class_variables": [{"name": "setuptools._vendor.typing_extensions._UnpackAlias.__class__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions._UnpackForm", "bases": ["_ExtensionsSpecialForm"], "methods": [{"name": "setuptools._vendor.typing_extensions._UnpackForm.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeVarTuple", "bases": [], "methods": [{"name": "setuptools._vendor.typing_extensions.TypeVarTuple.__new__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "default", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeVarTuple.__init_subclass__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwds", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions.TypeVarTuple._backported_typevarlike", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Type variable tuple.", "Add default parameter - PEP 696"]}, {"name": "setuptools._vendor.typing_extensions.TypeVarTuple", "bases": ["_DefaultMixin"], "methods": [{"name": "setuptools._vendor.typing_extensions.TypeVarTuple.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeVarTuple.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "default", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeVarTuple.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeVarTuple.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeVarTuple.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeVarTuple.__reduce__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeVarTuple.__init_subclass__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwds", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typing_extensions.TypeVarTuple.__class__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Type variable tuple.\n\nUsage:\n\n```\nTs = TypeVarTuple('Ts')\n```\n\nIn the same way that a normal type variable is a stand-in for a single\ntype such as `int`, a type variable *tuple* is a stand-in for a *tuple*\ntype such as `Tuple[int, str]`.\n\nType variable tuples can be used in `Generic` declarations.\nConsider the following example:\n\n```\nclass Array(Generic[*Ts]): ...\n```\n\nThe `Ts` type variable tuple here behaves like `tuple[T1, T2]`,\nwhere `T1` and `T2` are type variables. To use these type variables\nas type parameters of `Array`, we must *unpack* the type variable tuple using\nthe star operator: `*Ts`. The signature of `Array` then behaves\nas if we had simply written `class Array(Generic[T1, T2]): ...`.\nIn contrast to `Generic[T1, T2]`, however, `Generic[*Shape]` allows\nus to parameterise the class with an *arbitrary* number of type parameters.\n\nType variable tuples can be used anywhere a normal `TypeVar` can.\nThis includes class definitions, as shown above, as well as function\nsignatures and variable annotations:\n\n```\nclass Array(Generic[*Ts]):\n\n    def __init__(self, shape: Tuple[*Ts]):\n        self._shape: Tuple[*Ts] = shape\n\n    def get_shape(self) -> Tuple[*Ts]:\n        return self._shape\n\nshape = (Height(480), Width(640))\nx: Array[Height, Width] = Array(shape)\ny = abs(x)  # Inferred type is Array[Height, Width]\nz = x + x   #        ...    is Array[Height, Width]\nx.get_shape()  #     ...    is tuple[Height, Width]\n```\n"]}, {"name": "setuptools._vendor.typing_extensions.deprecated", "bases": [], "methods": [{"name": "setuptools._vendor.typing_extensions.deprecated.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "message", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "category", "type": {"name": "typing.Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "typing.Type", "xref": {"fqname": "typing.Type", "project": "--std--"}, "params": [{"name": "Warning", "xref": {"fqname": "functions.Warning", "project": "--std--"}, "params": null}]}]}, "default": "..."}, {"name": "stacklevel", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.deprecated.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "arg", "type": {"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}, "default": null}], "returns": {"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Indicate that a class, function or overload is deprecated.\n\nWhen this decorator is applied to an object, the type checker\nwill generate a diagnostic on usage of the deprecated object.\n\nUsage:\n\n> @deprecated(\"Use B instead\")\n> class A:\n>\n> > pass\n>\n> @deprecated(\"Use g instead\")\n> def f():\n>\n> > pass\n>\n> @overload\n> @deprecated(\"int support is deprecated\")\n> def g(x: int) -> int: ...\n> @overload\n> def g(x: str) -> int: ...\n\nThe warning specified by *category* will be emitted at runtime\non use of deprecated objects. For functions, that happens on calls;\nfor classes, on instantiation and on creation of subclasses.\nIf the *category* is `None`, no warning is emitted at runtime.\nThe *stacklevel* determines where the\nwarning is emitted. If it is `1` (the default), the warning\nis emitted at the direct caller of the deprecated object; if it\nis higher, it is emitted further up the stack.\nStatic type checker behavior is not affected by the *category*\nand *stacklevel* arguments.\n\nThe deprecation message passed to the decorator is saved in the\n`__deprecated__` attribute on the decorated object.\nIf applied to an overload, the decorator\nmust be after the `@overload` decorator for the attribute to\nexist on the overload as returned by `get_overloads()`.\n\nSee PEP 702 for details.\n"]}, {"name": "setuptools._vendor.typing_extensions._NamedTupleMeta", "bases": ["type"], "methods": [{"name": "setuptools._vendor.typing_extensions._NamedTupleMeta.__new__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "typename", "type": null, "default": null}, {"name": "bases", "type": null, "default": null}, {"name": "ns", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Buffer", "bases": ["abc.ABC"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Base class for classes that implement the buffer protocol.\n\nThe buffer protocol allows Python objects to expose a low-level\nmemory buffer interface. Before Python 3.12, it is not possible\nto implement the buffer protocol in pure Python code, or even\nto check whether a class implements the buffer protocol. In\nPython 3.12 and higher, the `__buffer__` method allows access\nto the buffer protocol from Python code, and the\n`collections.abc.Buffer` ABC allows checking whether a class\nimplements the buffer protocol.\n\nTo indicate support for the buffer protocol in earlier versions,\ninherit from this ABC, either in a stub file or at runtime,\nor use ABC registration. This ABC provides no methods, because\nthere is no Python-accessible methods shared by pre-3.12 buffer\nclasses. It is useful primarily for static checks.\n"]}, {"name": "setuptools._vendor.typing_extensions.NewType", "bases": [], "methods": [{"name": "setuptools._vendor.typing_extensions.NewType.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "obj", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.NewType.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "tp", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.NewType.__mro_entries__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "bases", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.NewType.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.NewType.__reduce__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.NewType.__or__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": ["PEP 604 methods", "It doesn't make sense to have these methods on Python <3.10"]}, {"name": "setuptools._vendor.typing_extensions.NewType.__ror__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["NewType creates simple unique types with almost zero\nruntime overhead. NewType(name, tp) is considered a subtype of tp\nby static type checkers. At runtime, NewType(name, tp) returns\na dummy callable that simply returns its argument. Usage:\n\n```\nUserId = NewType('UserId', int)\ndef name_by_id(user_id: UserId) -> str:\n    ...\nUserId('user')          # Fails type check\nname_by_id(42)          # Fails type check\nname_by_id(UserId(42))  # OK\nnum = UserId(5) + 1     # type: int\n```\n"]}, {"name": "setuptools._vendor.typing_extensions.TypeAliasType", "bases": [], "methods": [{"name": "setuptools._vendor.typing_extensions.TypeAliasType.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "value", "type": null, "default": null}, {"name": "type_params", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeAliasType.__setattr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "value", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeAliasType.__delattr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Never", "xref": {"fqname": "Never", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeAliasType._raise_attribute_error", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Never", "xref": {"fqname": "Never", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeAliasType.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeAliasType.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parameters", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeAliasType.__reduce__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeAliasType.__init_subclass__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeAliasType.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["The presence of this method convinces typing._type_check", "that TypeAliasTypes are types."]}, {"name": "setuptools._vendor.typing_extensions.TypeAliasType.__or__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "right", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.TypeAliasType.__ror__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "left", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Create named, parameterized type aliases.\n\nThis provides a backport of the new `type` statement in Python 3.12:\n\n    type ListOrSet[T] = list[T] | set[T]\n\nis equivalent to:\n\n    T = TypeVar(\"T\")\n    ListOrSet = TypeAliasType(\"ListOrSet\", list[T] | set[T], type_params=(T,))\n\nThe name ListOrSet can then be used as an alias for the type it refers to.\n\nThe type_params argument should contain all the type parameters used\nin the value of the type alias. If the alias is not generic, this\nargument is omitted.\n\nStatic type checkers should only support type aliases declared using\nTypeAliasType that follow these rules:\n\n- The first argument (the name) must be a string literal.\n- The TypeAliasType instance must be immediately assigned to a variable\n  of the same name. (For example, 'X = TypeAliasType(\"Y\", int)' is invalid,\n  as is 'X, Y = TypeAliasType(\"X\", int), TypeAliasType(\"Y\", int)')."]}, {"name": "setuptools._vendor.typing_extensions.Doc", "bases": [], "methods": [{"name": "setuptools._vendor.typing_extensions.Doc.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "documentation", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Doc.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Doc.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typing_extensions.Doc.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Define the documentation of a type annotation using `Annotated`, to be\n\n: used in class attributes, function and method parameters, return values,\n  and variables.\n\nThe value should be a positional-only string literal to allow static tools\nlike editors and documentation generators to use it.\n\nThis complements docstrings.\n\nThe string value passed is available in the attribute `documentation`.\n\nExample:\n\n```\n>>> from typing_extensions import Annotated, Doc\n>>> def hi(to: Annotated[str, Doc(\"Who to say hi to\")]) -> None: ...\n```\n"]}], "exports": [{"name": "setuptools._vendor.typing_extensions.AbstractSet", "xref": {"fqname": "setuptools._vendor.typing_extensions.AbstractSet", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Annotated", "xref": {"fqname": "setuptools._vendor.typing_extensions.Annotated", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Any", "xref": {"fqname": "setuptools._vendor.typing_extensions.Any", "project": null}}, {"name": "setuptools._vendor.typing_extensions.AnyStr", "xref": {"fqname": "setuptools._vendor.typing_extensions.AnyStr", "project": null}}, {"name": "setuptools._vendor.typing_extensions.assert_never", "xref": {"fqname": "setuptools._vendor.typing_extensions.assert_never", "project": null}}, {"name": "setuptools._vendor.typing_extensions.assert_type", "xref": {"fqname": "setuptools._vendor.typing_extensions.assert_type", "project": null}}, {"name": "setuptools._vendor.typing_extensions.AsyncContextManager", "xref": {"fqname": "typing.AsyncContextManager", "project": null}}, {"name": "setuptools._vendor.typing_extensions.AsyncGenerator", "xref": {"fqname": "typing.AsyncGenerator", "project": null}}, {"name": "setuptools._vendor.typing_extensions.AsyncIterable", "xref": {"fqname": "setuptools._vendor.typing_extensions.AsyncIterable", "project": null}}, {"name": "setuptools._vendor.typing_extensions.AsyncIterator", "xref": {"fqname": "setuptools._vendor.typing_extensions.AsyncIterator", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Awaitable", "xref": {"fqname": "setuptools._vendor.typing_extensions.Awaitable", "project": null}}, {"name": "setuptools._vendor.typing_extensions.BinaryIO", "xref": {"fqname": "setuptools._vendor.typing_extensions.BinaryIO", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Buffer", "xref": {"fqname": "setuptools._vendor.typing_extensions.Buffer", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Callable", "xref": {"fqname": "setuptools._vendor.typing_extensions.Callable", "project": null}}, {"name": "setuptools._vendor.typing_extensions.cast", "xref": {"fqname": "setuptools._vendor.typing_extensions.cast", "project": null}}, {"name": "setuptools._vendor.typing_extensions.ChainMap", "xref": {"fqname": "setuptools._vendor.typing_extensions.ChainMap", "project": null}}, {"name": "setuptools._vendor.typing_extensions.ClassVar", "xref": {"fqname": "setuptools._vendor.typing_extensions.ClassVar", "project": null}}, {"name": "setuptools._vendor.typing_extensions.clear_overloads", "xref": {"fqname": "setuptools._vendor.typing_extensions.clear_overloads", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Collection", "xref": {"fqname": "setuptools._vendor.typing_extensions.Collection", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Concatenate", "xref": {"fqname": "setuptools._vendor.typing_extensions.Concatenate", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Container", "xref": {"fqname": "setuptools._vendor.typing_extensions.Container", "project": null}}, {"name": "setuptools._vendor.typing_extensions.ContextManager", "xref": {"fqname": "typing.ContextManager", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Coroutine", "xref": {"fqname": "setuptools._vendor.typing_extensions.Coroutine", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Counter", "xref": {"fqname": "setuptools._vendor.typing_extensions.Counter", "project": null}}, {"name": "setuptools._vendor.typing_extensions.dataclass_transform", "xref": {"fqname": "setuptools._vendor.typing_extensions.dataclass_transform", "project": null}}, {"name": "setuptools._vendor.typing_extensions.DefaultDict", "xref": {"fqname": "setuptools._vendor.typing_extensions.DefaultDict", "project": null}}, {"name": "setuptools._vendor.typing_extensions.deprecated", "xref": {"fqname": "setuptools._vendor.typing_extensions.deprecated", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Deque", "xref": {"fqname": "setuptools._vendor.typing_extensions.Deque", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Dict", "xref": {"fqname": "setuptools._vendor.typing_extensions.Dict", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Doc", "xref": {"fqname": "setuptools._vendor.typing_extensions.Doc", "project": null}}, {"name": "setuptools._vendor.typing_extensions.final", "xref": {"fqname": "setuptools._vendor.typing_extensions.final", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Final", "xref": {"fqname": "setuptools._vendor.typing_extensions.Final", "project": null}}, {"name": "setuptools._vendor.typing_extensions.ForwardRef", "xref": {"fqname": "setuptools._vendor.typing_extensions.ForwardRef", "project": null}}, {"name": "setuptools._vendor.typing_extensions.FrozenSet", "xref": {"fqname": "setuptools._vendor.typing_extensions.FrozenSet", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Generator", "xref": {"fqname": "typing.Generator", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Generic", "xref": {"fqname": "setuptools._vendor.typing_extensions.Generic", "project": null}}, {"name": "setuptools._vendor.typing_extensions.get_args", "xref": {"fqname": "setuptools._vendor.typing_extensions.get_args", "project": null}}, {"name": "setuptools._vendor.typing_extensions.get_origin", "xref": {"fqname": "setuptools._vendor.typing_extensions.get_origin", "project": null}}, {"name": "setuptools._vendor.typing_extensions.get_original_bases", "xref": {"fqname": "setuptools._vendor.typing_extensions.get_original_bases", "project": null}}, {"name": "setuptools._vendor.typing_extensions.get_overloads", "xref": {"fqname": "setuptools._vendor.typing_extensions.get_overloads", "project": null}}, {"name": "setuptools._vendor.typing_extensions.get_protocol_members", "xref": {"fqname": "setuptools._vendor.typing_extensions.get_protocol_members", "project": null}}, {"name": "setuptools._vendor.typing_extensions.get_type_hints", "xref": {"fqname": "setuptools._vendor.typing_extensions.get_type_hints", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Hashable", "xref": {"fqname": "setuptools._vendor.typing_extensions.Hashable", "project": null}}, {"name": "setuptools._vendor.typing_extensions.IntVar", "xref": {"fqname": "setuptools._vendor.typing_extensions.IntVar", "project": null}}, {"name": "setuptools._vendor.typing_extensions.IO", "xref": {"fqname": "setuptools._vendor.typing_extensions.IO", "project": null}}, {"name": "setuptools._vendor.typing_extensions.is_protocol", "xref": {"fqname": "setuptools._vendor.typing_extensions.is_protocol", "project": null}}, {"name": "setuptools._vendor.typing_extensions.is_typeddict", "xref": {"fqname": "setuptools._vendor.typing_extensions.is_typeddict", "project": null}}, {"name": "setuptools._vendor.typing_extensions.ItemsView", "xref": {"fqname": "setuptools._vendor.typing_extensions.ItemsView", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Iterable", "xref": {"fqname": "setuptools._vendor.typing_extensions.Iterable", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Iterator", "xref": {"fqname": "setuptools._vendor.typing_extensions.Iterator", "project": null}}, {"name": "setuptools._vendor.typing_extensions.KeysView", "xref": {"fqname": "setuptools._vendor.typing_extensions.KeysView", "project": null}}, {"name": "setuptools._vendor.typing_extensions.List", "xref": {"fqname": "setuptools._vendor.typing_extensions.List", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Literal", "xref": {"fqname": "setuptools._vendor.typing_extensions.Literal", "project": null}}, {"name": "setuptools._vendor.typing_extensions.LiteralString", "xref": {"fqname": "setuptools._vendor.typing_extensions.LiteralString", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Mapping", "xref": {"fqname": "setuptools._vendor.typing_extensions.Mapping", "project": null}}, {"name": "setuptools._vendor.typing_extensions.MappingView", "xref": {"fqname": "setuptools._vendor.typing_extensions.MappingView", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Match", "xref": {"fqname": "setuptools._vendor.typing_extensions.Match", "project": null}}, {"name": "setuptools._vendor.typing_extensions.MutableMapping", "xref": {"fqname": "setuptools._vendor.typing_extensions.MutableMapping", "project": null}}, {"name": "setuptools._vendor.typing_extensions.MutableSequence", "xref": {"fqname": "setuptools._vendor.typing_extensions.MutableSequence", "project": null}}, {"name": "setuptools._vendor.typing_extensions.MutableSet", "xref": {"fqname": "setuptools._vendor.typing_extensions.MutableSet", "project": null}}, {"name": "setuptools._vendor.typing_extensions.NamedTuple", "xref": {"fqname": "setuptools._vendor.typing_extensions.NamedTuple", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Never", "xref": {"fqname": "setuptools._vendor.typing_extensions.Never", "project": null}}, {"name": "setuptools._vendor.typing_extensions.NewType", "xref": {"fqname": "setuptools._vendor.typing_extensions.NewType", "project": null}}, {"name": "setuptools._vendor.typing_extensions.no_type_check", "xref": {"fqname": "setuptools._vendor.typing_extensions.no_type_check", "project": null}}, {"name": "setuptools._vendor.typing_extensions.no_type_check_decorator", "xref": {"fqname": "setuptools._vendor.typing_extensions.no_type_check_decorator", "project": null}}, {"name": "setuptools._vendor.typing_extensions.NoDefault", "xref": {"fqname": "setuptools._vendor.typing_extensions.NoDefault", "project": null}}, {"name": "setuptools._vendor.typing_extensions.NoReturn", "xref": {"fqname": "setuptools._vendor.typing_extensions.NoReturn", "project": null}}, {"name": "setuptools._vendor.typing_extensions.NotRequired", "xref": {"fqname": "setuptools._vendor.typing_extensions.NotRequired", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Optional", "xref": {"fqname": "setuptools._vendor.typing_extensions.Optional", "project": null}}, {"name": "setuptools._vendor.typing_extensions.OrderedDict", "xref": {"fqname": "setuptools._vendor.typing_extensions.OrderedDict", "project": null}}, {"name": "setuptools._vendor.typing_extensions.overload", "xref": {"fqname": "setuptools._vendor.typing_extensions.overload", "project": null}}, {"name": "setuptools._vendor.typing_extensions.override", "xref": {"fqname": "setuptools._vendor.typing_extensions.override", "project": null}}, {"name": "setuptools._vendor.typing_extensions.ParamSpec", "xref": {"fqname": "setuptools._vendor.typing_extensions.ParamSpec", "project": null}}, {"name": "setuptools._vendor.typing_extensions.ParamSpecArgs", "xref": {"fqname": "setuptools._vendor.typing_extensions.ParamSpecArgs", "project": null}}, {"name": "setuptools._vendor.typing_extensions.ParamSpecKwargs", "xref": {"fqname": "setuptools._vendor.typing_extensions.ParamSpecKwargs", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Pattern", "xref": {"fqname": "setuptools._vendor.typing_extensions.Pattern", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Protocol", "xref": {"fqname": "setuptools._vendor.typing_extensions.Protocol", "project": null}}, {"name": "setuptools._vendor.typing_extensions.ReadOnly", "xref": {"fqname": "setuptools._vendor.typing_extensions.ReadOnly", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Required", "xref": {"fqname": "setuptools._vendor.typing_extensions.Required", "project": null}}, {"name": "setuptools._vendor.typing_extensions.reveal_type", "xref": {"fqname": "setuptools._vendor.typing_extensions.reveal_type", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Reversible", "xref": {"fqname": "setuptools._vendor.typing_extensions.Reversible", "project": null}}, {"name": "setuptools._vendor.typing_extensions.runtime", "xref": {"fqname": "setuptools._vendor.typing_extensions.runtime", "project": null}}, {"name": "setuptools._vendor.typing_extensions.runtime_checkable", "xref": {"fqname": "setuptools._vendor.typing_extensions.runtime_checkable", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Self", "xref": {"fqname": "setuptools._vendor.typing_extensions.Self", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Sequence", "xref": {"fqname": "setuptools._vendor.typing_extensions.Sequence", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Set", "xref": {"fqname": "setuptools._vendor.typing_extensions.Set", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Sized", "xref": {"fqname": "setuptools._vendor.typing_extensions.Sized", "project": null}}, {"name": "setuptools._vendor.typing_extensions.SupportsAbs", "xref": {"fqname": "setuptools._vendor.typing_extensions.SupportsAbs", "project": null}}, {"name": "setuptools._vendor.typing_extensions.SupportsBytes", "xref": {"fqname": "setuptools._vendor.typing_extensions.SupportsBytes", "project": null}}, {"name": "setuptools._vendor.typing_extensions.SupportsComplex", "xref": {"fqname": "setuptools._vendor.typing_extensions.SupportsComplex", "project": null}}, {"name": "setuptools._vendor.typing_extensions.SupportsFloat", "xref": {"fqname": "setuptools._vendor.typing_extensions.SupportsFloat", "project": null}}, {"name": "setuptools._vendor.typing_extensions.SupportsIndex", "xref": {"fqname": "setuptools._vendor.typing_extensions.SupportsIndex", "project": null}}, {"name": "setuptools._vendor.typing_extensions.SupportsInt", "xref": {"fqname": "setuptools._vendor.typing_extensions.SupportsInt", "project": null}}, {"name": "setuptools._vendor.typing_extensions.SupportsRound", "xref": {"fqname": "setuptools._vendor.typing_extensions.SupportsRound", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Text", "xref": {"fqname": "setuptools._vendor.typing_extensions.Text", "project": null}}, {"name": "setuptools._vendor.typing_extensions.TextIO", "xref": {"fqname": "setuptools._vendor.typing_extensions.TextIO", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Tuple", "xref": {"fqname": "setuptools._vendor.typing_extensions.Tuple", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Type", "xref": {"fqname": "setuptools._vendor.typing_extensions.Type", "project": null}}, {"name": "setuptools._vendor.typing_extensions.TYPE_CHECKING", "xref": {"fqname": "setuptools._vendor.typing_extensions.TYPE_CHECKING", "project": null}}, {"name": "setuptools._vendor.typing_extensions.TypeAlias", "xref": {"fqname": "setuptools._vendor.typing_extensions.TypeAlias", "project": null}}, {"name": "setuptools._vendor.typing_extensions.TypeAliasType", "xref": {"fqname": "setuptools._vendor.typing_extensions.TypeAliasType", "project": null}}, {"name": "setuptools._vendor.typing_extensions.TypedDict", "xref": {"fqname": "setuptools._vendor.typing_extensions.TypedDict", "project": null}}, {"name": "setuptools._vendor.typing_extensions.TypeGuard", "xref": {"fqname": "setuptools._vendor.typing_extensions.TypeGuard", "project": null}}, {"name": "setuptools._vendor.typing_extensions.TypeIs", "xref": {"fqname": "setuptools._vendor.typing_extensions.TypeIs", "project": null}}, {"name": "setuptools._vendor.typing_extensions.TypeVar", "xref": {"fqname": "setuptools._vendor.typing_extensions.TypeVar", "project": null}}, {"name": "setuptools._vendor.typing_extensions.TypeVarTuple", "xref": {"fqname": "setuptools._vendor.typing_extensions.TypeVarTuple", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Union", "xref": {"fqname": "setuptools._vendor.typing_extensions.Union", "project": null}}, {"name": "setuptools._vendor.typing_extensions.Unpack", "xref": {"fqname": "setuptools._vendor.typing_extensions.Unpack", "project": null}}, {"name": "setuptools._vendor.typing_extensions.ValuesView", "xref": {"fqname": "setuptools._vendor.typing_extensions.ValuesView", "project": null}}]}, {"name": "setuptools._vendor.wheel.cli.unpack", "documentation": [], "functions": [{"name": "setuptools._vendor.wheel.cli.unpack.unpack", "asynchronous": false, "params": [{"name": "path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "dest", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Unpack a wheel.\n\nWheel content will be unpacked to \\{dest}/\\{name}-\\{ver}, where \\{name}\nis the package name and \\{ver} its version.\n\n```\nparam path\n\nThe path to the wheel.\n\nparam dest\n\nDestination directory (default to current directory).\n```\n"]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.zipp.glob", "documentation": [], "functions": [{"name": "setuptools._vendor.zipp.glob.separate", "asynchronous": false, "params": [{"name": "pattern", "type": null, "default": null}], "returns": null, "documentation": ["Separate out character sets to avoid translating their contents.\n\n```pycon\n>>> [m.group(0) for m in separate('*.txt')]\n['*.txt']\n>>> [m.group(0) for m in separate('a[?]txt')]\n['a', '[?]', 'txt']\n```\n"]}], "variables": [{"name": "setuptools._vendor.zipp.glob._default_seps", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.zipp.glob.Translator", "bases": [], "methods": [{"name": "setuptools._vendor.zipp.glob.Translator.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "seps", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.glob.Translator.translate", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pattern", "type": null, "default": null}], "returns": null, "documentation": ["Given a glob pattern, produce a regex that matches it."]}, {"name": "setuptools._vendor.zipp.glob.Translator.extend", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pattern", "type": null, "default": null}], "returns": null, "documentation": ["Extend regex for pattern-wide concerns.\n\nApply '(?s:)' to create a non-matching group that\nmatches newlines (valid on Unix).\n\nAppend '\\Z' to imply fullmatch even when match is used."]}, {"name": "setuptools._vendor.zipp.glob.Translator.translate_core", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pattern", "type": null, "default": null}], "returns": null, "documentation": ["Given a glob pattern, produce a regex that matches it.\n\n```pycon\n>>> t = Translator()\n>>> t.translate_core('*.txt').replace('\\\\\\\\', '')\n'[^/]*\\\\.txt'\n>>> t.translate_core('a?txt')\n'a[^/]txt'\n>>> t.translate_core('**/*').replace('\\\\\\\\', '')\n'.*/[^/][^/]*'\n```\n"]}, {"name": "setuptools._vendor.zipp.glob.Translator.replace", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "match", "type": null, "default": null}], "returns": null, "documentation": ["Perform the replacements for a match from {func}`separate`.\n"]}, {"name": "setuptools._vendor.zipp.glob.Translator.restrict_rglob", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pattern", "type": null, "default": null}], "returns": null, "documentation": ["Raise ValueError if \\*\\* appears in anything but a full path segment.\n\n```pycon\n>>> Translator().translate('**foo')\nTraceback (most recent call last):\n...\nValueError: ** must appear alone in a path segment\n```\n"]}, {"name": "setuptools._vendor.zipp.glob.Translator.star_not_empty", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pattern", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that * will not match an empty segment."]}], "class_variables": [{"name": "setuptools._vendor.zipp.glob.Translator.seps", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["```pycon\n>>> Translator('xyz')\nTraceback (most recent call last):\n...\nAssertionError: Invalid separators\n```\n\n```pycon\n>>> Translator('')\nTraceback (most recent call last):\n...\nAssertionError: Invalid separators\n```\n"]}], "exports": []}, {"name": "setuptools._vendor.wheel.cli.pack", "documentation": [], "functions": [{"name": "setuptools._vendor.wheel.cli.pack.pack", "asynchronous": false, "params": [{"name": "directory", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "dest_dir", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "build_number", "type": {"name": "str | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Repack a previously unpacked wheel directory into a new wheel file.\n\nThe .dist-info/WHEEL file must contain one or more tags so that the target\nwheel file name can be determined.\n\n```\nparam directory\n\nThe unpacked wheel directory\n\nparam dest_dir\n\nDestination directory (defaults to the current directory)\n```\n"]}, {"name": "setuptools._vendor.wheel.cli.pack.compute_tagline", "asynchronous": false, "params": [{"name": "tags", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Compute a tagline from a list of tags.\n\n```\nparam tags\n\nA list of tags\n\nreturn\n\nA tagline\n```\n"]}], "variables": [{"name": "setuptools._vendor.wheel.cli.pack.DIST_INFO_RE", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._vendor.wheel.cli.tags", "documentation": [], "functions": [{"name": "setuptools._vendor.wheel.cli.tags._compute_tags", "asynchronous": false, "params": [{"name": "original_tags", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "new_tags", "type": {"name": "str | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "set", "xref": {"fqname": "functions.set", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Add or replace tags. Supports dot-separated tags"]}, {"name": "setuptools._vendor.wheel.cli.tags.tags", "asynchronous": false, "params": [{"name": "wheel", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "python_tags", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "abi_tags", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "platform_tags", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "build_tag", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "remove", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Change the tags on a wheel file.\n\nThe tags are left unchanged if they are not specified. To specify \"none\",\nuse [\"none\"]. To append to the previous tags, a tag should start with a\n\"+\". If a tag starts with \"-\", it will be removed from existing tags.\nProcessing is done left to right.\n\n```\nparam wheel\n\nThe paths to the wheels\n\nparam python_tags\n\nThe Python tags to set\n\nparam abi_tags\n\nThe ABI tags to set\n\nparam platform_tags\n\nThe platform tags to set\n\nparam build_tag\n\nThe build tag to set\n\nparam remove\n\nRemove the original wheel\n```\n"]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.wheel.cli.convert", "documentation": [], "functions": [{"name": "setuptools._vendor.wheel.cli.convert.egg2wheel", "asynchronous": false, "params": [{"name": "egg_path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "dest_dir", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.cli.convert.parse_wininst_info", "asynchronous": false, "params": [{"name": "wininfo_name", "type": null, "default": null}, {"name": "egginfo_name", "type": null, "default": null}], "returns": null, "documentation": ["Extract metadata from filenames.\n\nExtracts the 4 metadataitems needed (name, version, pyversion, arch) from\nthe installer filename and the name of the egg-info directory embedded in\nthe zipfile (if any).\n\nThe egginfo filename has the format:\n\n```\nname-ver(-pyver)(-arch).egg-info\n```\n\nThe installer filename has the format:\n\n```\nname-ver.arch(-pyver).exe\n```\n\nSome things to note:\n\n1. The installer filename is not definitive. An installer can be renamed\n   and work perfectly well as an installer. So more reliable data should\n   be used whenever possible.\n2. The egg-info data should be preferred for the name and version, because\n   these come straight from the distutils metadata, and are mandatory.\n3. The pyver from the egg-info data should be ignored, as it is\n   constructed from the version of Python used to build the installer,\n   which is irrelevant - the installer filename is correct here (even to\n   the point that when it's not there, any version is implied).\n4. The architecture must be taken from the installer filename, as it is\n   not included in the egg-info data.\n5. Architecture-neutral installers still have an architecture because the\n   installer format itself (being executable) is architecture-specific. We\n   should therefore ignore the architecture if the content is pure-python.\n"]}, {"name": "setuptools._vendor.wheel.cli.convert.wininst2wheel", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}, {"name": "dest_dir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.cli.convert.convert", "asynchronous": false, "params": [{"name": "files", "type": null, "default": null}, {"name": "dest_dir", "type": null, "default": null}, {"name": "verbose", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools._vendor.wheel.cli.convert.egg_info_re", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.wheel.cli.convert._bdist_wheel_tag", "bases": ["bdist_wheel"], "methods": [{"name": "setuptools._vendor.wheel.cli.convert._bdist_wheel_tag.get_tag", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.wheel.cli.convert._bdist_wheel_tag.full_tag_supplied", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.cli.convert._bdist_wheel_tag.full_tag", "type": null, "documentation": ["None or a (pytag, soabitag, plattag) triple"]}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._vendor.wheel.cli", "documentation": ["Wheel command-line utility."], "functions": [{"name": "setuptools._vendor.wheel.cli.unpack_f", "asynchronous": false, "params": [{"name": "args", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.cli.pack_f", "asynchronous": false, "params": [{"name": "args", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.cli.convert_f", "asynchronous": false, "params": [{"name": "args", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.cli.tags_f", "asynchronous": false, "params": [{"name": "args", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.cli.version_f", "asynchronous": false, "params": [{"name": "args", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.cli.parse_build_tag", "asynchronous": false, "params": [{"name": "build_tag", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.cli.parser", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.cli.main", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [{"name": "setuptools._vendor.wheel.cli.TAGS_HELP", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.wheel.cli.WheelError", "bases": ["Exception"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": [{"name": "setuptools._vendor.wheel.cli.annotations", "xref": {"fqname": "__future__.annotations", "project": null}}, {"name": "setuptools._vendor.wheel.cli.ArgumentTypeError", "xref": {"fqname": "argparse.ArgumentTypeError", "project": null}}]}, {"name": "setuptools._vendor.wheel.__main__", "documentation": ["Wheel command line tool (enable python -m wheel syntax)"], "functions": [{"name": "setuptools._vendor.wheel.__main__.main", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.requirements", "documentation": ["This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [], "variables": [], "classes": [{"name": "setuptools._vendor.wheel.vendored.packaging.requirements.InvalidRequirement", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An invalid requirement was found, users should refer to PEP 508."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.requirements.Requirement", "bases": [], "methods": [{"name": "setuptools._vendor.wheel.vendored.packaging.requirements.Requirement.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requirement_string", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["TODO: Can we test whether something is contained within a requirement?", "If so how do we do that? Do we need to test against the _name_ of", "the thing as well as the version? What about the markers?", "TODO: Can we normalize the name and extra name?"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.requirements.Requirement._iter_parts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.requirements.Requirement.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.requirements.Requirement.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.requirements.Requirement.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.requirements.Requirement.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Parse a requirement.\n\nParse a given requirement string into its parts, such as name, specifier,\nURL, and extras. Raises InvalidRequirement on a badly-formed requirement\nstring."]}], "exports": []}, {"name": "setuptools._vendor.zipp", "documentation": [], "functions": [{"name": "setuptools._vendor.zipp._parents", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["Given a path with elements separated by\nposixpath.sep, generate all parents of that path.\n\n```pycon\n>>> list(_parents('b/d'))\n['b']\n>>> list(_parents('/b/d/'))\n['/b']\n>>> list(_parents('b/d/f/'))\n['b/d', 'b']\n>>> list(_parents('b'))\n[]\n>>> list(_parents(''))\n[]\n```\n"]}, {"name": "setuptools._vendor.zipp._ancestry", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["Given a path with elements separated by\nposixpath.sep, generate all elements of that path\n\n```pycon\n>>> list(_ancestry('b/d'))\n['b/d', 'b']\n>>> list(_ancestry('/b/d/'))\n['/b/d', '/b']\n>>> list(_ancestry('b/d/f/'))\n['b/d/f', 'b/d', 'b']\n>>> list(_ancestry('b'))\n['b']\n>>> list(_ancestry(''))\n[]\n```\n"]}, {"name": "setuptools._vendor.zipp._difference", "asynchronous": false, "params": [{"name": "minuend", "type": null, "default": null}, {"name": "subtrahend", "type": null, "default": null}], "returns": null, "documentation": ["Return items in minuend not in subtrahend, retaining order\nwith O(1) lookup."]}, {"name": "setuptools._vendor.zipp._extract_text_encoding", "asynchronous": false, "params": [{"name": "encoding", "type": null, "default": "..."}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools._vendor.zipp._dedupe", "type": null, "documentation": ["Deduplicate an iterable in original order"]}], "classes": [{"name": "setuptools._vendor.zipp.InitializedState", "bases": [], "methods": [{"name": "setuptools._vendor.zipp.InitializedState.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.InitializedState.__getstate__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.InitializedState.__setstate__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "state", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Mix-in to save the initialization state for pickling."]}, {"name": "setuptools._vendor.zipp.SanitizedNames", "bases": [], "methods": [{"name": "setuptools._vendor.zipp.SanitizedNames.namelist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.SanitizedNames._sanitize", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Ensure a relative path with posix separators and no dot names.\n\nModeled after\n<https://github.com/python/cpython/blob/bcc1be39cb1d04ad9fc0bd1b9193d3972835a57c/Lib/zipfile/__init__.py#L1799-L1813>\nbut provides consistent cross-platform behavior.\n\n```pycon\n>>> san = SanitizedNames._sanitize\n>>> san('/foo/bar')\n'foo/bar'\n>>> san('//foo.txt')\n'foo.txt'\n>>> san('foo/.././bar.txt')\n'foo/bar.txt'\n>>> san('foo../.bar.txt')\n'foo../.bar.txt'\n>>> san('\\\\foo\\\\bar.txt')\n'foo/bar.txt'\n>>> san('D:\\\\foo.txt')\n'D/foo.txt'\n>>> san('\\\\\\\\server\\\\share\\\\file.txt')\n'server/share/file.txt'\n>>> san('\\\\\\\\?\\\\GLOBALROOT\\\\Volume3')\n'?/GLOBALROOT/Volume3'\n>>> san('\\\\\\\\.\\\\PhysicalDrive1\\\\root')\n'PhysicalDrive1/root'\n```\n\nRetain any trailing slash.\n\\>>> san('abc/')\n'abc/'\n\nRaises a ValueError if the result is empty.\n\\>>> san('../..')\nTraceback (most recent call last):\n...\nValueError: Empty filename\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["ZipFile mix-in to ensure names are sanitized."]}, {"name": "setuptools._vendor.zipp.CompleteDirs", "bases": ["InitializedState", "SanitizedNames", "zipfile.ZipFile"], "methods": [{"name": "setuptools._vendor.zipp.CompleteDirs._implied_dirs", "asynchronous": false, "params": [{"name": "names", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.CompleteDirs.namelist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.CompleteDirs._name_set", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.CompleteDirs.resolve_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["If the name represents a directory, return that name\nas a directory (with the trailing slash)."]}, {"name": "setuptools._vendor.zipp.CompleteDirs.getinfo", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Supplement getinfo for implied dirs."]}, {"name": "setuptools._vendor.zipp.CompleteDirs.make", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "source", "type": null, "default": null}], "returns": null, "documentation": ["Given a source (filename or zipfile), return an\nappropriate CompleteDirs subclass."]}, {"name": "setuptools._vendor.zipp.CompleteDirs.inject", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "zf", "type": {"name": "zipfile.ZipFile", "xref": {"fqname": "zipfile.ZipFile", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "zipfile.ZipFile", "xref": {"fqname": "zipfile.ZipFile", "project": "--std--"}, "params": null}, "documentation": ["Given a writable zip file zf, inject directory entries for\nany directories implied by the presence of children."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A ZipFile subclass that ensures that implied directories\nare always included in the namelist.\n\n```pycon\n>>> list(CompleteDirs._implied_dirs(['foo/bar.txt', 'foo/bar/baz.txt']))\n['foo/', 'foo/bar/']\n>>> list(CompleteDirs._implied_dirs(['foo/bar.txt', 'foo/bar/baz.txt', 'foo/bar/']))\n['foo/']\n```\n"]}, {"name": "setuptools._vendor.zipp.FastLookup", "bases": ["CompleteDirs"], "methods": [{"name": "setuptools._vendor.zipp.FastLookup.namelist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.FastLookup._name_set", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["ZipFile subclass to ensure implicit\ndirs exist and are resolved rapidly."]}, {"name": "setuptools._vendor.zipp.Path", "bases": [], "methods": [{"name": "setuptools._vendor.zipp.Path.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "root", "type": null, "default": null}, {"name": "at", "type": null, "default": "..."}], "returns": null, "documentation": ["Construct a Path from a ZipFile or filename.\n\nNote: When the source is an existing ZipFile object,\nits type (__class__) will be mutated to a\nspecialized type. If the caller wishes to retain the\noriginal type, the caller should either create a\nseparate ZipFile object or pass a filename."]}, {"name": "setuptools._vendor.zipp.Path.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": ["```pycon\n>>> Path(zipfile.ZipFile(io.BytesIO(), 'w')) == 'foo'\nFalse\n```\n"]}, {"name": "setuptools._vendor.zipp.Path.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.open", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "mode", "type": null, "default": "..."}, {"name": "*args", "type": null, "default": null}, {"name": "pwd", "type": null, "default": "..."}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["Open this entry as text or binary following the semantics\nof `pathlib.Path.open()` by passing arguments through\nto io.TextIOWrapper().\n"]}, {"name": "setuptools._vendor.zipp.Path._base", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.suffix", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.suffixes", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.stem", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.read_text", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.read_bytes", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path._is_child", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path._next", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "at", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.is_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.is_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.exists", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.iterdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.match", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path_pattern", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.is_symlink", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return whether this path is a symlink."]}, {"name": "setuptools._vendor.zipp.Path.glob", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pattern", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.rglob", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pattern", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.relative_to", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}, {"name": "*extra", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.joinpath", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.parent", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.zipp.Path.__repr", "type": null, "documentation": []}, {"name": "setuptools._vendor.zipp.Path.__truediv__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A {class}`importlib.resources.abc.Traversable` interface for zip files.\n\nImplements many of the features users enjoy from\n{class}`pathlib.Path`.\n\nConsider a zip file with this structure:\n\n```\n.\n\u251c\u2500\u2500 a.txt\n\u2514\u2500\u2500 b\n    \u251c\u2500\u2500 c.txt\n    \u2514\u2500\u2500 d\n        \u2514\u2500\u2500 e.txt\n```\n\n```pycon\n>>> data = io.BytesIO()\n>>> zf = zipfile.ZipFile(data, 'w')\n>>> zf.writestr('a.txt', 'content of a')\n>>> zf.writestr('b/c.txt', 'content of c')\n>>> zf.writestr('b/d/e.txt', 'content of e')\n>>> zf.filename = 'mem/abcde.zip'\n```\n\nPath accepts the zipfile object itself or a filename\n\n```pycon\n>>> path = Path(zf)\n```\n\nFrom there, several path operations are available.\n\nDirectory iteration (including the zip file itself):\n\n```pycon\n>>> a, b = path.iterdir()\n>>> a\nPath('mem/abcde.zip', 'a.txt')\n>>> b\nPath('mem/abcde.zip', 'b/')\n```\n\nname property:\n\n```pycon\n>>> b.name\n'b'\n```\n\njoin with divide operator:\n\n```pycon\n>>> c = b / 'c.txt'\n>>> c\nPath('mem/abcde.zip', 'b/c.txt')\n>>> c.name\n'c.txt'\n```\n\nRead text:\n\n```pycon\n>>> c.read_text(encoding='utf-8')\n'content of c'\n```\n\nexistence:\n\n```pycon\n>>> c.exists()\nTrue\n>>> (b / 'missing.txt').exists()\nFalse\n```\n\nCoercion to string:\n\n```pycon\n>>> import os\n>>> str(c).replace(os.sep, posixpath.sep)\n'mem/abcde.zip/b/c.txt'\n```\n\nAt the root, `name`, `filename`, and `parent`\nresolve to the zipfile.\n\n```pycon\n>>> str(path)\n'mem/abcde.zip/'\n>>> path.name\n'abcde.zip'\n>>> path.filename == pathlib.Path('mem/abcde.zip')\nTrue\n>>> str(path.parent)\n'mem'\n```\n\nIf the zipfile has no filename, such \ufeffattributes are not\nvalid and accessing them will raise an Exception.\n\n```pycon\n>>> zf.filename = None\n>>> path.name\nTraceback (most recent call last):\n...\nTypeError: ...\n```\n\n```pycon\n>>> path.filename\nTraceback (most recent call last):\n...\nTypeError: ...\n```\n\n```pycon\n>>> path.parent\nTraceback (most recent call last):\n...\nTypeError: ...\n```\n\n\\# workaround python/cpython#106763\n\\>>> pass\n"]}], "exports": [{"name": "setuptools._vendor.zipp.Path", "xref": {"fqname": "setuptools._vendor.zipp.Path", "project": null}}]}, {"name": "setuptools._vendor.wheel.wheelfile", "documentation": [], "functions": [{"name": "setuptools._vendor.wheel.wheelfile.get_zipinfo_datetime", "asynchronous": false, "params": [{"name": "timestamp", "type": null, "default": "..."}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools._vendor.wheel.wheelfile.WHEEL_INFO_RE", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.wheelfile.MINIMUM_TIMESTAMP", "type": null, "documentation": ["1980-01-01 00:00:00 UTC"]}], "classes": [{"name": "setuptools._vendor.wheel.wheelfile.WheelFile", "bases": ["ZipFile"], "methods": [{"name": "setuptools._vendor.wheel.wheelfile.WheelFile.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "file", "type": null, "default": null}, {"name": "mode", "type": null, "default": "..."}, {"name": "compression", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.wheelfile.WheelFile.open", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name_or_info", "type": null, "default": null}, {"name": "mode", "type": null, "default": "..."}, {"name": "pwd", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.wheelfile.WheelFile.write_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "base_dir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.wheelfile.WheelFile.write", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}, {"name": "arcname", "type": null, "default": "..."}, {"name": "compress_type", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.wheelfile.WheelFile.writestr", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "zinfo_or_arcname", "type": null, "default": null}, {"name": "data", "type": null, "default": null}, {"name": "compress_type", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.wheelfile.WheelFile.close", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.wheel.wheelfile.WheelFile._default_algorithm", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A ZipFile derivative class that also reads SHA-256 hashes from\n.dist-info/RECORD and checks any read files against those."]}], "exports": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._structures", "documentation": ["This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [], "variables": [{"name": "setuptools._vendor.wheel.vendored.packaging._structures.Infinity", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._structures.NegativeInfinity", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.wheel.vendored.packaging._structures.InfinityType", "bases": [], "methods": [{"name": "setuptools._vendor.wheel.vendored.packaging._structures.InfinityType.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._structures.InfinityType.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._structures.InfinityType.__lt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._structures.InfinityType.__le__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._structures.InfinityType.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._structures.InfinityType.__gt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._structures.InfinityType.__ge__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._structures.InfinityType.__neg__", "asynchronous": false, "params": [{"name": "self", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "NegativeInfinityType", "xref": {"fqname": "NegativeInfinityType", "project": null}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._structures.NegativeInfinityType", "bases": [], "methods": [{"name": "setuptools._vendor.wheel.vendored.packaging._structures.NegativeInfinityType.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._structures.NegativeInfinityType.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._structures.NegativeInfinityType.__lt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._structures.NegativeInfinityType.__le__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._structures.NegativeInfinityType.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._structures.NegativeInfinityType.__gt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._structures.NegativeInfinityType.__ge__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._structures.NegativeInfinityType.__neg__", "asynchronous": false, "params": [{"name": "self", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "InfinityType", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._structures.InfinityType", "project": null}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._manylinux", "documentation": [], "functions": [{"name": "setuptools._vendor.wheel.vendored.packaging._manylinux._parse_elf", "asynchronous": false, "params": [{"name": "path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Generator", "xref": {"fqname": "typing.Generator", "project": "--std--"}, "params": [{"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "ELFFile", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._manylinux._elffile.ELFFile", "project": null}, "params": null}]}, {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}]}, "documentation": ["`os.PathLike` not a generic type until Python 3.9, so sticking with `str`", "as the type for `path` until then."]}, {"name": "setuptools._vendor.wheel.vendored.packaging._manylinux._is_linux_armhf", "asynchronous": false, "params": [{"name": "executable", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._manylinux._is_linux_i686", "asynchronous": false, "params": [{"name": "executable", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._manylinux._have_compatible_abi", "asynchronous": false, "params": [{"name": "executable", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "archs", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._manylinux._glibc_version_string_confstr", "asynchronous": false, "params": [], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Primary implementation of glibc_version_string using os.confstr."]}, {"name": "setuptools._vendor.wheel.vendored.packaging._manylinux._glibc_version_string_ctypes", "asynchronous": false, "params": [], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Fallback implementation of glibc_version_string using ctypes."]}, {"name": "setuptools._vendor.wheel.vendored.packaging._manylinux._glibc_version_string", "asynchronous": false, "params": [], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Returns glibc version string, or None if not using glibc."]}, {"name": "setuptools._vendor.wheel.vendored.packaging._manylinux._parse_glibc_version", "asynchronous": false, "params": [{"name": "version_str", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "documentation": ["Parse glibc version.\n\nWe use a regexp instead of str.split because we want to discard any\nrandom junk that might come after the minor version -- this might happen\nin patched/forked versions of glibc (e.g. Linaro's version of glibc\nuses version strings like \"2.20-2014.11\"). See gh-3588."]}, {"name": "setuptools._vendor.wheel.vendored.packaging._manylinux._get_glibc_version", "asynchronous": false, "params": [], "returns": {"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._manylinux._is_compatible", "asynchronous": false, "params": [{"name": "arch", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "version", "type": {"name": "_GLibCVersion", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._manylinux._GLibCVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["From PEP 513, PEP 600"]}, {"name": "setuptools._vendor.wheel.vendored.packaging._manylinux.platform_tags", "asynchronous": false, "params": [{"name": "archs", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Generate manylinux tags compatible to the current platform.\n\n```\nparam archs\n\nSequence of compatible architectures.\nThe first one shall be the closest to the actual architecture and be the part of\nplatform tag after the linux_ prefix, e.g. x86_64.\nThe linux_ prefix is assumed as a prerequisite for the current platform to\nbe manylinux-compatible.\n\nreturns\n\nAn iterator of compatible manylinux tags.\n```\n"]}], "variables": [{"name": "setuptools._vendor.wheel.vendored.packaging._manylinux.EF_ARM_ABIMASK", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._manylinux.EF_ARM_ABI_VER5", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._manylinux.EF_ARM_ABI_FLOAT_HARD", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._manylinux._LAST_GLIBC_MINOR", "type": {"name": "Dict", "xref": {"fqname": "typing.Dict", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._manylinux._LEGACY_MANYLINUX_MAP", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.wheel.vendored.packaging._manylinux._GLibCVersion", "bases": ["NamedTuple"], "methods": [], "class_variables": [{"name": "setuptools._vendor.wheel.vendored.packaging._manylinux._GLibCVersion.major", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._manylinux._GLibCVersion.minor", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags", "documentation": ["This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [{"name": "setuptools._vendor.wheel.vendored.packaging.tags.parse_tag", "asynchronous": false, "params": [{"name": "tag", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "FrozenSet", "xref": {"fqname": "typing.FrozenSet", "project": "--std--"}, "params": [{"name": "Tag", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.tags.Tag", "project": null}, "params": null}]}, "documentation": ["Parses the provided tag (e.g. `py3-none-any`) into a frozenset of Tag instances.\n\nReturning a set is required due to the possibility that the tag is a\ncompressed tag set."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags._get_config_var", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags._normalize_string", "asynchronous": false, "params": [{"name": "string", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags._is_threaded_cpython", "asynchronous": false, "params": [{"name": "abis", "type": {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Determine if the ABI corresponds to a threaded (`--disable-gil`) build.\n\nThe threaded builds are indicated by a \"t\" in the abiflags."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags._abi3_applies", "asynchronous": false, "params": [{"name": "python_version", "type": {"name": "PythonVersion", "xref": {"fqname": "PythonVersion", "project": null}, "params": null}, "default": null}, {"name": "threading", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Determine if the Python version supports abi3.\n\nPEP 384 was first implemented in Python 3.2. The threaded (`--disable-gil`)\nbuilds do not support abi3."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags._cpython_abis", "asynchronous": false, "params": [{"name": "py_version", "type": {"name": "PythonVersion", "xref": {"fqname": "PythonVersion", "project": null}, "params": null}, "default": null}, {"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags.cpython_tags", "asynchronous": false, "params": [{"name": "python_version", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "PythonVersion", "xref": {"fqname": "PythonVersion", "project": null}, "params": null}]}, "default": "..."}, {"name": "abis", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "default": "..."}, {"name": "platforms", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "default": "..."}, {"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Tag", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.tags.Tag", "project": null}, "params": null}]}, "documentation": ["Yields the tags for a CPython interpreter.\n\nThe tags consist of:\n- cp<python_version>-<abi>-<platform>\n- cp<python_version>-abi3-<platform>\n- cp<python_version>-none-<platform>\n- cp<less than python_version>-abi3-<platform>  # Older Python versions down to 3.2.\n\nIf python_version only specifies a major version then user-provided ABIs and\nthe 'none' ABItag will be used.\n\nIf 'abi3' or 'none' are specified in 'abis' then they will be yielded at\ntheir normal position and not at the beginning."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags._generic_abi", "asynchronous": false, "params": [], "returns": {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Return the ABI tag based on EXT_SUFFIX."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags.generic_tags", "asynchronous": false, "params": [{"name": "interpreter", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}, {"name": "abis", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "default": "..."}, {"name": "platforms", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "default": "..."}, {"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Tag", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.tags.Tag", "project": null}, "params": null}]}, "documentation": ["Yields the tags for a generic interpreter.\n\nThe tags consist of:\n- <interpreter>-<abi>-<platform>\n\nThe \"none\" ABI will be added if it was not explicitly provided."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags._py_interpreter_range", "asynchronous": false, "params": [{"name": "py_version", "type": {"name": "PythonVersion", "xref": {"fqname": "PythonVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Yields Python versions in descending order.\n\nAfter the latest version, the major-only version will be yielded, and then\nall previous versions of that major version."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags.compatible_tags", "asynchronous": false, "params": [{"name": "python_version", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "PythonVersion", "xref": {"fqname": "PythonVersion", "project": null}, "params": null}]}, "default": "..."}, {"name": "interpreter", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}, {"name": "platforms", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Tag", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.tags.Tag", "project": null}, "params": null}]}, "documentation": ["Yields the sequence of tags that are compatible with a specific version of Python.\n\nThe tags consist of:\n- py*-none-<platform>\n- <interpreter>-none-any  # ... if `interpreter` is provided.\n- py*-none-any"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags._mac_arch", "asynchronous": false, "params": [{"name": "arch", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "is_32bit", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags._mac_binary_formats", "asynchronous": false, "params": [{"name": "version", "type": {"name": "MacVersion", "xref": {"fqname": "MacVersion", "project": null}, "params": null}, "default": null}, {"name": "cpu_arch", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags.mac_platforms", "asynchronous": false, "params": [{"name": "version", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "MacVersion", "xref": {"fqname": "MacVersion", "project": null}, "params": null}]}, "default": "..."}, {"name": "arch", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Yields the platform tags for a macOS system.\n\nThe `version` parameter is a two-item tuple specifying the macOS version to\ngenerate platform tags for. The `arch` parameter is the CPU architecture to\ngenerate platform tags for. Both parameters default to the appropriate value\nfor the current system."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags._linux_platforms", "asynchronous": false, "params": [{"name": "is_32bit", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags._generic_platforms", "asynchronous": false, "params": [], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags.platform_tags", "asynchronous": false, "params": [], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Provides the platform tags for this installation."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags.interpreter_name", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Returns the name of the running interpreter.\n\nSome implementations have a reserved, two-letter abbreviation which will\nbe returned when appropriate."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags.interpreter_version", "asynchronous": false, "params": [{"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Returns the version of the running interpreter."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags._version_nodot", "asynchronous": false, "params": [{"name": "version", "type": {"name": "PythonVersion", "xref": {"fqname": "PythonVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags.sys_tags", "asynchronous": false, "params": [{"name": "warn", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Tag", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.tags.Tag", "project": null}, "params": null}]}, "documentation": ["Returns the sequence of tag triples for the running interpreter.\n\nThe order of the sequence corresponds to priority order for the\ninterpreter, from most to least important."]}], "variables": [{"name": "setuptools._vendor.wheel.vendored.packaging.tags.logger", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags.PythonVersion", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags.MacVersion", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags.INTERPRETER_SHORT_NAMES", "type": {"name": "Dict", "xref": {"fqname": "typing.Dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags._32_BIT_INTERPRETER", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.wheel.vendored.packaging.tags.Tag", "bases": [], "methods": [{"name": "setuptools._vendor.wheel.vendored.packaging.tags.Tag.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "interpreter", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "abi", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "platform", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags.Tag.interpreter", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags.Tag.abi", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags.Tag.platform", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags.Tag.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags.Tag.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags.Tag.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.tags.Tag.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.wheel.vendored.packaging.tags.Tag.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A representation of the tag triple for a wheel.\n\nInstances are considered immutable and thus are hashable. Equality checking\nis also supported."]}], "exports": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers", "documentation": ["This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [{"name": "setuptools._vendor.wheel.vendored.packaging.markers._normalize_extra_values", "asynchronous": false, "params": [{"name": "results", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": ["Normalize extra values."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers._format_marker", "asynchronous": false, "params": [{"name": "marker", "type": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, {"name": "MarkerAtom", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.markers._parser.MarkerAtom", "project": null}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "first", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers._eval_op", "asynchronous": false, "params": [{"name": "lhs", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "op", "type": {"name": "Op", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.markers._parser.Op", "project": null}, "params": null}, "default": null}, {"name": "rhs", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers._normalize", "asynchronous": false, "params": [{"name": "*values", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "key", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers._evaluate_markers", "asynchronous": false, "params": [{"name": "markers", "type": {"name": "MarkerList", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.markers._parser.MarkerList", "project": null}, "params": null}, "default": null}, {"name": "environment", "type": {"name": "Dict", "xref": {"fqname": "typing.Dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers.format_full_version", "asynchronous": false, "params": [{"name": "info", "type": {"name": "sys._version_info", "xref": {"fqname": "sys._version_info", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers.default_environment", "asynchronous": false, "params": [], "returns": {"name": "Dict", "xref": {"fqname": "typing.Dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}], "variables": [{"name": "setuptools._vendor.wheel.vendored.packaging.markers.Operator", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers._operators", "type": {"name": "Dict", "xref": {"fqname": "typing.Dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Operator", "xref": {"fqname": "Operator", "project": null}, "params": null}]}, "documentation": []}], "classes": [{"name": "setuptools._vendor.wheel.vendored.packaging.markers.InvalidMarker", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An invalid marker was found, users should refer to PEP 508."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers.UndefinedComparison", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An invalid operation was attempted on a value that doesn't support it."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers.UndefinedEnvironmentName", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A name was attempted to be used that does not exist inside of the\nenvironment."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers.Marker", "bases": [], "methods": [{"name": "setuptools._vendor.wheel.vendored.packaging.markers.Marker.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "marker", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers.Marker.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers.Marker.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers.Marker.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers.Marker.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers.Marker.evaluate", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "environment", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Dict", "xref": {"fqname": "typing.Dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Evaluate a marker.\n\nReturn the boolean from evaluating the given marker against the\nenvironment. environment is an optional argument to override all or\npart of the determined environment.\n\nThe environment is determined from the current Python process."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": [{"name": "setuptools._vendor.wheel.vendored.packaging.markers.default_environment", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.markers.default_environment", "project": null}}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers.InvalidMarker", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.markers.InvalidMarker", "project": null}}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers.Marker", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.markers.Marker", "project": null}}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers.UndefinedComparison", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.markers.UndefinedComparison", "project": null}}, {"name": "setuptools._vendor.wheel.vendored.packaging.markers.UndefinedEnvironmentName", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.markers.UndefinedEnvironmentName", "project": null}}]}, {"name": "setuptools._vendor.wheel.vendored.packaging._elffile", "documentation": ["ELF file parser.\n\nThis provides a class `ELFFile` that parses an ELF executable in a similar\ninterface to `ZipFile`. Only the read interface is implemented.\n\nBased on: <https://gist.github.com/lyssdod/f51579ae8d93c8657a5564aefc2ffbca>\nELF header: <https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html>\n"], "functions": [], "variables": [], "classes": [{"name": "setuptools._vendor.wheel.vendored.packaging._elffile.ELFInvalid", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._elffile.EIClass", "bases": ["enum.IntEnum"], "methods": [], "class_variables": [{"name": "setuptools._vendor.wheel.vendored.packaging._elffile.EIClass.C32", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._elffile.EIClass.C64", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._elffile.EIData", "bases": ["enum.IntEnum"], "methods": [], "class_variables": [{"name": "setuptools._vendor.wheel.vendored.packaging._elffile.EIData.Lsb", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._elffile.EIData.Msb", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._elffile.EMachine", "bases": ["enum.IntEnum"], "methods": [], "class_variables": [{"name": "setuptools._vendor.wheel.vendored.packaging._elffile.EMachine.I386", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._elffile.EMachine.S390", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._elffile.EMachine.Arm", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._elffile.EMachine.X8664", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._elffile.EMachine.AArc64", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._elffile.ELFFile", "bases": [], "methods": [{"name": "setuptools._vendor.wheel.vendored.packaging._elffile.ELFFile.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "f", "type": {"name": "IO", "xref": {"fqname": "typing.IO", "project": "--std--"}, "params": [{"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._elffile.ELFFile._read", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "fmt", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._elffile.ELFFile.interpreter", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["The path recorded in the `PT_INTERP` section header.\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Representation of an ELF executable."]}], "exports": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._musllinux", "documentation": ["PEP 656 support.\n\nThis module implements logic to detect if the currently running Python is\nlinked against musl, and what musl version is used."], "functions": [{"name": "setuptools._vendor.wheel.vendored.packaging._musllinux._parse_musl_version", "asynchronous": false, "params": [{"name": "output", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "_MuslVersion", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._musllinux._MuslVersion", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._musllinux._get_musl_version", "asynchronous": false, "params": [{"name": "executable", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "_MuslVersion", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._musllinux._MuslVersion", "project": null}, "params": null}]}, "documentation": ["Detect currently-running musl runtime version.\n\nThis is done by checking the specified executable's dynamic linking\ninformation, and invoking the loader to parse its output for a version\nstring. If the loader is musl, the output would be something like:\n\n```\nmusl libc (x86_64)\nVersion 1.2.2\nDynamic Program Loader\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging._musllinux.platform_tags", "asynchronous": false, "params": [{"name": "archs", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Generate musllinux tags compatible to the current platform.\n\n```\nparam archs\n\nSequence of compatible architectures.\nThe first one shall be the closest to the actual architecture and be the part of\nplatform tag after the linux_ prefix, e.g. x86_64.\nThe linux_ prefix is assumed as a prerequisite for the current platform to\nbe musllinux-compatible.\n\nreturns\n\nAn iterator of compatible musllinux tags.\n```\n"]}], "variables": [{"name": "setuptools._vendor.wheel.vendored.packaging._musllinux.plat", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.wheel.vendored.packaging._musllinux._MuslVersion", "bases": ["NamedTuple"], "methods": [], "class_variables": [{"name": "setuptools._vendor.wheel.vendored.packaging._musllinux._MuslVersion.major", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._musllinux._MuslVersion.minor", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._vendor.wheel.vendored.packaging", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.utils", "documentation": ["This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [{"name": "setuptools._vendor.wheel.vendored.packaging.utils.canonicalize_name", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "validate", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "NormalizedName", "xref": {"fqname": "NormalizedName", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.utils.is_normalized_name", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.utils.canonicalize_version", "asynchronous": false, "params": [{"name": "version", "type": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "Version", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.utils.version.Version", "project": null}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "strip_trailing_zero", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["This is very similar to Version.__str__, but has one subtle difference\nwith the way it handles the release segment."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.utils.parse_wheel_filename", "asynchronous": false, "params": [{"name": "filename", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "NormalizedName", "xref": {"fqname": "NormalizedName", "project": null}, "params": null}, {"name": "Version", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.utils.version.Version", "project": null}, "params": null}, {"name": "BuildTag", "xref": {"fqname": "BuildTag", "project": null}, "params": null}, {"name": "FrozenSet", "xref": {"fqname": "typing.FrozenSet", "project": "--std--"}, "params": [{"name": "Tag", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.utils.tags.Tag", "project": null}, "params": null}]}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.utils.parse_sdist_filename", "asynchronous": false, "params": [{"name": "filename", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "NormalizedName", "xref": {"fqname": "NormalizedName", "project": null}, "params": null}, {"name": "Version", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.utils.version.Version", "project": null}, "params": null}]}, "documentation": []}], "variables": [{"name": "setuptools._vendor.wheel.vendored.packaging.utils.BuildTag", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.utils.NormalizedName", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.utils._validate_regex", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.utils._canonicalize_regex", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.utils._normalized_regex", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.utils._build_tag_regex", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.wheel.vendored.packaging.utils.InvalidName", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An invalid distribution name; users should refer to the packaging user guide."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.utils.InvalidWheelFilename", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An invalid wheel filename was found, users should refer to PEP 427."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.utils.InvalidSdistFilename", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["An invalid sdist filename was found, users should refer to the packaging user guide."]}], "exports": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser", "documentation": ["Handwritten parser of dependency specifiers.\n\nThe docstring for each __parse_* function contains EBNF-inspired grammar representing\nthe implementation."], "functions": [{"name": "setuptools._vendor.wheel.vendored.packaging._parser.parse_requirement", "asynchronous": false, "params": [{"name": "source", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "ParsedRequirement", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._parser.ParsedRequirement", "project": null}, "params": null}, "documentation": ["--------------------------------------------------------------------------------------", "Recursive descent parser for dependency specifier", "--------------------------------------------------------------------------------------"]}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser._parse_requirement", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "ParsedRequirement", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._parser.ParsedRequirement", "project": null}, "params": null}, "documentation": ["requirement = WS? IDENTIFIER WS? extras WS? requirement_details"]}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser._parse_requirement_details", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "MarkerList", "xref": {"fqname": "MarkerList", "project": null}, "params": null}]}]}, "documentation": ["requirement_details = AT URL (WS requirement_marker?)?\n                    | specifier WS? (requirement_marker)?"]}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser._parse_requirement_marker", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}, {"name": "span_start", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}, {"name": "after", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "MarkerList", "xref": {"fqname": "MarkerList", "project": null}, "params": null}, "documentation": ["requirement_marker = SEMICOLON marker WS?"]}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser._parse_extras", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["extras = (LEFT_BRACKET wsp* extras_list? wsp* RIGHT_BRACKET)?"]}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser._parse_extras_list", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["extras_list = identifier (wsp* ',' wsp* identifier)*"]}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser._parse_specifier", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["specifier = LEFT_PARENTHESIS WS? version_many WS? RIGHT_PARENTHESIS\n          | WS? version_many WS?"]}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser._parse_version_many", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["version_many = (SPECIFIER (WS? COMMA WS? SPECIFIER)*)?"]}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser.parse_marker", "asynchronous": false, "params": [{"name": "source", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "MarkerList", "xref": {"fqname": "MarkerList", "project": null}, "params": null}, "documentation": ["--------------------------------------------------------------------------------------", "Recursive descent parser for marker expression", "--------------------------------------------------------------------------------------"]}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser._parse_full_marker", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "MarkerList", "xref": {"fqname": "MarkerList", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser._parse_marker", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "MarkerList", "xref": {"fqname": "MarkerList", "project": null}, "params": null}, "documentation": ["marker = marker_atom (BOOLOP marker_atom)+"]}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser._parse_marker_atom", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "MarkerAtom", "xref": {"fqname": "MarkerAtom", "project": null}, "params": null}, "documentation": ["marker_atom = WS? LEFT_PARENTHESIS WS? marker WS? RIGHT_PARENTHESIS WS?\n            | WS? marker_item WS?"]}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser._parse_marker_item", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "MarkerItem", "xref": {"fqname": "MarkerItem", "project": null}, "params": null}, "documentation": ["marker_item = WS? marker_var WS? marker_op WS? marker_var WS?"]}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser._parse_marker_var", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "MarkerVar", "xref": {"fqname": "MarkerVar", "project": null}, "params": null}, "documentation": ["marker_var = VARIABLE | QUOTED_STRING"]}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser.process_env_var", "asynchronous": false, "params": [{"name": "env_var", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Variable", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._parser.Variable", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser.process_python_str", "asynchronous": false, "params": [{"name": "python_str", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Value", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._parser.Value", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser._parse_marker_op", "asynchronous": false, "params": [{"name": "tokenizer", "type": {"name": "Tokenizer", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._parser._tokenizer.Tokenizer", "project": null}, "params": null}, "default": null}], "returns": {"name": "Op", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._parser.Op", "project": null}, "params": null}, "documentation": ["marker_op = IN | NOT IN | OP"]}], "variables": [{"name": "setuptools._vendor.wheel.vendored.packaging._parser.MarkerVar", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser.MarkerItem", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser.MarkerAtom", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser.MarkerList", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.wheel.vendored.packaging._parser.Node", "bases": [], "methods": [{"name": "setuptools._vendor.wheel.vendored.packaging._parser.Node.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser.Node.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser.Node.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser.Node.serialize", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser.Variable", "bases": ["Node"], "methods": [{"name": "setuptools._vendor.wheel.vendored.packaging._parser.Variable.serialize", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser.Value", "bases": ["Node"], "methods": [{"name": "setuptools._vendor.wheel.vendored.packaging._parser.Value.serialize", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser.Op", "bases": ["Node"], "methods": [{"name": "setuptools._vendor.wheel.vendored.packaging._parser.Op.serialize", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser.ParsedRequirement", "bases": ["NamedTuple"], "methods": [], "class_variables": [{"name": "setuptools._vendor.wheel.vendored.packaging._parser.ParsedRequirement.name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser.ParsedRequirement.url", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser.ParsedRequirement.extras", "type": {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser.ParsedRequirement.specifier", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._parser.ParsedRequirement.marker", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "MarkerList", "xref": {"fqname": "MarkerList", "project": null}, "params": null}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._vendor.wheel.vendored", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._tokenizer", "documentation": [], "functions": [], "variables": [{"name": "setuptools._vendor.wheel.vendored.packaging._tokenizer.DEFAULT_RULES", "type": {"name": "Dict", "xref": {"fqname": "typing.Dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "re.Pattern", "xref": {"fqname": "re.Pattern", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "documentation": []}], "classes": [{"name": "setuptools._vendor.wheel.vendored.packaging._tokenizer.Token", "bases": [], "methods": [], "class_variables": [{"name": "setuptools._vendor.wheel.vendored.packaging._tokenizer.Token.name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._tokenizer.Token.text", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._tokenizer.Token.position", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._tokenizer.ParserSyntaxError", "bases": ["Exception"], "methods": [{"name": "setuptools._vendor.wheel.vendored.packaging._tokenizer.ParserSyntaxError.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "message", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "source", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "span", "type": {"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._tokenizer.ParserSyntaxError.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["The provided source text could not be parsed correctly."]}, {"name": "setuptools._vendor.wheel.vendored.packaging._tokenizer.Tokenizer", "bases": [], "methods": [{"name": "setuptools._vendor.wheel.vendored.packaging._tokenizer.Tokenizer.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "source", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "rules", "type": {"name": "Dict", "xref": {"fqname": "typing.Dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "re.Pattern", "xref": {"fqname": "re.Pattern", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging._tokenizer.Tokenizer.consume", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Move beyond provided token name, if at current position."]}, {"name": "setuptools._vendor.wheel.vendored.packaging._tokenizer.Tokenizer.check", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "peek", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Check whether the next token has the provided name.\n\nBy default, if the check succeeds, the token *must* be read before\nanother check. If `peek` is set to `True`, the token is not loaded and\nwould need to be checked again."]}, {"name": "setuptools._vendor.wheel.vendored.packaging._tokenizer.Tokenizer.expect", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "expected", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Token", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._tokenizer.Token", "project": null}, "params": null}, "documentation": ["Expect a certain token name next, failing with a syntax error otherwise.\n\nThe token is *not* read."]}, {"name": "setuptools._vendor.wheel.vendored.packaging._tokenizer.Tokenizer.read", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Token", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging._tokenizer.Token", "project": null}, "params": null}, "documentation": ["Consume the next token and return it."]}, {"name": "setuptools._vendor.wheel.vendored.packaging._tokenizer.Tokenizer.raise_syntax_error", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "message", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "span_start", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "default": "..."}, {"name": "span_end", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "NoReturn", "xref": {"fqname": "typing.NoReturn", "project": "--std--"}, "params": null}, "documentation": ["Raise ParserSyntaxError at the given position."]}, {"name": "setuptools._vendor.wheel.vendored.packaging._tokenizer.Tokenizer.enclosing_tokens", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "open_token", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "close_token", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "around", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}]}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Context-sensitive token parsing.\n\nProvides methods to examine the input stream to check whether the next token\nmatches."]}], "exports": []}, {"name": "setuptools._vendor.wheel._setuptools_logging", "documentation": ["copied from setuptools.logging, omitting monkeypatching"], "functions": [{"name": "setuptools._vendor.wheel._setuptools_logging._not_warning", "asynchronous": false, "params": [{"name": "record", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel._setuptools_logging.configure", "asynchronous": false, "params": [], "returns": null, "documentation": ["Configure logging to emit warning and above to stderr\nand everything else to stdout. This behavior is provided\nfor compatibility with distutils.log but may change in\nthe future."]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.wheel", "documentation": [], "functions": [], "variables": [{"name": "setuptools._vendor.wheel.__version__", "type": null, "documentation": []}], "classes": [], "exports": [{"name": "setuptools._vendor.wheel.annotations", "xref": {"fqname": "__future__.annotations", "project": null}}]}, {"name": "setuptools._vendor.wheel.metadata", "documentation": ["Tools for converting old- to new-style metadata."], "functions": [{"name": "setuptools._vendor.wheel.metadata._nonblank", "asynchronous": false, "params": [{"name": "str", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.metadata.yield_lines", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Yield valid lines of a string or iterable.\n\\>>> list(yield_lines(''))\n[]\n\\>>> list(yield_lines(['foo', 'bar']))\n['foo', 'bar']\n\\>>> list(yield_lines('foonbar'))\n['foo', 'bar']\n\\>>> list(yield_lines('nfoon#barnbaz #comment'))\n['foo', 'baz #comment']\n\\>>> list(yield_lines(['foonbar', 'baz', 'bingnnn']))\n['foo', 'bar', 'baz', 'bing']\n"]}, {"name": "setuptools._vendor.wheel.metadata._", "asynchronous": false, "params": [{"name": "text", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.metadata.split_sections", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}], "returns": null, "documentation": ["Split a string or iterable thereof into (section, content) pairs\nEach `section` is a stripped version of the section header (\"[section]\")\nand each `content` is a list of stripped lines excluding blank lines and\ncomment-only lines. If there are any such lines before the first section\nheader, they're returned in a first `section` of `None`.\n"]}, {"name": "setuptools._vendor.wheel.metadata.safe_extra", "asynchronous": false, "params": [{"name": "extra", "type": null, "default": null}], "returns": null, "documentation": ["Convert an arbitrary string to a standard 'extra' name\nAny runs of non-alphanumeric characters are replaced with a single '_',\nand the result is always lowercased."]}, {"name": "setuptools._vendor.wheel.metadata.safe_name", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Convert an arbitrary string to a standard distribution name\nAny runs of non-alphanumeric/. characters are replaced with a single '-'."]}, {"name": "setuptools._vendor.wheel.metadata.requires_to_requires_dist", "asynchronous": false, "params": [{"name": "requirement", "type": {"name": "Requirement", "xref": {"fqname": "setuptools._vendor.wheel.metadata.vendored.packaging.requirements.Requirement", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return the version specifier for a requirement in PEP 345/566 fashion."]}, {"name": "setuptools._vendor.wheel.metadata.convert_requirements", "asynchronous": false, "params": [{"name": "requirements", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Yield Requires-Dist: strings for parsed requirements strings."]}, {"name": "setuptools._vendor.wheel.metadata.generate_requirements", "asynchronous": false, "params": [{"name": "extras_require", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": ["Convert requirements from a setup()-style dictionary to\n('Requires-Dist', 'requirement') and ('Provides-Extra', 'extra') tuples.\n\nextras_require is a dictionary of {extra: [requirements]} as passed to setup(),\nusing the empty extra {'': [requirements]} to hold install_requires."]}, {"name": "setuptools._vendor.wheel.metadata.pkginfo_to_metadata", "asynchronous": false, "params": [{"name": "egg_info_path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pkginfo_path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Message", "xref": {"fqname": "email.message.Message", "project": "--std--"}, "params": null}, "documentation": ["Convert .egg-info directory with PKG-INFO to the Metadata 2.1 format"]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.wheel.util", "documentation": [], "functions": [{"name": "setuptools._vendor.wheel.util.urlsafe_b64encode", "asynchronous": false, "params": [{"name": "data", "type": {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, "documentation": ["urlsafe_b64encode without padding"]}, {"name": "setuptools._vendor.wheel.util.urlsafe_b64decode", "asynchronous": false, "params": [{"name": "data", "type": {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, "documentation": ["urlsafe_b64decode without padding"]}], "variables": [{"name": "setuptools._vendor.wheel.util.log", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version", "documentation": ["```\n.. testsetup::\n\n    from packaging.version import parse, Version\n```\n", "This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [{"name": "setuptools._vendor.wheel.vendored.packaging.version.parse", "asynchronous": false, "params": [{"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Version", "xref": {"fqname": "Version", "project": null}, "params": null}, "documentation": ["Parse the given version string.\n\n```pycon\n>>> parse('1.0.dev1')\n<Version('1.0.dev1')>\n```\n\n```\nparam version\n\nThe version string to parse.\n\nraises InvalidVersion\n\nWhen the version string is not a valid version.\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version._parse_letter_version", "asynchronous": false, "params": [{"name": "letter", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "number", "type": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, {"name": "SupportsInt", "xref": {"fqname": "typing.SupportsInt", "project": "--std--"}, "params": null}, {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version._parse_local_version", "asynchronous": false, "params": [{"name": "local", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "LocalType", "xref": {"fqname": "LocalType", "project": null}, "params": null}]}, "documentation": ["Takes a string like abc.1.twelve and turns it into (\"abc\", 1, \"twelve\")."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version._cmpkey", "asynchronous": false, "params": [{"name": "epoch", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}, {"name": "release", "type": {"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "pre", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}]}, "default": null}, {"name": "post", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}]}, "default": null}, {"name": "dev", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}]}, "default": null}, {"name": "local", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "LocalType", "xref": {"fqname": "LocalType", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "CmpKey", "xref": {"fqname": "CmpKey", "project": null}, "params": null}, "documentation": []}], "variables": [{"name": "setuptools._vendor.wheel.vendored.packaging.version.LocalType", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.CmpPrePostDevType", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.CmpLocalType", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.CmpKey", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.VersionComparisonMethod", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version._VERSION_PATTERN", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.VERSION_PATTERN", "type": null, "documentation": ["A string containing the regular expression used to match a valid version.\n\nThe pattern is not anchored at either end, and is intended for embedding in larger\nexpressions (for example, matching a version number as part of a file name). The\nregular expression should be compiled with the `re.VERBOSE` and `re.IGNORECASE`\nflags set.\n\n```\nmeta hide-value\n\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version._local_version_separators", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.wheel.vendored.packaging.version._Version", "bases": ["NamedTuple"], "methods": [], "class_variables": [{"name": "setuptools._vendor.wheel.vendored.packaging.version._Version.epoch", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version._Version.release", "type": {"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version._Version.dev", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version._Version.pre", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version._Version.post", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version._Version.local", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "LocalType", "xref": {"fqname": "LocalType", "project": null}, "params": null}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.InvalidVersion", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Raised when a version string is not a valid version.\n\n```pycon\n>>> Version(\"invalid\")\nTraceback (most recent call last):\n    ...\npackaging.version.InvalidVersion: Invalid version: 'invalid'\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version._BaseVersion", "bases": [], "methods": [{"name": "setuptools._vendor.wheel.vendored.packaging.version._BaseVersion.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version._BaseVersion.__lt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "_BaseVersion", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.version._BaseVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Please keep the duplicated `isinstance` check", "in the six comparisons hereunder", "unless you find a way to avoid adding overhead function calls."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version._BaseVersion.__le__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "_BaseVersion", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.version._BaseVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version._BaseVersion.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version._BaseVersion.__ge__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "_BaseVersion", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.version._BaseVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version._BaseVersion.__gt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "_BaseVersion", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.version._BaseVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version._BaseVersion.__ne__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.wheel.vendored.packaging.version._BaseVersion._key", "type": {"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version", "bases": ["_BaseVersion"], "methods": [{"name": "setuptools._vendor.wheel.vendored.packaging.version.Version.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Initialize a Version object.\n\n```\nparam version\n\nThe string representation of a version which will be parsed and normalized\nbefore use.\n\nraises InvalidVersion\n\nIf the version does not conform to PEP 440 in any way then this\nexception will be raised.\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A representation of the Version that shows all internal state.\n\n```pycon\n>>> Version('1.0.0')\n<Version('1.0.0')>\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A string representation of the version that can be rounded-tripped.\n\n```pycon\n>>> str(Version(\"1.0a5\"))\n'1.0a5'\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version.epoch", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["The epoch of the version.\n\n```pycon\n>>> Version(\"2.0.0\").epoch\n0\n>>> Version(\"1!2.0.0\").epoch\n1\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version.release", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": ["The components of the \"release\" segment of the version.\n\n```pycon\n>>> Version(\"1.2.3\").release\n(1, 2, 3)\n>>> Version(\"2.0.0\").release\n(2, 0, 0)\n>>> Version(\"1!2.0.0.post0\").release\n(2, 0, 0)\n```\n\nIncludes trailing zeroes but not the epoch or any pre-release / development /\npost-release suffixes.\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version.pre", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}]}, "documentation": ["The pre-release segment of the version.\n\n```pycon\n>>> print(Version(\"1.2.3\").pre)\nNone\n>>> Version(\"1.2.3a1\").pre\n('a', 1)\n>>> Version(\"1.2.3b1\").pre\n('b', 1)\n>>> Version(\"1.2.3rc1\").pre\n('rc', 1)\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version.post", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "documentation": ["The post-release number of the version.\n\n```pycon\n>>> print(Version(\"1.2.3\").post)\nNone\n>>> Version(\"1.2.3.post1\").post\n1\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version.dev", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "documentation": ["The development number of the version.\n\n```pycon\n>>> print(Version(\"1.2.3\").dev)\nNone\n>>> Version(\"1.2.3.dev1\").dev\n1\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version.local", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["The local version segment of the version.\n\n```pycon\n>>> print(Version(\"1.2.3\").local)\nNone\n>>> Version(\"1.2.3+abc\").local\n'abc'\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version.public", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The public portion of the version.\n\n```pycon\n>>> Version(\"1.2.3\").public\n'1.2.3'\n>>> Version(\"1.2.3+abc\").public\n'1.2.3'\n>>> Version(\"1.2.3+abc.dev1\").public\n'1.2.3'\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version.base_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The \"base version\" of the version.\n\n```pycon\n>>> Version(\"1.2.3\").base_version\n'1.2.3'\n>>> Version(\"1.2.3+abc\").base_version\n'1.2.3'\n>>> Version(\"1!1.2.3+abc.dev1\").base_version\n'1!1.2.3'\n```\n\nThe \"base version\" is the public version of the project without any pre or post\nrelease markers.\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version.is_prerelease", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Whether this version is a pre-release.\n\n```pycon\n>>> Version(\"1.2.3\").is_prerelease\nFalse\n>>> Version(\"1.2.3a1\").is_prerelease\nTrue\n>>> Version(\"1.2.3b1\").is_prerelease\nTrue\n>>> Version(\"1.2.3rc1\").is_prerelease\nTrue\n>>> Version(\"1.2.3dev1\").is_prerelease\nTrue\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version.is_postrelease", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Whether this version is a post-release.\n\n```pycon\n>>> Version(\"1.2.3\").is_postrelease\nFalse\n>>> Version(\"1.2.3.post1\").is_postrelease\nTrue\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version.is_devrelease", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Whether this version is a development release.\n\n```pycon\n>>> Version(\"1.2.3\").is_devrelease\nFalse\n>>> Version(\"1.2.3.dev1\").is_devrelease\nTrue\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version.major", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["The first item of {attr}`release` or `0` if unavailable.\n\n```pycon\n>>> Version(\"1.2.3\").major\n1\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version.minor", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["The second item of {attr}`release` or `0` if unavailable.\n\n```pycon\n>>> Version(\"1.2.3\").minor\n2\n>>> Version(\"1\").minor\n0\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version.micro", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["The third item of {attr}`release` or `0` if unavailable.\n\n```pycon\n>>> Version(\"1.2.3\").micro\n3\n>>> Version(\"1\").micro\n0\n```\n"]}], "class_variables": [{"name": "setuptools._vendor.wheel.vendored.packaging.version.Version._regex", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version._key", "type": {"name": "CmpKey", "xref": {"fqname": "CmpKey", "project": null}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["This class abstracts handling of a project's versions.\n\nA {class}`Version` instance is comparison aware and can be compared and\nsorted using the standard Python interfaces.\n\n```pycon\n>>> v1 = Version(\"1.0a5\")\n>>> v2 = Version(\"1.0\")\n>>> v1\n<Version('1.0a5')>\n>>> v2\n<Version('1.0')>\n>>> v1 < v2\nTrue\n>>> v1 == v2\nFalse\n>>> v1 > v2\nFalse\n>>> v1 >= v2\nFalse\n>>> v1 <= v2\nTrue\n```\n"]}], "exports": [{"name": "setuptools._vendor.wheel.vendored.packaging.version.InvalidVersion", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.version.InvalidVersion", "project": null}}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.parse", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.version.parse", "project": null}}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.Version", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.version.Version", "project": null}}, {"name": "setuptools._vendor.wheel.vendored.packaging.version.VERSION_PATTERN", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.version.VERSION_PATTERN", "project": null}}]}, {"name": "setuptools._vendor.backports.tarfile.__main__", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.backports.tarfile.compat.py38", "documentation": [], "functions": [{"name": "setuptools._vendor.backports.tarfile.compat.py38.removesuffix", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "suffix", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.compat.py38.removeprefix", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prefix", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.compat.py38.removesuffix", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "suffix", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.compat.py38.removeprefix", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prefix", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.backports.tarfile.compat", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.wheel.bdist_wheel", "documentation": ["Create a wheel (.whl) distribution.\n\nA wheel is a built archive format."], "functions": [{"name": "setuptools._vendor.wheel.bdist_wheel.safe_name", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Convert an arbitrary string to a standard distribution name\nAny runs of non-alphanumeric/. characters are replaced with a single '-'."]}, {"name": "setuptools._vendor.wheel.bdist_wheel.safe_version", "asynchronous": false, "params": [{"name": "version", "type": null, "default": null}], "returns": null, "documentation": ["Convert an arbitrary string to a standard version string"]}, {"name": "setuptools._vendor.wheel.bdist_wheel._is_32bit_interpreter", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.bdist_wheel.python_tag", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.bdist_wheel.get_platform", "asynchronous": false, "params": [{"name": "archive_root", "type": null, "default": null}], "returns": null, "documentation": ["Return our platform name 'win32', 'linux_x86_64'"]}, {"name": "setuptools._vendor.wheel.bdist_wheel.get_flag", "asynchronous": false, "params": [{"name": "var", "type": null, "default": null}, {"name": "fallback", "type": null, "default": null}, {"name": "expected", "type": null, "default": "..."}, {"name": "warn", "type": null, "default": "..."}], "returns": null, "documentation": ["Use a fallback value for determining SOABI flags if the needed config\nvar is unset or unavailable."]}, {"name": "setuptools._vendor.wheel.bdist_wheel.get_abi_tag", "asynchronous": false, "params": [], "returns": null, "documentation": ["Return the ABI tag based on SOABI (if available) or emulate SOABI (PyPy2)."]}, {"name": "setuptools._vendor.wheel.bdist_wheel.safer_name", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.bdist_wheel.safer_version", "asynchronous": false, "params": [{"name": "version", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.bdist_wheel.remove_readonly", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}, {"name": "path", "type": null, "default": null}, {"name": "excinfo", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.bdist_wheel.remove_readonly_exc", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}, {"name": "path", "type": null, "default": null}, {"name": "exc", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools._vendor.wheel.bdist_wheel.setuptools_major_version", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.bdist_wheel.PY_LIMITED_API_PATTERN", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.wheel.bdist_wheel.bdist_wheel", "bases": ["Command"], "methods": [{"name": "setuptools._vendor.wheel.bdist_wheel.bdist_wheel.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.bdist_wheel.bdist_wheel.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.bdist_wheel.bdist_wheel.wheel_dist_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return distribution full name with - replaced with _"]}, {"name": "setuptools._vendor.wheel.bdist_wheel.bdist_wheel.get_tag", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.bdist_wheel.bdist_wheel.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.bdist_wheel.bdist_wheel.write_wheelfile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "wheelfile_base", "type": null, "default": null}, {"name": "generator", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.bdist_wheel.bdist_wheel._ensure_relative", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.bdist_wheel.bdist_wheel.license_paths", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.bdist_wheel.bdist_wheel.egg2dist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "egginfo_path", "type": null, "default": null}, {"name": "distinfo_path", "type": null, "default": null}], "returns": null, "documentation": ["Convert an .egg-info directory into a .dist-info directory"]}], "class_variables": [{"name": "setuptools._vendor.wheel.bdist_wheel.bdist_wheel.description", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.bdist_wheel.bdist_wheel.supported_compressions", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.bdist_wheel.bdist_wheel.user_options", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.bdist_wheel.bdist_wheel.boolean_options", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._vendor.backports", "documentation": [], "functions": [], "variables": [{"name": "setuptools._vendor.backports.__path__", "type": null, "documentation": ["type: ignore"]}], "classes": [], "exports": []}, {"name": "setuptools._vendor.wheel.macosx_libfile", "documentation": ["This module contains function to analyse dynamic library\nheaders to extract system information\n\nCurrently only for MacOSX\n\nLibrary file on macosx system starts with Mach-O or Fat field.\nThis can be distinguish by first 32 bites and it is called magic number.\nProper value of magic number is with suffix _MAGIC. Suffix _CIGAM means\nreversed bytes order.\nBoth fields can occur in two types: 32 and 64 bytes.\n\nFAT field inform that this library contains few version of library\n(typically for different types version). It contains\ninformation where Mach-O headers starts.\n\nEach section started with Mach-O header contains one library\n(So if file starts with this field it contains only one version).\n\nAfter filed Mach-O there are section fields.\nEach of them starts with two fields:\ncmd - magic number for this command\ncmdsize - total size occupied by this section information.\n\nIn this case only sections LC_VERSION_MIN_MACOSX (for macosx 10.13 and earlier)\nand LC_BUILD_VERSION (for macosx 10.14 and newer) are interesting,\nbecause them contains information about minimal system version.\n\nImportant remarks:\n- For fat files this implementation looks for maximum number version.\n  It not check if it is 32 or 64 and do not compare it with currently built package.\n  So it is possible to false report higher version that needed.\n- All structures signatures are taken form macosx header files.\n- I think that binary format will be more stable than `otool` output.\n  and if apple introduce some changes both implementation will need to be updated.\n- The system compile will set the deployment target no lower than\n  11.0 for arm64 builds. For \"Universal 2\" builds use the x86_64 deployment\n  target when the arm64 target is 11.0."], "functions": [{"name": "setuptools._vendor.wheel.macosx_libfile.swap32", "asynchronous": false, "params": [{"name": "x", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.macosx_libfile.get_base_class_and_magic_number", "asynchronous": false, "params": [{"name": "lib_file", "type": null, "default": null}, {"name": "seek", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.macosx_libfile.read_data", "asynchronous": false, "params": [{"name": "struct_class", "type": null, "default": null}, {"name": "lib_file", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.macosx_libfile.extract_macosx_min_system_version", "asynchronous": false, "params": [{"name": "path_to_lib", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.macosx_libfile.read_mach_header", "asynchronous": false, "params": [{"name": "lib_file", "type": null, "default": null}, {"name": "seek", "type": null, "default": "..."}], "returns": null, "documentation": ["This function parses a Mach-O header and extracts\ninformation about the minimal macOS version.\n\n```\nparam lib_file\n\nreference to opened library file with pointer\n```\n"]}, {"name": "setuptools._vendor.wheel.macosx_libfile.parse_version", "asynchronous": false, "params": [{"name": "version", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.wheel.macosx_libfile.calculate_macosx_platform_tag", "asynchronous": false, "params": [{"name": "archive_root", "type": null, "default": null}, {"name": "platform_tag", "type": null, "default": null}], "returns": null, "documentation": ["Calculate proper macosx platform tag basing on files which are included to wheel\n\nExample platform tag `macosx-10.14-x86_64`"]}], "variables": [{"name": "setuptools._vendor.wheel.macosx_libfile.FAT_MAGIC", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.macosx_libfile.FAT_CIGAM", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.macosx_libfile.FAT_MAGIC_64", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.macosx_libfile.FAT_CIGAM_64", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.macosx_libfile.MH_MAGIC", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.macosx_libfile.MH_CIGAM", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.macosx_libfile.MH_MAGIC_64", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.macosx_libfile.MH_CIGAM_64", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.macosx_libfile.LC_VERSION_MIN_MACOSX", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.macosx_libfile.LC_BUILD_VERSION", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.macosx_libfile.CPU_TYPE_ARM64", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.macosx_libfile.mach_header_fields", "type": null, "documentation": ["struct mach_header {\n    uint32_t    magic;          /* mach magic number identifier */\n    cpu_type_t  cputype;        /* cpu specifier */\n    cpu_subtype_t       cpusubtype;     /* machine specifier */\n    uint32_t    filetype;       /* type of file */\n    uint32_t    ncmds;          /* number of load commands */\n    uint32_t    sizeofcmds;     /* the size of all the load commands */\n    uint32_t    flags;          /* flags */\n};\ntypedef integer_t cpu_type_t;\ntypedef integer_t cpu_subtype_t;"]}, {"name": "setuptools._vendor.wheel.macosx_libfile.mach_header_fields_64", "type": null, "documentation": ["struct mach_header_64 {\n    uint32_t    magic;          /* mach magic number identifier */\n    cpu_type_t  cputype;        /* cpu specifier */\n    cpu_subtype_t       cpusubtype;     /* machine specifier */\n    uint32_t    filetype;       /* type of file */\n    uint32_t    ncmds;          /* number of load commands */\n    uint32_t    sizeofcmds;     /* the size of all the load commands */\n    uint32_t    flags;          /* flags */\n    uint32_t    reserved;       /* reserved */\n};"]}, {"name": "setuptools._vendor.wheel.macosx_libfile.fat_header_fields", "type": null, "documentation": ["struct fat_header {\n    uint32_t    magic;          /* FAT_MAGIC or FAT_MAGIC_64 */\n    uint32_t    nfat_arch;      /* number of structs that follow */\n};"]}, {"name": "setuptools._vendor.wheel.macosx_libfile.fat_arch_fields", "type": null, "documentation": ["struct fat_arch {\n    cpu_type_t  cputype;        /* cpu specifier (int) */\n    cpu_subtype_t       cpusubtype;     /* machine specifier (int) */\n    uint32_t    offset;         /* file offset to this object file */\n    uint32_t    size;           /* size of this object file */\n    uint32_t    align;          /* alignment as a power of 2 */\n};"]}, {"name": "setuptools._vendor.wheel.macosx_libfile.fat_arch_64_fields", "type": null, "documentation": ["struct fat_arch_64 {\n    cpu_type_t  cputype;        /* cpu specifier (int) */\n    cpu_subtype_t       cpusubtype;     /* machine specifier (int) */\n    uint64_t    offset;         /* file offset to this object file */\n    uint64_t    size;           /* size of this object file */\n    uint32_t    align;          /* alignment as a power of 2 */\n    uint32_t    reserved;       /* reserved */\n};"]}, {"name": "setuptools._vendor.wheel.macosx_libfile.segment_base_fields", "type": null, "documentation": ["base for reading segment info"]}, {"name": "setuptools._vendor.wheel.macosx_libfile.segment_command_fields", "type": null, "documentation": ["struct segment_command { /* for 32-bit architectures */\n    uint32_t    cmd;            /* LC_SEGMENT */\n    uint32_t    cmdsize;        /* includes sizeof section structs */\n    char                segname[16];    /* segment name */\n    uint32_t    vmaddr;         /* memory address of this segment */\n    uint32_t    vmsize;         /* memory size of this segment */\n    uint32_t    fileoff;        /* file offset of this segment */\n    uint32_t    filesize;       /* amount to map from the file */\n    vm_prot_t   maxprot;        /* maximum VM protection */\n    vm_prot_t   initprot;       /* initial VM protection */\n    uint32_t    nsects;         /* number of sections in segment */\n    uint32_t    flags;          /* flags */\n};\ntypedef int vm_prot_t;"]}, {"name": "setuptools._vendor.wheel.macosx_libfile.segment_command_fields_64", "type": null, "documentation": ["struct segment_command_64 { /* for 64-bit architectures */\n    uint32_t    cmd;            /* LC_SEGMENT_64 */\n    uint32_t    cmdsize;        /* includes sizeof section_64 structs */\n    char                segname[16];    /* segment name */\n    uint64_t    vmaddr;         /* memory address of this segment */\n    uint64_t    vmsize;         /* memory size of this segment */\n    uint64_t    fileoff;        /* file offset of this segment */\n    uint64_t    filesize;       /* amount to map from the file */\n    vm_prot_t   maxprot;        /* maximum VM protection */\n    vm_prot_t   initprot;       /* initial VM protection */\n    uint32_t    nsects;         /* number of sections in segment */\n    uint32_t    flags;          /* flags */\n};"]}, {"name": "setuptools._vendor.wheel.macosx_libfile.version_min_command_fields", "type": null, "documentation": ["struct version_min_command {\n    uint32_t    cmd;            /* LC_VERSION_MIN_MACOSX or\n                               LC_VERSION_MIN_IPHONEOS or\n                               LC_VERSION_MIN_WATCHOS or\n                               LC_VERSION_MIN_TVOS */\n    uint32_t    cmdsize;        /* sizeof(struct min_version_command) */\n    uint32_t    version;        /* X.Y.Z is encoded in nibbles xxxx.yy.zz */\n    uint32_t    sdk;            /* X.Y.Z is encoded in nibbles xxxx.yy.zz */\n};"]}, {"name": "setuptools._vendor.wheel.macosx_libfile.build_version_command_fields", "type": null, "documentation": ["struct build_version_command {\n    uint32_t    cmd;            /* LC_BUILD_VERSION */\n    uint32_t    cmdsize;        /* sizeof(struct build_version_command) plus */\n                                /* ntools * sizeof(struct build_tool_version) */\n    uint32_t    platform;       /* platform */\n    uint32_t    minos;          /* X.Y.Z is encoded in nibbles xxxx.yy.zz */\n    uint32_t    sdk;            /* X.Y.Z is encoded in nibbles xxxx.yy.zz */\n    uint32_t    ntools;         /* number of tool entries following this */\n};"]}], "classes": [], "exports": []}, {"name": "setuptools._vendor.platformdirs.__main__", "documentation": ["Main entry point."], "functions": [{"name": "setuptools._vendor.platformdirs.__main__.main", "asynchronous": false, "params": [], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Run the main entry point."]}], "variables": [{"name": "setuptools._vendor.platformdirs.__main__.PROPS", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._vendor.platformdirs.version", "documentation": ["file generated by setuptools_scm", "don't change, don't track in version control"], "functions": [], "variables": [{"name": "setuptools._vendor.platformdirs.version.TYPE_CHECKING", "type": null, "documentation": []}, {"name": "setuptools._vendor.platformdirs.version.VERSION_TUPLE", "type": null, "documentation": []}, {"name": "setuptools._vendor.platformdirs.version.VERSION_TUPLE", "type": null, "documentation": []}, {"name": "setuptools._vendor.platformdirs.version.version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.platformdirs.version.__version__", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.platformdirs.version.__version_tuple__", "type": {"name": "VERSION_TUPLE", "xref": {"fqname": "VERSION_TUPLE", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.platformdirs.version.version_tuple", "type": {"name": "VERSION_TUPLE", "xref": {"fqname": "VERSION_TUPLE", "project": null}, "params": null}, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers", "documentation": ["```\n.. testsetup::\n\n    from packaging.specifiers import Specifier, SpecifierSet, InvalidSpecifier\n    from packaging.version import Version\n```\n", "This file is dual licensed under the terms of the Apache License, Version", "2.0, and the BSD License. See the LICENSE file in the root of this repository", "for complete details."], "functions": [{"name": "setuptools._vendor.wheel.vendored.packaging.specifiers._coerce_version", "asynchronous": false, "params": [{"name": "version", "type": {"name": "UnparsedVersion", "xref": {"fqname": "UnparsedVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "Version", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.specifiers.version.Version", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers._version_split", "asynchronous": false, "params": [{"name": "version", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Split version into components.\n\nThe split components are intended for version comparison. The logic does\nnot attempt to retain the original version string, so joining the\ncomponents back with {func}`_version_join` may not produce the original\nversion string.\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers._version_join", "asynchronous": false, "params": [{"name": "components", "type": {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Join split version components into a version string.\n\nThis function assumes the input came from {func}`_version_split`, where the\nfirst component must be the epoch (either empty or numeric), and all other\ncomponents numeric.\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers._is_not_suffix", "asynchronous": false, "params": [{"name": "segment", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers._pad_version", "asynchronous": false, "params": [{"name": "left", "type": {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "right", "type": {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": []}], "variables": [{"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.UnparsedVersion", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.UnparsedVersionVar", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.CallableOperator", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers._prefix_regex", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.InvalidSpecifier", "bases": ["ValueError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Raised when attempting to create a {class}`Specifier` with a specifier\nstring that is invalid.\n\n```pycon\n>>> Specifier(\"lolwat\")\nTraceback (most recent call last):\n    ...\npackaging.specifiers.InvalidSpecifier: Invalid specifier: 'lolwat'\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.BaseSpecifier", "bases": [], "methods": [{"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.BaseSpecifier.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Returns the str representation of this Specifier-like object. This\nshould be representative of the Specifier itself."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.BaseSpecifier.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["Returns a hash value for this Specifier-like object."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.BaseSpecifier.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Returns a boolean representing whether or not the two Specifier-like\nobjects are equal.\n\n```\nparam other\n\nThe other object to check against.\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.BaseSpecifier.prereleases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "documentation": ["Whether or not pre-releases as a whole are allowed.\n\nThis can be set to either `True` or `False` to explicitly enable or disable\nprereleases or it can be set to `None` (the default) to use default semantics.\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.BaseSpecifier.prereleases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Setter for {attr}`prereleases`.\n\n```\nparam value\n\nThe value to set.\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.BaseSpecifier.contains", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "prereleases", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Determines if the given item is contained within this specifier."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.BaseSpecifier.filter", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "iterable", "type": {"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "UnparsedVersionVar", "xref": {"fqname": "UnparsedVersionVar", "project": null}, "params": null}]}, "default": null}, {"name": "prereleases", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "UnparsedVersionVar", "xref": {"fqname": "UnparsedVersionVar", "project": null}, "params": null}]}, "documentation": ["Takes an iterable of items and filters them so that only items which\nare contained within this specifier are allowed in it."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier", "bases": ["BaseSpecifier"], "methods": [{"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "prereleases", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Initialize a Specifier instance.\n\n```\nparam spec\n\nThe string representation of a specifier which will be parsed and\nnormalized before use.\n\nparam prereleases\n\nThis tells the specifier if it should accept prerelease versions if\napplicable or not. The default of None will autodetect it from the\ngiven specifiers.\n\nraises InvalidSpecifier\n\nIf the given specifier is invalid (i.e. bad syntax).\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier.prereleases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["https://github.com/python/mypy/pull/13475#pullrequestreview-1079784515"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier.prereleases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier.operator", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The operator of this specifier.\n\n```pycon\n>>> Specifier(\"==1.2.3\").operator\n'=='\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier.version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["The version of this specifier.\n\n```pycon\n>>> Specifier(\"==1.2.3\").version\n'1.2.3'\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A representation of the Specifier that shows all internal state.\n\n```pycon\n>>> Specifier('>=1.0.0')\n<Specifier('>=1.0.0')>\n>>> Specifier('>=1.0.0', prereleases=False)\n<Specifier('>=1.0.0', prereleases=False)>\n>>> Specifier('>=1.0.0', prereleases=True)\n<Specifier('>=1.0.0', prereleases=True)>\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A string representation of the Specifier that can be round-tripped.\n\n```pycon\n>>> str(Specifier('>=1.0.0'))\n'>=1.0.0'\n>>> str(Specifier('>=1.0.0', prereleases=False))\n'>=1.0.0'\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier._canonical_spec", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Whether or not the two Specifier-like objects are equal.\n\n```\nparam other\n\nThe other object to check against.\n```\n\nThe value of {attr}`prereleases` is ignored.\n\n```pycon\n>>> Specifier(\"==1.2.3\") == Specifier(\"== 1.2.3.0\")\nTrue\n>>> (Specifier(\"==1.2.3\", prereleases=False) ==\n...  Specifier(\"==1.2.3\", prereleases=True))\nTrue\n>>> Specifier(\"==1.2.3\") == \"==1.2.3\"\nTrue\n>>> Specifier(\"==1.2.3\") == Specifier(\"==1.2.4\")\nFalse\n>>> Specifier(\"==1.2.3\") == Specifier(\"~=1.2.3\")\nFalse\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier._get_operator", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "op", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "CallableOperator", "xref": {"fqname": "CallableOperator", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier._compare_compatible", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier._compare_equal", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier._compare_not_equal", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier._compare_less_than_equal", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier._compare_greater_than_equal", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier._compare_less_than", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec_str", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier._compare_greater_than", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec_str", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier._compare_arbitrary", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prospective", "type": {"name": "Version", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.specifiers.version.Version", "project": null}, "params": null}, "default": null}, {"name": "spec", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier.__contains__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Version", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.specifiers.version.Version", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Return whether or not the item is contained in this specifier.\n\n```\nparam item\n\nThe item to check for.\n```\n\nThis is used for the `in` operator and behaves the same as\n{meth}`contains` with no `prereleases` argument passed.\n\n```pycon\n>>> \"1.2.3\" in Specifier(\">=1.2.3\")\nTrue\n>>> Version(\"1.2.3\") in Specifier(\">=1.2.3\")\nTrue\n>>> \"1.0.0\" in Specifier(\">=1.2.3\")\nFalse\n>>> \"1.3.0a1\" in Specifier(\">=1.2.3\")\nFalse\n>>> \"1.3.0a1\" in Specifier(\">=1.2.3\", prereleases=True)\nTrue\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier.contains", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "UnparsedVersion", "xref": {"fqname": "UnparsedVersion", "project": null}, "params": null}, "default": null}, {"name": "prereleases", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Return whether or not the item is contained in this specifier.\n\n```\nparam item\n\nThe item to check for, which can be a version string or a\n instance.\n\nparam prereleases\n\nWhether or not to match prereleases with this Specifier. If set to\nNone (the default), it uses  to determine\nwhether or not prereleases are allowed.\n```\n\n```pycon\n>>> Specifier(\">=1.2.3\").contains(\"1.2.3\")\nTrue\n>>> Specifier(\">=1.2.3\").contains(Version(\"1.2.3\"))\nTrue\n>>> Specifier(\">=1.2.3\").contains(\"1.0.0\")\nFalse\n>>> Specifier(\">=1.2.3\").contains(\"1.3.0a1\")\nFalse\n>>> Specifier(\">=1.2.3\", prereleases=True).contains(\"1.3.0a1\")\nTrue\n>>> Specifier(\">=1.2.3\").contains(\"1.3.0a1\", prereleases=True)\nTrue\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier.filter", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "iterable", "type": {"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "UnparsedVersionVar", "xref": {"fqname": "UnparsedVersionVar", "project": null}, "params": null}]}, "default": null}, {"name": "prereleases", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "UnparsedVersionVar", "xref": {"fqname": "UnparsedVersionVar", "project": null}, "params": null}]}, "documentation": ["Filter items in the given iterable, that match the specifier.\n\n```\nparam iterable\n\nAn iterable that can contain version strings and  instances.\nThe items in the iterable will be filtered according to the specifier.\n\nparam prereleases\n\nWhether or not to allow prereleases in the returned iterator. If set to\nNone (the default), it will be intelligently decide whether to allow\nprereleases or not (based on the  attribute, and\nwhether the only versions matching are prereleases).\n```\n\nThis method is smarter than just `filter(Specifier().contains, [...])`\nbecause it implements the rule from {pep}`440` that a prerelease item\nSHOULD be accepted if no other versions match the given specifier.\n\n```pycon\n>>> list(Specifier(\">=1.2.3\").filter([\"1.2\", \"1.3\", \"1.5a1\"]))\n['1.3']\n>>> list(Specifier(\">=1.2.3\").filter([\"1.2\", \"1.2.3\", \"1.3\", Version(\"1.4\")]))\n['1.2.3', '1.3', <Version('1.4')>]\n>>> list(Specifier(\">=1.2.3\").filter([\"1.2\", \"1.5a1\"]))\n['1.5a1']\n>>> list(Specifier(\">=1.2.3\").filter([\"1.3\", \"1.5a1\"], prereleases=True))\n['1.3', '1.5a1']\n>>> list(Specifier(\">=1.2.3\", prereleases=True).filter([\"1.3\", \"1.5a1\"]))\n['1.3', '1.5a1']\n```\n"]}], "class_variables": [{"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier._operator_regex_str", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier._version_regex_str", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier._regex", "type": null, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier._operators", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["This class abstracts handling of version specifiers.\n\n:::{tip}\nIt is generally not required to instantiate this manually. You should instead\nprefer to work with {class}`SpecifierSet` instead, which can parse\ncomma-separated version specifiers (which is what package metadata contains).\n:::\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.SpecifierSet", "bases": ["BaseSpecifier"], "methods": [{"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.SpecifierSet.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "specifiers", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "prereleases", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Initialize a SpecifierSet instance.\n\n```\nparam specifiers\n\nThe string representation of a specifier or a comma-separated list of\nspecifiers which will be parsed and normalized before use.\n\nparam prereleases\n\nThis tells the SpecifierSet if it should accept prerelease versions if\napplicable or not. The default of None will autodetect it from the\ngiven specifiers.\n\nraises InvalidSpecifier\n\nIf the given specifiers are not parseable than this exception will be\nraised.\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.SpecifierSet.prereleases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.SpecifierSet.prereleases", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.SpecifierSet.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A representation of the specifier set that shows all internal state.\n\nNote that the ordering of the individual specifiers within the set may not\nmatch the input string.\n\n```pycon\n>>> SpecifierSet('>=1.0.0,!=2.0.0')\n<SpecifierSet('!=2.0.0,>=1.0.0')>\n>>> SpecifierSet('>=1.0.0,!=2.0.0', prereleases=False)\n<SpecifierSet('!=2.0.0,>=1.0.0', prereleases=False)>\n>>> SpecifierSet('>=1.0.0,!=2.0.0', prereleases=True)\n<SpecifierSet('!=2.0.0,>=1.0.0', prereleases=True)>\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.SpecifierSet.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["A string representation of the specifier set that can be round-tripped.\n\nNote that the ordering of the individual specifiers within the set may not\nmatch the input string.\n\n```pycon\n>>> str(SpecifierSet(\">=1.0.0,!=1.0.1\"))\n'!=1.0.1,>=1.0.0'\n>>> str(SpecifierSet(\">=1.0.0,!=1.0.1\", prereleases=False))\n'!=1.0.1,>=1.0.0'\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.SpecifierSet.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.SpecifierSet.__and__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "SpecifierSet", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.specifiers.SpecifierSet", "project": null}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "SpecifierSet", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.specifiers.SpecifierSet", "project": null}, "params": null}, "documentation": ["Return a SpecifierSet which is a combination of the two sets.\n\n```\nparam other\n\nThe other object to combine with.\n```\n\n```pycon\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\") & '<=2.0.0,!=2.0.1'\n<SpecifierSet('!=1.0.1,!=2.0.1,<=2.0.0,>=1.0.0')>\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\") & SpecifierSet('<=2.0.0,!=2.0.1')\n<SpecifierSet('!=1.0.1,!=2.0.1,<=2.0.0,>=1.0.0')>\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.SpecifierSet.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Whether or not the two SpecifierSet-like objects are equal.\n\n```\nparam other\n\nThe other object to check against.\n```\n\nThe value of {attr}`prereleases` is ignored.\n\n```pycon\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\") == SpecifierSet(\">=1.0.0,!=1.0.1\")\nTrue\n>>> (SpecifierSet(\">=1.0.0,!=1.0.1\", prereleases=False) ==\n...  SpecifierSet(\">=1.0.0,!=1.0.1\", prereleases=True))\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\") == \">=1.0.0,!=1.0.1\"\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\") == SpecifierSet(\">=1.0.0\")\nFalse\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\") == SpecifierSet(\">=1.0.0,!=1.0.2\")\nFalse\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.SpecifierSet.__len__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["Returns the number of specifiers in this specifier set."]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.SpecifierSet.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Specifier", "xref": {"fqname": "setuptools._vendor.wheel.vendored.packaging.specifiers.Specifier", "project": null}, "params": null}]}, "documentation": ["Returns an iterator over all the underlying {class}`Specifier` instances\nin this specifier set.\n\n```pycon\n>>> sorted(SpecifierSet(\">=1.0.0,!=1.0.1\"), key=str)\n[<Specifier('!=1.0.1')>, <Specifier('>=1.0.0')>]\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.SpecifierSet.__contains__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "UnparsedVersion", "xref": {"fqname": "UnparsedVersion", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Return whether or not the item is contained in this specifier.\n\n```\nparam item\n\nThe item to check for.\n```\n\nThis is used for the `in` operator and behaves the same as\n{meth}`contains` with no `prereleases` argument passed.\n\n```pycon\n>>> \"1.2.3\" in SpecifierSet(\">=1.0.0,!=1.0.1\")\nTrue\n>>> Version(\"1.2.3\") in SpecifierSet(\">=1.0.0,!=1.0.1\")\nTrue\n>>> \"1.0.1\" in SpecifierSet(\">=1.0.0,!=1.0.1\")\nFalse\n>>> \"1.3.0a1\" in SpecifierSet(\">=1.0.0,!=1.0.1\")\nFalse\n>>> \"1.3.0a1\" in SpecifierSet(\">=1.0.0,!=1.0.1\", prereleases=True)\nTrue\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.SpecifierSet.contains", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "UnparsedVersion", "xref": {"fqname": "UnparsedVersion", "project": null}, "params": null}, "default": null}, {"name": "prereleases", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "default": "..."}, {"name": "installed", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Return whether or not the item is contained in this SpecifierSet.\n\n```\nparam item\n\nThe item to check for, which can be a version string or a\n instance.\n\nparam prereleases\n\nWhether or not to match prereleases with this SpecifierSet. If set to\nNone (the default), it uses  to determine\nwhether or not prereleases are allowed.\n```\n\n```pycon\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.2.3\")\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(Version(\"1.2.3\"))\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.0.1\")\nFalse\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.3.0a1\")\nFalse\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\", prereleases=True).contains(\"1.3.0a1\")\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.3.0a1\", prereleases=True)\nTrue\n```\n"]}, {"name": "setuptools._vendor.wheel.vendored.packaging.specifiers.SpecifierSet.filter", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "iterable", "type": {"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "UnparsedVersionVar", "xref": {"fqname": "UnparsedVersionVar", "project": null}, "params": null}]}, "default": null}, {"name": "prereleases", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "UnparsedVersionVar", "xref": {"fqname": "UnparsedVersionVar", "project": null}, "params": null}]}, "documentation": ["Filter items in the given iterable, that match the specifiers in this set.\n\n```\nparam iterable\n\nAn iterable that can contain version strings and  instances.\nThe items in the iterable will be filtered according to the specifier.\n\nparam prereleases\n\nWhether or not to allow prereleases in the returned iterator. If set to\nNone (the default), it will be intelligently decide whether to allow\nprereleases or not (based on the  attribute, and\nwhether the only versions matching are prereleases).\n```\n\nThis method is smarter than just `filter(SpecifierSet(...).contains, [...])`\nbecause it implements the rule from {pep}`440` that a prerelease item\nSHOULD be accepted if no other versions match the given specifier.\n\n```pycon\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.2\", \"1.3\", \"1.5a1\"]))\n['1.3']\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.2\", \"1.3\", Version(\"1.4\")]))\n['1.3', <Version('1.4')>]\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.2\", \"1.5a1\"]))\n[]\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.3\", \"1.5a1\"], prereleases=True))\n['1.3', '1.5a1']\n>>> list(SpecifierSet(\">=1.2.3\", prereleases=True).filter([\"1.3\", \"1.5a1\"]))\n['1.3', '1.5a1']\n```\n\nAn \"empty\" SpecifierSet will filter items based on the presence of prerelease\nversions in the set.\n\n```pycon\n>>> list(SpecifierSet(\"\").filter([\"1.3\", \"1.5a1\"]))\n['1.3']\n>>> list(SpecifierSet(\"\").filter([\"1.5a1\"]))\n['1.5a1']\n>>> list(SpecifierSet(\"\", prereleases=True).filter([\"1.3\", \"1.5a1\"]))\n['1.3', '1.5a1']\n>>> list(SpecifierSet(\"\").filter([\"1.3\", \"1.5a1\"], prereleases=True))\n['1.3', '1.5a1']\n```\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["This class abstracts handling of a set of version specifiers.\n\nIt can be passed a single specifier (`>=3.0`), a comma-separated list of\nspecifiers (`>=3.0,!=3.1`), or no specifier at all.\n"]}], "exports": []}, {"name": "setuptools._vendor.platformdirs.android", "documentation": ["Android."], "functions": [{"name": "setuptools._vendor.platformdirs.android._android_folder", "asynchronous": false, "params": [], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["---\nreturn: base folder for the Android OS or None if it cannot be found\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android._android_documents_folder", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: documents folder for the Android OS\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android._android_downloads_folder", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: downloads folder for the Android OS\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android._android_pictures_folder", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: pictures folder for the Android OS\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android._android_videos_folder", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: videos folder for the Android OS\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android._android_music_folder", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: music folder for the Android OS\n---\n"]}], "variables": [], "classes": [{"name": "setuptools._vendor.platformdirs.android.Android", "bases": ["PlatformDirsABC"], "methods": [{"name": "setuptools._vendor.platformdirs.android.Android.user_data_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: data directory tied to the user, e.g. `/data/user/<userid>/<packagename>/files/<AppName>`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android.Android.site_data_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: data directory shared by users, same as `user_data_dir`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android.Android.user_config_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: config directory tied to the user, e.g. `/data/user/<userid>/<packagename>/shared_prefs/<AppName>`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android.Android.site_config_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: config directory shared by the users, same as `user_config_dir`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android.Android.user_cache_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: cache directory tied to the user, e.g.,\\`\\`/data/user/\\<userid>/\\<packagename>/cache/\\<AppName>\\`\\`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android.Android.site_cache_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: cache directory shared by users, same as `user_cache_dir`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android.Android.user_state_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: state directory tied to the user, same as `user_data_dir`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android.Android.user_log_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: |-\n  log directory tied to the user, same as `user_cache_dir` if not opinionated else `log` in it,\n  e.g. `/data/user/<userid>/<packagename>/cache/<AppName>/log`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android.Android.user_documents_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: documents directory tied to the user e.g. `/storage/emulated/0/Documents`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android.Android.user_downloads_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: downloads directory tied to the user e.g. `/storage/emulated/0/Downloads`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android.Android.user_pictures_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: pictures directory tied to the user e.g. `/storage/emulated/0/Pictures`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android.Android.user_videos_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: videos directory tied to the user e.g. `/storage/emulated/0/DCIM/Camera`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android.Android.user_music_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: music directory tied to the user e.g. `/storage/emulated/0/Music`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android.Android.user_desktop_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: desktop directory tied to the user e.g. `/storage/emulated/0/Desktop`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android.Android.user_runtime_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: |-\n  runtime directory tied to the user, same as `user_cache_dir` if not opinionated else `tmp` in it,\n  e.g. `/data/user/<userid>/<packagename>/cache/<AppName>/tmp`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.android.Android.site_runtime_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: runtime directory shared by users, same as `user_runtime_dir`\n---\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Follows the guidance `from here <https://android.stackexchange.com/a/216132>`_.\n\nMakes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`, `version\n<platformdirs.api.PlatformDirsABC.version>`, `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`."]}], "exports": [{"name": "setuptools._vendor.platformdirs.android.Android", "xref": {"fqname": "setuptools._vendor.platformdirs.android.Android", "project": null}}]}, {"name": "setuptools._vendor.platformdirs.api", "documentation": ["Base API."], "functions": [], "variables": [], "classes": [{"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC", "bases": ["ABC"], "methods": [{"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "roaming", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "multipath", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "opinion", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Create a new platform directory.\n\n```\nparam appname\n\nSee .\n\nparam appauthor\n\nSee .\n\nparam version\n\nSee .\n\nparam roaming\n\nSee .\n\nparam multipath\n\nSee .\n\nparam opinion\n\nSee .\n\nparam ensure_exists\n\nSee .\n```\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC._append_app_name_and_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*base", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC._optionally_create_directory", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_data_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: data directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.site_data_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: data directory shared by users\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_config_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: config directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.site_config_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: config directory shared by the users\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_cache_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: cache directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.site_cache_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: cache directory shared by users\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_state_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: state directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_log_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: log directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_documents_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: documents directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_downloads_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: downloads directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_pictures_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: pictures directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_videos_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: videos directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_music_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: music directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_desktop_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: desktop directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_runtime_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: runtime directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.site_runtime_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: runtime directory shared by users\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_data_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: data path tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.site_data_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: data path shared by users\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_config_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: config path tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.site_config_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: config path shared by the users\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_cache_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: cache path tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.site_cache_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: cache path shared by users\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_state_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: state path tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_log_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: log path tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_documents_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: documents a path tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_downloads_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: downloads path tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_pictures_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: pictures path tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_videos_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: videos path tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_music_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: music path tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_desktop_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: desktop path tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.user_runtime_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: runtime path tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.site_runtime_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: runtime path shared by users\n---\n"]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.iter_config_dirs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": [":yield: all user and site configuration directories."]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.iter_data_dirs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": [":yield: all user and site data directories."]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.iter_cache_dirs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": [":yield: all user and site cache directories."]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.iter_runtime_dirs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": [":yield: all user and site runtime directories."]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.iter_config_paths", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}]}, "documentation": [":yield: all user and site configuration paths."]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.iter_data_paths", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}]}, "documentation": [":yield: all user and site data paths."]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.iter_cache_paths", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}]}, "documentation": [":yield: all user and site cache paths."]}, {"name": "setuptools._vendor.platformdirs.api.PlatformDirsABC.iter_runtime_paths", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}]}, "documentation": [":yield: all user and site runtime paths."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Abstract base class for platform directories."]}], "exports": []}, {"name": "setuptools._vendor.platformdirs.windows", "documentation": ["Windows."], "functions": [{"name": "setuptools._vendor.platformdirs.windows.get_win_folder_from_env_vars", "asynchronous": false, "params": [{"name": "csidl_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Get folder from environment variables."]}, {"name": "setuptools._vendor.platformdirs.windows.get_win_folder_if_csidl_name_not_env_var", "asynchronous": false, "params": [{"name": "csidl_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["Get a folder for a CSIDL name that does not exist as an environment variable."]}, {"name": "setuptools._vendor.platformdirs.windows.get_win_folder_from_registry", "asynchronous": false, "params": [{"name": "csidl_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Get folder from the registry.\n\nThis is a fallback technique at best. I'm not sure if using the registry for these guarantees us the correct answer\nfor all CSIDL_* names."]}, {"name": "setuptools._vendor.platformdirs.windows.get_win_folder_via_ctypes", "asynchronous": false, "params": [{"name": "csidl_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Get folder with ctypes."]}, {"name": "setuptools._vendor.platformdirs.windows._pick_get_win_folder", "asynchronous": false, "params": [], "returns": {"name": "Callable", "xref": {"fqname": "collections.abc.Callable", "project": "--std--"}, "params": [{"name": "[str]", "xref": null, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}], "variables": [{"name": "setuptools._vendor.platformdirs.windows.get_win_folder", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.platformdirs.windows.Windows", "bases": ["PlatformDirsABC"], "methods": [{"name": "setuptools._vendor.platformdirs.windows.Windows.user_data_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: |-\n  data directory tied to the user, e.g.\n  `%USERPROFILE%\\AppData\\Local\\$appauthor\\$appname` (not roaming) or\n  `%USERPROFILE%\\AppData\\Roaming\\$appauthor\\$appname` (roaming)\n---\n"]}, {"name": "setuptools._vendor.platformdirs.windows.Windows._append_parts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "opinion_value", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.platformdirs.windows.Windows.site_data_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: data directory shared by users, e.g. `C:\\ProgramData\\$appauthor\\$appname`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.windows.Windows.user_config_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: config directory tied to the user, same as `user_data_dir`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.windows.Windows.site_config_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: config directory shared by the users, same as `site_data_dir`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.windows.Windows.user_cache_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: |-\n  cache directory tied to the user (if opinionated with `Cache` folder within `$appname`) e.g.\n  `%USERPROFILE%\\AppData\\Local\\$appauthor\\$appname\\Cache\\$version`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.windows.Windows.site_cache_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: cache directory shared by users, e.g. `C:\\ProgramData\\$appauthor\\$appname\\Cache\\$version`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.windows.Windows.user_state_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: state directory tied to the user, same as `user_data_dir`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.windows.Windows.user_log_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: log directory tied to the user, same as `user_data_dir` if not opinionated\n  else `Logs` in it\n---\n"]}, {"name": "setuptools._vendor.platformdirs.windows.Windows.user_documents_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: documents directory tied to the user e.g. `%USERPROFILE%\\Documents`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.windows.Windows.user_downloads_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: downloads directory tied to the user e.g. `%USERPROFILE%\\Downloads`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.windows.Windows.user_pictures_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: pictures directory tied to the user e.g. `%USERPROFILE%\\Pictures`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.windows.Windows.user_videos_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: videos directory tied to the user e.g. `%USERPROFILE%\\Videos`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.windows.Windows.user_music_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: music directory tied to the user e.g. `%USERPROFILE%\\Music`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.windows.Windows.user_desktop_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: desktop directory tied to the user, e.g. `%USERPROFILE%\\Desktop`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.windows.Windows.user_runtime_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: |-\n  runtime directory tied to the user, e.g.\n  `%USERPROFILE%\\AppData\\Local\\Temp\\$appauthor\\$appname`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.windows.Windows.site_runtime_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: runtime directory shared by users, same as `user_runtime_dir`\n---\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["`MSDN on where to store app data files <https://learn.microsoft.com/en-us/windows/win32/shell/knownfolderid>`_.\n\nMakes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`, `appauthor\n<platformdirs.api.PlatformDirsABC.appauthor>`, `version <platformdirs.api.PlatformDirsABC.version>`, `roaming\n<platformdirs.api.PlatformDirsABC.roaming>`, `opinion <platformdirs.api.PlatformDirsABC.opinion>`, `ensure_exists\n<platformdirs.api.PlatformDirsABC.ensure_exists>`."]}], "exports": [{"name": "setuptools._vendor.platformdirs.windows.Windows", "xref": {"fqname": "setuptools._vendor.platformdirs.windows.Windows", "project": null}}]}, {"name": "setuptools._vendor.platformdirs", "documentation": ["Utilities for determining application-specific dirs.\n\nSee <https://github.com/platformdirs/platformdirs> for details and usage."], "functions": [{"name": "setuptools._vendor.platformdirs._set_platform_dir_class", "asynchronous": false, "params": [], "returns": {"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": [{"name": "PlatformDirsABC", "xref": {"fqname": "setuptools._vendor.platformdirs.api.PlatformDirsABC", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.platformdirs.user_data_dir", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "roaming", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: data directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.site_data_dir", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "multipath", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam multipath: See `roaming <platformdirs.api.PlatformDirsABC.multipath>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: data directory shared by users\n---\n"]}, {"name": "setuptools._vendor.platformdirs.user_config_dir", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "roaming", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: config directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.site_config_dir", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "multipath", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam multipath: See `roaming <platformdirs.api.PlatformDirsABC.multipath>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: config directory shared by the users\n---\n"]}, {"name": "setuptools._vendor.platformdirs.user_cache_dir", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "opinion", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: cache directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.site_cache_dir", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "opinion", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: cache directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.user_state_dir", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "roaming", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: state directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.user_log_dir", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "opinion", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: log directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.user_documents_dir", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": [":returns: documents directory tied to the user"]}, {"name": "setuptools._vendor.platformdirs.user_downloads_dir", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": [":returns: downloads directory tied to the user"]}, {"name": "setuptools._vendor.platformdirs.user_pictures_dir", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": [":returns: pictures directory tied to the user"]}, {"name": "setuptools._vendor.platformdirs.user_videos_dir", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": [":returns: videos directory tied to the user"]}, {"name": "setuptools._vendor.platformdirs.user_music_dir", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": [":returns: music directory tied to the user"]}, {"name": "setuptools._vendor.platformdirs.user_desktop_dir", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": [":returns: desktop directory tied to the user"]}, {"name": "setuptools._vendor.platformdirs.user_runtime_dir", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "opinion", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: runtime directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.site_runtime_dir", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "opinion", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: runtime directory shared by users\n---\n"]}, {"name": "setuptools._vendor.platformdirs.user_data_path", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "roaming", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: data path tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.site_data_path", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "multipath", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam multipath: See `multipath <platformdirs.api.PlatformDirsABC.multipath>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: data path shared by users\n---\n"]}, {"name": "setuptools._vendor.platformdirs.user_config_path", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "roaming", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: config path tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.site_config_path", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "multipath", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam multipath: See `roaming <platformdirs.api.PlatformDirsABC.multipath>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: config path shared by the users\n---\n"]}, {"name": "setuptools._vendor.platformdirs.site_cache_path", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "opinion", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: cache directory tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.user_cache_path", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "opinion", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: cache path tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.user_state_path", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "roaming", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: state path tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.user_log_path", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "opinion", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: log path tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.user_documents_path", "asynchronous": false, "params": [], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": [":returns: documents a path tied to the user"]}, {"name": "setuptools._vendor.platformdirs.user_downloads_path", "asynchronous": false, "params": [], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": [":returns: downloads path tied to the user"]}, {"name": "setuptools._vendor.platformdirs.user_pictures_path", "asynchronous": false, "params": [], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": [":returns: pictures path tied to the user"]}, {"name": "setuptools._vendor.platformdirs.user_videos_path", "asynchronous": false, "params": [], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": [":returns: videos path tied to the user"]}, {"name": "setuptools._vendor.platformdirs.user_music_path", "asynchronous": false, "params": [], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": [":returns: music path tied to the user"]}, {"name": "setuptools._vendor.platformdirs.user_desktop_path", "asynchronous": false, "params": [], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": [":returns: desktop path tied to the user"]}, {"name": "setuptools._vendor.platformdirs.user_runtime_path", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "opinion", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: runtime path tied to the user\n---\n"]}, {"name": "setuptools._vendor.platformdirs.site_runtime_path", "asynchronous": false, "params": [{"name": "appname", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "appauthor", "type": {"name": "str | None | Literal[False]", "xref": null, "params": null}, "default": "..."}, {"name": "version", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "opinion", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "ensure_exists", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nparam appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\nparam appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\nparam ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\nparam opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.\nparam version: See `version <platformdirs.api.PlatformDirsABC.version>`.\nreturns: runtime path shared by users\n---\n"]}], "variables": [{"name": "setuptools._vendor.platformdirs.PlatformDirs", "type": null, "documentation": [": Currently active platform"]}, {"name": "setuptools._vendor.platformdirs.AppDirs", "type": null, "documentation": [": Backwards compatibility with appdirs"]}], "classes": [], "exports": [{"name": "setuptools._vendor.platformdirs.__version__", "xref": {"fqname": "setuptools._vendor.platformdirs.version.__version__", "project": null}}, {"name": "setuptools._vendor.platformdirs.__version_info__", "xref": {"fqname": "setuptools._vendor.platformdirs.version.__version_tuple__", "project": null}}, {"name": "setuptools._vendor.platformdirs.AppDirs", "xref": {"fqname": "setuptools._vendor.platformdirs.AppDirs", "project": null}}, {"name": "setuptools._vendor.platformdirs.PlatformDirs", "xref": {"fqname": "setuptools._vendor.platformdirs.PlatformDirs", "project": null}}, {"name": "setuptools._vendor.platformdirs.PlatformDirsABC", "xref": {"fqname": "setuptools._vendor.platformdirs.api.PlatformDirsABC", "project": null}}, {"name": "setuptools._vendor.platformdirs.site_cache_dir", "xref": {"fqname": "setuptools._vendor.platformdirs.site_cache_dir", "project": null}}, {"name": "setuptools._vendor.platformdirs.site_cache_path", "xref": {"fqname": "setuptools._vendor.platformdirs.site_cache_path", "project": null}}, {"name": "setuptools._vendor.platformdirs.site_config_dir", "xref": {"fqname": "setuptools._vendor.platformdirs.site_config_dir", "project": null}}, {"name": "setuptools._vendor.platformdirs.site_config_path", "xref": {"fqname": "setuptools._vendor.platformdirs.site_config_path", "project": null}}, {"name": "setuptools._vendor.platformdirs.site_data_dir", "xref": {"fqname": "setuptools._vendor.platformdirs.site_data_dir", "project": null}}, {"name": "setuptools._vendor.platformdirs.site_data_path", "xref": {"fqname": "setuptools._vendor.platformdirs.site_data_path", "project": null}}, {"name": "setuptools._vendor.platformdirs.site_runtime_dir", "xref": {"fqname": "setuptools._vendor.platformdirs.site_runtime_dir", "project": null}}, {"name": "setuptools._vendor.platformdirs.site_runtime_path", "xref": {"fqname": "setuptools._vendor.platformdirs.site_runtime_path", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_cache_dir", "xref": {"fqname": "setuptools._vendor.platformdirs.user_cache_dir", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_cache_path", "xref": {"fqname": "setuptools._vendor.platformdirs.user_cache_path", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_config_dir", "xref": {"fqname": "setuptools._vendor.platformdirs.user_config_dir", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_config_path", "xref": {"fqname": "setuptools._vendor.platformdirs.user_config_path", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_data_dir", "xref": {"fqname": "setuptools._vendor.platformdirs.user_data_dir", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_data_path", "xref": {"fqname": "setuptools._vendor.platformdirs.user_data_path", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_desktop_dir", "xref": {"fqname": "setuptools._vendor.platformdirs.user_desktop_dir", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_desktop_path", "xref": {"fqname": "setuptools._vendor.platformdirs.user_desktop_path", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_documents_dir", "xref": {"fqname": "setuptools._vendor.platformdirs.user_documents_dir", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_documents_path", "xref": {"fqname": "setuptools._vendor.platformdirs.user_documents_path", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_downloads_dir", "xref": {"fqname": "setuptools._vendor.platformdirs.user_downloads_dir", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_downloads_path", "xref": {"fqname": "setuptools._vendor.platformdirs.user_downloads_path", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_log_dir", "xref": {"fqname": "setuptools._vendor.platformdirs.user_log_dir", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_log_path", "xref": {"fqname": "setuptools._vendor.platformdirs.user_log_path", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_music_dir", "xref": {"fqname": "setuptools._vendor.platformdirs.user_music_dir", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_music_path", "xref": {"fqname": "setuptools._vendor.platformdirs.user_music_path", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_pictures_dir", "xref": {"fqname": "setuptools._vendor.platformdirs.user_pictures_dir", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_pictures_path", "xref": {"fqname": "setuptools._vendor.platformdirs.user_pictures_path", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_runtime_dir", "xref": {"fqname": "setuptools._vendor.platformdirs.user_runtime_dir", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_runtime_path", "xref": {"fqname": "setuptools._vendor.platformdirs.user_runtime_path", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_state_dir", "xref": {"fqname": "setuptools._vendor.platformdirs.user_state_dir", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_state_path", "xref": {"fqname": "setuptools._vendor.platformdirs.user_state_path", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_videos_dir", "xref": {"fqname": "setuptools._vendor.platformdirs.user_videos_dir", "project": null}}, {"name": "setuptools._vendor.platformdirs.user_videos_path", "xref": {"fqname": "setuptools._vendor.platformdirs.user_videos_path", "project": null}}]}, {"name": "setuptools._vendor.platformdirs.unix", "documentation": ["Unix."], "functions": [{"name": "setuptools._vendor.platformdirs.unix.getuid", "asynchronous": false, "params": [], "returns": {"name": "NoReturn", "xref": {"fqname": "typing.NoReturn", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.platformdirs.unix._get_user_media_dir", "asynchronous": false, "params": [{"name": "env_var", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "fallback_tilde_path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.platformdirs.unix._get_user_dirs_folder", "asynchronous": false, "params": [{"name": "key", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["Return directory from user-dirs.dirs config file.\n\nSee https://freedesktop.org/wiki/Software/xdg-user-dirs/."]}], "variables": [], "classes": [{"name": "setuptools._vendor.platformdirs.unix.Unix", "bases": ["PlatformDirsABC"], "methods": [{"name": "setuptools._vendor.platformdirs.unix.Unix.user_data_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: |-\n  data directory tied to the user, e.g. `~/.local/share/$appname/$version` or\n  `$XDG_DATA_HOME/$appname/$version`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix._site_data_dirs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.platformdirs.unix.Unix.site_data_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: |-\n  data directories shared by users (if `multipath <platformdirs.api.PlatformDirsABC.multipath>` is\n  enabled and `XDG_DATA_DIRS` is set and a multi path the response is also a multi path separated by the\n  OS path separator), e.g. `/usr/local/share/$appname/$version` or `/usr/share/$appname/$version`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix.user_config_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: |-\n  config directory tied to the user, e.g. `~/.config/$appname/$version` or\n  `$XDG_CONFIG_HOME/$appname/$version`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix._site_config_dirs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.platformdirs.unix.Unix.site_config_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: |-\n  config directories shared by users (if `multipath <platformdirs.api.PlatformDirsABC.multipath>`\n  is enabled and `XDG_CONFIG_DIRS` is set and a multi path the response is also a multi path separated by\n  the OS path separator), e.g. `/etc/xdg/$appname/$version`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix.user_cache_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: |-\n  cache directory tied to the user, e.g. `~/.cache/$appname/$version` or\n  `~/$XDG_CACHE_HOME/$appname/$version`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix.site_cache_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: cache directory shared by users, e.g. `/var/cache/$appname/$version`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix.user_state_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: |-\n  state directory tied to the user, e.g. `~/.local/state/$appname/$version` or\n  `$XDG_STATE_HOME/$appname/$version`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix.user_log_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: log directory tied to the user, same as `user_state_dir` if not opinionated\n  else `log` in it\n---\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix.user_documents_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: documents directory tied to the user, e.g. `~/Documents`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix.user_downloads_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: downloads directory tied to the user, e.g. `~/Downloads`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix.user_pictures_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: pictures directory tied to the user, e.g. `~/Pictures`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix.user_videos_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: videos directory tied to the user, e.g. `~/Videos`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix.user_music_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: music directory tied to the user, e.g. `~/Music`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix.user_desktop_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: desktop directory tied to the user, e.g. `~/Desktop`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix.user_runtime_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: |-\n  runtime directory tied to the user, e.g. `/run/user/$(id -u)/$appname/$version` or\n  `$XDG_RUNTIME_DIR/$appname/$version`.\n\n  For FreeBSD/OpenBSD/NetBSD, it would return `/var/run/user/$(id -u)/$appname/$version` if\n  exists, otherwise `/tmp/runtime-$(id -u)/$appname/$version`, if\\`\\`\\$XDG_RUNTIME_DIR\\`\\`\n  is not set.\n---\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix.site_runtime_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: runtime directory shared by users, e.g. `/run/$appname/$version` or `$XDG_RUNTIME_DIR/$appname/$version`.\n---\n\nNote that this behaves almost exactly like `user_runtime_dir` if `$XDG_RUNTIME_DIR` is set, but will\nfall back to paths associated to the root user instead of a regular logged-in user if it's not set.\n\nIf you wish to ensure that a logged-in root user path is returned e.g. `/run/user/0`, use `user_runtime_dir`\ninstead.\n\nFor FreeBSD/OpenBSD/NetBSD, it would return `/var/run/$appname/$version` if `$XDG_RUNTIME_DIR` is not set.\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix.site_data_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: data path shared by users. Only return the first item, even if `multipath`\n  is set to `True`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix.site_config_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: config path shared by the users, returns the first item, even if `multipath`\n  is set to `True`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix.site_cache_path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: cache path shared by users. Only return the first item, even if `multipath`\n  is set to `True`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.unix.Unix._first_item_as_path_if_multipath", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "directory", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.platformdirs.unix.Unix.iter_config_dirs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": [":yield: all user and site configuration directories."]}, {"name": "setuptools._vendor.platformdirs.unix.Unix.iter_data_dirs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": [":yield: all user and site data directories."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["On Unix/Linux, we follow the `XDG Basedir Spec <https://specifications.freedesktop.org/basedir-spec/basedir-spec-\nlatest.html>`_.\n\nThe spec allows overriding directories with environment variables. The examples shown are the default values,\nalongside the name of the environment variable that overrides them. Makes use of the `appname\n<platformdirs.api.PlatformDirsABC.appname>`, `version <platformdirs.api.PlatformDirsABC.version>`, `multipath\n<platformdirs.api.PlatformDirsABC.multipath>`, `opinion <platformdirs.api.PlatformDirsABC.opinion>`, `ensure_exists\n<platformdirs.api.PlatformDirsABC.ensure_exists>`."]}], "exports": [{"name": "setuptools._vendor.platformdirs.unix.Unix", "xref": {"fqname": "setuptools._vendor.platformdirs.unix.Unix", "project": null}}]}, {"name": "setuptools._vendor.platformdirs.macos", "documentation": ["macOS."], "functions": [], "variables": [], "classes": [{"name": "setuptools._vendor.platformdirs.macos.MacOS", "bases": ["PlatformDirsABC"], "methods": [{"name": "setuptools._vendor.platformdirs.macos.MacOS.user_data_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: data directory tied to the user, e.g. `~/Library/Application Support/$appname/$version`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.macos.MacOS.site_data_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: |-\n  data directory shared by users, e.g. `/Library/Application Support/$appname/$version`.\n  If we're using a Python binary managed by [Homebrew](https://brew.sh), the directory\n  will be under the Homebrew prefix, e.g. `/opt/homebrew/share/$appname/$version`.\n  If `multipath <platformdirs.api.PlatformDirsABC.multipath>` is enabled, and we're in Homebrew,\n  the response is a multi-path string separated by \":\", e.g.\n  `/opt/homebrew/share/$appname/$version:/Library/Application Support/$appname/$version`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.macos.MacOS.user_config_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: config directory tied to the user, same as `user_data_dir`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.macos.MacOS.site_config_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: config directory shared by the users, same as `site_data_dir`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.macos.MacOS.user_cache_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: cache directory tied to the user, e.g. `~/Library/Caches/$appname/$version`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.macos.MacOS.site_cache_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: |-\n  cache directory shared by users, e.g. `/Library/Caches/$appname/$version`.\n  If we're using a Python binary managed by [Homebrew](https://brew.sh), the directory\n  will be under the Homebrew prefix, e.g. `/opt/homebrew/var/cache/$appname/$version`.\n  If `multipath <platformdirs.api.PlatformDirsABC.multipath>` is enabled, and we're in Homebrew,\n  the response is a multi-path string separated by \":\", e.g.\n  `/opt/homebrew/var/cache/$appname/$version:/Library/Caches/$appname/$version`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.macos.MacOS.user_state_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: state directory tied to the user, same as `user_data_dir`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.macos.MacOS.user_log_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: log directory tied to the user, e.g. `~/Library/Logs/$appname/$version`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.macos.MacOS.user_documents_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: documents directory tied to the user, e.g. `~/Documents`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.macos.MacOS.user_downloads_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: downloads directory tied to the user, e.g. `~/Downloads`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.macos.MacOS.user_pictures_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: pictures directory tied to the user, e.g. `~/Pictures`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.macos.MacOS.user_videos_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: videos directory tied to the user, e.g. `~/Movies`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.macos.MacOS.user_music_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: music directory tied to the user, e.g. `~/Music`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.macos.MacOS.user_desktop_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: desktop directory tied to the user, e.g. `~/Desktop`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.macos.MacOS.user_runtime_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: runtime directory tied to the user, e.g. `~/Library/Caches/TemporaryItems/$appname/$version`\n---\n"]}, {"name": "setuptools._vendor.platformdirs.macos.MacOS.site_runtime_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["---\nreturn: runtime directory shared by users, same as `user_runtime_dir`\n---\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Platform directories for the macOS operating system.\n\nFollows the guidance from\n`Apple documentation <https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/MacOSXDirectories/MacOSXDirectories.html>`_.\nMakes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`,\n`version <platformdirs.api.PlatformDirsABC.version>`,\n`ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`."]}], "exports": [{"name": "setuptools._vendor.platformdirs.macos.MacOS", "xref": {"fqname": "setuptools._vendor.platformdirs.macos.MacOS", "project": null}}]}, {"name": "setuptools._vendor.jaraco.text.to-dvorak", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.jaraco.text.strip-prefix", "documentation": [], "functions": [{"name": "setuptools._vendor.jaraco.text.strip-prefix.strip_prefix", "asynchronous": false, "params": [], "returns": null, "documentation": ["Strip any common prefix from stdin.\n\n```pycon\n>>> import io, pytest\n>>> getfixture('monkeypatch').setattr('sys.stdin', io.StringIO('abcdef\\nabc123'))\n>>> strip_prefix()\ndef\n123\n```\n"]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.jaraco.context", "documentation": [], "functions": [{"name": "setuptools._vendor.jaraco.context.pushd", "asynchronous": false, "params": [{"name": "dir", "type": {"name": "str | os.PathLike", "xref": null, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str | os.PathLike", "xref": null, "params": null}]}, "documentation": ["```pycon\n>>> tmp_path = getfixture('tmp_path')\n>>> with pushd(tmp_path):\n...     assert os.getcwd() == os.fspath(tmp_path)\n>>> assert os.getcwd() != os.fspath(tmp_path)\n```\n"]}, {"name": "setuptools._vendor.jaraco.context.tarball", "asynchronous": false, "params": [{"name": "url", "type": null, "default": null}, {"name": "target_dir", "type": {"name": "str | os.PathLike | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "typing.Iterator", "project": "--std--"}, "params": [{"name": "str | os.PathLike", "xref": null, "params": null}]}, "documentation": ["Get a tarball, extract it, yield, then clean up.\n\n```pycon\n>>> import urllib.request\n>>> url = getfixture('tarfile_served')\n>>> target = getfixture('tmp_path') / 'out'\n>>> tb = tarball(url, target_dir=target)\n>>> import pathlib\n>>> with tb as extracted:\n...     contents = pathlib.Path(extracted, 'contents.txt').read_text(encoding='utf-8')\n>>> assert not os.path.exists(extracted)\n```\n"]}, {"name": "setuptools._vendor.jaraco.context.strip_first_component", "asynchronous": false, "params": [{"name": "member", "type": {"name": "tarfile.TarInfo", "xref": {"fqname": "backports.tarfile.TarInfo", "project": null}, "params": null}, "default": null}, {"name": "path", "type": null, "default": null}], "returns": {"name": "tarfile.TarInfo", "xref": {"fqname": "backports.tarfile.TarInfo", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.jaraco.context._compose", "asynchronous": false, "params": [{"name": "*cmgrs", "type": null, "default": null}], "returns": null, "documentation": ["Compose any number of dependent context managers into a single one.\n\nThe last, innermost context manager may take arbitrary arguments, but\neach successive context manager should accept the result from the\nprevious as a single parameter.\n\nLike {func}`jaraco.functools.compose`, behavior works from right to\nleft, so the context manager should be indicated from outermost to\ninnermost.\n\nExample, to create a context manager to change to a temporary\ndirectory:\n\n```pycon\n>>> temp_dir_as_cwd = _compose(pushd, temp_dir)\n>>> with temp_dir_as_cwd() as dir:\n...     assert os.path.samefile(os.getcwd(), dir)\n```\n"]}, {"name": "setuptools._vendor.jaraco.context.tarball_context", "asynchronous": false, "params": [{"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.context.infer_compression", "asynchronous": false, "params": [{"name": "url", "type": null, "default": null}], "returns": null, "documentation": ["Given a URL or filename, infer the compression code for tar.\n\n```pycon\n>>> infer_compression('http://foo/bar.tar.gz')\n'z'\n>>> infer_compression('http://foo/bar.tgz')\n'z'\n>>> infer_compression('file.bz')\n'j'\n>>> infer_compression('file.xz')\n'J'\n```\n"]}, {"name": "setuptools._vendor.jaraco.context.temp_dir", "asynchronous": false, "params": [{"name": "remover", "type": null, "default": "..."}], "returns": null, "documentation": ["Create a temporary directory context. Pass a custom remover\nto override the removal behavior.\n\n```pycon\n>>> import pathlib\n>>> with temp_dir() as the_dir:\n...     assert os.path.isdir(the_dir)\n...     _ = pathlib.Path(the_dir).joinpath('somefile').write_text('contents', encoding='utf-8')\n>>> assert not os.path.exists(the_dir)\n```\n"]}, {"name": "setuptools._vendor.jaraco.context.repo_context", "asynchronous": false, "params": [{"name": "url", "type": null, "default": null}, {"name": "branch", "type": null, "default": "..."}, {"name": "quiet", "type": null, "default": "..."}, {"name": "dest_ctx", "type": null, "default": "..."}], "returns": null, "documentation": ["Check out the repo indicated by url.\n\nIf dest_ctx is supplied, it should be a context manager\nto yield the target directory for the check out."]}, {"name": "setuptools._vendor.jaraco.context.null", "asynchronous": false, "params": [], "returns": null, "documentation": ["A null context suitable to stand in for a meaningful context.\n\n```pycon\n>>> with null() as value:\n...     assert value is None\n```\n\nThis context is most useful when dealing with two or more code\nbranches but only some need a context. Wrap the others in a null\ncontext to provide symmetry across all options.\n"]}], "variables": [{"name": "setuptools._vendor.jaraco.context.tarball_cwd", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.jaraco.context.ExceptionTrap", "bases": [], "methods": [{"name": "setuptools._vendor.jaraco.context.ExceptionTrap.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "exceptions", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.context.ExceptionTrap.__enter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.context.ExceptionTrap.type", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.context.ExceptionTrap.value", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.context.ExceptionTrap.tb", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.context.ExceptionTrap.__exit__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*exc_info", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.context.ExceptionTrap.__bool__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.context.ExceptionTrap.raises", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "func", "type": null, "default": null}, {"name": "_test", "type": null, "default": "..."}], "returns": null, "documentation": ["Wrap func and replace the result with the truth\nvalue of the trap (True if an exception occurred).\n\nFirst, give the decorator an alias to support Python 3.8\nSyntax.\n\n```pycon\n>>> raises = ExceptionTrap(ValueError).raises\n```\n\nNow decorate a function that always fails.\n\n```pycon\n>>> @raises\n... def fail():\n...     raise ValueError('failed')\n>>> fail()\nTrue\n```\n"]}, {"name": "setuptools._vendor.jaraco.context.ExceptionTrap.passes", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "func", "type": null, "default": null}], "returns": null, "documentation": ["Wrap func and replace the result with the truth\nvalue of the trap (True if no exception).\n\nFirst, give the decorator an alias to support Python 3.8\nSyntax.\n\n```pycon\n>>> passes = ExceptionTrap(ValueError).passes\n```\n\nNow decorate a function that always fails.\n\n```pycon\n>>> @passes\n... def fail():\n...     raise ValueError('failed')\n```\n\n```pycon\n>>> fail()\nFalse\n```\n"]}], "class_variables": [{"name": "setuptools._vendor.jaraco.context.ExceptionTrap.exc_info", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A context manager that will catch certain exceptions and provide an\nindication they occurred.\n\n```pycon\n>>> with ExceptionTrap() as trap:\n...     raise Exception()\n>>> bool(trap)\nTrue\n```\n\n```pycon\n>>> with ExceptionTrap() as trap:\n...     pass\n>>> bool(trap)\nFalse\n```\n\n```pycon\n>>> with ExceptionTrap(ValueError) as trap:\n...     raise ValueError(\"1 + 1 is not 3\")\n>>> bool(trap)\nTrue\n>>> trap.value\nValueError('1 + 1 is not 3')\n>>> trap.tb\n<traceback object at ...>\n```\n\n```pycon\n>>> with ExceptionTrap(ValueError) as trap:\n...     raise Exception()\nTraceback (most recent call last):\n...\nException\n```\n\n```pycon\n>>> bool(trap)\nFalse\n```\n"]}, {"name": "setuptools._vendor.jaraco.context.suppress", "bases": ["contextlib.suppress", "contextlib.ContextDecorator"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A version of contextlib.suppress with decorator support.\n\n```pycon\n>>> @suppress(KeyError)\n... def key_error():\n...     {}['']\n>>> key_error()\n```\n"]}, {"name": "setuptools._vendor.jaraco.context.on_interrupt", "bases": ["contextlib.ContextDecorator"], "methods": [{"name": "setuptools._vendor.jaraco.context.on_interrupt.__init__", "asynchronous": false, "params": [{"name": "code", "type": null, "default": "..."}, {"name": "self", "type": null, "default": null}, {"name": "action", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.context.on_interrupt.__enter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.context.on_interrupt.__exit__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "exctype", "type": null, "default": null}, {"name": "excinst", "type": null, "default": null}, {"name": "exctb", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Replace a KeyboardInterrupt with SystemExit(1)\n\n```pycon\n>>> def do_interrupt():\n...     raise KeyboardInterrupt()\n>>> on_interrupt('error')(do_interrupt)()\nTraceback (most recent call last):\n...\nSystemExit: 1\n>>> on_interrupt('error', code=255)(do_interrupt)()\nTraceback (most recent call last):\n...\nSystemExit: 255\n>>> on_interrupt('suppress')(do_interrupt)()\n>>> with __import__('pytest').raises(KeyboardInterrupt):\n...     on_interrupt('ignore')(do_interrupt)()\n```\n"]}], "exports": []}, {"name": "setuptools._vendor.jaraco.text.show-newlines", "documentation": [], "functions": [{"name": "setuptools._vendor.jaraco.text.show-newlines.report_newlines", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}], "returns": null, "documentation": ["Report the newlines in the indicated file.\n\n```pycon\n>>> tmp_path = getfixture('tmp_path')\n>>> filename = tmp_path / 'out.txt'\n>>> _ = filename.write_text('foo\\nbar\\n', newline='', encoding='utf-8')\n>>> report_newlines(filename)\nnewline is '\\n'\n>>> filename = tmp_path / 'out.txt'\n>>> _ = filename.write_text('foo\\nbar\\r\\n', newline='', encoding='utf-8')\n>>> report_newlines(filename)\nnewlines are ('\\n', '\\r\\n')\n```\n"]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.jaraco.text.layouts", "documentation": [], "functions": [{"name": "setuptools._vendor.jaraco.text.layouts.translate", "asynchronous": false, "params": [{"name": "input", "type": null, "default": null}, {"name": "translation", "type": null, "default": null}], "returns": null, "documentation": ["```pycon\n>>> translate('dvorak', to_dvorak)\n'ekrpat'\n>>> translate('qwerty', to_qwerty)\n'x,dokt'\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.layouts._translate_stream", "asynchronous": false, "params": [{"name": "stream", "type": null, "default": null}, {"name": "translation", "type": null, "default": null}], "returns": null, "documentation": ["```pycon\n>>> import io\n>>> _translate_stream(io.StringIO('foo'), to_dvorak)\nurr\n```\n"]}], "variables": [{"name": "setuptools._vendor.jaraco.text.layouts.qwerty", "type": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.layouts.dvorak", "type": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.layouts.to_dvorak", "type": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.layouts.to_qwerty", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._vendor.backports.tarfile", "documentation": ["Read from and write to tar format archives.", "-------------------------------------------------------------------", "tarfile.py", "-------------------------------------------------------------------", "Copyright (C) 2002 Lars Gustaebel <lars@gustaebel.de>", "All rights reserved.", "Permission  is  hereby granted,  free  of charge,  to  any person", "obtaining a  copy of  this software  and associated documentation", "files  (the  \"Software\"),  to   deal  in  the  Software   without", "restriction,  including  without limitation  the  rights to  use,", "copy, modify, merge, publish, distribute, sublicense, and/or sell", "copies  of  the  Software,  and to  permit  persons  to  whom the", "Software  is  furnished  to  do  so,  subject  to  the  following", "conditions:", "The above copyright  notice and this  permission notice shall  be", "included in all copies or substantial portions of the Software.", "THE SOFTWARE IS PROVIDED \"AS  IS\", WITHOUT WARRANTY OF ANY  KIND,", "EXPRESS OR IMPLIED, INCLUDING  BUT NOT LIMITED TO  THE WARRANTIES", "OF  MERCHANTABILITY,  FITNESS   FOR  A  PARTICULAR   PURPOSE  AND", "NONINFRINGEMENT.  IN  NO  EVENT SHALL  THE  AUTHORS  OR COPYRIGHT", "HOLDERS  BE LIABLE  FOR ANY  CLAIM, DAMAGES  OR OTHER  LIABILITY,", "WHETHER  IN AN  ACTION OF  CONTRACT, TORT  OR OTHERWISE,  ARISING", "FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR", "OTHER DEALINGS IN THE SOFTWARE."], "functions": [{"name": "setuptools._vendor.backports.tarfile.stn", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}, {"name": "length", "type": null, "default": null}, {"name": "encoding", "type": null, "default": null}, {"name": "errors", "type": null, "default": null}], "returns": null, "documentation": ["Convert a string to a null-terminated bytes object.\n    ", "---------------------------------------------------------", "Some useful functions", "---------------------------------------------------------"]}, {"name": "setuptools._vendor.backports.tarfile.nts", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}, {"name": "encoding", "type": null, "default": null}, {"name": "errors", "type": null, "default": null}], "returns": null, "documentation": ["Convert a null-terminated bytes object to a string.\n    "]}, {"name": "setuptools._vendor.backports.tarfile.nti", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}], "returns": null, "documentation": ["Convert a number field to a python number.\n    "]}, {"name": "setuptools._vendor.backports.tarfile.itn", "asynchronous": false, "params": [{"name": "n", "type": null, "default": null}, {"name": "digits", "type": null, "default": "..."}, {"name": "format", "type": null, "default": "..."}], "returns": null, "documentation": ["Convert a python number to a number field.\n    "]}, {"name": "setuptools._vendor.backports.tarfile.calc_chksums", "asynchronous": false, "params": [{"name": "buf", "type": null, "default": null}], "returns": null, "documentation": ["Calculate the checksum for a member's header by summing up all\ncharacters except for the chksum field which is treated as if\nit was filled with spaces. According to the GNU tar sources,\nsome tars (Sun and NeXT) calculate chksum with signed char,\nwhich will be different if there are chars in the buffer with\nthe high bit set. So we calculate two checksums, unsigned and\nsigned."]}, {"name": "setuptools._vendor.backports.tarfile.copyfileobj", "asynchronous": false, "params": [{"name": "src", "type": null, "default": null}, {"name": "dst", "type": null, "default": null}, {"name": "length", "type": null, "default": "..."}, {"name": "exception", "type": null, "default": "..."}, {"name": "bufsize", "type": null, "default": "..."}], "returns": null, "documentation": ["Copy length bytes from fileobj src to fileobj dst.\nIf length is None, copy the entire content."]}, {"name": "setuptools._vendor.backports.tarfile._safe_print", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile._get_filtered_attrs", "asynchronous": false, "params": [{"name": "member", "type": null, "default": null}, {"name": "dest_path", "type": null, "default": null}, {"name": "for_data", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.fully_trusted_filter", "asynchronous": false, "params": [{"name": "member", "type": null, "default": null}, {"name": "dest_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.tar_filter", "asynchronous": false, "params": [{"name": "member", "type": null, "default": null}, {"name": "dest_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.data_filter", "asynchronous": false, "params": [{"name": "member", "type": null, "default": null}, {"name": "dest_path", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.is_tarfile", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Return True if name points to a tar archive that we\nare able to handle, else return False.\n\n'name' should be a string, file, or file-like object.", "--------------------", "exported functions", "--------------------"]}, {"name": "setuptools._vendor.backports.tarfile.main", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [{"name": "setuptools._vendor.backports.tarfile.version", "type": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.__author__", "type": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.__credits__", "type": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.pwd", "type": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.grp", "type": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.symlink_exception", "type": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.NUL", "type": null, "documentation": ["the null character"]}, {"name": "setuptools._vendor.backports.tarfile.BLOCKSIZE", "type": null, "documentation": ["length of processing blocks"]}, {"name": "setuptools._vendor.backports.tarfile.RECORDSIZE", "type": null, "documentation": ["length of records"]}, {"name": "setuptools._vendor.backports.tarfile.GNU_MAGIC", "type": null, "documentation": ["magic gnu tar string"]}, {"name": "setuptools._vendor.backports.tarfile.POSIX_MAGIC", "type": null, "documentation": ["magic posix tar string"]}, {"name": "setuptools._vendor.backports.tarfile.LENGTH_NAME", "type": null, "documentation": ["maximum length of a filename"]}, {"name": "setuptools._vendor.backports.tarfile.LENGTH_LINK", "type": null, "documentation": ["maximum length of a linkname"]}, {"name": "setuptools._vendor.backports.tarfile.LENGTH_PREFIX", "type": null, "documentation": ["maximum length of the prefix field"]}, {"name": "setuptools._vendor.backports.tarfile.REGTYPE", "type": null, "documentation": ["regular file"]}, {"name": "setuptools._vendor.backports.tarfile.AREGTYPE", "type": null, "documentation": ["regular file"]}, {"name": "setuptools._vendor.backports.tarfile.LNKTYPE", "type": null, "documentation": ["link (inside tarfile)"]}, {"name": "setuptools._vendor.backports.tarfile.SYMTYPE", "type": null, "documentation": ["symbolic link"]}, {"name": "setuptools._vendor.backports.tarfile.CHRTYPE", "type": null, "documentation": ["character special device"]}, {"name": "setuptools._vendor.backports.tarfile.BLKTYPE", "type": null, "documentation": ["block special device"]}, {"name": "setuptools._vendor.backports.tarfile.DIRTYPE", "type": null, "documentation": ["directory"]}, {"name": "setuptools._vendor.backports.tarfile.FIFOTYPE", "type": null, "documentation": ["fifo special device"]}, {"name": "setuptools._vendor.backports.tarfile.CONTTYPE", "type": null, "documentation": ["contiguous file"]}, {"name": "setuptools._vendor.backports.tarfile.GNUTYPE_LONGNAME", "type": null, "documentation": ["GNU tar longname"]}, {"name": "setuptools._vendor.backports.tarfile.GNUTYPE_LONGLINK", "type": null, "documentation": ["GNU tar longlink"]}, {"name": "setuptools._vendor.backports.tarfile.GNUTYPE_SPARSE", "type": null, "documentation": ["GNU tar sparse file"]}, {"name": "setuptools._vendor.backports.tarfile.XHDTYPE", "type": null, "documentation": ["POSIX.1-2001 extended header"]}, {"name": "setuptools._vendor.backports.tarfile.XGLTYPE", "type": null, "documentation": ["POSIX.1-2001 global header"]}, {"name": "setuptools._vendor.backports.tarfile.SOLARIS_XHDTYPE", "type": null, "documentation": ["Solaris extended header"]}, {"name": "setuptools._vendor.backports.tarfile.USTAR_FORMAT", "type": null, "documentation": ["POSIX.1-1988 (ustar) format"]}, {"name": "setuptools._vendor.backports.tarfile.GNU_FORMAT", "type": null, "documentation": ["GNU tar format"]}, {"name": "setuptools._vendor.backports.tarfile.PAX_FORMAT", "type": null, "documentation": ["POSIX.1-2001 (pax) format"]}, {"name": "setuptools._vendor.backports.tarfile.DEFAULT_FORMAT", "type": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.SUPPORTED_TYPES", "type": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.REGULAR_TYPES", "type": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.GNU_TYPES", "type": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.PAX_FIELDS", "type": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.PAX_NAME_FIELDS", "type": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.PAX_NUMBER_FIELDS", "type": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.ENCODING", "type": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.ENCODING", "type": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile._NAMED_FILTERS", "type": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile._KEEP", "type": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.open", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.backports.tarfile.TarError", "bases": ["Exception"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Base exception."]}, {"name": "setuptools._vendor.backports.tarfile.ExtractError", "bases": ["TarError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["General exception for extract errors."]}, {"name": "setuptools._vendor.backports.tarfile.ReadError", "bases": ["TarError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Exception for unreadable tar archives."]}, {"name": "setuptools._vendor.backports.tarfile.CompressionError", "bases": ["TarError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Exception for unavailable compression methods."]}, {"name": "setuptools._vendor.backports.tarfile.StreamError", "bases": ["TarError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Exception for unsupported operations on stream-like TarFiles."]}, {"name": "setuptools._vendor.backports.tarfile.HeaderError", "bases": ["TarError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Base exception for header errors."]}, {"name": "setuptools._vendor.backports.tarfile.EmptyHeaderError", "bases": ["HeaderError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Exception for empty headers."]}, {"name": "setuptools._vendor.backports.tarfile.TruncatedHeaderError", "bases": ["HeaderError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Exception for truncated headers."]}, {"name": "setuptools._vendor.backports.tarfile.EOFHeaderError", "bases": ["HeaderError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Exception for end of file headers."]}, {"name": "setuptools._vendor.backports.tarfile.InvalidHeaderError", "bases": ["HeaderError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Exception for invalid headers."]}, {"name": "setuptools._vendor.backports.tarfile.SubsequentHeaderError", "bases": ["HeaderError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Exception for missing and invalid extended headers."]}, {"name": "setuptools._vendor.backports.tarfile._LowLevelFile", "bases": [], "methods": [{"name": "setuptools._vendor.backports.tarfile._LowLevelFile.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "mode", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile._LowLevelFile.close", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile._LowLevelFile.read", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "size", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile._LowLevelFile.write", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "s", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Low-level file object. Supports reading and writing.\nIt is used instead of a regular file object for streaming\naccess.", "---------------------------", "internal stream interface", "---------------------------"]}, {"name": "setuptools._vendor.backports.tarfile._Stream", "bases": [], "methods": [{"name": "setuptools._vendor.backports.tarfile._Stream.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "mode", "type": null, "default": null}, {"name": "comptype", "type": null, "default": null}, {"name": "fileobj", "type": null, "default": null}, {"name": "bufsize", "type": null, "default": null}, {"name": "compresslevel", "type": null, "default": null}], "returns": null, "documentation": ["Construct a _Stream object.\n        "]}, {"name": "setuptools._vendor.backports.tarfile._Stream.__del__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile._Stream._init_write_gz", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "compresslevel", "type": null, "default": null}], "returns": null, "documentation": ["Initialize for writing with gzip compression.\n        "]}, {"name": "setuptools._vendor.backports.tarfile._Stream.write", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "s", "type": null, "default": null}], "returns": null, "documentation": ["Write string s to the stream.\n        "]}, {"name": "setuptools._vendor.backports.tarfile._Stream.__write", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "s", "type": null, "default": null}], "returns": null, "documentation": ["Write string s to the stream if a whole new block\nis ready to be written."]}, {"name": "setuptools._vendor.backports.tarfile._Stream.close", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Close the _Stream object. No operation should be\ndone on it afterwards."]}, {"name": "setuptools._vendor.backports.tarfile._Stream._init_read_gz", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Initialize for reading a gzip compressed fileobj.\n        "]}, {"name": "setuptools._vendor.backports.tarfile._Stream.tell", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return the stream's file pointer position.\n        "]}, {"name": "setuptools._vendor.backports.tarfile._Stream.seek", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pos", "type": null, "default": "..."}], "returns": null, "documentation": ["Set the stream's file pointer to pos. Negative seeking\nis forbidden."]}, {"name": "setuptools._vendor.backports.tarfile._Stream.read", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "size", "type": null, "default": null}], "returns": null, "documentation": ["Return the next size number of bytes from the stream."]}, {"name": "setuptools._vendor.backports.tarfile._Stream._read", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "size", "type": null, "default": null}], "returns": null, "documentation": ["Return size bytes from the stream.\n        "]}, {"name": "setuptools._vendor.backports.tarfile._Stream.__read", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "size", "type": null, "default": null}], "returns": null, "documentation": ["Return size bytes from stream. If internal buffer is empty,\nread another block from the stream."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Class that serves as an adapter between TarFile and\na stream-like object.  The stream-like object only\nneeds to have a read() or write() method that works with bytes,\nand the method is accessed blockwise.\nUse of gzip or bzip2 compression is possible.\nA stream-like object could be for example: sys.stdin.buffer,\nsys.stdout.buffer, a socket, a tape device etc.\n\n_Stream is intended to be used only internally."]}, {"name": "setuptools._vendor.backports.tarfile._StreamProxy", "bases": ["object"], "methods": [{"name": "setuptools._vendor.backports.tarfile._StreamProxy.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "fileobj", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile._StreamProxy.read", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "size", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile._StreamProxy.getcomptype", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile._StreamProxy.close", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Small proxy class that enables transparent compression\ndetection for the Stream interface (mode 'r|*').", "class _Stream"]}, {"name": "setuptools._vendor.backports.tarfile._FileInFile", "bases": ["object"], "methods": [{"name": "setuptools._vendor.backports.tarfile._FileInFile.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "fileobj", "type": null, "default": null}, {"name": "offset", "type": null, "default": null}, {"name": "size", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "blockinfo", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile._FileInFile.flush", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile._FileInFile.mode", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile._FileInFile.readable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile._FileInFile.writable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile._FileInFile.seekable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile._FileInFile.tell", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return the current file position.\n        "]}, {"name": "setuptools._vendor.backports.tarfile._FileInFile.seek", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "position", "type": null, "default": null}, {"name": "whence", "type": null, "default": "..."}], "returns": null, "documentation": ["Seek to a position in the file.\n        "]}, {"name": "setuptools._vendor.backports.tarfile._FileInFile.read", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "size", "type": null, "default": "..."}], "returns": null, "documentation": ["Read data from the file.\n        "]}, {"name": "setuptools._vendor.backports.tarfile._FileInFile.readinto", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "b", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile._FileInFile.close", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A thin wrapper around an existing file object that\nprovides a part of its data as an individual file\nobject.", "class StreamProxy", "------------------------", "Extraction file object", "------------------------"]}, {"name": "setuptools._vendor.backports.tarfile.ExFileObject", "bases": ["io.BufferedReader"], "methods": [{"name": "setuptools._vendor.backports.tarfile.ExFileObject.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarfile", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["class _FileInFile"]}, {"name": "setuptools._vendor.backports.tarfile.FilterError", "bases": ["TarError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["class ExFileObject", "-----------------------------", "extraction filters (PEP 706)", "-----------------------------"]}, {"name": "setuptools._vendor.backports.tarfile.AbsolutePathError", "bases": ["FilterError"], "methods": [{"name": "setuptools._vendor.backports.tarfile.AbsolutePathError.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.OutsideDestinationError", "bases": ["FilterError"], "methods": [{"name": "setuptools._vendor.backports.tarfile.OutsideDestinationError.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.SpecialFileError", "bases": ["FilterError"], "methods": [{"name": "setuptools._vendor.backports.tarfile.SpecialFileError.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.AbsoluteLinkError", "bases": ["FilterError"], "methods": [{"name": "setuptools._vendor.backports.tarfile.AbsoluteLinkError.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.LinkOutsideDestinationError", "bases": ["FilterError"], "methods": [{"name": "setuptools._vendor.backports.tarfile.LinkOutsideDestinationError.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarInfo", "bases": ["object"], "methods": [{"name": "setuptools._vendor.backports.tarfile.TarInfo.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": "..."}], "returns": null, "documentation": ["Construct a TarInfo object. name is the optional name\nof the member."]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.tarfile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.tarfile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarfile", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.path", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.linkpath", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.linkpath", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "linkname", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.replace", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": "..."}, {"name": "mtime", "type": null, "default": "..."}, {"name": "mode", "type": null, "default": "..."}, {"name": "linkname", "type": null, "default": "..."}, {"name": "uid", "type": null, "default": "..."}, {"name": "gid", "type": null, "default": "..."}, {"name": "uname", "type": null, "default": "..."}, {"name": "gname", "type": null, "default": "..."}, {"name": "deep", "type": null, "default": "..."}, {"name": "_KEEP", "type": null, "default": "..."}], "returns": null, "documentation": ["Return a deep copy of self with the given attributes replaced.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.get_info", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return the TarInfo's attributes as a dictionary.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.tobuf", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "format", "type": null, "default": "..."}, {"name": "encoding", "type": null, "default": "..."}, {"name": "errors", "type": null, "default": "..."}], "returns": null, "documentation": ["Return a tar header as a string of 512 byte blocks.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.create_ustar_header", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "info", "type": null, "default": null}, {"name": "encoding", "type": null, "default": null}, {"name": "errors", "type": null, "default": null}], "returns": null, "documentation": ["Return the object as a ustar header block.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.create_gnu_header", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "info", "type": null, "default": null}, {"name": "encoding", "type": null, "default": null}, {"name": "errors", "type": null, "default": null}], "returns": null, "documentation": ["Return the object as a GNU header block sequence.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.create_pax_header", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "info", "type": null, "default": null}, {"name": "encoding", "type": null, "default": null}], "returns": null, "documentation": ["Return the object as a ustar header block. If it cannot be\nrepresented this way, prepend a pax extended header sequence\nwith supplement information."]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.create_pax_global_header", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "pax_headers", "type": null, "default": null}], "returns": null, "documentation": ["Return the object as a pax global header block sequence.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo._posix_split_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "encoding", "type": null, "default": null}, {"name": "errors", "type": null, "default": null}], "returns": null, "documentation": ["Split a name longer than 100 chars into a prefix\nand a name part."]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo._create_header", "asynchronous": false, "params": [{"name": "info", "type": null, "default": null}, {"name": "format", "type": null, "default": null}, {"name": "encoding", "type": null, "default": null}, {"name": "errors", "type": null, "default": null}], "returns": null, "documentation": ["Return a header block. info is a dictionary with file\ninformation, format must be one of the *_FORMAT constants."]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo._create_payload", "asynchronous": false, "params": [{"name": "payload", "type": null, "default": null}], "returns": null, "documentation": ["Return the string payload filled with zero bytes\nup to the next 512 byte border."]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo._create_gnu_long_header", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "type", "type": null, "default": null}, {"name": "encoding", "type": null, "default": null}, {"name": "errors", "type": null, "default": null}], "returns": null, "documentation": ["Return a GNUTYPE_LONGNAME or GNUTYPE_LONGLINK sequence\nfor name."]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo._create_pax_generic_header", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "pax_headers", "type": null, "default": null}, {"name": "type", "type": null, "default": null}, {"name": "encoding", "type": null, "default": null}], "returns": null, "documentation": ["Return a POSIX.1-2008 extended or global header sequence\nthat contains a list of keyword, value pairs. The values\nmust be strings."]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.frombuf", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "buf", "type": null, "default": null}, {"name": "encoding", "type": null, "default": null}, {"name": "errors", "type": null, "default": null}], "returns": null, "documentation": ["Construct a TarInfo object from a 512 byte bytes object.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.fromtarfile", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "tarfile", "type": null, "default": null}], "returns": null, "documentation": ["Return the next TarInfo object from TarFile object\ntarfile."]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo._proc_member", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarfile", "type": null, "default": null}], "returns": null, "documentation": ["Choose the right processing method depending on\nthe type and call it.", "--------------------------------------------------------------------------", "The following are methods that are called depending on the type of a", "member. The entry point is _proc_member() which can be overridden in a", "subclass to add custom _proc_*() methods. A _proc_*() method MUST", "implement the following", "operations:", "1. Set self.offset_data to the position where the data blocks begin,", "if there is data that follows.", "2. Set tarfile.offset to the position where the next member's header will", "begin.", "3. Return self or another valid TarInfo object."]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo._proc_builtin", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarfile", "type": null, "default": null}], "returns": null, "documentation": ["Process a builtin type or an unknown type which\nwill be treated as a regular file."]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo._proc_gnulong", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarfile", "type": null, "default": null}], "returns": null, "documentation": ["Process the blocks that hold a GNU longname\nor longlink member."]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo._proc_sparse", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarfile", "type": null, "default": null}], "returns": null, "documentation": ["Process a GNU sparse header plus extra headers.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo._proc_pax", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarfile", "type": null, "default": null}], "returns": null, "documentation": ["Process an extended or global header as described in\nPOSIX.1-2008."]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo._proc_gnusparse_00", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "next", "type": null, "default": null}, {"name": "pax_headers", "type": null, "default": null}, {"name": "buf", "type": null, "default": null}], "returns": null, "documentation": ["Process a GNU tar extended sparse header, version 0.0.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo._proc_gnusparse_01", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "next", "type": null, "default": null}, {"name": "pax_headers", "type": null, "default": null}], "returns": null, "documentation": ["Process a GNU tar extended sparse header, version 0.1.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo._proc_gnusparse_10", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "next", "type": null, "default": null}, {"name": "pax_headers", "type": null, "default": null}, {"name": "tarfile", "type": null, "default": null}], "returns": null, "documentation": ["Process a GNU tar extended sparse header, version 1.0.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo._apply_pax_info", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pax_headers", "type": null, "default": null}, {"name": "encoding", "type": null, "default": null}, {"name": "errors", "type": null, "default": null}], "returns": null, "documentation": ["Replace fields with supplemental information from a previous\npax extended or global header."]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo._decode_pax_field", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "value", "type": null, "default": null}, {"name": "encoding", "type": null, "default": null}, {"name": "fallback_encoding", "type": null, "default": null}, {"name": "fallback_errors", "type": null, "default": null}], "returns": null, "documentation": ["Decode a single field from a pax record.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo._block", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "count", "type": null, "default": null}], "returns": null, "documentation": ["Round up a byte count by BLOCKSIZE and return it,\ne.g. _block(834) => 1024."]}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.isreg", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.isfile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.isdir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.issym", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.islnk", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.ischr", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.isblk", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.isfifo", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.issparse", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarInfo.isdev", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.backports.tarfile.TarInfo.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Informational class which holds the details about an\narchive member given by a tar header block.\nTarInfo objects are returned by TarFile.getmember(),\nTarFile.getmembers() and TarFile.gettarinfo() and are\nusually created internally."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile", "bases": ["object"], "methods": [{"name": "setuptools._vendor.backports.tarfile.TarFile.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": "..."}, {"name": "mode", "type": null, "default": "..."}, {"name": "fileobj", "type": null, "default": "..."}, {"name": "format", "type": null, "default": "..."}, {"name": "tarinfo", "type": null, "default": "..."}, {"name": "dereference", "type": null, "default": "..."}, {"name": "ignore_zeros", "type": null, "default": "..."}, {"name": "encoding", "type": null, "default": "..."}, {"name": "errors", "type": null, "default": "..."}, {"name": "pax_headers", "type": null, "default": "..."}, {"name": "debug", "type": null, "default": "..."}, {"name": "errorlevel", "type": null, "default": "..."}, {"name": "copybufsize", "type": null, "default": "..."}, {"name": "stream", "type": null, "default": "..."}], "returns": null, "documentation": ["Open an (uncompressed) tar archive 'name'. 'mode' is either 'r' to\nread from an existing archive, 'a' to append data to an existing\nfile or 'w' to create a new file overwriting an existing one. 'mode'\ndefaults to 'r'.\nIf 'fileobj' is given, it is used for reading or writing data. If it\ncan be determined, 'mode' is overridden by 'fileobj's mode.\n'fileobj' is not closed, when TarFile is closed."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.open", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "name", "type": null, "default": "..."}, {"name": "mode", "type": null, "default": "..."}, {"name": "fileobj", "type": null, "default": "..."}, {"name": "bufsize", "type": null, "default": "..."}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["Open a tar archive for reading, writing or appending. Return\nan appropriate TarFile class.\n\nmode:\n'r' or 'r:\\*' open for reading with transparent compression\n'r:'         open for reading exclusively uncompressed\n'r:gz'       open for reading with gzip compression\n'r:bz2'      open for reading with bzip2 compression\n'r:xz'       open for reading with lzma compression\n'a' or 'a:'  open for appending, creating the file if necessary\n'w' or 'w:'  open for writing without compression\n'w:gz'       open for writing with gzip compression\n'w:bz2'      open for writing with bzip2 compression\n'w:xz'       open for writing with lzma compression\n\n'x' or 'x:'  create a tarfile exclusively without compression, raise\n             an exception if the file is already created\n'x:gz'       create a gzip compressed tarfile, raise an exception\n             if the file is already created\n'x:bz2'      create a bzip2 compressed tarfile, raise an exception\n             if the file is already created\n'x:xz'       create an lzma compressed tarfile, raise an exception\n             if the file is already created\n\n'r|\\*'        open a stream of tar blocks with transparent compression\n'r|'         open an uncompressed stream of tar blocks for reading\n'r|gz'       open a gzip compressed stream of tar blocks\n'r|bz2'      open a bzip2 compressed stream of tar blocks\n'r|xz'       open an lzma compressed stream of tar blocks\n'w|'         open an uncompressed stream for writing\n'w|gz'       open a gzip compressed stream for writing\n'w|bz2'      open a bzip2 compressed stream for writing\n'w|xz'       open an lzma compressed stream for writing", "--------------------------------------------------------------------------", "Below are the classmethods which act as alternate constructors to the", "TarFile class. The open() method is the only one that is needed for", "public use; it is the \"super\"-constructor and is able to select an", "adequate \"sub\"-constructor for a particular compression using the mapping", "from OPEN_METH.", "This concept allows one to subclass TarFile without losing the comfort of", "the super-constructor. A sub-constructor is registered and made available", "by adding it to the mapping in OPEN_METH."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.taropen", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "mode", "type": null, "default": "..."}, {"name": "fileobj", "type": null, "default": "..."}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["Open uncompressed tar archive name for reading or writing.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.gzopen", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "mode", "type": null, "default": "..."}, {"name": "fileobj", "type": null, "default": "..."}, {"name": "compresslevel", "type": null, "default": "..."}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["Open gzip compressed tar archive name for reading or writing.\nAppending is not allowed."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.bz2open", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "mode", "type": null, "default": "..."}, {"name": "fileobj", "type": null, "default": "..."}, {"name": "compresslevel", "type": null, "default": "..."}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["Open bzip2 compressed tar archive name for reading or writing.\nAppending is not allowed."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.xzopen", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "mode", "type": null, "default": "..."}, {"name": "fileobj", "type": null, "default": "..."}, {"name": "preset", "type": null, "default": "..."}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["Open lzma compressed tar archive name for reading or writing.\nAppending is not allowed."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.close", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Close the TarFile. In write-mode, two finishing zero blocks are\nappended to the archive.", "--------------------------------------------------------------------------", "The public methods which TarFile provides:"]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.getmember", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Return a TarInfo object for member 'name'. If 'name' can not be\nfound in the archive, KeyError is raised. If a member occurs more\nthan once in the archive, its last occurrence is assumed to be the\nmost up-to-date version."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.getmembers", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return the members of the archive as a list of TarInfo objects. The\nlist has the same order as the members in the archive."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.getnames", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return the members of the archive as a list of their names. It has\nthe same order as the list returned by getmembers()."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.gettarinfo", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": "..."}, {"name": "arcname", "type": null, "default": "..."}, {"name": "fileobj", "type": null, "default": "..."}], "returns": null, "documentation": ["Create a TarInfo object from the result of os.stat or equivalent\non an existing file. The file is either named by 'name', or\nspecified as a file object 'fileobj' with a file descriptor. If\ngiven, 'arcname' specifies an alternative name for the file in the\narchive, otherwise, the name is taken from the 'name' attribute of\n'fileobj', or the 'name' argument. The name should be a text\nstring."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "verbose", "type": null, "default": "..."}, {"name": "members", "type": null, "default": "..."}], "returns": null, "documentation": ["Print a table of contents to sys.stdout. If 'verbose' is False, only\nthe names of the members are printed. If it is True, an 'ls -l'-like\noutput is produced. 'members' is optional and must be a subset of the\nlist returned by getmembers()."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.add", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "arcname", "type": null, "default": "..."}, {"name": "recursive", "type": null, "default": "..."}, {"name": "filter", "type": null, "default": "..."}], "returns": null, "documentation": ["Add the file 'name' to the archive. 'name' may be any type of file\n(directory, fifo, symbolic link, etc.). If given, 'arcname'\nspecifies an alternative name for the file in the archive.\nDirectories are added recursively by default. This can be avoided by\nsetting 'recursive' to False. 'filter' is a function\nthat expects a TarInfo object argument and returns the changed\nTarInfo object, if it returns None the TarInfo object will be\nexcluded from the archive."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.addfile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}, {"name": "fileobj", "type": null, "default": "..."}], "returns": null, "documentation": ["Add the TarInfo object 'tarinfo' to the archive. If 'tarinfo' represents\na non zero-size regular file, the 'fileobj' argument should be a binary file,\nand tarinfo.size bytes are read from it and added to the archive.\nYou can create TarInfo objects directly, or by using gettarinfo()."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile._get_filter_function", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "filter", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarFile.extractall", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": "..."}, {"name": "members", "type": null, "default": "..."}, {"name": "numeric_owner", "type": null, "default": "..."}, {"name": "filter", "type": null, "default": "..."}], "returns": null, "documentation": ["Extract all members from the archive to the current working\ndirectory and set owner, modification time and permissions on\ndirectories afterwards. 'path' specifies a different directory\nto extract to. 'members' is optional and must be a subset of the\nlist returned by getmembers(). If 'numeric_owner' is True, only\nthe numbers for user/group names are used and not the names.\n\nThe 'filter' function will be called on each member just\nbefore extraction.\nIt can return a changed TarInfo or None to skip the member.\nString names of common filters are accepted."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.extract", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "member", "type": null, "default": null}, {"name": "path", "type": null, "default": "..."}, {"name": "set_attrs", "type": null, "default": "..."}, {"name": "numeric_owner", "type": null, "default": "..."}, {"name": "filter", "type": null, "default": "..."}], "returns": null, "documentation": ["Extract a member from the archive to the current working directory,\nusing its full name. Its file information is extracted as accurately\nas possible. 'member' may be a filename or a TarInfo object. You can\nspecify a different directory using 'path'. File attributes (owner,\nmtime, mode) are set unless 'set_attrs' is False. If 'numeric_owner'\nis True, only the numbers for user/group names are used and not\nthe names.\n\nThe 'filter' function will be called before extraction.\nIt can return a changed TarInfo or None to skip the member.\nString names of common filters are accepted."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile._get_extract_tarinfo", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "member", "type": null, "default": null}, {"name": "filter_function", "type": null, "default": null}, {"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["Get filtered TarInfo (or None) from member, which might be a str"]}, {"name": "setuptools._vendor.backports.tarfile.TarFile._extract_one", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}, {"name": "path", "type": null, "default": null}, {"name": "set_attrs", "type": null, "default": null}, {"name": "numeric_owner", "type": null, "default": null}], "returns": null, "documentation": ["Extract from filtered tarinfo to disk"]}, {"name": "setuptools._vendor.backports.tarfile.TarFile._handle_nonfatal_error", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "e", "type": null, "default": null}], "returns": null, "documentation": ["Handle non-fatal error (ExtractError) according to errorlevel"]}, {"name": "setuptools._vendor.backports.tarfile.TarFile._handle_fatal_error", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "e", "type": null, "default": null}], "returns": null, "documentation": ["Handle \"fatal\" error according to self.errorlevel"]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.extractfile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "member", "type": null, "default": null}], "returns": null, "documentation": ["Extract a member from the archive as a file object. 'member' may be\na filename or a TarInfo object. If 'member' is a regular file or\na link, an io.BufferedReader object is returned. For all other\nexisting members, None is returned. If 'member' does not appear\nin the archive, KeyError is raised."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile._extract_member", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}, {"name": "targetpath", "type": null, "default": null}, {"name": "set_attrs", "type": null, "default": "..."}, {"name": "numeric_owner", "type": null, "default": "..."}], "returns": null, "documentation": ["Extract the TarInfo object tarinfo to a physical\nfile called targetpath."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.makedir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}, {"name": "targetpath", "type": null, "default": null}], "returns": null, "documentation": ["Make a directory called targetpath.\n        ", "--------------------------------------------------------------------------", "Below are the different file methods. They are called via", "_extract_member() when extract() is called. They can be replaced in a", "subclass to implement other functionality."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.makefile", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}, {"name": "targetpath", "type": null, "default": null}], "returns": null, "documentation": ["Make a file called targetpath.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.makeunknown", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}, {"name": "targetpath", "type": null, "default": null}], "returns": null, "documentation": ["Make a file from a TarInfo object with an unknown type\nat targetpath."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.makefifo", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}, {"name": "targetpath", "type": null, "default": null}], "returns": null, "documentation": ["Make a fifo called targetpath.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.makedev", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}, {"name": "targetpath", "type": null, "default": null}], "returns": null, "documentation": ["Make a character or block device called targetpath.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.makelink", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}, {"name": "targetpath", "type": null, "default": null}], "returns": null, "documentation": ["Make a (symbolic) link called targetpath. If it cannot be created\n(platform limitation), we try to make a copy of the referenced file\ninstead of a link."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.chown", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}, {"name": "targetpath", "type": null, "default": null}, {"name": "numeric_owner", "type": null, "default": null}], "returns": null, "documentation": ["Set owner of targetpath according to tarinfo. If numeric_owner\nis True, use .gid/.uid instead of .gname/.uname. If numeric_owner\nis False, fall back to .gid/.uid when the search based on name\nfails."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.chmod", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}, {"name": "targetpath", "type": null, "default": null}], "returns": null, "documentation": ["Set file permissions of targetpath according to tarinfo.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.utime", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}, {"name": "targetpath", "type": null, "default": null}], "returns": null, "documentation": ["Set modification time of targetpath according to tarinfo.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.next", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return the next member of the archive as a TarInfo object, when\nTarFile is opened for reading. Return None if there is no more\navailable.", "--------------------------------------------------------------------------"]}, {"name": "setuptools._vendor.backports.tarfile.TarFile._getmember", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": "..."}, {"name": "normalize", "type": null, "default": "..."}], "returns": null, "documentation": ["Find an archive member by name from bottom to top.\nIf tarinfo is given, it is used as the starting point.", "--------------------------------------------------------------------------", "Little helper methods:"]}, {"name": "setuptools._vendor.backports.tarfile.TarFile._load", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Read through the entire archive file and look for readable\nmembers. This should not run if the file is set to stream."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile._check", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "mode", "type": null, "default": "..."}], "returns": null, "documentation": ["Check if TarFile is still open, and if the operation's mode\ncorresponds to TarFile's mode."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile._find_link_target", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tarinfo", "type": null, "default": null}], "returns": null, "documentation": ["Find the target member of a symlink or hardlink member in the\narchive."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Provide an iterator object.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarFile._dbg", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "level", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}], "returns": null, "documentation": ["Write debugging output to sys.stderr.\n        "]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.__enter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.backports.tarfile.TarFile.__exit__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "type", "type": null, "default": null}, {"name": "value", "type": null, "default": null}, {"name": "traceback", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.backports.tarfile.TarFile.debug", "type": null, "documentation": ["May be set from 0 (no msgs) to 3 (all msgs)"]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.dereference", "type": null, "documentation": ["If true, add content of linked file to the"]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.ignore_zeros", "type": null, "documentation": ["If true, skips empty or invalid blocks and"]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.errorlevel", "type": null, "documentation": ["If 0, fatal errors only appear in debug"]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.format", "type": null, "documentation": ["The format to use when creating an archive."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.encoding", "type": null, "documentation": ["Encoding for 8-bit character strings."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.errors", "type": null, "documentation": ["Error handler for unicode conversion."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.tarinfo", "type": null, "documentation": ["The default TarInfo class to use."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.fileobject", "type": null, "documentation": ["The file-object for extractfile()."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.extraction_filter", "type": null, "documentation": ["The default filter for extraction."]}, {"name": "setuptools._vendor.backports.tarfile.TarFile.OPEN_METH", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["The TarFile Class provides an interface to tar archives.\n    ", "class TarInfo"]}], "exports": [{"name": "setuptools._vendor.backports.tarfile.AbsoluteLinkError", "xref": {"fqname": "setuptools._vendor.backports.tarfile.AbsoluteLinkError", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.AbsolutePathError", "xref": {"fqname": "setuptools._vendor.backports.tarfile.AbsolutePathError", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.CompressionError", "xref": {"fqname": "setuptools._vendor.backports.tarfile.CompressionError", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.data_filter", "xref": {"fqname": "setuptools._vendor.backports.tarfile.data_filter", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.DEFAULT_FORMAT", "xref": {"fqname": "setuptools._vendor.backports.tarfile.DEFAULT_FORMAT", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.ENCODING", "xref": {"fqname": "setuptools._vendor.backports.tarfile.ENCODING", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.ExtractError", "xref": {"fqname": "setuptools._vendor.backports.tarfile.ExtractError", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.FilterError", "xref": {"fqname": "setuptools._vendor.backports.tarfile.FilterError", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.fully_trusted_filter", "xref": {"fqname": "setuptools._vendor.backports.tarfile.fully_trusted_filter", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.GNU_FORMAT", "xref": {"fqname": "setuptools._vendor.backports.tarfile.GNU_FORMAT", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.HeaderError", "xref": {"fqname": "setuptools._vendor.backports.tarfile.HeaderError", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.is_tarfile", "xref": {"fqname": "setuptools._vendor.backports.tarfile.is_tarfile", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.LinkOutsideDestinationError", "xref": {"fqname": "setuptools._vendor.backports.tarfile.LinkOutsideDestinationError", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.open", "xref": {"fqname": "setuptools._vendor.backports.tarfile.open", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.OutsideDestinationError", "xref": {"fqname": "setuptools._vendor.backports.tarfile.OutsideDestinationError", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.PAX_FORMAT", "xref": {"fqname": "setuptools._vendor.backports.tarfile.PAX_FORMAT", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.ReadError", "xref": {"fqname": "setuptools._vendor.backports.tarfile.ReadError", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.SpecialFileError", "xref": {"fqname": "setuptools._vendor.backports.tarfile.SpecialFileError", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.StreamError", "xref": {"fqname": "setuptools._vendor.backports.tarfile.StreamError", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.tar_filter", "xref": {"fqname": "setuptools._vendor.backports.tarfile.tar_filter", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.TarError", "xref": {"fqname": "setuptools._vendor.backports.tarfile.TarError", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.TarFile", "xref": {"fqname": "setuptools._vendor.backports.tarfile.TarFile", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.TarInfo", "xref": {"fqname": "setuptools._vendor.backports.tarfile.TarInfo", "project": null}}, {"name": "setuptools._vendor.backports.tarfile.USTAR_FORMAT", "xref": {"fqname": "setuptools._vendor.backports.tarfile.USTAR_FORMAT", "project": null}}]}, {"name": "setuptools._vendor.jaraco.text.to-qwerty", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.typeguard._union_transformer", "documentation": ["Transforms lazily evaluated PEP 604 unions into typing.Unions, for compatibility with\nPython versions older than 3.10."], "functions": [{"name": "setuptools._vendor.typeguard._union_transformer.compile_type_hint", "asynchronous": false, "params": [{"name": "hint", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "CodeType", "xref": {"fqname": "types.CodeType", "project": "--std--"}, "params": null}, "documentation": []}], "variables": [{"name": "setuptools._vendor.typeguard._union_transformer.type_substitutions", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.typeguard._union_transformer.UnionTransformer", "bases": ["NodeTransformer"], "methods": [{"name": "setuptools._vendor.typeguard._union_transformer.UnionTransformer.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "union_name", "type": {"name": "Name | None", "xref": null, "params": null}, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._union_transformer.UnionTransformer.visit_BinOp", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "BinOp", "xref": {"fqname": "ast.BinOp", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._vendor.typeguard._importhook", "documentation": [], "functions": [{"name": "setuptools._vendor.typeguard._importhook._call_with_frames_removed", "asynchronous": false, "params": [{"name": "f", "type": {"name": "Callable", "xref": {"fqname": "collections.abc.Callable", "project": "--std--"}, "params": [{"name": "P", "xref": {"fqname": "P", "project": null}, "params": null}, {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}]}, "default": null}, {"name": "*args", "type": {"name": "P.args", "xref": {"fqname": "P.args", "project": null}, "params": null}, "default": null}, {"name": "**kwargs", "type": {"name": "P.kwargs", "xref": {"fqname": "P.kwargs", "project": null}, "params": null}, "default": null}], "returns": {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}, "documentation": ["The name of this function is magical"]}, {"name": "setuptools._vendor.typeguard._importhook.optimized_cache_from_source", "asynchronous": false, "params": [{"name": "path", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "debug_override", "type": {"name": "bool | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._importhook.install_import_hook", "asynchronous": false, "params": [{"name": "packages", "type": {"name": "Iterable[str] | None", "xref": null, "params": null}, "default": "..."}, {"name": "cls", "type": {"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": [{"name": "TypeguardFinder", "xref": {"fqname": "setuptools._vendor.typeguard._importhook.TypeguardFinder", "project": null}, "params": null}]}, "default": "..."}], "returns": {"name": "ImportHookManager", "xref": {"fqname": "setuptools._vendor.typeguard._importhook.ImportHookManager", "project": null}, "params": null}, "documentation": ["Install an import hook that instruments functions for automatic type checking.\n\nThis only affects modules loaded **after** this hook has been installed.\n\n```\nparam packages\n\nan iterable of package names to instrument, or None to\ninstrument all packages\n\nparam cls\n\na custom meta path finder class\n\nreturn\n\na context manager that uninstalls the hook on exit (or when you call\n.uninstall())\n```\n\n:::{versionadded} 2.6\n:::\n"]}], "variables": [{"name": "setuptools._vendor.typeguard._importhook.OPTIMIZATION", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._importhook.OPTIMIZATION", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._importhook.P", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._importhook.T", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.typeguard._importhook.TypeguardLoader", "bases": ["SourceFileLoader"], "methods": [{"name": "setuptools._vendor.typeguard._importhook.TypeguardLoader.source_to_code", "asynchronous": false, "params": [{"name": "data", "type": {"name": "Buffer | str | ast.Module | ast.Expression | ast.Interactive", "xref": null, "params": null}, "default": null}, {"name": "path", "type": {"name": "Buffer | str | PathLike[str]", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "CodeType", "xref": {"fqname": "types.CodeType", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._importhook.TypeguardLoader.exec_module", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "module", "type": {"name": "ModuleType", "xref": {"fqname": "types.ModuleType", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typeguard._importhook.TypeguardFinder", "bases": ["MetaPathFinder"], "methods": [{"name": "setuptools._vendor.typeguard._importhook.TypeguardFinder.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "packages", "type": {"name": "list[str] | None", "xref": null, "params": null}, "default": null}, {"name": "original_pathfinder", "type": {"name": "MetaPathFinder", "xref": {"fqname": "importlib.abc.MetaPathFinder", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._importhook.TypeguardFinder.find_spec", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "fullname", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "path", "type": {"name": "Sequence[str] | None", "xref": null, "params": null}, "default": null}, {"name": "target", "type": {"name": "types.ModuleType | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "ModuleSpec | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._importhook.TypeguardFinder.should_instrument", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "module_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Determine whether the module with the given name should be instrumented.\n\n```\nparam module_name\n\nfull name of the module that is about to be imported (e.g.\nxyz.abc)\n```\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Wraps another path finder and instruments the module with\n{func}`@typechecked <typeguard.typechecked>` if {meth}`should_instrument` returns\n`True`.\n\nShould not be used directly, but rather via {func}`~.install_import_hook`.\n\n:::{versionadded} 2.6\n:::\n"]}, {"name": "setuptools._vendor.typeguard._importhook.ImportHookManager", "bases": [], "methods": [{"name": "setuptools._vendor.typeguard._importhook.ImportHookManager.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "hook", "type": {"name": "MetaPathFinder", "xref": {"fqname": "importlib.abc.MetaPathFinder", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._importhook.ImportHookManager.__enter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._importhook.ImportHookManager.__exit__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "exc_type", "type": {"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": [{"name": "BaseException", "xref": {"fqname": "functions.BaseException", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "exc_val", "type": {"name": "BaseException", "xref": {"fqname": "functions.BaseException", "project": "--std--"}, "params": null}, "default": null}, {"name": "exc_tb", "type": {"name": "TracebackType", "xref": {"fqname": "types.TracebackType", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._importhook.ImportHookManager.uninstall", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Uninstall the import hook."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A handle that can be used to uninstall the Typeguard import hook."]}], "exports": []}, {"name": "setuptools._vendor.typeguard._pytest_plugin", "documentation": [], "functions": [{"name": "setuptools._vendor.typeguard._pytest_plugin.pytest_addoption", "asynchronous": false, "params": [{"name": "parser", "type": {"name": "Parser", "xref": {"fqname": "pytest.Parser", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._pytest_plugin.pytest_configure", "asynchronous": false, "params": [{"name": "config", "type": {"name": "Config", "xref": {"fqname": "pytest.Config", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.jaraco.functools", "documentation": [], "functions": [{"name": "setuptools._vendor.jaraco.functools.compose", "asynchronous": false, "params": [{"name": "*funcs", "type": null, "default": null}], "returns": null, "documentation": ["Compose any number of unary functions into a single unary function.\n\n```pycon\n>>> import textwrap\n>>> expected = str.strip(textwrap.dedent(compose.__doc__))\n>>> strip_and_dedent = compose(str.strip, textwrap.dedent)\n>>> strip_and_dedent(compose.__doc__) == expected\nTrue\n```\n\nCompose also allows the innermost function to take arbitrary arguments.\n\n```pycon\n>>> round_three = lambda x: round(x, ndigits=3)\n>>> f = compose(round_three, int.__truediv__)\n>>> [f(3*x, x+1) for x in range(1,10)]\n[1.5, 2.0, 2.25, 2.4, 2.5, 2.571, 2.625, 2.667, 2.7]\n```\n"]}, {"name": "setuptools._vendor.jaraco.functools.once", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}], "returns": null, "documentation": ["Decorate func so it's only ever called the first time.\n\nThis decorator can ensure that an expensive or non-idempotent function\nwill not be expensive on subsequent calls and is idempotent.\n\n```pycon\n>>> add_three = once(lambda a: a+3)\n>>> add_three(3)\n6\n>>> add_three(9)\n6\n>>> add_three('12')\n6\n```\n\nTo reset the stored value, simply clear the property `saved_result`.\n\n```pycon\n>>> del add_three.saved_result\n>>> add_three(9)\n12\n>>> add_three(8)\n12\n```\n\nOr invoke 'reset()' on it.\n\n```pycon\n>>> add_three.reset()\n>>> add_three(-3)\n0\n>>> add_three(0)\n0\n```\n"]}, {"name": "setuptools._vendor.jaraco.functools.method_cache", "asynchronous": false, "params": [{"name": "method", "type": null, "default": null}, {"name": "cache_wrapper", "type": null, "default": "..."}], "returns": null, "documentation": ["Wrap lru_cache to support storing the cache data in the object instances.\n\nAbstracts the common paradigm where the method explicitly saves an\nunderscore-prefixed protected property on first call and returns that\nsubsequently.\n\n```pycon\n>>> class MyClass:\n...     calls = 0\n...\n...     @method_cache\n...     def method(self, value):\n...         self.calls += 1\n...         return value\n```\n\n```pycon\n>>> a = MyClass()\n>>> a.method(3)\n3\n>>> for x in range(75):\n...     res = a.method(x)\n>>> a.calls\n75\n```\n\nNote that the apparent behavior will be exactly like that of lru_cache\nexcept that the cache is stored on each instance, so values in one\ninstance will not flush values from another, and when an instance is\ndeleted, so are the cached values for that instance.\n\n```pycon\n>>> b = MyClass()\n>>> for x in range(35):\n...     res = b.method(x)\n>>> b.calls\n35\n>>> a.method(0)\n0\n>>> a.calls\n75\n```\n\nNote that if method had been decorated with `functools.lru_cache()`,\na.calls would have been 76 (due to the cached value of 0 having been\nflushed by the 'b' instance).\n\nClear the cache with `.cache_clear()`\n\n```pycon\n>>> a.method.cache_clear()\n```\n\nSame for a method that hasn't yet been called.\n\n```pycon\n>>> c = MyClass()\n>>> c.method.cache_clear()\n```\n\nAnother cache wrapper may be supplied:\n\n```pycon\n>>> cache = functools.lru_cache(maxsize=2)\n>>> MyClass.method2 = method_cache(lambda self: 3, cache_wrapper=cache)\n>>> a = MyClass()\n>>> a.method2()\n3\n```\n\nCaution - do not subsequently wrap the method with another decorator, such\nas `@property`, which changes the semantics of the function.\n\nSee also\n<http://code.activestate.com/recipes/577452-a-memoize-decorator-for-instance-methods/>\nfor another implementation and additional justification.\n"]}, {"name": "setuptools._vendor.jaraco.functools._special_method_cache", "asynchronous": false, "params": [{"name": "method", "type": null, "default": null}, {"name": "cache_wrapper", "type": null, "default": null}], "returns": null, "documentation": ["Because Python treats special methods differently, it's not\npossible to use instance attributes to implement the cached\nmethods.\n\nInstead, install the wrapper method under a different name\nand return a simple proxy to that wrapper.\n\nhttps://github.com/jaraco/jaraco.functools/issues/5"]}, {"name": "setuptools._vendor.jaraco.functools.apply", "asynchronous": false, "params": [{"name": "transform", "type": null, "default": null}], "returns": null, "documentation": ["Decorate a function with a transform function that is\ninvoked on results returned from the decorated function.\n\n```pycon\n>>> @apply(reversed)\n... def get_numbers(start):\n...     \"doc for get_numbers\"\n...     return range(start, start+3)\n>>> list(get_numbers(4))\n[6, 5, 4]\n>>> get_numbers.__doc__\n'doc for get_numbers'\n```\n"]}, {"name": "setuptools._vendor.jaraco.functools.result_invoke", "asynchronous": false, "params": [{"name": "action", "type": null, "default": null}], "returns": null, "documentation": ["Decorate a function with an action function that is\ninvoked on the results returned from the decorated\nfunction (for its side effect), then return the original\nresult.\n\n```pycon\n>>> @result_invoke(print)\n... def add_two(a, b):\n...     return a + b\n>>> x = add_two(2, 3)\n5\n>>> x\n5\n```\n"]}, {"name": "setuptools._vendor.jaraco.functools.invoke", "asynchronous": false, "params": [{"name": "f", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["Call a function for its side effect after initialization.\n\nThe benefit of using the decorator instead of simply invoking a function\nafter defining it is that it makes explicit the author's intent for the\nfunction to be called immediately. Whereas if one simply calls the\nfunction immediately, it's less obvious if that was intentional or\nincidental. It also avoids repeating the name - the two actions, defining\nthe function and calling it immediately are modeled separately, but linked\nby the decorator construct.\n\nThe benefit of having a function construct (opposed to just invoking some\nbehavior inline) is to serve as a scope in which the behavior occurs. It\navoids polluting the global namespace with local variables, provides an\nanchor on which to attach documentation (docstring), keeps the behavior\nlogically separated (instead of conceptually separated or not separated at\nall), and provides potential to re-use the behavior for testing or other\npurposes.\n\nThis function is named as a pithy way to communicate, \"call this function\nprimarily for its side effect\", or \"while defining this function, also\ntake it aside and call it\". It exists because there's no Python construct\nfor \"define and call\" (nor should there be, as decorators serve this need\njust fine). The behavior happens immediately and synchronously.\n\n```pycon\n>>> @invoke\n... def func(): print(\"called\")\ncalled\n>>> func()\ncalled\n```\n\nUse functools.partial to pass parameters to the initial call\n\n```pycon\n>>> @functools.partial(invoke, name='bingo')\n... def func(name): print('called with', name)\ncalled with bingo\n```\n"]}, {"name": "setuptools._vendor.jaraco.functools.first_invoke", "asynchronous": false, "params": [{"name": "func1", "type": null, "default": null}, {"name": "func2", "type": null, "default": null}], "returns": null, "documentation": ["Return a function that when invoked will invoke func1 without\nany parameters (for its side effect) and then invoke func2\nwith whatever parameters were passed, returning its result."]}, {"name": "setuptools._vendor.jaraco.functools.retry_call", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}, {"name": "cleanup", "type": null, "default": "..."}, {"name": "retries", "type": null, "default": "..."}, {"name": "trap", "type": null, "default": "..."}], "returns": null, "documentation": ["Given a callable func, trap the indicated exceptions\nfor up to 'retries' times, invoking cleanup on the\nexception. On the final attempt, allow any exceptions\nto propagate."]}, {"name": "setuptools._vendor.jaraco.functools.retry", "asynchronous": false, "params": [{"name": "*r_args", "type": null, "default": null}, {"name": "**r_kwargs", "type": null, "default": null}], "returns": null, "documentation": ["Decorator wrapper for retry_call. Accepts arguments to retry_call\nexcept func and then returns a decorator for the decorated function.\n\nEx:\n\n```pycon\n>>> @retry(retries=3)\n... def my_func(a, b):\n...     \"this is my funk\"\n...     print(a, b)\n>>> my_func.__doc__\n'this is my funk'\n```\n"]}, {"name": "setuptools._vendor.jaraco.functools.print_yielded", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}], "returns": null, "documentation": ["Convert a generator into a function that prints all yielded elements.\n\n```pycon\n>>> @print_yielded\n... def x():\n...     yield 3; yield None\n>>> x()\n3\nNone\n```\n"]}, {"name": "setuptools._vendor.jaraco.functools.pass_none", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}], "returns": null, "documentation": ["Wrap func so it's not called if its first param is None.\n\n```pycon\n>>> print_text = pass_none(print)\n>>> print_text('text')\ntext\n>>> print_text(None)\n```\n"]}, {"name": "setuptools._vendor.jaraco.functools.assign_params", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}, {"name": "namespace", "type": null, "default": null}], "returns": null, "documentation": ["Assign parameters from namespace where func solicits.\n\n```pycon\n>>> def func(x, y=3):\n...     print(x, y)\n>>> assigned = assign_params(func, dict(x=2, z=4))\n>>> assigned()\n2 3\n```\n\nThe usual errors are raised if a function doesn't receive\nits required parameters:\n\n```pycon\n>>> assigned = assign_params(func, dict(y=3, z=4))\n>>> assigned()\nTraceback (most recent call last):\nTypeError: func() ...argument...\n```\n\nIt even works on methods:\n\n```pycon\n>>> class Handler:\n...     def meth(self, arg):\n...         print(arg)\n>>> assign_params(Handler().meth, dict(arg='crystal', foo='clear'))()\ncrystal\n```\n"]}, {"name": "setuptools._vendor.jaraco.functools.save_method_args", "asynchronous": false, "params": [{"name": "method", "type": null, "default": null}], "returns": null, "documentation": ["Wrap a method such that when it is called, the args and kwargs are\nsaved on the method.\n\n```pycon\n>>> class MyClass:\n...     @save_method_args\n...     def method(self, a, b):\n...         print(a, b)\n>>> my_ob = MyClass()\n>>> my_ob.method(1, 2)\n1 2\n>>> my_ob._saved_method.args\n(1, 2)\n>>> my_ob._saved_method.kwargs\n{}\n>>> my_ob.method(a=3, b='foo')\n3 foo\n>>> my_ob._saved_method.args\n()\n>>> my_ob._saved_method.kwargs == dict(a=3, b='foo')\nTrue\n```\n\nThe arguments are stored on the instance, allowing for\ndifferent instance to save different args.\n\n```pycon\n>>> your_ob = MyClass()\n>>> your_ob.method({str('x'): 3}, b=[4])\n{'x': 3} [4]\n>>> your_ob._saved_method.args\n({'x': 3},)\n>>> my_ob._saved_method.args\n()\n```\n"]}, {"name": "setuptools._vendor.jaraco.functools.except_", "asynchronous": false, "params": [{"name": "*exceptions", "type": null, "default": null}, {"name": "replace", "type": null, "default": "..."}, {"name": "use", "type": null, "default": "..."}], "returns": null, "documentation": ["Replace the indicated exceptions, if raised, with the indicated\nliteral replacement or evaluated expression (if present).\n\n```pycon\n>>> safe_int = except_(ValueError)(int)\n>>> safe_int('five')\n>>> safe_int('5')\n5\n```\n\nSpecify a literal replacement with `replace`.\n\n```pycon\n>>> safe_int_r = except_(ValueError, replace=0)(int)\n>>> safe_int_r('five')\n0\n```\n\nProvide an expression to `use` to pass through particular parameters.\n\n```pycon\n>>> safe_int_pt = except_(ValueError, use='args[0]')(int)\n>>> safe_int_pt('five')\n'five'\n```\n"]}, {"name": "setuptools._vendor.jaraco.functools.identity", "asynchronous": false, "params": [{"name": "x", "type": null, "default": null}], "returns": null, "documentation": ["Return the argument.\n\n```pycon\n>>> o = object()\n>>> identity(o) is o\nTrue\n```\n"]}, {"name": "setuptools._vendor.jaraco.functools.bypass_when", "asynchronous": false, "params": [{"name": "check", "type": null, "default": null}, {"name": "_op", "type": null, "default": "..."}], "returns": null, "documentation": ["Decorate a function to return its parameter when `check`.\n\n```pycon\n>>> bypassed = []  # False\n```\n\n```pycon\n>>> @bypass_when(bypassed)\n... def double(x):\n...     return x * 2\n>>> double(2)\n4\n>>> bypassed[:] = [object()]  # True\n>>> double(2)\n2\n```\n"]}, {"name": "setuptools._vendor.jaraco.functools.bypass_unless", "asynchronous": false, "params": [{"name": "check", "type": null, "default": null}], "returns": null, "documentation": ["Decorate a function to return its parameter unless `check`.\n\n```pycon\n>>> enabled = [object()]  # True\n```\n\n```pycon\n>>> @bypass_unless(enabled)\n... def double(x):\n...     return x * 2\n>>> double(2)\n4\n>>> del enabled[:]  # False\n>>> double(2)\n2\n```\n"]}, {"name": "setuptools._vendor.jaraco.functools._splat_inner", "asynchronous": false, "params": [{"name": "args", "type": null, "default": null}, {"name": "func", "type": null, "default": null}], "returns": null, "documentation": ["Splat args to func."]}, {"name": "setuptools._vendor.jaraco.functools._", "asynchronous": false, "params": [{"name": "args", "type": {"name": "collections.abc.Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": null}, "default": null}, {"name": "func", "type": null, "default": null}], "returns": null, "documentation": ["Splat kargs to func as kwargs."]}, {"name": "setuptools._vendor.jaraco.functools.splat", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}], "returns": null, "documentation": ["Wrap func to expect its parameters to be passed positionally in a tuple.\n\nHas a similar effect to that of `itertools.starmap` over\nsimple `map`.\n\n```pycon\n>>> pairs = [(-1, 1), (0, 2)]\n>>> more_itertools.consume(itertools.starmap(print, pairs))\n-1 1\n0 2\n>>> more_itertools.consume(map(splat(print), pairs))\n-1 1\n0 2\n```\n\nThe approach generalizes to other iterators that don't have a \"star\"\nequivalent, such as a \"starfilter\".\n\n```pycon\n>>> list(filter(splat(operator.add), pairs))\n[(0, 2)]\n```\n\nSplat also accepts a mapping argument.\n\n```pycon\n>>> def is_nice(msg, code):\n...     return \"smile\" in msg or code == 0\n>>> msgs = [\n...     dict(msg='smile!', code=20),\n...     dict(msg='error :(', code=1),\n...     dict(msg='unknown', code=0),\n... ]\n>>> for msg in filter(splat(is_nice), msgs):\n...     print(msg)\n{'msg': 'smile!', 'code': 20}\n{'msg': 'unknown', 'code': 0}\n```\n"]}], "variables": [{"name": "setuptools._vendor.jaraco.functools.method_caller", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.jaraco.functools.Throttler", "bases": [], "methods": [{"name": "setuptools._vendor.jaraco.functools.Throttler.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "func", "type": null, "default": null}, {"name": "max_rate", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.functools.Throttler.reset", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.functools.Throttler.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.functools.Throttler._wait", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Ensure at least 1/max_rate seconds from last call."]}, {"name": "setuptools._vendor.jaraco.functools.Throttler.__get__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "obj", "type": null, "default": null}, {"name": "owner", "type": null, "default": "..."}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Rate-limit a function (or other callable)."]}], "exports": []}, {"name": "setuptools._vendor.jaraco.collections", "documentation": [], "functions": [{"name": "setuptools._vendor.jaraco.collections._dispatch", "asynchronous": false, "params": [{"name": "obj", "type": {"name": "_Matchable", "xref": {"fqname": "_Matchable", "project": null}, "params": null}, "default": null}], "returns": {"name": "Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.dict_map", "asynchronous": false, "params": [{"name": "function", "type": null, "default": null}, {"name": "dictionary", "type": null, "default": null}], "returns": null, "documentation": ["Return a new dict with function applied to values of dictionary.\n\n```pycon\n>>> dict_map(lambda x: x+1, dict(a=1, b=2))\n{'a': 2, 'b': 3}\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.__identity", "asynchronous": false, "params": [{"name": "x", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.sorted_items", "asynchronous": false, "params": [{"name": "d", "type": null, "default": null}, {"name": "key", "type": null, "default": "..."}, {"name": "reverse", "type": null, "default": "..."}], "returns": null, "documentation": ["Return the items of the dictionary sorted by the keys.\n\n```pycon\n>>> sample = dict(foo=20, bar=42, baz=10)\n>>> tuple(sorted_items(sample))\n(('bar', 42), ('baz', 10), ('foo', 20))\n```\n\n```pycon\n>>> reverse_string = lambda s: ''.join(reversed(s))\n>>> tuple(sorted_items(sample, key=reverse_string))\n(('foo', 20), ('bar', 42), ('baz', 10))\n```\n\n```pycon\n>>> tuple(sorted_items(sample, reverse=True))\n(('foo', 20), ('baz', 10), ('bar', 42))\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.invert_map", "asynchronous": false, "params": [{"name": "map", "type": null, "default": null}], "returns": null, "documentation": ["Given a dictionary, return another dictionary with keys and values\nswitched. If any of the values resolve to the same key, raises\na ValueError.\n\n```pycon\n>>> numbers = dict(a=1, b=2, c=3)\n>>> letters = invert_map(numbers)\n>>> letters[1]\n'a'\n>>> numbers['d'] = 3\n>>> invert_map(numbers)\nTraceback (most recent call last):\n...\nValueError: Key conflict in inverted mapping\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.pop_all", "asynchronous": false, "params": [{"name": "items", "type": null, "default": null}], "returns": null, "documentation": ["Clear items in place and return a copy of items.\n\n```pycon\n>>> items = [1, 2, 3]\n>>> popped = pop_all(items)\n>>> popped is items\nFalse\n>>> popped\n[1, 2, 3]\n>>> items\n[]\n```\n"]}], "variables": [{"name": "setuptools._vendor.jaraco.collections._RangeMapKT", "type": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections._RangeMapKT", "type": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections._T", "type": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections._VT", "type": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections._Matchable", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.jaraco.collections.Projection", "bases": ["collections.abc.Mapping"], "methods": [{"name": "setuptools._vendor.jaraco.collections.Projection.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "keys", "type": {"name": "_Matchable", "xref": {"fqname": "_Matchable", "project": null}, "params": null}, "default": null}, {"name": "space", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.Projection.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.Projection._keys_resolved", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.Projection.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.Projection.__len__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Project a set of keys over a mapping\n\n```pycon\n>>> sample = {'a': 1, 'b': 2, 'c': 3}\n>>> prj = Projection(['a', 'c', 'd'], sample)\n>>> dict(prj)\n{'a': 1, 'c': 3}\n```\n\nProjection also accepts an iterable or callable or pattern.\n\n```pycon\n>>> iter_prj = Projection(iter('acd'), sample)\n>>> call_prj = Projection(lambda k: ord(k) in (97, 99, 100), sample)\n>>> pat_prj = Projection(re.compile(r'[acd]'), sample)\n>>> prj == iter_prj == call_prj == pat_prj\nTrue\n```\n\nKeys should only appear if they were specified and exist in the space.\nOrder is retained.\n\n```pycon\n>>> list(prj)\n['a', 'c']\n```\n\nAttempting to access a key not in the projection\nresults in a KeyError.\n\n```pycon\n>>> prj['b']\nTraceback (most recent call last):\n...\nKeyError: 'b'\n```\n\nUse the projection to update another dict.\n\n```pycon\n>>> target = {'a': 2, 'b': 2}\n>>> target.update(prj)\n>>> target\n{'a': 1, 'b': 2, 'c': 3}\n```\n\nProjection keeps a reference to the original dict, so\nmodifying the original dict may modify the Projection.\n\n```pycon\n>>> del sample['a']\n>>> dict(prj)\n{'c': 3}\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.Mask", "bases": ["Projection"], "methods": [{"name": "setuptools._vendor.jaraco.collections.Mask.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["The inverse of a {class}`Projection`, masking out keys.\n\n```pycon\n>>> sample = {'a': 1, 'b': 2, 'c': 3}\n>>> msk = Mask(['a', 'c', 'd'], sample)\n>>> dict(msk)\n{'b': 2}\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.RangeMap", "bases": [], "methods": [{"name": "setuptools._vendor.jaraco.collections.RangeMap.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "source", "type": {"name": "(\n        SupportsKeysAndGetItem[_RangeMapKT, _VT] | Iterable[tuple[_RangeMapKT, _VT]]\n    )", "xref": null, "params": null}, "default": null}, {"name": "sort_params", "type": {"name": "Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "default": "..."}, {"name": "key_match_comparator", "type": {"name": "Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": [{"name": "", "xref": null, "params": [{"name": "_RangeMapKT", "xref": {"fqname": "_RangeMapKT", "project": null}, "params": null}, {"name": "_RangeMapKT", "xref": {"fqname": "_RangeMapKT", "project": null}, "params": null}]}, {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.RangeMap.left", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "source", "type": {"name": "(\n        SupportsKeysAndGetItem[_RangeMapKT, _VT] | Iterable[tuple[_RangeMapKT, _VT]]\n    )", "xref": null, "params": null}, "default": null}], "returns": {"name": "Self", "xref": {"fqname": "typing_extensions.Self", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.RangeMap.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": {"name": "_RangeMapKT", "xref": {"fqname": "_RangeMapKT", "project": null}, "params": null}, "default": null}], "returns": {"name": "_VT", "xref": {"fqname": "_VT", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.RangeMap.get", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": {"name": "_RangeMapKT", "xref": {"fqname": "_RangeMapKT", "project": null}, "params": null}, "default": null}, {"name": "default", "type": {"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}, "default": null}], "returns": {"name": "_VT | _T", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.RangeMap.get", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": {"name": "_RangeMapKT", "xref": {"fqname": "_RangeMapKT", "project": null}, "params": null}, "default": null}, {"name": "default", "type": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "_VT | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.RangeMap.get", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": {"name": "_RangeMapKT", "xref": {"fqname": "_RangeMapKT", "project": null}, "params": null}, "default": null}, {"name": "default", "type": {"name": "_T | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "_VT | _T | None", "xref": null, "params": null}, "documentation": ["Return the value for key if key is in the dictionary, else default.\nIf default is not given, it defaults to None, so that this method\nnever raises a KeyError."]}, {"name": "setuptools._vendor.jaraco.collections.RangeMap._find_first_match_", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "keys", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "_RangeMapKT", "xref": {"fqname": "_RangeMapKT", "project": null}, "params": null}]}, "default": null}, {"name": "item", "type": {"name": "_RangeMapKT", "xref": {"fqname": "_RangeMapKT", "project": null}, "params": null}, "default": null}], "returns": {"name": "_RangeMapKT", "xref": {"fqname": "_RangeMapKT", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.RangeMap.bounds", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "_RangeMapKT", "xref": {"fqname": "_RangeMapKT", "project": null}, "params": null}, {"name": "_RangeMapKT", "xref": {"fqname": "_RangeMapKT", "project": null}, "params": null}]}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.jaraco.collections.RangeMap.undefined_value", "type": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.RangeMap.first_item", "type": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.RangeMap.last_item", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [{"name": "setuptools._vendor.jaraco.collections.RangeMap.Item", "bases": ["int"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["RangeMap Item"]}], "documentation": ["A dictionary-like object that uses the keys as bounds for a range.\nInclusion of the value for that range is determined by the\nkey_match_comparator, which defaults to less-than-or-equal.\nA value is returned for a key if it is the first key that matches in\nthe sorted list of keys.\n\nOne may supply keyword parameters to be passed to the sort function used\nto sort keys (i.e. key, reverse) as sort_params.\n\nCreate a map that maps 1-3 -> 'a', 4-6 -> 'b'\n\n```pycon\n>>> r = RangeMap({3: 'a', 6: 'b'})  # boy, that was easy\n>>> r[1], r[2], r[3], r[4], r[5], r[6]\n('a', 'a', 'a', 'b', 'b', 'b')\n```\n\nEven float values should work so long as the comparison operator\nsupports it.\n\n```pycon\n>>> r[4.5]\n'b'\n```\n\nNotice that the way rangemap is defined, it must be open-ended\non one side.\n\n```pycon\n>>> r[0]\n'a'\n>>> r[-1]\n'a'\n```\n\nOne can close the open-end of the RangeMap by using undefined_value\n\n```pycon\n>>> r = RangeMap({0: RangeMap.undefined_value, 3: 'a', 6: 'b'})\n>>> r[0]\nTraceback (most recent call last):\n...\nKeyError: 0\n```\n\nOne can get the first or last elements in the range by using RangeMap.Item\n\n```pycon\n>>> last_item = RangeMap.Item(-1)\n>>> r[last_item]\n'b'\n```\n\n.last_item is a shortcut for Item(-1)\n\n```pycon\n>>> r[RangeMap.last_item]\n'b'\n```\n\nSometimes it's useful to find the bounds for a RangeMap\n\n```pycon\n>>> r.bounds()\n(0, 6)\n```\n\nRangeMap supports .get(key, default)\n\n```pycon\n>>> r.get(0, 'not found')\n'not found'\n```\n\n```pycon\n>>> r.get(7, 'not found')\n'not found'\n```\n\nOne often wishes to define the ranges by their left-most values,\nwhich requires use of sort params and a key_match_comparator.\n\n```pycon\n>>> r = RangeMap({1: 'a', 4: 'b'},\n...     sort_params=dict(reverse=True),\n...     key_match_comparator=operator.ge)\n>>> r[1], r[2], r[3], r[4], r[5], r[6]\n('a', 'a', 'a', 'b', 'b', 'b')\n```\n\nThat wasn't nearly as easy as before, so an alternate constructor\nis provided:\n\n```pycon\n>>> r = RangeMap.left({1: 'a', 4: 'b', 7: RangeMap.undefined_value})\n>>> r[1], r[2], r[3], r[4], r[5], r[6]\n('a', 'a', 'a', 'b', 'b', 'b')\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.KeyTransformingDict", "bases": ["dict"], "methods": [{"name": "setuptools._vendor.jaraco.collections.KeyTransformingDict.transform_key", "asynchronous": false, "params": [{"name": "key", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.KeyTransformingDict.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.KeyTransformingDict.__setitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}, {"name": "val", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.KeyTransformingDict.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.KeyTransformingDict.__contains__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.KeyTransformingDict.__delitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.KeyTransformingDict.get", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.KeyTransformingDict.setdefault", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.KeyTransformingDict.pop", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.KeyTransformingDict.matching_key_for", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}], "returns": null, "documentation": ["Given a key, return the actual key stored in self that matches.\nRaise KeyError if the key isn't found."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A dict subclass that transforms the keys before they're used.\nSubclasses may override the default transform_key to customize behavior."]}, {"name": "setuptools._vendor.jaraco.collections.FoldedCaseKeyedDict", "bases": ["KeyTransformingDict"], "methods": [{"name": "setuptools._vendor.jaraco.collections.FoldedCaseKeyedDict.transform_key", "asynchronous": false, "params": [{"name": "key", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A case-insensitive dictionary (keys are compared as insensitive\nif they are strings).\n\n```pycon\n>>> d = FoldedCaseKeyedDict()\n>>> d['heLlo'] = 'world'\n>>> list(d.keys()) == ['heLlo']\nTrue\n>>> list(d.values()) == ['world']\nTrue\n>>> d['hello'] == 'world'\nTrue\n>>> 'hello' in d\nTrue\n>>> 'HELLO' in d\nTrue\n>>> print(repr(FoldedCaseKeyedDict({'heLlo': 'world'})))\n{'heLlo': 'world'}\n>>> d = FoldedCaseKeyedDict({'heLlo': 'world'})\n>>> print(d['hello'])\nworld\n>>> print(d['Hello'])\nworld\n>>> list(d.keys())\n['heLlo']\n>>> d = FoldedCaseKeyedDict({'heLlo': 'world', 'Hello': 'world'})\n>>> list(d.values())\n['world']\n>>> key, = d.keys()\n>>> key in ['heLlo', 'Hello']\nTrue\n>>> del d['HELLO']\n>>> d\n{}\n```\n\nget should work\n\n```pycon\n>>> d['Sumthin'] = 'else'\n>>> d.get('SUMTHIN')\n'else'\n>>> d.get('OTHER', 'thing')\n'thing'\n>>> del d['sumthin']\n```\n\nsetdefault should also work\n\n```pycon\n>>> d['This'] = 'that'\n>>> print(d.setdefault('this', 'other'))\nthat\n>>> len(d)\n1\n>>> print(d['this'])\nthat\n>>> print(d.setdefault('That', 'other'))\nother\n>>> print(d['THAT'])\nother\n```\n\nMake it pop!\n\n```pycon\n>>> print(d.pop('THAT'))\nother\n```\n\nTo retrieve the key in its originally-supplied form, use matching_key_for\n\n```pycon\n>>> print(d.matching_key_for('this'))\nThis\n```\n\n```pycon\n>>> d.matching_key_for('missing')\nTraceback (most recent call last):\n...\nKeyError: 'missing'\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.DictAdapter", "bases": [], "methods": [{"name": "setuptools._vendor.jaraco.collections.DictAdapter.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "wrapped_ob", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.DictAdapter.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Provide a getitem interface for attributes of an object.\n\nLet's say you want to get at the string.lowercase property in a formatted\nstring. It's easy with DictAdapter.\n\n```pycon\n>>> import string\n>>> print(\"lowercase is %(ascii_lowercase)s\" % DictAdapter(string))\nlowercase is abcdefghijklmnopqrstuvwxyz\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.ItemsAsAttributes", "bases": [], "methods": [{"name": "setuptools._vendor.jaraco.collections.ItemsAsAttributes.__getattr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Mix-in class to enable a mapping object to provide items as\nattributes.\n\n```pycon\n>>> C = type('C', (dict, ItemsAsAttributes), dict())\n>>> i = C()\n>>> i['foo'] = 'bar'\n>>> i.foo\n'bar'\n```\n\nNatural attribute access takes precedence\n\n```pycon\n>>> i.foo = 'henry'\n>>> i.foo\n'henry'\n```\n\nBut as you might expect, the mapping functionality is preserved.\n\n```pycon\n>>> i['foo']\n'bar'\n```\n\nA normal attribute error should be raised if an attribute is\nrequested that doesn't exist.\n\n```pycon\n>>> i.missing\nTraceback (most recent call last):\n...\nAttributeError: 'C' object has no attribute 'missing'\n```\n\nIt also works on dicts that customize \\_\\_getitem\\_\\_\n\n```pycon\n>>> missing_func = lambda self, key: 'missing item'\n>>> C = type(\n...     'C',\n...     (dict, ItemsAsAttributes),\n...     dict(__missing__ = missing_func),\n... )\n>>> i = C()\n>>> i.missing\n'missing item'\n>>> i.foo\n'missing item'\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.IdentityOverrideMap", "bases": ["dict"], "methods": [{"name": "setuptools._vendor.jaraco.collections.IdentityOverrideMap.__missing__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A dictionary that by default maps each key to itself, but otherwise\nacts like a normal dictionary.\n\n```pycon\n>>> d = IdentityOverrideMap()\n>>> d[42]\n42\n>>> d['speed'] = 'speedo'\n>>> print(d['speed'])\nspeedo\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.DictStack", "bases": ["list", "collections.abc.MutableMapping"], "methods": [{"name": "setuptools._vendor.jaraco.collections.DictStack.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.DictStack.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.DictStack.__contains__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.DictStack.__len__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.DictStack.__setitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}, {"name": "item", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.DictStack.__delitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.DictStack.pop", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["workaround for mypy confusion"]}], "class_variables": [{"name": "setuptools._vendor.jaraco.collections.DictStack.push", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A stack of dictionaries that behaves as a view on those dictionaries,\ngiving preference to the last.\n\n```pycon\n>>> stack = DictStack([dict(a=1, c=2), dict(b=2, a=2)])\n>>> stack['a']\n2\n>>> stack['b']\n2\n>>> stack['c']\n2\n>>> len(stack)\n3\n>>> stack.push(dict(a=3))\n>>> stack['a']\n3\n>>> stack['a'] = 4\n>>> set(stack.keys()) == set(['a', 'b', 'c'])\nTrue\n>>> set(stack.items()) == set([('a', 4), ('b', 2), ('c', 2)])\nTrue\n>>> dict(**stack) == dict(stack) == dict(a=4, c=2, b=2)\nTrue\n>>> d = stack.pop()\n>>> stack['a']\n2\n>>> d = stack.pop()\n>>> stack['a']\n1\n>>> stack.get('b', None)\n>>> 'c' in stack\nTrue\n>>> del stack['c']\n>>> dict(stack)\n{'a': 1}\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.BijectiveMap", "bases": ["dict"], "methods": [{"name": "setuptools._vendor.jaraco.collections.BijectiveMap.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.BijectiveMap.__setitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.BijectiveMap.__delitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.BijectiveMap.__len__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.BijectiveMap.pop", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.BijectiveMap.update", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A Bijective Map (two-way mapping).\n\nImplemented as a simple dictionary of 2x the size, mapping values back\nto keys.\n\nNote, this implementation may be incomplete. If there's not a test for\nyour use case below, it's likely to fail, so please test and send pull\nrequests or patches for additional functionality needed.\n\n```pycon\n>>> m = BijectiveMap()\n>>> m['a'] = 'b'\n>>> m == {'a': 'b', 'b': 'a'}\nTrue\n>>> print(m['b'])\na\n```\n\n```pycon\n>>> m['c'] = 'd'\n>>> len(m)\n2\n```\n\nSome weird things happen if you map an item to itself or overwrite a\nsingle key of a pair, so it's disallowed.\n\n```pycon\n>>> m['e'] = 'e'\nTraceback (most recent call last):\nValueError: Key cannot map to itself\n```\n\n```pycon\n>>> m['d'] = 'e'\nTraceback (most recent call last):\nValueError: Key/Value pairs may not overlap\n```\n\n```pycon\n>>> m['e'] = 'd'\nTraceback (most recent call last):\nValueError: Key/Value pairs may not overlap\n```\n\n```pycon\n>>> print(m.pop('d'))\nc\n```\n\n```pycon\n>>> 'c' in m\nFalse\n```\n\n```pycon\n>>> m = BijectiveMap(dict(a='b'))\n>>> len(m)\n1\n>>> print(m['b'])\na\n```\n\n```pycon\n>>> m = BijectiveMap()\n>>> m.update(a='b')\n>>> m['b']\n'a'\n```\n\n```pycon\n>>> del m['b']\n>>> len(m)\n0\n>>> 'a' in m\nFalse\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.FrozenDict", "bases": ["collections.abc.Mapping", "collections.abc.Hashable"], "methods": [{"name": "setuptools._vendor.jaraco.collections.FrozenDict.__new__", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.FrozenDict.__contains__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}], "returns": null, "documentation": ["Container"]}, {"name": "setuptools._vendor.jaraco.collections.FrozenDict.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Hashable"]}, {"name": "setuptools._vendor.jaraco.collections.FrozenDict.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Mapping"]}, {"name": "setuptools._vendor.jaraco.collections.FrozenDict.__len__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.FrozenDict.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.FrozenDict.get", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": ["override get for efficiency provided by dict"]}, {"name": "setuptools._vendor.jaraco.collections.FrozenDict.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": ["override eq to recognize underlying implementation"]}, {"name": "setuptools._vendor.jaraco.collections.FrozenDict.copy", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.jaraco.collections.FrozenDict.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["An immutable mapping.\n\n```pycon\n>>> a = FrozenDict(a=1, b=2)\n>>> b = FrozenDict(a=1, b=2)\n>>> a == b\nTrue\n```\n\n```pycon\n>>> a == dict(a=1, b=2)\nTrue\n>>> dict(a=1, b=2) == a\nTrue\n>>> 'a' in a\nTrue\n>>> type(hash(a)) is type(0)\nTrue\n>>> set(iter(a)) == {'a', 'b'}\nTrue\n>>> len(a)\n2\n>>> a['a'] == a.get('a') == 1\nTrue\n```\n\n```pycon\n>>> a['c'] = 3\nTraceback (most recent call last):\n...\nTypeError: 'FrozenDict' object does not support item assignment\n```\n\n```pycon\n>>> a.update(y=3)\nTraceback (most recent call last):\n...\nAttributeError: 'FrozenDict' object has no attribute 'update'\n```\n\nCopies should compare equal\n\n```pycon\n>>> copy.copy(a) == a\nTrue\n```\n\nCopies should be the same type\n\n```pycon\n>>> isinstance(copy.copy(a), FrozenDict)\nTrue\n```\n\nFrozenDict supplies .copy(), even though\ncollections.abc.Mapping doesn't demand it.\n\n```pycon\n>>> a.copy() == a\nTrue\n>>> a.copy() is not a\nTrue\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.Enumeration", "bases": ["ItemsAsAttributes", "BijectiveMap"], "methods": [{"name": "setuptools._vendor.jaraco.collections.Enumeration.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "names", "type": null, "default": null}, {"name": "codes", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.Enumeration.names", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.Enumeration.codes", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A convenient way to provide enumerated values\n\n```pycon\n>>> e = Enumeration('a b c')\n>>> e['a']\n0\n```\n\n```pycon\n>>> e.a\n0\n```\n\n```pycon\n>>> e[1]\n'b'\n```\n\n```pycon\n>>> set(e.names) == set('abc')\nTrue\n```\n\n```pycon\n>>> set(e.codes) == set(range(3))\nTrue\n```\n\n```pycon\n>>> e.get('d') is None\nTrue\n```\n\nCodes need not start with 0\n\n```pycon\n>>> e = Enumeration('a b c', range(1, 4))\n>>> e['a']\n1\n```\n\n```pycon\n>>> e[3]\n'c'\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.Everything", "bases": [], "methods": [{"name": "setuptools._vendor.jaraco.collections.Everything.__contains__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A collection \"containing\" every possible thing.\n\n```pycon\n>>> 'foo' in Everything()\nTrue\n```\n\n```pycon\n>>> import random\n>>> random.randint(1, 999) in Everything()\nTrue\n```\n\n```pycon\n>>> random.choice([None, 'foo', 42, ('a', 'b', 'c')]) in Everything()\nTrue\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.InstrumentedDict", "bases": ["collections.UserDict"], "methods": [{"name": "setuptools._vendor.jaraco.collections.InstrumentedDict.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "data", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Instrument an existing dictionary with additional\nfunctionality, but always reference and mutate\nthe original dictionary.\n\n```pycon\n>>> orig = {'a': 1, 'b': 2}\n>>> inst = InstrumentedDict(orig)\n>>> inst['a']\n1\n>>> inst['c'] = 3\n>>> orig['c']\n3\n>>> inst.keys() == orig.keys()\nTrue\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.Least", "bases": [], "methods": [{"name": "setuptools._vendor.jaraco.collections.Least.__le__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.Least.__ge__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.jaraco.collections.Least.__lt__", "type": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.Least.__gt__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A value that is always lesser than any other\n\n```pycon\n>>> least = Least()\n>>> 3 < least\nFalse\n>>> 3 > least\nTrue\n>>> least < 3\nTrue\n>>> least <= 3\nTrue\n>>> least > 3\nFalse\n>>> 'x' > least\nTrue\n>>> None > least\nTrue\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.Greatest", "bases": [], "methods": [{"name": "setuptools._vendor.jaraco.collections.Greatest.__ge__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.Greatest.__le__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.jaraco.collections.Greatest.__gt__", "type": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.Greatest.__lt__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A value that is always greater than any other\n\n```pycon\n>>> greatest = Greatest()\n>>> 3 < greatest\nTrue\n>>> 3 > greatest\nFalse\n>>> greatest < 3\nFalse\n>>> greatest > 3\nTrue\n>>> greatest >= 3\nTrue\n>>> 'x' > greatest\nFalse\n>>> None > greatest\nFalse\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.FreezableDefaultDict", "bases": ["collections.defaultdict"], "methods": [{"name": "setuptools._vendor.jaraco.collections.FreezableDefaultDict.__missing__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.FreezableDefaultDict.freeze", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Often it is desirable to prevent the mutation of\na default dict after its initial construction, such\nas to prevent mutation during iteration.\n\n```pycon\n>>> dd = FreezableDefaultDict(list)\n>>> dd[0].append('1')\n>>> dd.freeze()\n>>> dd[1]\n[]\n>>> len(dd)\n1\n```\n"]}, {"name": "setuptools._vendor.jaraco.collections.Accumulator", "bases": [], "methods": [{"name": "setuptools._vendor.jaraco.collections.Accumulator.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "initial", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.Accumulator.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "val", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.WeightedLookup", "bases": ["RangeMap"], "methods": [{"name": "setuptools._vendor.jaraco.collections.WeightedLookup.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.collections.WeightedLookup.random", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Given parameters suitable for a dict representing keys\nand a weighted proportion, return a RangeMap representing\nspans of values proportial to the weights:\n\n```pycon\n>>> even = WeightedLookup(a=1, b=1)\n```\n\n\\[0, 1) -> a\n\\[1, 2) -> b\n\n```pycon\n>>> lk = WeightedLookup(a=1, b=2)\n```\n\n\\[0, 1) -> a\n\\[1, 3) -> b\n\n```pycon\n>>> lk[.5]\n'a'\n>>> lk[1.5]\n'b'\n```\n\nAdds `.random()` to select a random weighted value:\n\n```pycon\n>>> lk.random() in ['a', 'b']\nTrue\n```\n\n```pycon\n>>> choices = [lk.random() for x in range(1000)]\n```\n\nStatistically speaking, choices should be .5 a:b\n\\>>> ratio = choices.count('a') / choices.count('b')\n\\>>> .4 < ratio < .6\nTrue\n"]}], "exports": [{"name": "setuptools._vendor.jaraco.collections._SupportsComparison", "xref": {"fqname": "_operator._SupportsComparison", "project": null}}, {"name": "setuptools._vendor.jaraco.collections.annotations", "xref": {"fqname": "__future__.annotations", "project": null}}, {"name": "setuptools._vendor.jaraco.collections.Any", "xref": {"fqname": "typing.Any", "project": null}}, {"name": "setuptools._vendor.jaraco.collections.Callable", "xref": {"fqname": "typing.Callable", "project": null}}, {"name": "setuptools._vendor.jaraco.collections.Container", "xref": {"fqname": "collections.abc.Container", "project": null}}, {"name": "setuptools._vendor.jaraco.collections.Dict", "xref": {"fqname": "typing.Dict", "project": null}}, {"name": "setuptools._vendor.jaraco.collections.Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": null}}, {"name": "setuptools._vendor.jaraco.collections.Mapping", "xref": {"fqname": "collections.abc.Mapping", "project": null}}, {"name": "setuptools._vendor.jaraco.collections.overload", "xref": {"fqname": "typing.overload", "project": null}}, {"name": "setuptools._vendor.jaraco.collections.Self", "xref": {"fqname": "typing_extensions.Self", "project": null}}, {"name": "setuptools._vendor.jaraco.collections.SupportsKeysAndGetItem", "xref": {"fqname": "_typeshed.SupportsKeysAndGetItem", "project": null}}, {"name": "setuptools._vendor.jaraco.collections.TYPE_CHECKING", "xref": {"fqname": "typing.TYPE_CHECKING", "project": null}}, {"name": "setuptools._vendor.jaraco.collections.TypeVar", "xref": {"fqname": "typing.TypeVar", "project": null}}, {"name": "setuptools._vendor.jaraco.collections.Union", "xref": {"fqname": "typing.Union", "project": null}}]}, {"name": "setuptools._vendor.jaraco.text", "documentation": [], "functions": [{"name": "setuptools._vendor.jaraco.text.substitution", "asynchronous": false, "params": [{"name": "old", "type": null, "default": null}, {"name": "new", "type": null, "default": null}], "returns": null, "documentation": ["Return a function that will perform a substitution on a string"]}, {"name": "setuptools._vendor.jaraco.text.multi_substitution", "asynchronous": false, "params": [{"name": "*substitutions", "type": null, "default": null}], "returns": null, "documentation": ["Take a sequence of pairs specifying substitutions, and create\na function that performs those substitutions.\n\n```pycon\n>>> multi_substitution(('foo', 'bar'), ('bar', 'baz'))('foo')\n'baz'\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.is_decodable", "asynchronous": false, "params": [{"name": "value", "type": null, "default": null}], "returns": null, "documentation": ["Return True if the supplied value is decodable (using the default\nencoding).\n\n```pycon\n>>> is_decodable(b'\\xff')\nFalse\n>>> is_decodable(b'\\x32')\nTrue\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.is_binary", "asynchronous": false, "params": [{"name": "value", "type": null, "default": null}], "returns": null, "documentation": ["Return True if the value appears to be binary (that is, it's a byte\nstring and isn't decodable).\n\n```pycon\n>>> is_binary(b'\\xff')\nTrue\n>>> is_binary('\\xff')\nFalse\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.trim", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}], "returns": null, "documentation": ["Trim something like a docstring to remove the whitespace that\nis common due to indentation and formatting.\n\n```pycon\n>>> trim(\"\\n\\tfoo = bar\\n\\t\\tbar = baz\\n\")\n'foo = bar\\n\\tbar = baz'\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.wrap", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}], "returns": null, "documentation": ["Wrap lines of text, retaining existing newlines as\nparagraph markers.\n\n```pycon\n>>> print(wrap(lorem_ipsum))\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\nminim veniam, quis nostrud exercitation ullamco laboris nisi ut\naliquip ex ea commodo consequat. Duis aute irure dolor in\nreprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\npariatur. Excepteur sint occaecat cupidatat non proident, sunt in\nculpa qui officia deserunt mollit anim id est laborum.\n<BLANKLINE>\nCurabitur pretium tincidunt lacus. Nulla gravida orci a odio. Nullam\nvarius, turpis et commodo pharetra, est eros bibendum elit, nec luctus\nmagna felis sollicitudin mauris. Integer in mauris eu nibh euismod\ngravida. Duis ac tellus et risus vulputate vehicula. Donec lobortis\nrisus a elit. Etiam tempor. Ut ullamcorper, ligula eu tempor congue,\neros est euismod turpis, id tincidunt sapien risus a quam. Maecenas\nfermentum consequat mi. Donec fermentum. Pellentesque malesuada nulla\na mi. Duis sapien sem, aliquet nec, commodo eget, consequat quis,\nneque. Aliquam faucibus, elit ut dictum aliquet, felis nisl adipiscing\nsapien, sed malesuada diam lacus eget erat. Cras mollis scelerisque\nnunc. Nullam arcu. Aliquam consequat. Curabitur augue lorem, dapibus\nquis, laoreet et, pretium ac, nisi. Aenean magna nisl, mollis quis,\nmolestie eu, feugiat in, orci. In hac habitasse platea dictumst.\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.unwrap", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}], "returns": null, "documentation": ["Given a multi-line string, return an unwrapped version.\n\n```pycon\n>>> wrapped = wrap(lorem_ipsum)\n>>> wrapped.count('\\n')\n20\n>>> unwrapped = unwrap(wrapped)\n>>> unwrapped.count('\\n')\n1\n>>> print(unwrapped)\nLorem ipsum dolor sit amet, consectetur adipiscing ...\nCurabitur pretium tincidunt lacus. Nulla gravida orci ...\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.indent", "asynchronous": false, "params": [{"name": "string", "type": null, "default": null}, {"name": "prefix", "type": null, "default": "..."}], "returns": null, "documentation": ["```pycon\n>>> indent('foo')\n'    foo'\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.simple_html_strip", "asynchronous": false, "params": [{"name": "s", "type": null, "default": null}], "returns": null, "documentation": ["Remove HTML from the string `s`.\n\n```pycon\n>>> str(simple_html_strip(''))\n''\n```\n\n```pycon\n>>> print(simple_html_strip('A <bold>stormy</bold> day in paradise'))\nA stormy day in paradise\n```\n\n```pycon\n>>> print(simple_html_strip('Somebody <!-- do not --> tell the truth.'))\nSomebody  tell the truth.\n```\n\n```pycon\n>>> print(simple_html_strip('What about<br/>\\nmultiple lines?'))\nWhat about\nmultiple lines?\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.remove_prefix", "asynchronous": false, "params": [{"name": "text", "type": null, "default": null}, {"name": "prefix", "type": null, "default": null}], "returns": null, "documentation": ["Remove the prefix from the text if it exists.\n\n```pycon\n>>> remove_prefix('underwhelming performance', 'underwhelming ')\n'performance'\n```\n\n```pycon\n>>> remove_prefix('something special', 'sample')\n'something special'\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.remove_suffix", "asynchronous": false, "params": [{"name": "text", "type": null, "default": null}, {"name": "suffix", "type": null, "default": null}], "returns": null, "documentation": ["Remove the suffix from the text if it exists.\n\n```pycon\n>>> remove_suffix('name.git', '.git')\n'name'\n```\n\n```pycon\n>>> remove_suffix('something special', 'sample')\n'something special'\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.normalize_newlines", "asynchronous": false, "params": [{"name": "text", "type": null, "default": null}], "returns": null, "documentation": ["Replace alternate newlines with the canonical newline.\n\n```pycon\n>>> normalize_newlines('Lorem Ipsum\\u2029')\n'Lorem Ipsum\\n'\n>>> normalize_newlines('Lorem Ipsum\\r\\n')\n'Lorem Ipsum\\n'\n>>> normalize_newlines('Lorem Ipsum\\x85')\n'Lorem Ipsum\\n'\n```\n"]}, {"name": "setuptools._vendor.jaraco.text._nonblank", "asynchronous": false, "params": [{"name": "str", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.yield_lines", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}], "returns": null, "documentation": ["Yield valid lines of a string or iterable.\n\n```pycon\n>>> list(yield_lines(''))\n[]\n>>> list(yield_lines(['foo', 'bar']))\n['foo', 'bar']\n>>> list(yield_lines('foo\\nbar'))\n['foo', 'bar']\n>>> list(yield_lines('\\nfoo\\n#bar\\nbaz #comment'))\n['foo', 'baz #comment']\n>>> list(yield_lines(['foo\\nbar', 'baz', 'bing\\n\\n\\n']))\n['foo', 'bar', 'baz', 'bing']\n```\n"]}, {"name": "setuptools._vendor.jaraco.text._", "asynchronous": false, "params": [{"name": "text", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.drop_comment", "asynchronous": false, "params": [{"name": "line", "type": null, "default": null}], "returns": null, "documentation": ["Drop comments.\n\n```pycon\n>>> drop_comment('foo # bar')\n'foo'\n```\n\nA hash without a space may be in a URL.\n\n```pycon\n>>> drop_comment('http://example.com/foo#bar')\n'http://example.com/foo#bar'\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.join_continuation", "asynchronous": false, "params": [{"name": "lines", "type": null, "default": null}], "returns": null, "documentation": ["Join lines continued by a trailing backslash.\n\n```pycon\n>>> list(join_continuation(['foo \\\\', 'bar', 'baz']))\n['foobar', 'baz']\n>>> list(join_continuation(['foo \\\\', 'bar', 'baz']))\n['foobar', 'baz']\n>>> list(join_continuation(['foo \\\\', 'bar \\\\', 'baz']))\n['foobarbaz']\n```\n\nNot sure why, but...\nThe character preceding the backslash is also elided.\n\n```pycon\n>>> list(join_continuation(['goo\\\\', 'dly']))\n['godly']\n```\n\nA terrible idea, but...\nIf no line is available to continue, suppress the lines.\n\n```pycon\n>>> list(join_continuation(['foo', 'bar\\\\', 'baz\\\\']))\n['foo']\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.read_newlines", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}, {"name": "limit", "type": null, "default": "..."}], "returns": null, "documentation": ["```pycon\n>>> tmp_path = getfixture('tmp_path')\n>>> filename = tmp_path / 'out.txt'\n>>> _ = filename.write_text('foo\\n', newline='', encoding='utf-8')\n>>> read_newlines(filename)\n'\\n'\n>>> _ = filename.write_text('foo\\r\\n', newline='', encoding='utf-8')\n>>> read_newlines(filename)\n'\\r\\n'\n>>> _ = filename.write_text('foo\\r\\nbar\\nbing\\r', newline='', encoding='utf-8')\n>>> read_newlines(filename)\n('\\r', '\\n', '\\r\\n')\n```\n"]}], "variables": [{"name": "setuptools._vendor.jaraco.text._unicode_trap", "type": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.lorem_ipsum", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.words", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.jaraco.text.FoldedCase", "bases": ["str"], "methods": [{"name": "setuptools._vendor.jaraco.text.FoldedCase.__lt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.FoldedCase.__gt__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.FoldedCase.__eq__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.FoldedCase.__ne__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.FoldedCase.__hash__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.FoldedCase.__contains__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.FoldedCase.in_", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "other", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.FoldedCase.casefold", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["cache casefold since it's likely to be called frequently."]}, {"name": "setuptools._vendor.jaraco.text.FoldedCase.index", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "sub", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.FoldedCase.split", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "splitter", "type": null, "default": "..."}, {"name": "maxsplit", "type": null, "default": "..."}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A case insensitive string class; behaves just like str\nexcept compares equal when the only variation is case.\n\n```pycon\n>>> s = FoldedCase('hello world')\n```\n\n```pycon\n>>> s == 'Hello World'\nTrue\n```\n\n```pycon\n>>> 'Hello World' == s\nTrue\n```\n\n```pycon\n>>> s != 'Hello World'\nFalse\n```\n\n```pycon\n>>> s.index('O')\n4\n```\n\n```pycon\n>>> s.split('O')\n['hell', ' w', 'rld']\n```\n\n```pycon\n>>> sorted(map(FoldedCase, ['GAMMA', 'alpha', 'Beta']))\n['alpha', 'Beta', 'GAMMA']\n```\n\nSequence membership is straightforward.\n\n```pycon\n>>> \"Hello World\" in [s]\nTrue\n>>> s in [\"Hello World\"]\nTrue\n```\n\nAllows testing for set inclusion, but candidate and elements\nmust both be folded.\n\n```pycon\n>>> FoldedCase(\"Hello World\") in {s}\nTrue\n>>> s in {FoldedCase(\"Hello World\")}\nTrue\n```\n\nString inclusion works as long as the FoldedCase object\nis on the right.\n\n```pycon\n>>> \"hello\" in FoldedCase(\"Hello World\")\nTrue\n```\n\nBut not if the FoldedCase object is on the left:\n\n```pycon\n>>> FoldedCase('hello') in 'Hello World'\nFalse\n```\n\nIn that case, use `in_`:\n\n```pycon\n>>> FoldedCase('hello').in_('Hello World')\nTrue\n```\n\n```pycon\n>>> FoldedCase('hello') > FoldedCase('Hello')\nFalse\n```\n\n```pycon\n>>> FoldedCase('\u00df') == FoldedCase('ss')\nTrue\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.Splitter", "bases": [], "methods": [{"name": "setuptools._vendor.jaraco.text.Splitter.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.Splitter.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "s", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["object that will split a string with the given arguments for each call\n\n```pycon\n>>> s = Splitter(',')\n>>> s('hello, world, this is your, master calling')\n['hello', ' world', ' this is your', ' master calling']\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.WordSet", "bases": ["tuple"], "methods": [{"name": "setuptools._vendor.jaraco.text.WordSet.capitalized", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.WordSet.lowered", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.WordSet.camel_case", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.WordSet.headless_camel_case", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.WordSet.underscore_separated", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.WordSet.dash_separated", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.WordSet.space_separated", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.WordSet.trim_right", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": null, "default": null}], "returns": null, "documentation": ["Remove the item from the end of the set.\n\n```pycon\n>>> WordSet.parse('foo bar').trim_right('foo')\n('foo', 'bar')\n>>> WordSet.parse('foo bar').trim_right('bar')\n('foo',)\n>>> WordSet.parse('').trim_right('bar')\n()\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.WordSet.trim_left", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": null, "default": null}], "returns": null, "documentation": ["Remove the item from the beginning of the set.\n\n```pycon\n>>> WordSet.parse('foo bar').trim_left('foo')\n('bar',)\n>>> WordSet.parse('foo bar').trim_left('bar')\n('foo', 'bar')\n>>> WordSet.parse('').trim_left('bar')\n()\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.WordSet.trim", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": null, "default": null}], "returns": null, "documentation": ["```pycon\n>>> WordSet.parse('foo bar').trim('foo')\n('bar',)\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.WordSet.__getitem__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "item", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.WordSet.parse", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "identifier", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.WordSet.from_class_name", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "subject", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.jaraco.text.WordSet._pattern", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Given an identifier, return the words that identifier represents,\nwhether in camel case, underscore-separated, etc.\n\n```pycon\n>>> WordSet.parse(\"camelCase\")\n('camel', 'Case')\n```\n\n```pycon\n>>> WordSet.parse(\"under_sep\")\n('under', 'sep')\n```\n\nAcronyms should be retained\n\n```pycon\n>>> WordSet.parse(\"firstSNL\")\n('first', 'SNL')\n```\n\n```pycon\n>>> WordSet.parse(\"you_and_I\")\n('you', 'and', 'I')\n```\n\n```pycon\n>>> WordSet.parse(\"A simple test\")\n('A', 'simple', 'test')\n```\n\nMultiple caps should not interfere with the first cap of another word.\n\n```pycon\n>>> WordSet.parse(\"myABCClass\")\n('my', 'ABC', 'Class')\n```\n\nThe result is a WordSet, providing access to other forms.\n\n```pycon\n>>> WordSet.parse(\"myABCClass\").underscore_separated()\n'my_ABC_Class'\n```\n\n```pycon\n>>> WordSet.parse('a-command').camel_case()\n'ACommand'\n```\n\n```pycon\n>>> WordSet.parse('someIdentifier').lowered().space_separated()\n'some identifier'\n```\n\nSlices of the result should return another WordSet.\n\n```pycon\n>>> WordSet.parse('taken-out-of-context')[1:].underscore_separated()\n'out_of_context'\n```\n\n```pycon\n>>> WordSet.from_class_name(WordSet()).lowered().space_separated()\n'word set'\n```\n\n```pycon\n>>> example = WordSet.parse('figured it out')\n>>> example.headless_camel_case()\n'figuredItOut'\n>>> example.dash_separated()\n'figured-it-out'\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.SeparatedValues", "bases": ["str"], "methods": [{"name": "setuptools._vendor.jaraco.text.SeparatedValues.__iter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.jaraco.text.SeparatedValues.separator", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A string separated by a separator. Overrides \\_\\_iter\\_\\_ for getting\nthe values.\n\n```pycon\n>>> list(SeparatedValues('a,b,c'))\n['a', 'b', 'c']\n```\n\nWhitespace is stripped and empty values are discarded.\n\n```pycon\n>>> list(SeparatedValues(' a,   b   , c,  '))\n['a', 'b', 'c']\n```\n"]}, {"name": "setuptools._vendor.jaraco.text.Stripper", "bases": [], "methods": [{"name": "setuptools._vendor.jaraco.text.Stripper.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "prefix", "type": null, "default": null}, {"name": "lines", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.Stripper.strip_prefix", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "lines", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.Stripper.__call__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "line", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.jaraco.text.Stripper.common_prefix", "asynchronous": false, "params": [{"name": "s1", "type": null, "default": null}, {"name": "s2", "type": null, "default": null}], "returns": null, "documentation": ["Return the common prefix of two lines."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Given a series of lines, find the common prefix and strip it from them.\n\n```pycon\n>>> lines = [\n...     'abcdefg\\n',\n...     'abc\\n',\n...     'abcde\\n',\n... ]\n>>> res = Stripper.strip_prefix(lines)\n>>> res.prefix\n'abc'\n>>> list(res.lines)\n['defg\\n', '\\n', 'de\\n']\n```\n\nIf no prefix is common, nothing should be stripped.\n\n```pycon\n>>> lines = [\n...     'abcd\\n',\n...     '1234\\n',\n... ]\n>>> res = Stripper.strip_prefix(lines)\n>>> res.prefix = ''\n>>> list(res.lines)\n['abcd\\n', '1234\\n']\n```\n"]}], "exports": [{"name": "setuptools._vendor.jaraco.text.compose", "xref": {"fqname": "jaraco.functools.compose", "project": null}}, {"name": "setuptools._vendor.jaraco.text.ExceptionTrap", "xref": {"fqname": "jaraco.context.ExceptionTrap", "project": null}}, {"name": "setuptools._vendor.jaraco.text.files", "xref": {"fqname": "importlib.resources.files", "project": null}}, {"name": "setuptools._vendor.jaraco.text.files", "xref": {"fqname": "importlib_resources.files", "project": null}}, {"name": "setuptools._vendor.jaraco.text.method_cache", "xref": {"fqname": "jaraco.functools.method_cache", "project": null}}]}, {"name": "setuptools._vendor.typeguard._exceptions", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools._vendor.typeguard._exceptions.TypeHintWarning", "bases": ["UserWarning"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A warning that is emitted when a type hint in string form could not be resolved to\nan actual type."]}, {"name": "setuptools._vendor.typeguard._exceptions.TypeCheckWarning", "bases": ["UserWarning"], "methods": [{"name": "setuptools._vendor.typeguard._exceptions.TypeCheckWarning.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "message", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Emitted by typeguard's type checkers when a type mismatch is detected."]}, {"name": "setuptools._vendor.typeguard._exceptions.InstrumentationWarning", "bases": ["UserWarning"], "methods": [{"name": "setuptools._vendor.typeguard._exceptions.InstrumentationWarning.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "message", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Emitted when there's a problem with instrumenting a function for type checks."]}, {"name": "setuptools._vendor.typeguard._exceptions.TypeCheckError", "bases": ["Exception"], "methods": [{"name": "setuptools._vendor.typeguard._exceptions.TypeCheckError.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "message", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._exceptions.TypeCheckError.append_path_element", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "element", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._exceptions.TypeCheckError.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Raised by typeguard's type checkers when a type mismatch is detected."]}], "exports": []}, {"name": "setuptools._vendor.typeguard._utils", "documentation": [], "functions": [{"name": "setuptools._vendor.typeguard._utils.evaluate_forwardref", "asynchronous": false, "params": [{"name": "forwardref", "type": {"name": "ForwardRef", "xref": {"fqname": "typing.ForwardRef", "project": "--std--"}, "params": null}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._utils._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._utils.evaluate_forwardref", "asynchronous": false, "params": [{"name": "forwardref", "type": {"name": "ForwardRef", "xref": {"fqname": "typing.ForwardRef", "project": "--std--"}, "params": null}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._utils._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._utils.evaluate_forwardref", "asynchronous": false, "params": [{"name": "forwardref", "type": {"name": "ForwardRef", "xref": {"fqname": "typing.ForwardRef", "project": "--std--"}, "params": null}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._utils._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._utils.get_type_name", "asynchronous": false, "params": [{"name": "type_", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._utils.qualified_name", "asynchronous": false, "params": [{"name": "obj", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "add_class_prefix", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return the qualified name (e.g. package.module.Type) for the given object.\n\nBuiltins and types from the {mod}`typing` package get special treatment by having\nthe module name stripped from the generated name.\n"]}, {"name": "setuptools._vendor.typeguard._utils.function_name", "asynchronous": false, "params": [{"name": "func", "type": {"name": "Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": [{"name": "...", "xref": null, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return the qualified name of the given function.\n\nBuiltins and types from the {mod}`typing` package get special treatment by having\nthe module name stripped from the generated name.\n"]}, {"name": "setuptools._vendor.typeguard._utils.resolve_reference", "asynchronous": false, "params": [{"name": "reference", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._utils.is_method_of", "asynchronous": false, "params": [{"name": "obj", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}, {"name": "cls", "type": {"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._utils.get_stacklevel", "asynchronous": false, "params": [], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}], "variables": [{"name": "setuptools._vendor.typeguard._utils.evaluate_extra_args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "frozenset", "xref": {"fqname": "functions.frozenset", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, {"name": "...", "xref": null, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.typeguard._utils._functions_map", "type": {"name": "WeakValueDictionary", "xref": {"fqname": "weakref.WeakValueDictionary", "project": "--std--"}, "params": [{"name": "CodeType", "xref": {"fqname": "types.CodeType", "project": "--std--"}, "params": null}, {"name": "FunctionType", "xref": {"fqname": "types.FunctionType", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.typeguard._utils.unset", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.typeguard._utils.Unset", "bases": [], "methods": [{"name": "setuptools._vendor.typeguard._utils.Unset.__repr__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typeguard._utils.Unset.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._vendor.typeguard._decorators", "documentation": [], "functions": [{"name": "setuptools._vendor.typeguard._decorators.typeguard_ignore", "asynchronous": false, "params": [{"name": "f", "type": {"name": "_F", "xref": {"fqname": "_F", "project": null}, "params": null}, "default": null}], "returns": {"name": "_F", "xref": {"fqname": "_F", "project": null}, "params": null}, "documentation": ["This decorator is a noop during static type-checking."]}, {"name": "setuptools._vendor.typeguard._decorators.make_cell", "asynchronous": false, "params": [{"name": "value", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "_Cell", "xref": {"fqname": "typeshed.stdlib.types._Cell", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._decorators.find_target_function", "asynchronous": false, "params": [{"name": "new_code", "type": {"name": "CodeType", "xref": {"fqname": "types.CodeType", "project": "--std--"}, "params": null}, "default": null}, {"name": "target_path", "type": {"name": "Sequence", "xref": {"fqname": "collections.abc.Sequence", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "firstlineno", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "CodeType | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._decorators.instrument", "asynchronous": false, "params": [{"name": "f", "type": {"name": "T_CallableOrType", "xref": {"fqname": "T_CallableOrType", "project": null}, "params": null}, "default": null}], "returns": {"name": "FunctionType | str", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._decorators.typechecked", "asynchronous": false, "params": [{"name": "forward_ref_policy", "type": {"name": "ForwardRefPolicy | Unset", "xref": null, "params": null}, "default": "..."}, {"name": "typecheck_fail_callback", "type": {"name": "TypeCheckFailCallback | Unset", "xref": null, "params": null}, "default": "..."}, {"name": "collection_check_strategy", "type": {"name": "CollectionCheckStrategy | Unset", "xref": null, "params": null}, "default": "..."}, {"name": "debug_instrumentation", "type": {"name": "bool | Unset", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": [{"name": "", "xref": null, "params": [{"name": "T_CallableOrType", "xref": {"fqname": "T_CallableOrType", "project": null}, "params": null}]}, {"name": "T_CallableOrType", "xref": {"fqname": "T_CallableOrType", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.typeguard._decorators.typechecked", "asynchronous": false, "params": [{"name": "target", "type": {"name": "T_CallableOrType", "xref": {"fqname": "T_CallableOrType", "project": null}, "params": null}, "default": null}], "returns": {"name": "T_CallableOrType", "xref": {"fqname": "T_CallableOrType", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._decorators.typechecked", "asynchronous": false, "params": [{"name": "target", "type": {"name": "T_CallableOrType | None", "xref": null, "params": null}, "default": "..."}, {"name": "forward_ref_policy", "type": {"name": "ForwardRefPolicy | Unset", "xref": null, "params": null}, "default": "..."}, {"name": "typecheck_fail_callback", "type": {"name": "TypeCheckFailCallback | Unset", "xref": null, "params": null}, "default": "..."}, {"name": "collection_check_strategy", "type": {"name": "CollectionCheckStrategy | Unset", "xref": null, "params": null}, "default": "..."}, {"name": "debug_instrumentation", "type": {"name": "bool | Unset", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": ["Instrument the target function to perform run-time type checking.\n\nThis decorator recompiles the target function, injecting code to type check\narguments, return values, yield values (excluding `yield from`) and assignments to\nannotated local variables.\n\nThis can also be used as a class decorator. This will instrument all type annotated\nmethods, including {func}`@classmethod <classmethod>`,\n{func}`@staticmethod <staticmethod>`, and {class}`@property <property>` decorated\nmethods in the class.\n\n:::{note}\nWhen Python is run in optimized mode (`-O` or `-OO`, this decorator\nis a no-op). This is a feature meant for selectively introducing type checking\ninto a code base where the checks aren't meant to be run in production.\n:::\n\n```\nparam target\n\nthe function or class to enable type checking for\n\nparam forward_ref_policy\n\noverride for\n\n\nparam typecheck_fail_callback\n\noverride for\n\n\nparam collection_check_strategy\n\noverride for\n\n\nparam debug_instrumentation\n\noverride for\n```\n"]}], "variables": [{"name": "setuptools._vendor.typeguard._decorators._F", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._decorators.T_CallableOrType", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._vendor.typeguard", "documentation": [], "functions": [{"name": "setuptools._vendor.typeguard.__getattr__", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}], "variables": [{"name": "setuptools._vendor.typeguard.value.__module__", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard.config", "type": {"name": "TypeCheckConfiguration", "xref": {"fqname": "setuptools._vendor.typeguard._config.TypeCheckConfiguration", "project": null}, "params": null}, "documentation": []}], "classes": [], "exports": [{"name": "setuptools._vendor.typeguard.Any", "xref": {"fqname": "typing.Any", "project": null}}, {"name": "setuptools._vendor.typeguard.check_type", "xref": {"fqname": "setuptools._vendor.typeguard._functions.check_type", "project": null}}, {"name": "setuptools._vendor.typeguard.check_type_internal", "xref": {"fqname": "setuptools._vendor.typeguard._checkers.check_type_internal", "project": null}}, {"name": "setuptools._vendor.typeguard.checker_lookup_functions", "xref": {"fqname": "setuptools._vendor.typeguard._checkers.checker_lookup_functions", "project": null}}, {"name": "setuptools._vendor.typeguard.CollectionCheckStrategy", "xref": {"fqname": "setuptools._vendor.typeguard._config.CollectionCheckStrategy", "project": null}}, {"name": "setuptools._vendor.typeguard.ForwardRefPolicy", "xref": {"fqname": "setuptools._vendor.typeguard._config.ForwardRefPolicy", "project": null}}, {"name": "setuptools._vendor.typeguard.ImportHookManager", "xref": {"fqname": "setuptools._vendor.typeguard._importhook.ImportHookManager", "project": null}}, {"name": "setuptools._vendor.typeguard.install_import_hook", "xref": {"fqname": "setuptools._vendor.typeguard._importhook.install_import_hook", "project": null}}, {"name": "setuptools._vendor.typeguard.InstrumentationWarning", "xref": {"fqname": "setuptools._vendor.typeguard._exceptions.InstrumentationWarning", "project": null}}, {"name": "setuptools._vendor.typeguard.load_plugins", "xref": {"fqname": "setuptools._vendor.typeguard._checkers.load_plugins", "project": null}}, {"name": "setuptools._vendor.typeguard.suppress_type_checks", "xref": {"fqname": "setuptools._vendor.typeguard._suppression.suppress_type_checks", "project": null}}, {"name": "setuptools._vendor.typeguard.TypeCheckConfiguration", "xref": {"fqname": "setuptools._vendor.typeguard._config.TypeCheckConfiguration", "project": null}}, {"name": "setuptools._vendor.typeguard.typechecked", "xref": {"fqname": "setuptools._vendor.typeguard._decorators.typechecked", "project": null}}, {"name": "setuptools._vendor.typeguard.TypeCheckerCallable", "xref": {"fqname": "setuptools._vendor.typeguard._checkers.TypeCheckerCallable", "project": null}}, {"name": "setuptools._vendor.typeguard.TypeCheckError", "xref": {"fqname": "setuptools._vendor.typeguard._exceptions.TypeCheckError", "project": null}}, {"name": "setuptools._vendor.typeguard.TypeCheckFailCallback", "xref": {"fqname": "setuptools._vendor.typeguard._functions.TypeCheckFailCallback", "project": null}}, {"name": "setuptools._vendor.typeguard.TypeCheckLookupCallback", "xref": {"fqname": "setuptools._vendor.typeguard._checkers.TypeCheckLookupCallback", "project": null}}, {"name": "setuptools._vendor.typeguard.TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._memo.TypeCheckMemo", "project": null}}, {"name": "setuptools._vendor.typeguard.TypeCheckWarning", "xref": {"fqname": "setuptools._vendor.typeguard._exceptions.TypeCheckWarning", "project": null}}, {"name": "setuptools._vendor.typeguard.typeguard_ignore", "xref": {"fqname": "setuptools._vendor.typeguard._decorators.typeguard_ignore", "project": null}}, {"name": "setuptools._vendor.typeguard.TypeguardFinder", "xref": {"fqname": "setuptools._vendor.typeguard._importhook.TypeguardFinder", "project": null}}, {"name": "setuptools._vendor.typeguard.TypeHintWarning", "xref": {"fqname": "setuptools._vendor.typeguard._exceptions.TypeHintWarning", "project": null}}, {"name": "setuptools._vendor.typeguard.Unset", "xref": {"fqname": "setuptools._vendor.typeguard._utils.Unset", "project": null}}, {"name": "setuptools._vendor.typeguard.warn_on_error", "xref": {"fqname": "setuptools._vendor.typeguard._functions.warn_on_error", "project": null}}]}, {"name": "setuptools._vendor.typeguard._memo", "documentation": [], "functions": [], "variables": [], "classes": [{"name": "setuptools._vendor.typeguard._memo.TypeCheckMemo", "bases": [], "methods": [{"name": "setuptools._vendor.typeguard._memo.TypeCheckMemo.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "globals", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "locals", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "self_type", "type": {"name": "type | None", "xref": null, "params": null}, "default": "..."}, {"name": "config", "type": {"name": "TypeCheckConfiguration", "xref": {"fqname": "typeguard._config.TypeCheckConfiguration", "project": null}, "params": null}, "default": "..."}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typeguard._memo.TypeCheckMemo.__slots__", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Contains information necessary for type checkers to do their work.\n\n```\n.. attribute:: globals\n   :type: dict[str, Any]\n\n    Dictionary of global variables to use for resolving forward references.\n```\n\n```\n.. attribute:: locals\n   :type: dict[str, Any]\n\n    Dictionary of local variables to use for resolving forward references.\n```\n\n```\n.. attribute:: self_type\n   :type: type | None\n\n    When running type checks within an instance method or class method, this is the\n    class object that the first argument (usually named ``self`` or ``cls``) refers\n    to.\n```\n\n```\n.. attribute:: config\n   :type: TypeCheckConfiguration\n\n     Contains the configuration for a particular set of type checking operations.\n```\n"]}], "exports": []}, {"name": "setuptools._vendor.typeguard._functions", "documentation": [], "functions": [{"name": "setuptools._vendor.typeguard._functions.check_type", "asynchronous": false, "params": [{"name": "value", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}, {"name": "expected_type", "type": {"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": [{"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}]}, "default": null}, {"name": "forward_ref_policy", "type": {"name": "ForwardRefPolicy", "xref": {"fqname": "setuptools._vendor.typeguard._functions._config.ForwardRefPolicy", "project": null}, "params": null}, "default": "..."}, {"name": "typecheck_fail_callback", "type": {"name": "TypeCheckFailCallback | None", "xref": null, "params": null}, "default": "..."}, {"name": "collection_check_strategy", "type": {"name": "CollectionCheckStrategy", "xref": {"fqname": "setuptools._vendor.typeguard._functions._config.CollectionCheckStrategy", "project": null}, "params": null}, "default": "..."}], "returns": {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._functions.check_type", "asynchronous": false, "params": [{"name": "value", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}, {"name": "expected_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "forward_ref_policy", "type": {"name": "ForwardRefPolicy", "xref": {"fqname": "setuptools._vendor.typeguard._functions._config.ForwardRefPolicy", "project": null}, "params": null}, "default": "..."}, {"name": "typecheck_fail_callback", "type": {"name": "TypeCheckFailCallback | None", "xref": null, "params": null}, "default": "..."}, {"name": "collection_check_strategy", "type": {"name": "CollectionCheckStrategy", "xref": {"fqname": "setuptools._vendor.typeguard._functions._config.CollectionCheckStrategy", "project": null}, "params": null}, "default": "..."}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._functions.check_type", "asynchronous": false, "params": [{"name": "value", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}, {"name": "expected_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "forward_ref_policy", "type": {"name": "ForwardRefPolicy", "xref": {"fqname": "setuptools._vendor.typeguard._functions._config.ForwardRefPolicy", "project": null}, "params": null}, "default": "..."}, {"name": "typecheck_fail_callback", "type": {"name": "TypeCheckFailCallback | None", "xref": null, "params": null}, "default": "..."}, {"name": "collection_check_strategy", "type": {"name": "CollectionCheckStrategy", "xref": {"fqname": "setuptools._vendor.typeguard._functions._config.CollectionCheckStrategy", "project": null}, "params": null}, "default": "..."}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": ["Ensure that `value` matches `expected_type`.\n\nThe types from the {mod}`typing` module do not support {func}`isinstance` or\n{func}`issubclass` so a number of type specific checks are required. This function\nknows which checker to call for which type.\n\nThis function wraps {func}`~.check_type_internal` in the following ways:\n\n- Respects type checking suppression ({func}`~.suppress_type_checks`)\n- Forms a {class}`~.TypeCheckMemo` from the current stack frame\n- Calls the configured type check fail callback if the check fails\n\nNote that this function is independent of the globally shared configuration in\n{data}`typeguard.config`. This means that usage within libraries is safe from being\naffected configuration changes made by other libraries or by the integrating\napplication. Instead, configuration options have the same default values as their\ncorresponding fields in {class}`TypeCheckConfiguration`.\n\n```\nparam value\n\nvalue to be checked against expected_type\n\nparam expected_type\n\na class or generic type instance, or a tuple of such things\n\nparam forward_ref_policy\n\nsee \n\nparam typecheck_fail_callback\n\nsee :attr`TypeCheckConfiguration.typecheck_fail_callback`\n\nparam collection_check_strategy\n\nsee \n\nreturn\n\nvalue, unmodified\n\nraises TypeCheckError\n\nif there is a type mismatch\n```\n"]}, {"name": "setuptools._vendor.typeguard._functions.check_argument_types", "asynchronous": false, "params": [{"name": "func_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "arguments", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._functions._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "Literal", "xref": {"fqname": "typing_extensions.Literal", "project": null}, "params": [{"name": "True", "xref": {"fqname": "constants.True", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.typeguard._functions.check_return_type", "asynchronous": false, "params": [{"name": "func_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "retval", "type": {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}, "default": null}, {"name": "annotation", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._functions._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._functions.check_send_type", "asynchronous": false, "params": [{"name": "func_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "sendval", "type": {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}, "default": null}, {"name": "annotation", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._functions._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._functions.check_yield_type", "asynchronous": false, "params": [{"name": "func_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "yieldval", "type": {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}, "default": null}, {"name": "annotation", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._functions._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._functions.check_variable_assignment", "asynchronous": false, "params": [{"name": "value", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}, {"name": "varname", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "annotation", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._functions._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._functions.check_multi_variable_assignment", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "targets", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._functions._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._functions.warn_on_error", "asynchronous": false, "params": [{"name": "exc", "type": {"name": "TypeCheckError", "xref": {"fqname": "setuptools._vendor.typeguard._functions._exceptions.TypeCheckError", "project": null}, "params": null}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._functions._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Emit a warning on a type mismatch.\n\nThis is intended to be used as an error handler in\n{attr}`TypeCheckConfiguration.typecheck_fail_callback`.\n"]}], "variables": [{"name": "setuptools._vendor.typeguard._functions.T", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._functions.TypeCheckFailCallback", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._vendor.typeguard._suppression", "documentation": [], "functions": [{"name": "setuptools._vendor.typeguard._suppression.suppress_type_checks", "asynchronous": false, "params": [{"name": "func", "type": {"name": "Callable", "xref": {"fqname": "collections.abc.Callable", "project": "--std--"}, "params": [{"name": "P", "xref": {"fqname": "P", "project": null}, "params": null}, {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "Callable", "xref": {"fqname": "collections.abc.Callable", "project": "--std--"}, "params": [{"name": "P", "xref": {"fqname": "P", "project": null}, "params": null}, {"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.typeguard._suppression.suppress_type_checks", "asynchronous": false, "params": [], "returns": {"name": "ContextManager", "xref": {"fqname": "typing.ContextManager", "project": "--std--"}, "params": [{"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.typeguard._suppression.suppress_type_checks", "asynchronous": false, "params": [{"name": "func", "type": {"name": "Callable[P, T] | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "Callable[P, T] | ContextManager[None]", "xref": null, "params": null}, "documentation": ["Temporarily suppress all type checking.\n\nThis function has two operating modes, based on how it's used:\n\n1. as a context manager (`with suppress_type_checks(): ...`)\n2. as a decorator (`@suppress_type_checks`)\n\nWhen used as a context manager, {func}`check_type` and any automatically\ninstrumented functions skip the actual type checking. These context managers can be\nnested.\n\nWhen used as a decorator, all type checking is suppressed while the function is\nrunning.\n\nType checking will resume once no more context managers are active and no decorated\nfunctions are running.\n\nBoth operating modes are thread-safe.\n"]}], "variables": [{"name": "setuptools._vendor.typeguard._suppression.P", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._suppression.T", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._suppression.type_checks_suppressed", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._suppression.type_checks_suppress_lock", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._vendor.inflect.compat.py38", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.inflect.compat", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools._vendor.typeguard._config", "documentation": [], "functions": [], "variables": [{"name": "setuptools._vendor.typeguard._config.T", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._config.global_config", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.typeguard._config.ForwardRefPolicy", "bases": ["Enum"], "methods": [], "class_variables": [{"name": "setuptools._vendor.typeguard._config.ForwardRefPolicy.ERROR", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._config.ForwardRefPolicy.WARN", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._config.ForwardRefPolicy.IGNORE", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Defines how unresolved forward references are handled.\n\nMembers:\n\n- `ERROR`: propagate the {exc}`NameError` when the forward reference lookup fails\n- `WARN`: emit a {class}`~.TypeHintWarning` if the forward reference lookup fails\n- `IGNORE`: silently skip checks for unresolveable forward references\n"]}, {"name": "setuptools._vendor.typeguard._config.CollectionCheckStrategy", "bases": ["Enum"], "methods": [{"name": "setuptools._vendor.typeguard._config.CollectionCheckStrategy.iterate_samples", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "collection", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "T", "xref": {"fqname": "T", "project": null}, "params": null}]}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typeguard._config.CollectionCheckStrategy.FIRST_ITEM", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._config.CollectionCheckStrategy.ALL_ITEMS", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Specifies how thoroughly the contents of collections are type checked.\n\nThis has an effect on the following built-in checkers:\n\n- `AbstractSet`\n- `Dict`\n- `List`\n- `Mapping`\n- `Set`\n- `Tuple[<type>, ...]` (arbitrarily sized tuples)\n\nMembers:\n\n- `FIRST_ITEM`: check only the first item\n- `ALL_ITEMS`: check all items\n"]}, {"name": "setuptools._vendor.typeguard._config.TypeCheckConfiguration", "bases": [], "methods": [], "class_variables": [{"name": "setuptools._vendor.typeguard._config.TypeCheckConfiguration.forward_ref_policy", "type": {"name": "ForwardRefPolicy", "xref": {"fqname": "setuptools._vendor.typeguard._config.ForwardRefPolicy", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._config.TypeCheckConfiguration.typecheck_fail_callback", "type": {"name": "TypeCheckFailCallback | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._config.TypeCheckConfiguration.collection_check_strategy", "type": {"name": "CollectionCheckStrategy", "xref": {"fqname": "setuptools._vendor.typeguard._config.CollectionCheckStrategy", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._config.TypeCheckConfiguration.debug_instrumentation", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["> You can change Typeguard's behavior with these settings.\n\n```\n.. attribute:: typecheck_fail_callback\n   :type: Callable[[TypeCheckError, TypeCheckMemo], Any]\n\n     Callable that is called when type checking fails.\n\n     Default: ``None`` (the :exc:`~.TypeCheckError` is raised directly)\n```\n\n```\n.. attribute:: forward_ref_policy\n   :type: ForwardRefPolicy\n\n     Specifies what to do when a forward reference fails to resolve.\n\n     Default: ``WARN``\n```\n\n```\n.. attribute:: collection_check_strategy\n   :type: CollectionCheckStrategy\n\n     Specifies how thoroughly the contents of collections (list, dict, etc.) are\n     type checked.\n\n     Default: ``FIRST_ITEM``\n```\n\n```\n.. attribute:: debug_instrumentation\n   :type: bool\n\n     If set to ``True``, the code of modules or functions instrumented by typeguard\n     is printed to ``sys.stderr`` after the instrumentation is done\n\n     Requires Python 3.9 or newer.\n\n     Default: ``False``\n```\n"]}], "exports": []}, {"name": "setuptools._path", "documentation": [], "functions": [{"name": "setuptools._path.ensure_directory", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that the parent directory of `path` exists"]}, {"name": "setuptools._path.same_path", "asynchronous": false, "params": [{"name": "p1", "type": {"name": "StrPath", "xref": {"fqname": "StrPath", "project": null}, "params": null}, "default": null}, {"name": "p2", "type": {"name": "StrPath", "xref": {"fqname": "StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Differs from os.path.samefile because it does not require paths to exist.\nPurely string based (no comparison between i-nodes).\n\\>>> same_path(\"a/b\", \"./a/b\")\nTrue\n\\>>> same_path(\"a/b\", \"a/./b\")\nTrue\n\\>>> same_path(\"a/b\", \"././a/b\")\nTrue\n\\>>> same_path(\"a/b\", \"./a/b/c/..\")\nTrue\n\\>>> same_path(\"a/b\", \"../a/b/c\")\nFalse\n\\>>> same_path(\"a\", \"a/b\")\nFalse\n"]}, {"name": "setuptools._path.normpath", "asynchronous": false, "params": [{"name": "filename", "type": {"name": "StrPath", "xref": {"fqname": "StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Normalize a file/dir name for comparison purposes."]}, {"name": "setuptools._path.paths_on_pythonpath", "asynchronous": false, "params": [{"name": "paths", "type": null, "default": null}], "returns": null, "documentation": ["Add the indicated paths to the head of the PYTHONPATH environment\nvariable so that subprocesses will also see the packages at\nthese paths.\n\nDo this in a context that restores the value on exit.\n\n```pycon\n>>> getfixture('monkeypatch').setenv('PYTHONPATH', 'anything')\n>>> with paths_on_pythonpath(['foo', 'bar']):\n...     assert 'foo' in os.environ['PYTHONPATH']\n...     assert 'anything' in os.environ['PYTHONPATH']\n>>> os.environ['PYTHONPATH']\n'anything'\n```\n\n```pycon\n>>> getfixture('monkeypatch').delenv('PYTHONPATH')\n>>> with paths_on_pythonpath(['foo', 'bar']):\n...     assert 'foo' in os.environ['PYTHONPATH']\n>>> os.environ.get('PYTHONPATH')\n```\n"]}], "variables": [{"name": "setuptools._path.StrPath", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": ["Same as _typeshed.StrPath"]}, {"name": "setuptools._path.StrPathT", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools._importlib", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.compat.py311", "documentation": [], "functions": [{"name": "setuptools.compat.py311.shutil_rmtree", "asynchronous": false, "params": [{"name": "path", "type": {"name": "StrOrBytesPath", "xref": {"fqname": "_typeshed.StrOrBytesPath", "project": null}, "params": null}, "default": null}, {"name": "ignore_errors", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "onexc", "type": {"name": "_OnExcCallback | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "variables": [{"name": "setuptools.compat.py311._OnExcCallback", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.compat", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.compat.py312", "documentation": [], "functions": [], "variables": [{"name": "setuptools.compat.py312.PTH_ENCODING", "type": {"name": "str | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools.compat.py312.PTH_ENCODING", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.compat.py39", "documentation": [], "functions": [], "variables": [{"name": "setuptools.compat.py39.LOCALE_ENCODING", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.compat.py310", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": [{"name": "setuptools.compat.py310.tomllib", "xref": {"fqname": "tomli", "project": null}}]}, {"name": "setuptools._vendor.typeguard._checkers", "documentation": [], "functions": [{"name": "setuptools._vendor.typeguard._checkers.check_callable", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_mapping", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_typed_dict", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_list", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_sequence", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_set", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_tuple", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_union", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_uniontype", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_class", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_newtype", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_instance", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_typevar", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "TypeVar", "xref": {"fqname": "typing.TypeVar", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}, {"name": "subclass_check", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers._is_literal_type", "asynchronous": false, "params": [{"name": "typ", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers._is_literal_type", "asynchronous": false, "params": [{"name": "typ", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_literal", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_literal_string", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_typeguard", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_none", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_number", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_io", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_protocol", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_byteslike", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_self", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_paramspec", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_instanceof", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.check_type_internal", "asynchronous": false, "params": [{"name": "value", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "annotation", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "memo", "type": {"name": "TypeCheckMemo", "xref": {"fqname": "setuptools._vendor.typeguard._checkers._memo.TypeCheckMemo", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Check that the given object is compatible with the given type annotation.\n\nThis function should only be used by type checker callables. Applications should use\n{func}`~.check_type` instead.\n\n```\nparam value\n\nthe value to check\n\nparam annotation\n\nthe type annotation to check against\n\nparam memo\n\na memo object containing configuration and information necessary for\nlooking up forward references\n```\n"]}, {"name": "setuptools._vendor.typeguard._checkers.builtin_checker_lookup", "asynchronous": false, "params": [{"name": "origin_type", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}, {"name": "args", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}, {"name": "extras", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "default": null}], "returns": {"name": "TypeCheckerCallable | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.load_plugins", "asynchronous": false, "params": [], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Load all type checker lookup functions from entry points.\n\nAll entry points from the `typeguard.checker_lookup` group are loaded, and the\nreturned lookup functions are added to {data}`typeguard.checker_lookup_functions`.\n\n:::{note}\nThis function is called implicitly on import, unless the\n`TYPEGUARD_DISABLE_PLUGIN_AUTOLOAD` environment variable is present.\n:::\n"]}], "variables": [{"name": "setuptools._vendor.typeguard._checkers.typing_extensions", "type": null, "documentation": ["type: ignore[assignment]"]}, {"name": "setuptools._vendor.typeguard._checkers.SubclassableAny", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.TypeCheckerCallable", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.TypeCheckLookupCallback", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.checker_lookup_functions", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "TypeCheckLookupCallback", "xref": {"fqname": "TypeCheckLookupCallback", "project": null}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.generic_alias_types", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.protocol_check_cache", "type": {"name": "WeakKeyDictionary", "xref": {"fqname": "weakref.WeakKeyDictionary", "project": "--std--"}, "params": [{"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": [{"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, {"name": "TypeCheckError | None", "xref": null, "params": null}]}]}, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers._missing", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.BINARY_MAGIC_METHODS", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._checkers.origin_type_checkers", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.extension", "documentation": [], "functions": [{"name": "setuptools.extension._have_cython", "asynchronous": false, "params": [], "returns": null, "documentation": ["Return True if Cython can be imported."]}], "variables": [{"name": "setuptools.extension.have_pyrex", "type": null, "documentation": []}, {"name": "setuptools.extension._Extension", "type": null, "documentation": []}], "classes": [{"name": "setuptools.extension.Extension", "bases": ["_Extension"], "methods": [{"name": "setuptools.extension.Extension.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "sources", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "StrPath", "xref": {"fqname": "setuptools._path.StrPath", "project": null}, "params": null}]}, "default": null}, {"name": "*args", "type": null, "default": null}, {"name": "py_limited_api", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "**kw", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.extension.Extension._convert_pyx_sources_to_lang", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Replace sources with .pyx extensions to sources with the target\nlanguage extension. This mechanism allows language authors to supply\npre-converted sources but to prefer the .pyx sources."]}], "class_variables": [{"name": "setuptools.extension.Extension._full_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": [": Private API, internal use only."]}, {"name": "setuptools.extension.Extension._links_to_dynamic", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": [": Private API, internal use only."]}, {"name": "setuptools.extension.Extension._needs_stub", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": [": Private API, internal use only."]}, {"name": "setuptools.extension.Extension._file_name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": [": Private API, internal use only."]}], "instance_variables": [], "inner_classes": [], "documentation": ["Describes a single extension module.\n\nThis means that all source files will be compiled into a single binary file\n`<module path>.<suffix>` (with `<module path>` derived from `name` and\n`<suffix>` defined by one of the values in\n`importlib.machinery.EXTENSION_SUFFIXES`).\n\nIn the case `.pyx` files are passed as `sources and` `Cython` is **not**\ninstalled in the build environment, `setuptools` may also try to look for the\nequivalent `.cpp` or `.c` files.\n\n```\narg str name\n\nthe full name of the extension, including any packages -- ie.\nnot a filename or pathname, but Python dotted name\n\narg list[str|os.PathLike[str]] sources\n\nlist of source filenames, relative to the distribution root\n(where the setup script lives), in Unix form (slash-separated)\nfor portability.  Source files may be C, C++, SWIG (.i),\nplatform-specific resource files, or whatever else is recognized\nby the \"build_ext\" command as source for a Python extension.\n\nkeyword list[str] include_dirs\n\nlist of directories to search for C/C++ header files (in Unix\nform for portability)\n\nkeyword list[tuple[str, str|None]] define_macros\n\nlist of macros to define; each macro is defined using a 2-tuple:\nthe first item corresponding to the name of the macro and the second\nitem either a string with its value or None to\ndefine it without a particular value (equivalent of \"#define\nFOO\" in source or -DFOO on Unix C compiler command line)\n\nkeyword list[str] undef_macros\n\nlist of macros to undefine explicitly\n\nkeyword list[str] library_dirs\n\nlist of directories to search for C/C++ libraries at link time\n\nkeyword list[str] libraries\n\nlist of library names (not filenames or paths) to link against\n\nkeyword list[str] runtime_library_dirs\n\nlist of directories to search for C/C++ libraries at run time\n(for shared extensions, this is when the extension is loaded).\nSetting this will cause an exception during build on Windows\nplatforms.\n\nkeyword list[str] extra_objects\n\nlist of extra files to link with (eg. object files not implied\nby 'sources', static library that must be explicitly specified,\nbinary resource files, etc.)\n\nkeyword list[str] extra_compile_args\n\nany extra platform- and compiler-specific information to use\nwhen compiling the source files in 'sources'.  For platforms and\ncompilers where \"command line\" makes sense, this is typically a\nlist of command-line arguments, but for other platforms it could\nbe anything.\n\nkeyword list[str] extra_link_args\n\nany extra platform- and compiler-specific information to use\nwhen linking object files together to create the extension (or\nto create a new static Python interpreter).  Similar\ninterpretation as for 'extra_compile_args'.\n\nkeyword list[str] export_symbols\n\nlist of symbols to be exported from a shared extension.  Not\nused on all platforms, and not generally necessary for Python\nextensions, which typically export exactly one symbol: \"init\" +\nextension_name.\n\nkeyword list[str] swig_opts\n\nany extra options to pass to SWIG if a source file has the .i\nextension.\n\nkeyword list[str] depends\n\nlist of files that the extension depends on\n\nkeyword str language\n\nextension language (i.e. \"c\", \"c++\", \"objc\"). Will be detected\nfrom the source extensions if not provided.\n\nkeyword bool optional\n\nspecifies that a build failure in the extension should not abort the\nbuild process, but simply not install the failing extension.\n\nkeyword bool py_limited_api\n\nopt-in flag for the usage of .\n\nraises setuptools.errors.PlatformError\n\nif runtime_library_dirs is\nspecified on Windows. (since v63)\n```\n"]}, {"name": "setuptools.extension.Library", "bases": ["Extension"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Just like a regular Extension, but built as a library instead"]}], "exports": []}, {"name": "setuptools.depends", "documentation": [], "functions": [{"name": "setuptools.depends.maybe_close", "asynchronous": false, "params": [{"name": "f", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.depends.get_module_constant", "asynchronous": false, "params": [{"name": "module", "type": null, "default": null}, {"name": "symbol", "type": null, "default": null}, {"name": "default", "type": {"name": "_T | int", "xref": null, "params": null}, "default": "..."}, {"name": "paths", "type": null, "default": "..."}], "returns": {"name": "_T | int | None | Any", "xref": null, "params": null}, "documentation": ["Find 'module' by searching 'paths', and extract 'symbol'\n\nReturn 'None' if 'module' does not exist on 'paths', or it does not define\n'symbol'.  If the module defines 'symbol' as a constant, return the\nconstant.  Otherwise, return 'default'."]}, {"name": "setuptools.depends.extract_constant", "asynchronous": false, "params": [{"name": "code", "type": {"name": "CodeType", "xref": {"fqname": "types.CodeType", "project": "--std--"}, "params": null}, "default": null}, {"name": "symbol", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "default", "type": {"name": "_T | int", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "_T | int | None | Any", "xref": null, "params": null}, "documentation": ["Extract the constant value of 'symbol' from 'code'\n\nIf the name 'symbol' is bound to a constant value by the Python code\nobject 'code', return that value.  If 'symbol' is bound to an expression,\nreturn 'default'.  Otherwise, return 'None'.\n\nReturn value is based on the first assignment to 'symbol'.  'symbol' must\nbe a global, or at least a non-\"fast\" local in the code block.  That is,\nonly 'STORE_NAME' and 'STORE_GLOBAL' opcodes are checked, and 'symbol'\nmust be present in 'code.co_names'."]}], "variables": [{"name": "setuptools.depends._T", "type": null, "documentation": []}], "classes": [{"name": "setuptools.depends.Require", "bases": [], "methods": [{"name": "setuptools.depends.Require.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": null, "default": null}, {"name": "requested_version", "type": null, "default": null}, {"name": "module", "type": null, "default": null}, {"name": "homepage", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "attribute", "type": null, "default": "..."}, {"name": "format", "type": null, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.depends.Require.full_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return full package/distribution name, w/version"]}, {"name": "setuptools.depends.Require.version_ok", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "version", "type": null, "default": null}], "returns": null, "documentation": ["Is 'version' sufficiently up-to-date?"]}, {"name": "setuptools.depends.Require.get_version", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "paths", "type": null, "default": "..."}, {"name": "default", "type": {"name": "_T | Literal[\"unknown\"]", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "_T | Literal[\"unknown\"] | None | Any", "xref": null, "params": null}, "documentation": ["Get version number of installed module, 'None', or 'default'\n\nSearch 'paths' for module.  If not found, return 'None'.  If found,\nreturn the extracted version attribute, or 'default' if no version\nattribute was specified, or the value cannot be determined without\nimporting the module.  The version is formatted according to the\nrequirement's version format (if any), unless it is 'None' or the\nsupplied 'default'."]}, {"name": "setuptools.depends.Require.is_present", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "paths", "type": null, "default": "..."}], "returns": null, "documentation": ["Return true if dependency is present on 'paths'"]}, {"name": "setuptools.depends.Require.is_current", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "paths", "type": null, "default": "..."}], "returns": null, "documentation": ["Return true if dependency is present and up-to-date on 'paths'"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A prerequisite to building or installing a distribution"]}], "exports": [{"name": "setuptools.depends.extract_constant", "xref": {"fqname": "setuptools.depends.extract_constant", "project": null}}, {"name": "setuptools.depends.find_module", "xref": {"fqname": "setuptools.depends._imp.find_module", "project": null}}, {"name": "setuptools.depends.get_module_constant", "xref": {"fqname": "setuptools.depends.get_module_constant", "project": null}}, {"name": "setuptools.depends.Require", "xref": {"fqname": "setuptools.depends.Require", "project": null}}]}, {"name": "setuptools.glob", "documentation": ["Filename globbing utility. Mostly a copy of `glob` from Python 3.5.\n\nChanges include:\n * `yield from` and PEP3102 `*` removed.\n * Hidden files are not ignored."], "functions": [{"name": "setuptools.glob.glob", "asynchronous": false, "params": [{"name": "pathname", "type": {"name": "AnyStr", "xref": {"fqname": "typing.AnyStr", "project": "--std--"}, "params": null}, "default": null}, {"name": "recursive", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "AnyStr", "xref": {"fqname": "typing.AnyStr", "project": "--std--"}, "params": null}]}, "documentation": ["Return a list of paths matching a pathname pattern.\n\nThe pattern may contain simple shell-style wildcards a la\nfnmatch. However, unlike fnmatch, filenames starting with a\ndot are special cases that are not matched by '*' and '?'\npatterns.\n\nIf recursive is true, the pattern '**' will match any files and\nzero or more directories and subdirectories."]}, {"name": "setuptools.glob.iglob", "asynchronous": false, "params": [{"name": "pathname", "type": {"name": "AnyStr", "xref": {"fqname": "typing.AnyStr", "project": "--std--"}, "params": null}, "default": null}, {"name": "recursive", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "AnyStr", "xref": {"fqname": "typing.AnyStr", "project": "--std--"}, "params": null}]}, "documentation": ["Return an iterator which yields the paths matching a pathname pattern.\n\nThe pattern may contain simple shell-style wildcards a la\nfnmatch. However, unlike fnmatch, filenames starting with a\ndot are special cases that are not matched by '*' and '?'\npatterns.\n\nIf recursive is true, the pattern '**' will match any files and\nzero or more directories and subdirectories."]}, {"name": "setuptools.glob._iglob", "asynchronous": false, "params": [{"name": "pathname", "type": {"name": "AnyStr", "xref": {"fqname": "typing.AnyStr", "project": "--std--"}, "params": null}, "default": null}, {"name": "recursive", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "AnyStr", "xref": {"fqname": "typing.AnyStr", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.glob.glob1", "asynchronous": false, "params": [{"name": "dirname", "type": {"name": "StrPath", "xref": {"fqname": "_typeshed.StrPath", "project": null}, "params": null}, "default": null}, {"name": "pattern", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["These 2 helper functions non-recursively glob inside a literal directory.", "They return a list of basenames. `glob1` accepts a pattern while `glob0`", "takes a literal basename (so it only has to check for its existence)."]}, {"name": "setuptools.glob.glob1", "asynchronous": false, "params": [{"name": "dirname", "type": {"name": "BytesPath", "xref": {"fqname": "_typeshed.BytesPath", "project": null}, "params": null}, "default": null}, {"name": "pattern", "type": {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.glob.glob1", "asynchronous": false, "params": [{"name": "dirname", "type": {"name": "StrOrBytesPath", "xref": {"fqname": "_typeshed.StrOrBytesPath", "project": null}, "params": null}, "default": null}, {"name": "pattern", "type": {"name": "str | bytes", "xref": null, "params": null}, "default": null}], "returns": {"name": "list[str] | list[bytes]", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools.glob.glob0", "asynchronous": false, "params": [{"name": "dirname", "type": null, "default": null}, {"name": "basename", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.glob.glob2", "asynchronous": false, "params": [{"name": "dirname", "type": {"name": "StrPath", "xref": {"fqname": "_typeshed.StrPath", "project": null}, "params": null}, "default": null}, {"name": "pattern", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["This helper function recursively yields relative pathnames inside a literal", "directory."]}, {"name": "setuptools.glob.glob2", "asynchronous": false, "params": [{"name": "dirname", "type": {"name": "BytesPath", "xref": {"fqname": "_typeshed.BytesPath", "project": null}, "params": null}, "default": null}, {"name": "pattern", "type": {"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.glob.glob2", "asynchronous": false, "params": [{"name": "dirname", "type": {"name": "StrOrBytesPath", "xref": {"fqname": "_typeshed.StrOrBytesPath", "project": null}, "params": null}, "default": null}, {"name": "pattern", "type": {"name": "str | bytes", "xref": null, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str | bytes", "xref": null, "params": null}]}, "documentation": []}, {"name": "setuptools.glob._rlistdir", "asynchronous": false, "params": [{"name": "dirname", "type": {"name": "StrPath", "xref": {"fqname": "_typeshed.StrPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Recursively yields relative pathnames inside a literal directory."]}, {"name": "setuptools.glob._rlistdir", "asynchronous": false, "params": [{"name": "dirname", "type": {"name": "BytesPath", "xref": {"fqname": "_typeshed.BytesPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "bytes", "xref": {"fqname": "functions.bytes", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools.glob._rlistdir", "asynchronous": false, "params": [{"name": "dirname", "type": {"name": "StrOrBytesPath", "xref": {"fqname": "_typeshed.StrOrBytesPath", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str | bytes", "xref": null, "params": null}]}, "documentation": []}, {"name": "setuptools.glob.has_magic", "asynchronous": false, "params": [{"name": "s", "type": {"name": "str | bytes", "xref": null, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.glob._isrecursive", "asynchronous": false, "params": [{"name": "pattern", "type": {"name": "str | bytes", "xref": null, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.glob.escape", "asynchronous": false, "params": [{"name": "pathname", "type": null, "default": null}], "returns": null, "documentation": ["Escape all special characters."]}], "variables": [{"name": "setuptools.glob.magic_check", "type": null, "documentation": []}, {"name": "setuptools.glob.magic_check_bytes", "type": null, "documentation": []}], "classes": [], "exports": [{"name": "setuptools.glob.escape", "xref": {"fqname": "setuptools.glob.escape", "project": null}}, {"name": "setuptools.glob.glob", "xref": {"fqname": "setuptools.glob.glob", "project": null}}, {"name": "setuptools.glob.iglob", "xref": {"fqname": "setuptools.glob.iglob", "project": null}}]}, {"name": "setuptools.warnings", "documentation": ["Provide basic warnings used by setuptools modules.\n\nUsing custom classes (other than `UserWarning`) allow users to set\n`PYTHONWARNINGS` filters to run tests and prepare for upcoming changes in\nsetuptools.\n"], "functions": [{"name": "setuptools.warnings._should_enforce", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.warnings._DueDate", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": ["time tuple"]}, {"name": "setuptools.warnings._INDENT", "type": null, "documentation": []}, {"name": "setuptools.warnings._TEMPLATE", "type": null, "documentation": []}], "classes": [{"name": "setuptools.warnings.SetuptoolsWarning", "bases": ["UserWarning"], "methods": [{"name": "setuptools.warnings.SetuptoolsWarning.emit", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "summary", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "details", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "due_date", "type": {"name": "_DueDate | None", "xref": null, "params": null}, "default": "..."}, {"name": "see_docs", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "see_url", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "stacklevel", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "**kwargs", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Private: reserved for `setuptools` internal use only\n"]}, {"name": "setuptools.warnings.SetuptoolsWarning._format", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "summary", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "details", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "due_date", "type": {"name": "date | None", "xref": null, "params": null}, "default": "..."}, {"name": "see_url", "type": {"name": "str | None", "xref": null, "params": null}, "default": "..."}, {"name": "format_args", "type": {"name": "dict | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Private: reserved for `setuptools` internal use only\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Base class in `setuptools` warning hierarchy.\n"]}, {"name": "setuptools.warnings.InformationOnly", "bases": ["SetuptoolsWarning"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Currently there is no clear way of displaying messages to the users\nthat use the setuptools backend directly via `pip`.\nThe only thing that might work is a warning, although it is not the\nmost appropriate tool for the job...\n\nSee pypa/packaging-problems#558.\n"]}, {"name": "setuptools.warnings.SetuptoolsDeprecationWarning", "bases": ["SetuptoolsWarning"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Base class for warning deprecations in `setuptools`\n\nThis class is not derived from `DeprecationWarning`, and as such is\nvisible by default.\n"]}], "exports": []}, {"name": "setuptools._vendor.typeguard._transformer", "documentation": [], "functions": [], "variables": [{"name": "setuptools._vendor.typeguard._transformer.generator_names", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.anytype_names", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.literal_names", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.annotated_names", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.ignore_decorators", "type": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.aug_assign_functions", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.typeguard._transformer.TransformMemo", "bases": [], "methods": [{"name": "setuptools._vendor.typeguard._transformer.TransformMemo.__post_init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.get_unused_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.is_ignored_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "expression", "type": {"name": "expr | Expr | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.get_memo_name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "Name", "xref": {"fqname": "ast.Name", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.get_import", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "module", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Name", "xref": {"fqname": "ast.Name", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.insert_imports", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "Module | FunctionDef | AsyncFunctionDef", "xref": null, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Insert imports needed by injected code."]}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.name_matches", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "expression", "type": {"name": "expr | Expr | None", "xref": null, "params": null}, "default": null}, {"name": "*names", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.get_config_keywords", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "keyword", "xref": {"fqname": "ast.keyword", "project": "--std--"}, "params": null}]}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typeguard._transformer.TransformMemo.node", "type": {"name": "Module | ClassDef | FunctionDef | AsyncFunctionDef | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.parent", "type": {"name": "TransformMemo | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.path", "type": {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "...", "xref": null, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.joined_path", "type": {"name": "Constant", "xref": {"fqname": "ast.Constant", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.return_annotation", "type": {"name": "expr | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.yield_annotation", "type": {"name": "expr | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.send_annotation", "type": {"name": "expr | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.is_async", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.local_names", "type": {"name": "set", "xref": {"fqname": "functions.set", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.imported_names", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.ignored_names", "type": {"name": "set", "xref": {"fqname": "functions.set", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.load_names", "type": {"name": "defaultdict", "xref": {"fqname": "collections.defaultdict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Name", "xref": {"fqname": "ast.Name", "project": "--std--"}, "params": null}]}]}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.has_yield_expressions", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.has_return_expressions", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.memo_var_name", "type": {"name": "Name | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.should_instrument", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.variable_annotations", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "expr", "xref": {"fqname": "ast.expr", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.configuration_overrides", "type": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TransformMemo.code_inject_index", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.NameCollector", "bases": ["NodeVisitor"], "methods": [{"name": "setuptools._vendor.typeguard._transformer.NameCollector.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.NameCollector.visit_Import", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "Import", "xref": {"fqname": "ast.Import", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.NameCollector.visit_ImportFrom", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "ImportFrom", "xref": {"fqname": "ast.ImportFrom", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.NameCollector.visit_Assign", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "Assign", "xref": {"fqname": "ast.Assign", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.NameCollector.visit_NamedExpr", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "NamedExpr", "xref": {"fqname": "ast.NamedExpr", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.NameCollector.visit_FunctionDef", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "FunctionDef", "xref": {"fqname": "ast.FunctionDef", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.NameCollector.visit_ClassDef", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "ClassDef", "xref": {"fqname": "ast.ClassDef", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.GeneratorDetector", "bases": ["NodeVisitor"], "methods": [{"name": "setuptools._vendor.typeguard._transformer.GeneratorDetector.visit_Yield", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "Yield", "xref": {"fqname": "ast.Yield", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.GeneratorDetector.visit_YieldFrom", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "YieldFrom", "xref": {"fqname": "ast.YieldFrom", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.GeneratorDetector.visit_ClassDef", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "ClassDef", "xref": {"fqname": "ast.ClassDef", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.GeneratorDetector.visit_FunctionDef", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "FunctionDef | AsyncFunctionDef", "xref": null, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.GeneratorDetector.visit_AsyncFunctionDef", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "AsyncFunctionDef", "xref": {"fqname": "ast.AsyncFunctionDef", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typeguard._transformer.GeneratorDetector.contains_yields", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.GeneratorDetector.in_root_function", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["Detects if a function node is a generator function."]}, {"name": "setuptools._vendor.typeguard._transformer.AnnotationTransformer", "bases": ["NodeTransformer"], "methods": [{"name": "setuptools._vendor.typeguard._transformer.AnnotationTransformer.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "transformer", "type": {"name": "TypeguardTransformer", "xref": {"fqname": "TypeguardTransformer", "project": null}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.AnnotationTransformer.visit", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "AST", "xref": {"fqname": "ast.AST", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.AnnotationTransformer.visit_BinOp", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "BinOp", "xref": {"fqname": "ast.BinOp", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.AnnotationTransformer.visit_Attribute", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "Attribute", "xref": {"fqname": "ast.Attribute", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.AnnotationTransformer.visit_Subscript", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "Subscript", "xref": {"fqname": "ast.Subscript", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.AnnotationTransformer.visit_Name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "Name", "xref": {"fqname": "ast.Name", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.AnnotationTransformer.visit_Call", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "Call", "xref": {"fqname": "ast.Call", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.AnnotationTransformer.visit_Constant", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "Constant", "xref": {"fqname": "ast.Constant", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.typeguard._transformer.AnnotationTransformer.type_substitutions", "type": {"name": "ClassVar", "xref": {"fqname": "typing.ClassVar", "project": "--std--"}, "params": [{"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "tuple", "xref": {"fqname": "functions.tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer", "bases": ["NodeTransformer"], "methods": [{"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "target_path", "type": {"name": "Sequence[str] | None", "xref": null, "params": null}, "default": "..."}, {"name": "target_lineno", "type": {"name": "int | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer.generic_visit", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "AST", "xref": {"fqname": "ast.AST", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "AST", "xref": {"fqname": "ast.AST", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer._use_memo", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "ClassDef | FunctionDef | AsyncFunctionDef", "xref": null, "params": null}, "default": null}], "returns": {"name": "Generator", "xref": {"fqname": "collections.abc.Generator", "project": "--std--"}, "params": [{"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer._get_import", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "module", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Name", "xref": {"fqname": "ast.Name", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer._convert_annotation", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "annotation", "type": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer._convert_annotation", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "annotation", "type": {"name": "expr", "xref": {"fqname": "ast.expr", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "expr", "xref": {"fqname": "ast.expr", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer._convert_annotation", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "annotation", "type": {"name": "expr | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "expr | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer.visit_Name", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "Name", "xref": {"fqname": "ast.Name", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Name", "xref": {"fqname": "ast.Name", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer.visit_Module", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "Module", "xref": {"fqname": "ast.Module", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Module", "xref": {"fqname": "ast.Module", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer.visit_Import", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "Import", "xref": {"fqname": "ast.Import", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Import", "xref": {"fqname": "ast.Import", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer.visit_ImportFrom", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "ImportFrom", "xref": {"fqname": "ast.ImportFrom", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "ImportFrom", "xref": {"fqname": "ast.ImportFrom", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer.visit_ClassDef", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "ClassDef", "xref": {"fqname": "ast.ClassDef", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "ClassDef | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer.visit_FunctionDef", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "FunctionDef | AsyncFunctionDef", "xref": null, "params": null}, "default": null}], "returns": {"name": "FunctionDef | AsyncFunctionDef | None", "xref": null, "params": null}, "documentation": ["Injects type checks for function arguments, and for a return of None if the\nfunction is annotated to return something else than Any or None, and the body\nends without an explicit \"return\"."]}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer.visit_AsyncFunctionDef", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "AsyncFunctionDef", "xref": {"fqname": "ast.AsyncFunctionDef", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "FunctionDef | AsyncFunctionDef | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer.visit_Return", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "Return", "xref": {"fqname": "ast.Return", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Return", "xref": {"fqname": "ast.Return", "project": "--std--"}, "params": null}, "documentation": ["This injects type checks into \"return\" statements."]}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer.visit_Yield", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "Yield", "xref": {"fqname": "ast.Yield", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Yield | Call", "xref": null, "params": null}, "documentation": ["This injects type checks into \"yield\" expressions, checking both the yielded\nvalue and the value sent back to the generator, when appropriate."]}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer.visit_AnnAssign", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "AnnAssign", "xref": {"fqname": "ast.AnnAssign", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": ["This injects a type check into a local variable annotation-assignment within a\nfunction body."]}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer.visit_Assign", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "Assign", "xref": {"fqname": "ast.Assign", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": ["This injects a type check into a local variable assignment within a function\nbody. The variable must have been annotated earlier in the function body."]}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer.visit_NamedExpr", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "NamedExpr", "xref": {"fqname": "ast.NamedExpr", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": ["This injects a type check into an assignment expression (a := foo())."]}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer.visit_AugAssign", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "AugAssign", "xref": {"fqname": "ast.AugAssign", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": ["This injects a type check into an augmented assignment expression (a += 1)."]}, {"name": "setuptools._vendor.typeguard._transformer.TypeguardTransformer.visit_If", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "node", "type": {"name": "If", "xref": {"fqname": "ast.If", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": ["This blocks names from being collected from a module-level\n\"if typing.TYPE_CHECKING:\" block, so that they won't be type checked."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._itertools", "documentation": [], "functions": [{"name": "setuptools._itertools.ensure_unique", "asynchronous": false, "params": [{"name": "iterable", "type": null, "default": null}, {"name": "key", "type": null, "default": "..."}], "returns": null, "documentation": ["Wrap an iterable to raise a ValueError if non-unique values are encountered.\n\n```pycon\n>>> list(ensure_unique('abc'))\n['a', 'b', 'c']\n>>> consume(ensure_unique('abca'))\nTraceback (most recent call last):\n...\nValueError: Duplicate element 'a' encountered.\n```\n", "copied from jaraco.itertools 6.1"]}], "variables": [], "classes": [], "exports": []}, {"name": "setuptools.build_meta", "documentation": ["A PEP 517 interface to setuptools\n\nPreviously, when a user or a command line tool (let's call it a \"frontend\")\nneeded to make a request of setuptools to take a certain action, for\nexample, generating a list of installation requirements, the frontend\nwould call \"setup.py egg_info\" or \"setup.py bdist_wheel\" on the command line.\n\nPEP 517 defines a different method of interfacing with setuptools. Rather\nthan calling \"setup.py\" directly, the frontend should:\n\n  1. Set the current directory to the directory with a setup.py file\n  2. Import this module into a safe python interpreter (one in which\n     setuptools can potentially set global variables or crash hard).\n  3. Call one of the functions defined in PEP 517.\n\nWhat each function does is defined in PEP 517. However, here is a \"casual\"\ndefinition of the functions (this definition should not be relied on for\nbug reports or API stability):\n\n  - `build_wheel`: build a wheel in the folder and return the basename\n  - `get_requires_for_build_wheel`: get the `setup_requires` to build\n  - `prepare_metadata_for_build_wheel`: get the `install_requires`\n  - `build_sdist`: build an sdist in the folder and return the basename\n  - `get_requires_for_build_sdist`: get the `setup_requires` to build\n\nAgain, this is not a formal definition! Just a \"taste\" of the module."], "functions": [{"name": "setuptools.build_meta.no_install_setup_requires", "asynchronous": false, "params": [], "returns": null, "documentation": ["Temporarily disable installing setup_requires\n\nUnder PEP 517, the backend reports build dependencies to the frontend,\nand the frontend is responsible for ensuring they're installed.\nSo setuptools (acting as a backend) should not try to install them."]}, {"name": "setuptools.build_meta._get_immediate_subdirectories", "asynchronous": false, "params": [{"name": "a_dir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.build_meta._file_with_extension", "asynchronous": false, "params": [{"name": "directory", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.build_meta._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "extension", "type": {"name": "str | tuple[str, ...]", "xref": null, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.build_meta._open_setup_script", "asynchronous": false, "params": [{"name": "setup_script", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.build_meta.suppress_known_deprecation", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.build_meta.SETUPTOOLS_ENABLE_FEATURES", "type": null, "documentation": []}, {"name": "setuptools.build_meta.LEGACY_EDITABLE", "type": null, "documentation": []}, {"name": "setuptools.build_meta._ConfigSettings", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": ["Currently the user can run:\n\n```\npip install -e . --config-settings key=value\npython -m build -C--key=value -C key=value\n```\n\n- pip will pass both key and value as strings and overwriting repeated keys\n  (pypa/pip#11059).\n- build will accumulate values associated with repeated keys in a list.\n  It will also accept keys with no associated value.\n  This means that an option passed by build can be `str | list[str] | None`.\n- PEP 517 specifies that `config_settings` is an optional dict.\n"]}, {"name": "setuptools.build_meta._BACKEND", "type": null, "documentation": []}, {"name": "setuptools.build_meta.get_requires_for_build_wheel", "type": null, "documentation": []}, {"name": "setuptools.build_meta.get_requires_for_build_sdist", "type": null, "documentation": []}, {"name": "setuptools.build_meta.prepare_metadata_for_build_wheel", "type": null, "documentation": []}, {"name": "setuptools.build_meta.build_wheel", "type": null, "documentation": []}, {"name": "setuptools.build_meta.build_sdist", "type": null, "documentation": []}, {"name": "setuptools.build_meta.get_requires_for_build_editable", "type": null, "documentation": []}, {"name": "setuptools.build_meta.prepare_metadata_for_build_editable", "type": null, "documentation": []}, {"name": "setuptools.build_meta.build_editable", "type": null, "documentation": []}, {"name": "setuptools.build_meta.__legacy__", "type": null, "documentation": []}], "classes": [{"name": "setuptools.build_meta.SetupRequirementsError", "bases": ["BaseException"], "methods": [{"name": "setuptools.build_meta.SetupRequirementsError.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "specifiers", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.build_meta.Distribution", "bases": ["setuptools.dist.Distribution"], "methods": [{"name": "setuptools.build_meta.Distribution.fetch_build_eggs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "specifiers", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.build_meta.Distribution.patch", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": null, "documentation": ["Replace\ndistutils.dist.Distribution with this class\nfor the duration of this context."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.build_meta._ConfigSettingsTranslator", "bases": [], "methods": [{"name": "setuptools.build_meta._ConfigSettingsTranslator._get_config", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "key", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "config_settings", "type": {"name": "_ConfigSettings", "xref": {"fqname": "_ConfigSettings", "project": null}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Get the value of a specific key in `config_settings` as a list of strings.\n\n```pycon\n>>> fn = _ConfigSettingsTranslator()._get_config\n>>> fn(\"--global-option\", None)\n[]\n>>> fn(\"--global-option\", {})\n[]\n>>> fn(\"--global-option\", {'--global-option': 'foo'})\n['foo']\n>>> fn(\"--global-option\", {'--global-option': ['foo']})\n['foo']\n>>> fn(\"--global-option\", {'--global-option': 'foo'})\n['foo']\n>>> fn(\"--global-option\", {'--global-option': 'foo bar'})\n['foo', 'bar']\n```\n", "See pypa/setuptools#1928 pypa/setuptools#2491"]}, {"name": "setuptools.build_meta._ConfigSettingsTranslator._global_args", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "config_settings", "type": {"name": "_ConfigSettings", "xref": {"fqname": "_ConfigSettings", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Let the user specify `verbose` or `quiet` + escape hatch via\n`--global-option`.\nNote: `-v`, `-vv`, `-vvv` have similar effects in setuptools,\nso we just have to cover the basic scenario `-v`.\n\n```pycon\n>>> fn = _ConfigSettingsTranslator()._global_args\n>>> list(fn(None))\n[]\n>>> list(fn({\"verbose\": \"False\"}))\n['-q']\n>>> list(fn({\"verbose\": \"1\"}))\n['-v']\n>>> list(fn({\"--verbose\": None}))\n['-v']\n>>> list(fn({\"verbose\": \"true\", \"--global-option\": \"-q --no-user-cfg\"}))\n['-v', '-q', '--no-user-cfg']\n>>> list(fn({\"--quiet\": None}))\n['-q']\n```\n"]}, {"name": "setuptools.build_meta._ConfigSettingsTranslator.__dist_info_args", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "config_settings", "type": {"name": "_ConfigSettings", "xref": {"fqname": "_ConfigSettings", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["The `dist_info` command accepts `tag-date` and `tag-build`.\n\n:::{warning}\nWe cannot use this yet as it requires the `sdist` and `bdist_wheel`\ncommands run in `build_sdist` and `build_wheel` to reuse the egg-info\ndirectory created in `prepare_metadata_for_build_wheel`.\n:::\n\n```pycon\n>>> fn = _ConfigSettingsTranslator()._ConfigSettingsTranslator__dist_info_args\n>>> list(fn(None))\n[]\n>>> list(fn({\"tag-date\": \"False\"}))\n['--no-date']\n>>> list(fn({\"tag-date\": None}))\n['--no-date']\n>>> list(fn({\"tag-date\": \"true\", \"tag-build\": \".a\"}))\n['--tag-date', '--tag-build', '.a']\n```\n"]}, {"name": "setuptools.build_meta._ConfigSettingsTranslator._editable_args", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "config_settings", "type": {"name": "_ConfigSettings", "xref": {"fqname": "_ConfigSettings", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["The `editable_wheel` command accepts `editable-mode=strict`.\n\n```pycon\n>>> fn = _ConfigSettingsTranslator()._editable_args\n>>> list(fn(None))\n[]\n>>> list(fn({\"editable-mode\": \"strict\"}))\n['--mode', 'strict']\n```\n"]}, {"name": "setuptools.build_meta._ConfigSettingsTranslator._arbitrary_args", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "config_settings", "type": {"name": "_ConfigSettings", "xref": {"fqname": "_ConfigSettings", "project": null}, "params": null}, "default": null}], "returns": {"name": "Iterator", "xref": {"fqname": "collections.abc.Iterator", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Users may expect to pass arbitrary lists of arguments to a command\nvia \"--global-option\" (example provided in PEP 517 of a \"escape hatch\").\n\n```pycon\n>>> fn = _ConfigSettingsTranslator()._arbitrary_args\n>>> list(fn(None))\n[]\n>>> list(fn({}))\n[]\n>>> list(fn({'--build-option': 'foo'}))\n['foo']\n>>> list(fn({'--build-option': ['foo']}))\n['foo']\n>>> list(fn({'--build-option': 'foo'}))\n['foo']\n>>> list(fn({'--build-option': 'foo bar'}))\n['foo', 'bar']\n>>> list(fn({'--global-option': 'foo'}))\n[]\n```\n"]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Translate `config_settings` into distutils-style command arguments.\nOnly a limited number of options is currently supported.\n"]}, {"name": "setuptools.build_meta._BuildMetaBackend", "bases": ["_ConfigSettingsTranslator"], "methods": [{"name": "setuptools.build_meta._BuildMetaBackend._get_build_requires", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "config_settings", "type": {"name": "_ConfigSettings", "xref": {"fqname": "_ConfigSettings", "project": null}, "params": null}, "default": null}, {"name": "requirements", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.build_meta._BuildMetaBackend.run_setup", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "setup_script", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.build_meta._BuildMetaBackend.get_requires_for_build_wheel", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "config_settings", "type": {"name": "_ConfigSettings", "xref": {"fqname": "_ConfigSettings", "project": null}, "params": null}, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.build_meta._BuildMetaBackend.get_requires_for_build_sdist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "config_settings", "type": {"name": "_ConfigSettings", "xref": {"fqname": "_ConfigSettings", "project": null}, "params": null}, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.build_meta._BuildMetaBackend._bubble_up_info_directory", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "metadata_directory", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.build_meta._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "suffix", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["PEP 517 requires that the .dist-info directory be placed in the\nmetadata_directory. To comply, we MUST copy the directory to the root.\n\nReturns the basename of the info directory, e.g. `proj-0.0.0.dist-info`."]}, {"name": "setuptools.build_meta._BuildMetaBackend._find_info_directory", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "metadata_directory", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.build_meta._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "suffix", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Path", "xref": {"fqname": "pathlib.Path", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.build_meta._BuildMetaBackend.prepare_metadata_for_build_wheel", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "metadata_directory", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.build_meta._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "config_settings", "type": {"name": "_ConfigSettings", "xref": {"fqname": "_ConfigSettings", "project": null}, "params": null}, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.build_meta._BuildMetaBackend._build_with_temp_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "setup_command", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "result_extension", "type": {"name": "str | tuple[str, ...]", "xref": null, "params": null}, "default": null}, {"name": "result_directory", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.build_meta._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "config_settings", "type": {"name": "_ConfigSettings", "xref": {"fqname": "_ConfigSettings", "project": null}, "params": null}, "default": null}, {"name": "arbitrary_args", "type": {"name": "Iterable", "xref": {"fqname": "collections.abc.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.build_meta._BuildMetaBackend.build_wheel", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "wheel_directory", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.build_meta._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "config_settings", "type": {"name": "_ConfigSettings", "xref": {"fqname": "_ConfigSettings", "project": null}, "params": null}, "default": "..."}, {"name": "metadata_directory", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.build_meta._BuildMetaBackend.build_sdist", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "sdist_directory", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.build_meta._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "config_settings", "type": {"name": "_ConfigSettings", "xref": {"fqname": "_ConfigSettings", "project": null}, "params": null}, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.build_meta._BuildMetaBackend._get_dist_info_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "metadata_directory", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": null}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools.build_meta._BuildMetaBackend.build_editable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "wheel_directory", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.build_meta._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "config_settings", "type": {"name": "_ConfigSettings", "xref": {"fqname": "_ConfigSettings", "project": null}, "params": null}, "default": "..."}, {"name": "metadata_directory", "type": {"name": "StrPath | None", "xref": null, "params": null}, "default": "..."}], "returns": null, "documentation": ["PEP660 hooks:", "build_editable", "get_requires_for_build_editable", "prepare_metadata_for_build_editable"]}, {"name": "setuptools.build_meta._BuildMetaBackend.get_requires_for_build_editable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "config_settings", "type": {"name": "_ConfigSettings", "xref": {"fqname": "_ConfigSettings", "project": null}, "params": null}, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.build_meta._BuildMetaBackend.prepare_metadata_for_build_editable", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "metadata_directory", "type": {"name": "StrPath", "xref": {"fqname": "setuptools.build_meta._path.StrPath", "project": null}, "params": null}, "default": null}, {"name": "config_settings", "type": {"name": "_ConfigSettings", "xref": {"fqname": "_ConfigSettings", "project": null}, "params": null}, "default": "..."}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.build_meta._BuildMetaLegacyBackend", "bases": ["_BuildMetaBackend"], "methods": [{"name": "setuptools.build_meta._BuildMetaLegacyBackend.run_setup", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "setup_script", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Compatibility backend for setuptools\n\nThis is a version of setuptools.build_meta that endeavors\nto maintain backwards\ncompatibility with pre-PEP 517 modes of invocation. It\nexists as a temporary\nbridge between the old packaging mechanism and the new\npackaging mechanism,\nand will eventually be removed."]}, {"name": "setuptools.build_meta._IncompatibleBdistWheel", "bases": ["SetuptoolsDeprecationWarning"], "methods": [], "class_variables": [{"name": "setuptools.build_meta._IncompatibleBdistWheel._SUMMARY", "type": null, "documentation": []}, {"name": "setuptools.build_meta._IncompatibleBdistWheel._DETAILS", "type": null, "documentation": []}, {"name": "setuptools.build_meta._IncompatibleBdistWheel._DUE_DATE", "type": null, "documentation": []}, {"name": "setuptools.build_meta._IncompatibleBdistWheel._SEE_URL", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": [{"name": "setuptools.build_meta.__legacy__", "xref": {"fqname": "setuptools.build_meta.__legacy__", "project": null}}, {"name": "setuptools.build_meta.build_editable", "xref": {"fqname": "setuptools.build_meta.build_editable", "project": null}}, {"name": "setuptools.build_meta.build_sdist", "xref": {"fqname": "setuptools.build_meta.build_sdist", "project": null}}, {"name": "setuptools.build_meta.build_wheel", "xref": {"fqname": "setuptools.build_meta.build_wheel", "project": null}}, {"name": "setuptools.build_meta.get_requires_for_build_editable", "xref": {"fqname": "setuptools.build_meta.get_requires_for_build_editable", "project": null}}, {"name": "setuptools.build_meta.get_requires_for_build_sdist", "xref": {"fqname": "setuptools.build_meta.get_requires_for_build_sdist", "project": null}}, {"name": "setuptools.build_meta.get_requires_for_build_wheel", "xref": {"fqname": "setuptools.build_meta.get_requires_for_build_wheel", "project": null}}, {"name": "setuptools.build_meta.prepare_metadata_for_build_editable", "xref": {"fqname": "setuptools.build_meta.prepare_metadata_for_build_editable", "project": null}}, {"name": "setuptools.build_meta.prepare_metadata_for_build_wheel", "xref": {"fqname": "setuptools.build_meta.prepare_metadata_for_build_wheel", "project": null}}, {"name": "setuptools.build_meta.SetupRequirementsError", "xref": {"fqname": "setuptools.build_meta.SetupRequirementsError", "project": null}}]}, {"name": "setuptools.modified", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": [{"name": "setuptools.modified.newer", "xref": {"fqname": "setuptools.modified._distutils._modified.newer", "project": null}}, {"name": "setuptools.modified.newer_group", "xref": {"fqname": "setuptools.modified._distutils._modified.newer_group", "project": null}}, {"name": "setuptools.modified.newer_pairwise", "xref": {"fqname": "setuptools.modified._distutils._modified.newer_pairwise", "project": null}}, {"name": "setuptools.modified.newer_pairwise_group", "xref": {"fqname": "setuptools.modified._distutils._modified.newer_pairwise_group", "project": null}}]}, {"name": "setuptools._imp", "documentation": ["Re-implementation of find_module and get_frozen_object\nfrom the deprecated imp module."], "functions": [{"name": "setuptools._imp.find_spec", "asynchronous": false, "params": [{"name": "module", "type": null, "default": null}, {"name": "paths", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._imp.find_module", "asynchronous": false, "params": [{"name": "module", "type": null, "default": null}, {"name": "paths", "type": null, "default": "..."}], "returns": null, "documentation": ["Just like 'imp.find_module()', but with package support"]}, {"name": "setuptools._imp.get_frozen_object", "asynchronous": false, "params": [{"name": "module", "type": null, "default": null}, {"name": "paths", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools._imp.get_module", "asynchronous": false, "params": [{"name": "module", "type": null, "default": null}, {"name": "paths", "type": null, "default": null}, {"name": "info", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools._imp.PY_SOURCE", "type": null, "documentation": []}, {"name": "setuptools._imp.PY_COMPILED", "type": null, "documentation": []}, {"name": "setuptools._imp.C_EXTENSION", "type": null, "documentation": []}, {"name": "setuptools._imp.C_BUILTIN", "type": null, "documentation": []}, {"name": "setuptools._imp.PY_FROZEN", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools.namespaces", "documentation": [], "functions": [], "variables": [{"name": "setuptools.namespaces.flatten", "type": null, "documentation": []}], "classes": [{"name": "setuptools.namespaces.Installer", "bases": [], "methods": [{"name": "setuptools.namespaces.Installer.install_namespaces", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.namespaces.Installer.uninstall_namespaces", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.namespaces.Installer._get_nspkg_file", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.namespaces.Installer._get_target", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.namespaces.Installer._get_root", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.namespaces.Installer._gen_nspkg_line", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pkg", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.namespaces.Installer._get_all_ns_packages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Return sorted list of all package namespaces"]}, {"name": "setuptools.namespaces.Installer._pkg_names", "asynchronous": false, "params": [{"name": "pkg", "type": null, "default": null}], "returns": null, "documentation": ["Given a namespace package, yield the components of that\npackage.\n\n```pycon\n>>> names = Installer._pkg_names('a.b.c')\n>>> set(names) == set(['a', 'a.b', 'a.b.c'])\nTrue\n```\n"]}], "class_variables": [{"name": "setuptools.namespaces.Installer.nspkg_ext", "type": null, "documentation": []}, {"name": "setuptools.namespaces.Installer._nspkg_tmpl", "type": null, "documentation": []}, {"name": "setuptools.namespaces.Installer._nspkg_tmpl_multi", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.namespaces.DevelopInstaller", "bases": ["Installer"], "methods": [{"name": "setuptools.namespaces.DevelopInstaller._get_root", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.namespaces.DevelopInstaller._get_target", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools._shutil", "documentation": ["Convenience layer on top of stdlib's shutil and os"], "functions": [{"name": "setuptools._shutil.chmod", "asynchronous": false, "params": [{"name": "*args", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}, {"name": "**kwargs", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Jython compatibility"]}, {"name": "setuptools._shutil.attempt_chmod_verbose", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}, {"name": "mode", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._shutil._auto_chmod", "asynchronous": false, "params": [{"name": "func", "type": {"name": "Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": [{"name": "...", "xref": null, "params": null}, {"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}]}, "default": null}, {"name": "arg", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "exc", "type": {"name": "BaseException", "xref": {"fqname": "functions.BaseException", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}, "documentation": ["shutils onexc callback to automatically call chmod for certain functions.", "Must match shutil._OnExcCallback"]}, {"name": "setuptools._shutil.rmtree", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}, {"name": "ignore_errors", "type": null, "default": "..."}, {"name": "onexc", "type": null, "default": "..."}], "returns": null, "documentation": ["Similar to `shutil.rmtree` but automatically executes `chmod`\nfor well know Windows failure scenarios.\n"]}, {"name": "setuptools._shutil.rmdir", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}, {"name": "**opts", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools._shutil._T", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "setuptools", "documentation": ["Extensions to the 'distutils' for large or complex distributions"], "functions": [{"name": "setuptools._install_setup_requires", "asynchronous": false, "params": [{"name": "attrs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._fetch_build_eggs", "asynchronous": false, "params": [{"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.setup", "asynchronous": false, "params": [{"name": "**attrs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._find_all_simple", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["Find all files under 'path'"]}, {"name": "setuptools.findall", "asynchronous": false, "params": [{"name": "dir", "type": null, "default": "..."}], "returns": null, "documentation": ["Find all files under 'dir' and return the list of full filenames.\nUnless dir is '.', return full filenames with dir prepended."]}], "variables": [{"name": "setuptools._CommandT", "type": null, "documentation": []}, {"name": "setuptools.bootstrap_install_from", "type": null, "documentation": []}, {"name": "setuptools.find_packages", "type": null, "documentation": []}, {"name": "setuptools.find_namespace_packages", "type": null, "documentation": []}, {"name": "setuptools.setup.__doc__", "type": null, "documentation": []}, {"name": "setuptools._Command", "type": null, "documentation": []}], "classes": [{"name": "setuptools.Command", "bases": ["_Command"], "methods": [{"name": "setuptools.Command.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "default": null}, {"name": "**kw", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Construct the command for dist, updating\nvars(self) with any keyword parameters."]}, {"name": "setuptools.Command._ensure_stringlike", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "option", "type": null, "default": null}, {"name": "what", "type": null, "default": null}, {"name": "default", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.Command.ensure_string_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "option", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Ensure that 'option' is a list of strings. If 'option' is\ncurrently a string, we split it either on /,s\\*/ or /s+/, so\n\"foo bar baz\", \"foo,bar,baz\", and \"foo, bar baz\" all become\n[\"foo\", \"bar\", \"baz\"].\n\n% TODO: This method seems to be similar to the one in ``distutils.cmd``\n% Probably it is just here for backward compatibility with old Python versions?\n\n```\nmeta private\n\n```\n"]}, {"name": "setuptools.Command.reinitialize_command", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "reinit_subcommands", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "**kw", "type": null, "default": null}], "returns": {"name": "_Command", "xref": {"fqname": "distutils.core.Command", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.Command.reinitialize_command", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": {"name": "_CommandT", "xref": {"fqname": "_CommandT", "project": null}, "params": null}, "default": null}, {"name": "reinit_subcommands", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "**kw", "type": null, "default": null}], "returns": {"name": "_CommandT", "xref": {"fqname": "_CommandT", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.Command.reinitialize_command", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": {"name": "str | _Command", "xref": null, "params": null}, "default": null}, {"name": "reinit_subcommands", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "**kw", "type": null, "default": null}], "returns": {"name": "_Command", "xref": {"fqname": "distutils.core.Command", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.Command.initialize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Set or (reset) all options/attributes/caches used by the command\nto their default values. Note that these values may be overwritten during\nthe build."]}, {"name": "setuptools.Command.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Set final values for all options/attributes used by the command.\nMost of the time, each option/attribute/cache should only be set if it does not\nhave any value yet (e.g. `if self.attr is None: self.attr = val`).\n"]}, {"name": "setuptools.Command.run", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Execute the actions intended by the command.\n(Side effects **SHOULD** only take place when {meth}`run` is executed,\nfor example, creating new files or writing to the terminal output).\n"]}], "class_variables": [{"name": "setuptools.Command.command_consumes_arguments", "type": null, "documentation": []}, {"name": "setuptools.Command.distribution", "type": {"name": "Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}, "params": null}, "documentation": ["override distutils.dist.Distribution with setuptools.dist.Distribution"]}], "instance_variables": [], "inner_classes": [], "documentation": ["Setuptools internal actions are organized using a *command design pattern*.\nThis means that each action (or group of closely related actions) executed during\nthe build should be implemented as a `Command` subclass.\n\nThese commands are abstractions and do not necessarily correspond to a command that\ncan (or should) be executed via a terminal, in a CLI fashion (although historically\nthey would).\n\nWhen creating a new command from scratch, custom defined classes **SHOULD** inherit\nfrom `setuptools.Command` and implement a few mandatory methods.\nBetween these mandatory methods, are listed:\n{meth}`initialize_options`, {meth}`finalize_options` and {meth}`run`.\n\nA useful analogy for command classes is to think of them as subroutines with local\nvariables called \"options\". The options are \"declared\" in {meth}`initialize_options`\nand \"defined\" (given their final values, aka \"finalized\") in {meth}`finalize_options`,\nboth of which must be defined by every command class. The \"body\" of the subroutine,\n(where it does all the work) is the {meth}`run` method.\nBetween {meth}`initialize_options` and {meth}`finalize_options`, `setuptools` may set\nthe values for options/attributes based on user's input (or circumstance),\nwhich means that the implementation should be careful to not overwrite values in\n{meth}`finalize_options` unless necessary.\n\nPlease note that other commands (or other parts of setuptools) may also overwrite\nthe values of the command's options/attributes multiple times during the build\nprocess.\nTherefore it is important to consistently implement {meth}`initialize_options` and\n{meth}`finalize_options`. For example, all derived attributes (or attributes that\ndepend on the value of other attributes) **SHOULD** be recomputed in\n{meth}`finalize_options`.\n\nWhen overwriting existing commands, custom defined classes **MUST** abide by the\nsame APIs implemented by the original class. They also **SHOULD** inherit from the\noriginal class.\n"]}, {"name": "setuptools.sic", "bases": ["str"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Treat this string as-is (https://en.wikipedia.org/wiki/Sic)"]}], "exports": [{"name": "setuptools.Command", "xref": {"fqname": "setuptools.Command", "project": null}}, {"name": "setuptools.Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}}, {"name": "setuptools.Extension", "xref": {"fqname": "setuptools.extension.Extension", "project": null}}, {"name": "setuptools.find_namespace_packages", "xref": {"fqname": "setuptools.find_namespace_packages", "project": null}}, {"name": "setuptools.find_packages", "xref": {"fqname": "setuptools.find_packages", "project": null}}, {"name": "setuptools.Require", "xref": {"fqname": "setuptools.depends.Require", "project": null}}, {"name": "setuptools.setup", "xref": {"fqname": "setuptools.setup", "project": null}}, {"name": "setuptools.SetuptoolsDeprecationWarning", "xref": {"fqname": "setuptools.warnings.SetuptoolsDeprecationWarning", "project": null}}]}, {"name": "setuptools.monkey", "documentation": ["Monkey patching of distutils."], "functions": [{"name": "setuptools.monkey._get_mro", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": null, "documentation": ["Returns the bases classes for cls sorted by the MRO.\n\nWorks around an issue on Jython where inspect.getmro will not return all\nbase classes if multiple classes share the same name. Instead, this\nfunction will return a tuple containing the class itself, and the contents\nof cls.__bases__. See https://github.com/pypa/setuptools/issues/1024."]}, {"name": "setuptools.monkey.get_unpatched", "asynchronous": false, "params": [{"name": "item", "type": {"name": "_UnpatchT", "xref": {"fqname": "_UnpatchT", "project": null}, "params": null}, "default": null}], "returns": {"name": "_UnpatchT", "xref": {"fqname": "_UnpatchT", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.monkey.get_unpatched", "asynchronous": false, "params": [{"name": "item", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.monkey.get_unpatched", "asynchronous": false, "params": [{"name": "item", "type": {"name": "type | types.FunctionType | object", "xref": null, "params": null}, "default": null}], "returns": {"name": "type | types.FunctionType | None", "xref": null, "params": null}, "documentation": []}, {"name": "setuptools.monkey.get_unpatched_class", "asynchronous": false, "params": [{"name": "cls", "type": {"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": [{"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": [{"name": "_T", "xref": {"fqname": "_T", "project": null}, "params": null}]}, "documentation": ["Protect against re-patching the distutils if reloaded\n\nAlso ensures that no other distutils extension monkeypatched the distutils\nfirst."]}, {"name": "setuptools.monkey.patch_all", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.monkey._patch_distribution_metadata", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "setuptools.monkey.patch_func", "asynchronous": false, "params": [{"name": "replacement", "type": null, "default": null}, {"name": "target_mod", "type": null, "default": null}, {"name": "func_name", "type": null, "default": null}], "returns": null, "documentation": ["Patch func_name in target_mod with replacement\n\nImportant - original must be resolved by name to avoid\npatching an already patched function."]}, {"name": "setuptools.monkey.get_unpatched_function", "asynchronous": false, "params": [{"name": "candidate", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.monkey._T", "type": null, "documentation": []}, {"name": "setuptools.monkey._UnpatchT", "type": null, "documentation": []}, {"name": "setuptools.monkey.__all__", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": ["Everything is private. Contact the project team\nif you think you need this functionality."]}], "classes": [], "exports": []}, {"name": "setuptools.unicode_utils", "documentation": [], "functions": [{"name": "setuptools.unicode_utils.decompose", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["HFS Plus uses decomposed UTF-8"]}, {"name": "setuptools.unicode_utils.filesys_decode", "asynchronous": false, "params": [{"name": "path", "type": null, "default": null}], "returns": null, "documentation": ["Ensure that the given path is decoded,\n`None` when no expected encoding works\n"]}, {"name": "setuptools.unicode_utils.try_encode", "asynchronous": false, "params": [{"name": "string", "type": null, "default": null}, {"name": "enc", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.unicode_utils._read_utf8_with_fallback", "asynchronous": false, "params": [{"name": "file", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "fallback_encoding", "type": null, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["First try to read the file with UTF-8, if there is an error fallback to a\ndifferent encoding (\"locale\" by default). Returns the content of the file.\nAlso useful when reading files that might have been produced by an older version of\nsetuptools."]}, {"name": "setuptools.unicode_utils._cfg_read_utf8_with_fallback", "asynchronous": false, "params": [{"name": "cfg", "type": {"name": "RawConfigParser", "xref": {"fqname": "configparser.RawConfigParser", "project": "--std--"}, "params": null}, "default": null}, {"name": "file", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "fallback_encoding", "type": null, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Same idea as {func}`_read_utf8_with_fallback`, but for the\n{meth}`RawConfigParser.read` method.\n\nThis method may call `cfg.clear()`.\n"]}], "variables": [], "classes": [{"name": "setuptools.unicode_utils._Utf8EncodingNeeded", "bases": ["SetuptoolsDeprecationWarning"], "methods": [], "class_variables": [{"name": "setuptools.unicode_utils._Utf8EncodingNeeded._SUMMARY", "type": null, "documentation": []}, {"name": "setuptools.unicode_utils._Utf8EncodingNeeded._DETAILS", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.archive_util", "documentation": ["Utilities for extracting common archive formats"], "functions": [{"name": "setuptools.archive_util.default_filter", "asynchronous": false, "params": [{"name": "src", "type": null, "default": null}, {"name": "dst", "type": null, "default": null}], "returns": null, "documentation": ["The default progress/filter callback; returns True for all files"]}, {"name": "setuptools.archive_util.unpack_archive", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}, {"name": "extract_dir", "type": null, "default": null}, {"name": "progress_filter", "type": null, "default": "..."}, {"name": "drivers", "type": null, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Unpack `filename` to `extract_dir`, or raise `UnrecognizedFormat`\n\n`progress_filter` is a function taking two arguments: a source path\ninternal to the archive ('/'-separated), and a filesystem path where it\nwill be extracted. The callback must return the desired extract path\n(which may be the same as the one passed in), or else `None` to skip\nthat file or directory. The callback can thus be used to report on the\nprogress of the extraction, as well as to filter the items extracted or\nalter their extraction paths.\n\n`drivers`, if supplied, must be a non-empty sequence of functions with the\nsame signature as this function (minus the `drivers` argument), that raise\n`UnrecognizedFormat` if they do not support extracting the designated\narchive type. The `drivers` are tried in sequence until one is found that\ndoes not raise an error, or until all are exhausted (in which case\n`UnrecognizedFormat` is raised). If you do not supply a sequence of\ndrivers, the module's `extraction_drivers` constant will be used, which\nmeans that `unpack_zipfile` and `unpack_tarfile` will be tried, in that\norder.\n"]}, {"name": "setuptools.archive_util.unpack_directory", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}, {"name": "extract_dir", "type": null, "default": null}, {"name": "progress_filter", "type": null, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["\"Unpack\" a directory, using the same interface as for archives\n\nRaises `UnrecognizedFormat` if `filename` is not a directory\n"]}, {"name": "setuptools.archive_util.unpack_zipfile", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}, {"name": "extract_dir", "type": null, "default": null}, {"name": "progress_filter", "type": null, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Unpack zip `filename` to `extract_dir`\n\nRaises `UnrecognizedFormat` if `filename` is not a zipfile (as determined\nby `zipfile.is_zipfile()`). See `unpack_archive()` for an explanation\nof the `progress_filter` argument.\n"]}, {"name": "setuptools.archive_util._unpack_zipfile_obj", "asynchronous": false, "params": [{"name": "zipfile_obj", "type": null, "default": null}, {"name": "extract_dir", "type": null, "default": null}, {"name": "progress_filter", "type": null, "default": "..."}], "returns": null, "documentation": ["Internal/private API used by other parts of setuptools.\nSimilar to `unpack_zipfile`, but receives an already opened {obj}`zipfile.ZipFile`\nobject instead of a filename.\n"]}, {"name": "setuptools.archive_util._resolve_tar_file_or_dir", "asynchronous": false, "params": [{"name": "tar_obj", "type": null, "default": null}, {"name": "tar_member_obj", "type": null, "default": null}], "returns": null, "documentation": ["Resolve any links and extract link targets as normal files."]}, {"name": "setuptools.archive_util._iter_open_tar", "asynchronous": false, "params": [{"name": "tar_obj", "type": null, "default": null}, {"name": "extract_dir", "type": null, "default": null}, {"name": "progress_filter", "type": null, "default": null}], "returns": null, "documentation": ["Emit member-destination pairs from a tar archive."]}, {"name": "setuptools.archive_util.unpack_tarfile", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}, {"name": "extract_dir", "type": null, "default": null}, {"name": "progress_filter", "type": null, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Unpack tar/tar.gz/tar.bz2 `filename` to `extract_dir`\n\nRaises `UnrecognizedFormat` if `filename` is not a tarfile (as determined\nby `tarfile.open()`). See `unpack_archive()` for an explanation\nof the `progress_filter` argument.\n"]}], "variables": [{"name": "setuptools.archive_util.extraction_drivers", "type": null, "documentation": []}], "classes": [{"name": "setuptools.archive_util.UnrecognizedFormat", "bases": ["DistutilsError"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Couldn't recognize the archive type"]}], "exports": [{"name": "setuptools.archive_util.default_filter", "xref": {"fqname": "setuptools.archive_util.default_filter", "project": null}}, {"name": "setuptools.archive_util.extraction_drivers", "xref": {"fqname": "setuptools.archive_util.extraction_drivers", "project": null}}, {"name": "setuptools.archive_util.unpack_archive", "xref": {"fqname": "setuptools.archive_util.unpack_archive", "project": null}}, {"name": "setuptools.archive_util.unpack_directory", "xref": {"fqname": "setuptools.archive_util.unpack_directory", "project": null}}, {"name": "setuptools.archive_util.unpack_tarfile", "xref": {"fqname": "setuptools.archive_util.unpack_tarfile", "project": null}}, {"name": "setuptools.archive_util.unpack_zipfile", "xref": {"fqname": "setuptools.archive_util.unpack_zipfile", "project": null}}, {"name": "setuptools.archive_util.UnrecognizedFormat", "xref": {"fqname": "setuptools.archive_util.UnrecognizedFormat", "project": null}}]}, {"name": "_distutils_hack.override", "documentation": [], "functions": [], "variables": [], "classes": [], "exports": []}, {"name": "_distutils_hack", "documentation": ["don't import any costly modules"], "functions": [{"name": "_distutils_hack.warn_distutils_present", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "_distutils_hack.clear_distutils", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "_distutils_hack.enabled", "asynchronous": false, "params": [], "returns": null, "documentation": ["Allow selection of distutils by environment variable."]}, {"name": "_distutils_hack.ensure_local_distutils", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "_distutils_hack.do_override", "asynchronous": false, "params": [], "returns": null, "documentation": ["Ensure that the local copy of distutils is preferred over stdlib.\n\nSee https://github.com/pypa/setuptools/issues/417#issuecomment-392298401\nfor more motivation."]}, {"name": "_distutils_hack.add_shim", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "_distutils_hack.insert_shim", "asynchronous": false, "params": [], "returns": null, "documentation": []}, {"name": "_distutils_hack._remove_shim", "asynchronous": false, "params": [], "returns": null, "documentation": []}], "variables": [{"name": "_distutils_hack.report_url", "type": null, "documentation": []}, {"name": "_distutils_hack.DISTUTILS_FINDER", "type": null, "documentation": []}, {"name": "_distutils_hack.remove_shim", "type": null, "documentation": []}], "classes": [{"name": "_distutils_hack._TrivialRe", "bases": [], "methods": [{"name": "_distutils_hack._TrivialRe.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "*patterns", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "_distutils_hack._TrivialRe.match", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "string", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "_distutils_hack.DistutilsMetaFinder", "bases": [], "methods": [{"name": "_distutils_hack.DistutilsMetaFinder.find_spec", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "fullname", "type": null, "default": null}, {"name": "path", "type": null, "default": null}, {"name": "target", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "_distutils_hack.DistutilsMetaFinder.spec_for_distutils", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "_distutils_hack.DistutilsMetaFinder.is_cpython", "asynchronous": false, "params": [], "returns": null, "documentation": ["Suppress supplying distutils for CPython (build and tests).\nRef #2965 and #3007."]}, {"name": "_distutils_hack.DistutilsMetaFinder.spec_for_pip", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Ensure stdlib distutils when running under pip.\nSee pypa/pip#8761 for rationale."]}, {"name": "_distutils_hack.DistutilsMetaFinder.pip_imported_during_build", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}], "returns": null, "documentation": ["Detect if pip is being imported in a build script. Ref #2355."]}, {"name": "_distutils_hack.DistutilsMetaFinder.frame_file_is_setup", "asynchronous": false, "params": [{"name": "frame", "type": null, "default": null}], "returns": null, "documentation": ["Return True if the indicated frame suggests a setup.py file."]}, {"name": "_distutils_hack.DistutilsMetaFinder.spec_for_sensitive_tests", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Ensure stdlib distutils when running select tests under CPython.\n\npython/cpython#91169"]}], "class_variables": [{"name": "_distutils_hack.DistutilsMetaFinder.sensitive_tests", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "_distutils_hack.shim", "bases": [], "methods": [{"name": "_distutils_hack.shim.__enter__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "_distutils_hack.shim.__exit__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "exc", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}, {"name": "value", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}, {"name": "tb", "type": {"name": "object", "xref": {"fqname": "functions.object", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": []}, {"name": "setuptools.dist", "documentation": [], "functions": [{"name": "setuptools.dist.__getattr__", "asynchronous": false, "params": [{"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.dist.check_importable", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}, {"name": "attr", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.dist.assert_string_list", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}, {"name": "attr", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "value", "type": {"name": "_Sequence", "xref": {"fqname": "_Sequence", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Verify that value is a string list"]}, {"name": "setuptools.dist.check_nsp", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}, {"name": "attr", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": ["Verify that namespace packages are valid"]}, {"name": "setuptools.dist.check_extras", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}, {"name": "attr", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": ["Verify that extras_require mapping is valid"]}, {"name": "setuptools.dist._check_extra", "asynchronous": false, "params": [{"name": "extra", "type": null, "default": null}, {"name": "reqs", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.dist._check_marker", "asynchronous": false, "params": [{"name": "marker", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.dist.assert_bool", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}, {"name": "attr", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": ["Verify that value is True, False, 0, or 1"]}, {"name": "setuptools.dist.invalid_unless_false", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}, {"name": "attr", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.dist.check_requirements", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}, {"name": "attr", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "value", "type": {"name": "_OrderedStrSequence", "xref": {"fqname": "_OrderedStrSequence", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Verify that install_requires is a valid requirements list"]}, {"name": "setuptools.dist.check_specifier", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}, {"name": "attr", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": ["Verify that value is a valid version specifier"]}, {"name": "setuptools.dist.check_entry_points", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}, {"name": "attr", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": ["Verify that entry_points map is parseable"]}, {"name": "setuptools.dist.check_package_data", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}, {"name": "attr", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": ["Verify that value is a dictionary of package names to glob lists"]}, {"name": "setuptools.dist.check_packages", "asynchronous": false, "params": [{"name": "dist", "type": null, "default": null}, {"name": "attr", "type": null, "default": null}, {"name": "value", "type": null, "default": null}], "returns": null, "documentation": []}], "variables": [{"name": "setuptools.dist._sequence", "type": null, "documentation": [":meta private:\n\nSupported iterable types that are known to be:\n- ordered (which `set` isn't)\n- not match a str (which `Sequence[str]` does)\n- not imply a nested type (like `dict`)\nfor use with `isinstance`."]}, {"name": "setuptools.dist._Sequence", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": []}, {"name": "setuptools.dist._sequence_type_repr", "type": null, "documentation": []}, {"name": "setuptools.dist._OrderedStrSequence", "type": {"name": "TypeAlias", "xref": {"fqname": "typing_extensions.TypeAlias", "project": null}, "params": null}, "documentation": [":meta private:\nAvoid single-use iterable. Disallow sets.\nA poor approximation of an OrderedSequence (dict doesn't match a Sequence)."]}, {"name": "setuptools.dist._Distribution", "type": null, "documentation": []}], "classes": [{"name": "setuptools.dist.Distribution", "bases": ["_Distribution"], "methods": [{"name": "setuptools.dist.Distribution.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "attrs", "type": {"name": "MutableMapping[str, Any] | None", "xref": null, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Any: Dynamic assignment results in Incompatible types in assignment"]}, {"name": "setuptools.dist.Distribution._validate_metadata", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.dist.Distribution._set_metadata_defaults", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "attrs", "type": null, "default": null}], "returns": null, "documentation": ["Fill-in missing metadata fields not supported by distutils.\nSome fields may have been set by other tools (e.g. pbr).\nThose fields (vars(self.metadata)) take precedence to\nsupplied attrs."]}, {"name": "setuptools.dist.Distribution._normalize_version", "asynchronous": false, "params": [{"name": "version", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.dist.Distribution._finalize_requires", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Set `metadata.python_requires` and fix environment markers\nin `install_requires` and `extras_require`."]}, {"name": "setuptools.dist.Distribution._normalize_requires", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Make sure requirement-related attributes exist and are normalized"]}, {"name": "setuptools.dist.Distribution._finalize_license_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Compute names of all license files which should be included."]}, {"name": "setuptools.dist.Distribution._expand_patterns", "asynchronous": false, "params": [{"name": "patterns", "type": null, "default": null}], "returns": null, "documentation": ["```pycon\n>>> list(Distribution._expand_patterns(['LICENSE']))\n['LICENSE']\n>>> list(Distribution._expand_patterns(['pyproject.toml', 'LIC*']))\n['pyproject.toml', 'LICENSE']\n```\n"]}, {"name": "setuptools.dist.Distribution._parse_config_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "filenames", "type": null, "default": "..."}], "returns": null, "documentation": ["Adapted from distutils.dist.Distribution.parse_config_files,\nthis method provides the same functionality in subtly-improved\nways.", "FIXME: 'Distribution._parse_config_files' is too complex (14)"]}, {"name": "setuptools.dist.Distribution.warn_dash_deprecation", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "opt", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "section", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.dist.Distribution._setuptools_commands", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.dist.Distribution.make_option_lowercase", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "opt", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "section", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.dist.Distribution._set_command_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command_obj", "type": null, "default": null}, {"name": "option_dict", "type": null, "default": "..."}], "returns": null, "documentation": ["Set the options for 'command_obj' from 'option_dict'.  Basically\nthis means copying elements of a dictionary ('option_dict') to\nattributes of an instance ('command').\n\n'command_obj' must be a Command instance.  If 'option_dict' is not\nsupplied, uses the standard option dictionary for this command\n(from 'self.command_options').\n\n(Adopted from distutils.dist.Distribution._set_command_options)", "FIXME: 'Distribution._set_command_options' is too complex (14)"]}, {"name": "setuptools.dist.Distribution._get_project_config_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "filenames", "type": {"name": "Iterable[StrPath] | None", "xref": null, "params": null}, "default": null}], "returns": null, "documentation": ["Add default file and split between INI and TOML"]}, {"name": "setuptools.dist.Distribution.parse_config_files", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "filenames", "type": {"name": "Iterable[StrPath] | None", "xref": null, "params": null}, "default": "..."}, {"name": "ignore_option_errors", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Parses configuration files from various levels\nand loads configuration."]}, {"name": "setuptools.dist.Distribution.fetch_build_eggs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requires", "type": {"name": "_StrOrIter", "xref": {"fqname": "setuptools.dist._reqs._StrOrIter", "project": null}, "params": null}, "default": null}], "returns": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "_pkg_resources_Distribution", "xref": {"fqname": "pkg_resources.Distribution", "project": null}, "params": null}]}, "documentation": ["Resolve pre-setup requirements"]}, {"name": "setuptools.dist.Distribution.finalize_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Allow plugins to apply arbitrary operations to the\ndistribution. Each hook may optionally define a 'order'\nto influence the order of execution. Smaller numbers\ngo first and the default is 0."]}, {"name": "setuptools.dist.Distribution._removed", "asynchronous": false, "params": [{"name": "ep", "type": null, "default": null}], "returns": null, "documentation": ["When removing an entry point, if metadata is loaded\nfrom an older version of Setuptools, that removed\nentry point will attempt to be loaded and will fail.\nSee #2765 for more details."]}, {"name": "setuptools.dist.Distribution._finalize_setup_keywords", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.dist.Distribution.get_egg_cache_dir", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.dist.Distribution.fetch_build_egg", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "req", "type": null, "default": null}], "returns": null, "documentation": ["Fetch an egg needed for building"]}, {"name": "setuptools.dist.Distribution.get_command_class", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "type", "xref": {"fqname": "functions.type", "project": "--std--"}, "params": [{"name": "distutils.cmd.Command", "xref": {"fqname": "distutils.cmd.Command", "project": null}, "params": null}]}, "documentation": ["Pluggable version of get_command_class()"]}, {"name": "setuptools.dist.Distribution.print_commands", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.dist.Distribution.get_command_list", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.dist.Distribution.include", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "**attrs", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Add items to distribution that are named in keyword arguments\n\nFor example, 'dist.include(py_modules=[\"x\"])' would add 'x' to\nthe distribution's 'py_modules' attribute, if it was not already\nthere.\n\nCurrently, this method only supports inclusion for attributes that are\nlists or tuples.  If you need to add support for adding to other\nattributes in this or a subclass, you can add an '_include_X' method,\nwhere 'X' is the name of the attribute.  The method will be called with\nthe value passed to 'include()'.  So, 'dist.include(foo={\"bar\":\"baz\"})'\nwill try to call 'dist._include_foo({\"bar\":\"baz\"})', which can then\nhandle whatever special inclusion logic is needed."]}, {"name": "setuptools.dist.Distribution.exclude_package", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "package", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Remove packages, modules, and extensions in named package"]}, {"name": "setuptools.dist.Distribution.has_contents_for", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "package", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": ["Return true if 'exclude_package(package)' would do something"]}, {"name": "setuptools.dist.Distribution._exclude_misc", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "value", "type": {"name": "_Sequence", "xref": {"fqname": "_Sequence", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Handle 'exclude()' for list/tuple attrs without a special handler"]}, {"name": "setuptools.dist.Distribution._include_misc", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "name", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "value", "type": {"name": "_Sequence", "xref": {"fqname": "_Sequence", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Handle 'include()' for list/tuple attrs without a special handler"]}, {"name": "setuptools.dist.Distribution.exclude", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "**attrs", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Remove items from distribution that are named in keyword arguments\n\nFor example, 'dist.exclude(py_modules=[\"x\"])' would remove 'x' from\nthe distribution's 'py_modules' attribute.  Excluding packages uses\nthe 'exclude_package()' method, so all of the package's contained\npackages, modules, and extensions are also excluded.\n\nCurrently, this method only supports exclusion from attributes that are\nlists or tuples.  If you need to add support for excluding from other\nattributes in this or a subclass, you can add an '_exclude_X' method,\nwhere 'X' is the name of the attribute.  The method will be called with\nthe value passed to 'exclude()'.  So, 'dist.exclude(foo={\"bar\":\"baz\"})'\nwill try to call 'dist._exclude_foo({\"bar\":\"baz\"})', which can then\nhandle whatever special exclusion logic is needed."]}, {"name": "setuptools.dist.Distribution._exclude_packages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "packages", "type": {"name": "_Sequence", "xref": {"fqname": "_Sequence", "project": null}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.dist.Distribution._parse_command_opts", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "parser", "type": null, "default": null}, {"name": "args", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.dist.Distribution.get_cmdline_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "dict", "xref": {"fqname": "functions.dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str | None", "xref": null, "params": null}]}]}, "documentation": ["Return a '{cmd: {opt:val}}' map of all command-line options\n\nOption names are all long, but do not include the leading '--', and\ncontain dashes rather than underscores.  If the option doesn't take\nan argument (e.g. '--quiet'), the 'val' is 'None'.\n\nNote that options provided by config files are intentionally excluded."]}, {"name": "setuptools.dist.Distribution.iter_distribution_names", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Yield all packages, modules, and extension names in distribution"]}, {"name": "setuptools.dist.Distribution.handle_display_options", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "option_order", "type": null, "default": null}], "returns": null, "documentation": ["If there were any non-global \"display-only\" options\n(--help-commands or the metadata display options) on the command\nline, display the requested info and return true; else return\nfalse."]}, {"name": "setuptools.dist.Distribution.run_command", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "command", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.dist.Distribution._DISTUTILS_UNSUPPORTED_METADATA", "type": null, "documentation": []}, {"name": "setuptools.dist.Distribution.namespace_packages", "type": {"name": "list", "xref": {"fqname": "functions.list", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": [": :meta private: DEPRECATED"]}], "instance_variables": [], "inner_classes": [], "documentation": ["Distribution with support for tests and package data\n\nThis is an enhanced version of 'distutils.dist.Distribution' that\neffectively adds the following new optional keyword arguments to 'setup()':\n\n> 'install_requires' -- a string or sequence of strings specifying project\n>\n> : versions that the distribution requires when installed, in the format\n>   used by 'pkg_resources.require()'. They will be installed\n>   automatically when the package is installed. If you wish to use\n>   packages that are not available in PyPI, or want to give your users an\n>   alternate download location, you can add a 'find_links' option to the\n>   '[easy_install]' section of your project's 'setup.cfg' file, and then\n>   setuptools will scan the listed web pages for links that satisfy the\n>   requirements.\n>\n> 'extras_require' -- a dictionary mapping names of optional \"extras\" to the\n>\n> : additional requirement(s) that using those extras incurs. For example,\n>   this:\n>\n>   ```\n>   extras_require = dict(reST = [\"docutils>=0.3\", \"reSTedit\"])\n>   ```\n>\n>   indicates that the distribution can optionally provide an extra\n>   capability called \"reST\", but it can only be used if docutils and\n>   reSTedit are installed. If the user installs your package using\n>   EasyInstall and requests one of your extras, the corresponding\n>   additional requirements will be installed if needed.\n>\n> 'package_data' -- a dictionary mapping package names to lists of filenames\n>\n> : or globs to use to find data files contained in the named packages.\n>   If the dictionary has filenames or globs listed under '\"\"' (the empty\n>   string), those names will be searched for in every package, in addition\n>   to any names for the specific package. Data files found using these\n>   names/globs will be installed along with the package, in the same\n>   location as the package. Note that globs are allowed to reference\n>   the contents of non-package subdirectories, as long as you use '/' as\n>   a path separator. (Globs are automatically converted to\n>   platform-specific paths at runtime.)\n\nIn addition to these new keywords, this class also has several new methods\nfor manipulating the distribution's contents. For example, the 'include()'\nand 'exclude()' methods can be thought of as in-place add and subtract\ncommands that add or remove packages, modules, extensions, and so on from\nthe distribution.\n"]}, {"name": "setuptools.dist.DistDeprecationWarning", "bases": ["SetuptoolsDeprecationWarning"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["Class for warning about deprecations in dist in\nsetuptools. Not ignored by default, unlike DeprecationWarning."]}], "exports": [{"name": "setuptools.dist.Distribution", "xref": {"fqname": "setuptools.dist.Distribution", "project": null}}]}, {"name": "setuptools.package_index", "documentation": ["PyPI and direct package downloading."], "functions": [{"name": "setuptools.package_index.parse_requirement_arg", "asynchronous": false, "params": [{"name": "spec", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.parse_bdist_wininst", "asynchronous": false, "params": [{"name": "name", "type": null, "default": null}], "returns": null, "documentation": ["Return (base,pyversion) or (None,None) for possible .exe name"]}, {"name": "setuptools.package_index.egg_info_for_url", "asynchronous": false, "params": [{"name": "url", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.distros_for_url", "asynchronous": false, "params": [{"name": "url", "type": null, "default": null}, {"name": "metadata", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield egg or source distribution objects that might be found at a URL"]}, {"name": "setuptools.package_index.distros_for_location", "asynchronous": false, "params": [{"name": "location", "type": null, "default": null}, {"name": "basename", "type": null, "default": null}, {"name": "metadata", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield egg or source distribution objects based on basename"]}, {"name": "setuptools.package_index.distros_for_filename", "asynchronous": false, "params": [{"name": "filename", "type": null, "default": null}, {"name": "metadata", "type": null, "default": "..."}], "returns": null, "documentation": ["Yield possible egg or source distribution objects based on a filename"]}, {"name": "setuptools.package_index.interpret_distro_name", "asynchronous": false, "params": [{"name": "location", "type": null, "default": null}, {"name": "basename", "type": null, "default": null}, {"name": "metadata", "type": null, "default": null}, {"name": "py_version", "type": null, "default": "..."}, {"name": "precedence", "type": null, "default": "..."}, {"name": "platform", "type": null, "default": "..."}], "returns": null, "documentation": ["Generate the interpretation of a source distro name\n\nNote: if `location` is a filesystem filename, you should call\n`pkg_resources.normalize_path()` on it before passing it to this\nroutine!\n"]}, {"name": "setuptools.package_index.unique_values", "asynchronous": false, "params": [{"name": "func", "type": null, "default": null}], "returns": null, "documentation": ["Wrap a function returning an iterable such that the resulting iterable\nonly ever yields unique items."]}, {"name": "setuptools.package_index.find_external_links", "asynchronous": false, "params": [{"name": "url", "type": null, "default": null}, {"name": "page", "type": null, "default": null}], "returns": null, "documentation": ["Find rel=\"homepage\" and rel=\"download\" links in `page`, yielding URLs"]}, {"name": "setuptools.package_index.decode_entity", "asynchronous": false, "params": [{"name": "match", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.htmldecode", "asynchronous": false, "params": [{"name": "text", "type": null, "default": null}], "returns": null, "documentation": ["Decode HTML entities in the given text.\n\n```pycon\n>>> htmldecode(\n...     'https://../package_name-0.1.2.tar.gz'\n...     '?tokena=A&amp;tokenb=B\">package_name-0.1.2.tar.gz')\n'https://../package_name-0.1.2.tar.gz?tokena=A&tokenb=B\">package_name-0.1.2.tar.gz'\n```\n"]}, {"name": "setuptools.package_index.socket_timeout", "asynchronous": false, "params": [{"name": "timeout", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.package_index._encode_auth", "asynchronous": false, "params": [{"name": "auth", "type": null, "default": null}], "returns": null, "documentation": ["Encode auth from a URL suitable for an HTTP header.\n\\>>> str(\\_encode_auth('username%3Apassword'))\n'dXNlcm5hbWU6cGFzc3dvcmQ='\n\nLong auth strings should not cause a newline to be inserted.\n\\>>> long_auth = 'username:' + 'password'10\n\\>>> chr(10) in str(\\_encode_auth(long_auth))\nFalse\n"]}, {"name": "setuptools.package_index.open_with_auth", "asynchronous": false, "params": [{"name": "url", "type": null, "default": null}, {"name": "opener", "type": null, "default": "..."}], "returns": null, "documentation": ["Open a urllib2 request, handling HTTP authentication"]}, {"name": "setuptools.package_index._splituser", "asynchronous": false, "params": [{"name": "host", "type": null, "default": null}], "returns": null, "documentation": ["splituser('user[:passwd]@host[:port]')\n--> 'user[:passwd]', 'host[:port]'.", "copy of urllib.parse._splituser from Python 3.8", "See https://github.com/python/cpython/issues/80072."]}, {"name": "setuptools.package_index.fix_sf_url", "asynchronous": false, "params": [{"name": "url", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.local_open", "asynchronous": false, "params": [{"name": "url", "type": null, "default": null}], "returns": null, "documentation": ["Read a local path, with special support for directories"]}], "variables": [{"name": "setuptools.package_index.EGG_FRAGMENT", "type": null, "documentation": []}, {"name": "setuptools.package_index.HREF", "type": null, "documentation": []}, {"name": "setuptools.package_index.PYPI_MD5", "type": null, "documentation": []}, {"name": "setuptools.package_index.URL_SCHEME", "type": null, "documentation": []}, {"name": "setuptools.package_index.EXTENSIONS", "type": null, "documentation": []}, {"name": "setuptools.package_index._SOCKET_TIMEOUT", "type": null, "documentation": []}, {"name": "setuptools.package_index.user_agent", "type": null, "documentation": []}, {"name": "setuptools.package_index.REL", "type": null, "documentation": ["Regex for an HTML tag with 'rel=\"val\"' attributes."]}, {"name": "setuptools.package_index.entity_sub", "type": null, "documentation": []}, {"name": "setuptools.package_index.open_with_auth", "type": null, "documentation": []}], "classes": [{"name": "setuptools.package_index.ContentChecker", "bases": [], "methods": [{"name": "setuptools.package_index.ContentChecker.feed", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "block", "type": null, "default": null}], "returns": null, "documentation": ["Feed a block of data to the hash."]}, {"name": "setuptools.package_index.ContentChecker.is_valid", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Check the hash. Return False if validation fails."]}, {"name": "setuptools.package_index.ContentChecker.report", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "reporter", "type": null, "default": null}, {"name": "template", "type": null, "default": null}], "returns": null, "documentation": ["Call reporter with information about the checker (hash name)\nsubstituted into the template."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["A null content checker that defines the interface for checking content"]}, {"name": "setuptools.package_index.HashChecker", "bases": ["ContentChecker"], "methods": [{"name": "setuptools.package_index.HashChecker.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "hash_name", "type": null, "default": null}, {"name": "expected", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.package_index.HashChecker.from_url", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "url", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.HashChecker.feed", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "block", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.HashChecker.is_valid", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.HashChecker.report", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "reporter", "type": null, "default": null}, {"name": "template", "type": null, "default": null}], "returns": null, "documentation": []}], "class_variables": [{"name": "setuptools.package_index.HashChecker.pattern", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools.package_index.PackageIndex", "bases": ["Environment"], "methods": [{"name": "setuptools.package_index.PackageIndex.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "index_url", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "hosts", "type": null, "default": "..."}, {"name": "ca_bundle", "type": null, "default": "..."}, {"name": "verify_ssl", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "*args", "type": null, "default": null}, {"name": "**kw", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.package_index.PackageIndex.add", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "dist", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.PackageIndex.process_url", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "url", "type": null, "default": null}, {"name": "retrieve", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Evaluate a URL as a possible download, and maybe retrieve it", "FIXME: 'PackageIndex.process_url' is too complex (14)"]}, {"name": "setuptools.package_index.PackageIndex.process_filename", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "fn", "type": null, "default": null}, {"name": "nested", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.package_index.PackageIndex.url_ok", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "url", "type": null, "default": null}, {"name": "fatal", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.package_index.PackageIndex.scan_egg_links", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "search_path", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.package_index.PackageIndex.scan_egg_link", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "path", "type": null, "default": null}, {"name": "entry", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.package_index.PackageIndex._scan", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "link", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.PackageIndex.process_index", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "url", "type": null, "default": null}, {"name": "page", "type": null, "default": null}], "returns": null, "documentation": ["Process the contents of a PyPI page"]}, {"name": "setuptools.package_index.PackageIndex.need_version_info", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "url", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.package_index.PackageIndex.scan_all", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": "..."}, {"name": "*args", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.package_index.PackageIndex.find_packages", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requirement", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.package_index.PackageIndex.obtain", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requirement", "type": null, "default": null}, {"name": "installer", "type": null, "default": "..."}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.PackageIndex.check_hash", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "checker", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}, {"name": "tfp", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["checker is a ContentChecker"]}, {"name": "setuptools.package_index.PackageIndex.add_find_links", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "urls", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["Add `urls` to the list that will be prescanned for searches"]}, {"name": "setuptools.package_index.PackageIndex.prescan", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Scan urls scheduled for prescanning (e.g. --find-links)"]}, {"name": "setuptools.package_index.PackageIndex.not_found_in_index", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requirement", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.package_index.PackageIndex.download", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "spec", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": ["Locate and/or download `spec` to `tmpdir`, returning a local path\n\n`spec` may be a `Requirement` object, or a string containing a URL,\nan existing local filename, or a project/version requirement spec\n(i.e. the string form of a `Requirement` object). If it is the URL\nof a .py file with an unambiguous `#egg=name-version` tag (i.e., one\nthat escapes `-` as `_` throughout), a trivial `setup.py` is\nautomatically created alongside the downloaded file.\n\nIf `spec` is a `Requirement` object or a string containing a\nproject/version requirement spec, this method returns the location of\na matching distribution (possibly after downloading it to `tmpdir`).\nIf `spec` is a locally existing file or directory name, it is simply\nreturned unchanged. If `spec` is a URL, it is downloaded to a subpath\nof `tmpdir`, and the local filename is returned. Various errors may be\nraised if a problem occurs during downloading.\n"]}, {"name": "setuptools.package_index.PackageIndex.fetch_distribution", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requirement", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}, {"name": "force_scan", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "source", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "develop_ok", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "local_index", "type": null, "default": "..."}], "returns": {"name": "Distribution | None", "xref": null, "params": null}, "documentation": ["Obtain a distribution suitable for fulfilling `requirement`\n\n`requirement` must be a `pkg_resources.Requirement` instance.\nIf necessary, or if the `force_scan` flag is set, the requirement is\nsearched for in the (online) package index as well as the locally\ninstalled packages. If a distribution matching `requirement` is found,\nthe returned distribution's `location` is the value you would have\ngotten from calling the `download()` method with the matching\ndistribution's URL or filename. If no matching distribution is found,\n`None` is returned.\n\nIf the `source` flag is set, only source distributions and source\ncheckout links will be considered. Unless the `develop_ok` flag is\nset, development and system eggs (i.e., those using the `.egg-info`\nformat) will be ignored.\n"]}, {"name": "setuptools.package_index.PackageIndex.fetch", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "requirement", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}, {"name": "force_scan", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "source", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str | None", "xref": null, "params": null}, "documentation": ["Obtain a file suitable for fulfilling `requirement`\n\nDEPRECATED; use the `fetch_distribution()` method now instead. For\nbackward compatibility, this routine is identical but returns the\n`location` of the downloaded distribution instead of a distribution\nobject.\n"]}, {"name": "setuptools.package_index.PackageIndex.gen_setup", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}, {"name": "fragment", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.PackageIndex._download_to", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "url", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.PackageIndex.reporthook", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "url", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}, {"name": "blocknum", "type": null, "default": null}, {"name": "blksize", "type": null, "default": null}, {"name": "size", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.package_index.PackageIndex.open_url", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "url", "type": null, "default": null}, {"name": "warning", "type": null, "default": "..."}], "returns": null, "documentation": ["FIXME:"]}, {"name": "setuptools.package_index.PackageIndex._download_url", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "url", "type": null, "default": null}, {"name": "tmpdir", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.PackageIndex._resolve_vcs", "asynchronous": false, "params": [{"name": "url", "type": null, "default": null}], "returns": null, "documentation": ["```pycon\n>>> rvcs = PackageIndex._resolve_vcs\n>>> rvcs('git+http://foo/bar')\n'git'\n>>> rvcs('hg+https://foo/bar')\n'hg'\n>>> rvcs('git:myhost')\n'git'\n>>> rvcs('hg:myhost')\n>>> rvcs('http://foo/bar')\n```\n"]}, {"name": "setuptools.package_index.PackageIndex._download_vcs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "url", "type": null, "default": null}, {"name": "spec_filename", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.PackageIndex._download_other", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "url", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.PackageIndex.scan_url", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "url", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.package_index.PackageIndex._attempt_download", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "url", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.PackageIndex._invalid_download_html", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "url", "type": null, "default": null}, {"name": "headers", "type": null, "default": null}, {"name": "filename", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.PackageIndex._vcs_split_rev_from_url", "asynchronous": false, "params": [{"name": "url", "type": null, "default": null}], "returns": null, "documentation": ["Given a possible VCS URL, return a clean URL and resolved revision if any.\n\n```pycon\n>>> vsrfu = PackageIndex._vcs_split_rev_from_url\n>>> vsrfu('git+https://github.com/pypa/setuptools@v69.0.0#egg-info=setuptools')\n('https://github.com/pypa/setuptools', 'v69.0.0')\n>>> vsrfu('git+https://github.com/pypa/setuptools#egg-info=setuptools')\n('https://github.com/pypa/setuptools', None)\n>>> vsrfu('http://foo/bar')\n('http://foo/bar', None)\n```\n"]}, {"name": "setuptools.package_index.PackageIndex.debug", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.package_index.PackageIndex.info", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.package_index.PackageIndex.warn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "msg", "type": null, "default": null}, {"name": "*args", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.package_index.PackageIndex.dl_blocksize", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A distribution index that scans web pages for download URLs"]}, {"name": "setuptools.package_index.Credential", "bases": ["NamedTuple"], "methods": [{"name": "setuptools.package_index.Credential.__str__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools.package_index.Credential.username", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools.package_index.Credential.password", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": ["A username/password pair.\n\nDisplayed separated by `:`.\n\\>>> str(Credential('username', 'password'))\n'username:password'\n"]}, {"name": "setuptools.package_index.PyPIConfig", "bases": ["configparser.RawConfigParser"], "methods": [{"name": "setuptools.package_index.PyPIConfig.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": ["Load from ~/.pypirc"]}, {"name": "setuptools.package_index.PyPIConfig.creds_by_repository", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.PyPIConfig._get_repo_cred", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "section", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools.package_index.PyPIConfig.find_credential", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "url", "type": null, "default": null}], "returns": null, "documentation": ["If the URL indicated appears to be a repository defined in this\nconfig, return the credential for that repository."]}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": [{"name": "setuptools.package_index.distros_for_url", "xref": {"fqname": "setuptools.package_index.distros_for_url", "project": null}}, {"name": "setuptools.package_index.interpret_distro_name", "xref": {"fqname": "setuptools.package_index.interpret_distro_name", "project": null}}, {"name": "setuptools.package_index.PackageIndex", "xref": {"fqname": "setuptools.package_index.PackageIndex", "project": null}}, {"name": "setuptools.package_index.parse_bdist_wininst", "xref": {"fqname": "setuptools.package_index.parse_bdist_wininst", "project": null}}]}, {"name": "setuptools._vendor.inflect", "documentation": ["inflect: english language inflection\n - correctly generate plurals, ordinals, indefinite articles\n - convert numbers to words\n\nCopyright (C) 2010 Paul Dyson\n\nBased upon the Perl module\n`Lingua::EN::Inflect <https://metacpan.org/pod/Lingua::EN::Inflect>`_.\n\nmethods:\n    classical inflect\n    plural plural_noun plural_verb plural_adj singular_noun no num a an\n    compare compare_nouns compare_verbs compare_adjs\n    present_participle\n    ordinal\n    number_to_words\n    join\n    defnoun defverb defadj defa defan\n\nINFLECTIONS:\n    classical inflect\n    plural plural_noun plural_verb plural_adj singular_noun compare\n    no num a an present_participle\n\nPLURALS:\n    classical inflect\n    plural plural_noun plural_verb plural_adj singular_noun no num\n    compare compare_nouns compare_verbs compare_adjs\n\nCOMPARISONS:\n    classical\n    compare compare_nouns compare_verbs compare_adjs\n\nARTICLES:\n    classical inflect num a an\n\nNUMERICAL:\n    ordinal number_to_words\n\nUSER_DEFINED:\n    defnoun defverb defadj defa defan\n\nExceptions:\n UnknownClassicalModeError\n BadNumValueError\n BadChunkingOptionError\n NumOutOfRangeError\n BadUserDefinedPatternError\n BadRcFileError\n BadGenderError"], "functions": [{"name": "setuptools._vendor.inflect.enclose", "asynchronous": false, "params": [{"name": "s", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.joinstem", "asynchronous": false, "params": [{"name": "cutpoint", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "default": "..."}, {"name": "words", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Join stem of each word in words into a string for regex.\n\nEach word is truncated at cutpoint.\n\nCutpoint is usually negative indicating the number of letters to remove\nfrom the end of each word.\n\n```pycon\n>>> joinstem(-2, [\"ephemeris\", \"iris\", \".*itis\"])\n'(?:ephemer|ir|.*it)'\n```\n\n```pycon\n>>> joinstem(None, [\"ephemeris\"])\n'(?:ephemeris)'\n```\n\n```pycon\n>>> joinstem(5, None)\n'(?:)'\n```\n"]}, {"name": "setuptools._vendor.inflect.bysize", "asynchronous": false, "params": [{"name": "words", "type": {"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "Dict", "xref": {"fqname": "typing.Dict", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "set", "xref": {"fqname": "functions.set", "project": "--std--"}, "params": null}]}, "documentation": ["From a list of words, return a dict of sets sorted by word length.\n\n```pycon\n>>> words = ['ant', 'cat', 'dog', 'pig', 'frog', 'goat', 'horse', 'elephant']\n>>> ret = bysize(words)\n>>> sorted(ret[3])\n['ant', 'cat', 'dog', 'pig']\n>>> ret[5]\n{'horse'}\n```\n"]}, {"name": "setuptools._vendor.inflect.make_pl_si_lists", "asynchronous": false, "params": [{"name": "lst", "type": {"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "plending", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "siendingsize", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "default": null}, {"name": "dojoinstem", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": null, "documentation": ["given a list of singular words: lst\n\nan ending to append to make the plural: plending\n\nthe number of characters to remove from the singular\nbefore appending plending: siendingsize\n\na flag whether to create a joinstem: dojoinstem\n\nreturn:\na list of pluralised words: si_list (called si because this is what you need to\nlook for to make the singular)\n\nthe pluralised words as a dict of sets sorted by word length: si_bysize\nthe singular words as a dict of sets sorted by word length: pl_bysize\nif dojoinstem is True: a regular expression that matches any of the stems: stem"]}, {"name": "setuptools._vendor.inflect.get_si_pron", "asynchronous": false, "params": [{"name": "thecase", "type": null, "default": null}, {"name": "word", "type": null, "default": null}, {"name": "gender", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "variables": [{"name": "setuptools._vendor.inflect.pl_sb_irregular_s", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_irregular", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_irregular_caps", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_irregular_compound", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_irregular", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_irregular_caps", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_irregular_compound", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_z_zes_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_z_zes_bysize", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_ze_zes_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_ze_zes_bysize", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_C_is_ides_complete", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_C_is_ides_endings", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_C_is_ides", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_C_is_ides_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_C_a_ata_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_U_a_ae_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_C_a_ae_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_C_en_ina_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_U_um_a_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_C_um_a_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_U_us_i_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_C_us_i_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_C_us_us", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_C_us_us_bysize", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_U_on_a_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_C_on_a_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_C_o_i", "type": null, "documentation": ["list not tuple so can concat for pl_sb_U_o_os"]}, {"name": "setuptools._vendor.inflect.pl_sb_C_o_i_bysize", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_C_o_i_bysize", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_C_o_i_stems", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_U_o_os_complete", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_U_o_os_complete", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_U_o_os_endings", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_U_o_os_bysize", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_U_o_os_bysize", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_U_ch_chs_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_U_ex_ices_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_U_ix_ices_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_C_ex_ices_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_C_ix_ices_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_C_i_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_C_im_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_U_man_mans_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_U_man_mans_caps_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_U_louse_lice_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_uninflected_s_complete", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_uninflected_s_endings", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_uninflected_s", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_uninflected_herd", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_uninflected_complete", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_uninflected_caps", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_uninflected_endings", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_uninflected_bysize", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_singular_s_complete", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_singular_s_endings", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_singular_s_bysize", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_singular_s_complete", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_singular_s_endings", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_singular_s_bysize", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_singular_s_es", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_singular_s", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_ois_oi_case", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_uses_use_case", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_uses_use", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_ies_ie_case", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_ies_ie", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_oes_oe_case", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_oes_oe", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_z_zes", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_zzes_zz", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_ches_che_case", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_ches_che", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_xes_xe", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_sses_sse_case", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_sses_sse", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_ves_ve_case", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_ves_ve", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.plverb_special_s", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect._pl_sb_postfix_adj_defn", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_postfix_adj", "type": {"name": "Iterable", "xref": {"fqname": "typing.Iterable", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_postfix_adj_stems", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_sb_es_is", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_prep_list", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_prep_list_da", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_prep_bysize", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_prep", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_sb_prep_dual_compound", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.singular_pronoun_genders", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_pron_nom", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_pron", "type": {"name": "Dict", "xref": {"fqname": "typing.Dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Dict", "xref": {"fqname": "typing.Dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Dict", "xref": {"fqname": "typing.Dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}]}]}, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_pron_acc", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_pron_acc_keys", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_pron_acc_keys_bysize", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_pron_acc_keys", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.si_pron_acc_keys_bysize", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.plverb_irregular_pres", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.plverb_ambiguous_pres", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.plverb_ambiguous_pres_keys", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.plverb_irregular_non_pres", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.plverb_ambiguous_non_pres", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_v_oes_oe", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_v_oes_oe_endings_size4", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_v_oes_oe_endings_size5", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_count_zero", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_count_one", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_adj_special", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_adj_special_keys", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_adj_poss", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.pl_adj_poss_keys", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.A_abbrev", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.A_y_cons", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.A_explicit_a", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.A_explicit_an", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.A_ordinal_an", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.A_ordinal_a", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.nth", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.nth_suff", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.ordinal", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.ordinal_suff", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.unit", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.teen", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.ten", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.mill", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.def_classical", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.all_classical", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.no_classical", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.string_to_constant", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.DOLLAR_DIGITS", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.FUNCTION_CALL", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.PARTITION_WORD", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.PL_SB_POSTFIX_ADJ_STEMS_RE", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.PL_SB_PREP_DUAL_COMPOUND_RE", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.DENOMINATOR", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.PLVERB_SPECIAL_S_RE", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.WHITESPACE", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.ENDS_WITH_S", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.ENDS_WITH_APOSTROPHE_S", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.INDEFINITE_ARTICLE_TEST", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.SPECIAL_AN", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.SPECIAL_A", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.SPECIAL_ABBREV_AN", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.SPECIAL_ABBREV_A", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.CONSONANTS", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.ARTICLE_SPECIAL_EU", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.ARTICLE_SPECIAL_ONCE", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.ARTICLE_SPECIAL_ONETIME", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.ARTICLE_SPECIAL_UNIT", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.ARTICLE_SPECIAL_UBA", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.ARTICLE_SPECIAL_UKR", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.SPECIAL_CAPITALS", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.VOWELS", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.DIGIT_GROUP", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.TWO_DIGITS", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.THREE_DIGITS", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.THREE_DIGITS_WORD", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.TWO_DIGITS_WORD", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.ONE_DIGIT_WORD", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.FOUR_DIGIT_COMMA", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.NON_DIGIT", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.WHITESPACES_COMMA", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.COMMA_WORD", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.WHITESPACES", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.PRESENT_PARTICIPLE_REPLACEMENTS", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.DIGIT", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.Falsish", "type": null, "documentation": ["ideally, falsish would only validate on bool(value) is False"]}, {"name": "setuptools._vendor.inflect._STATIC_TYPE_CHECKING", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.Word", "type": null, "documentation": []}], "classes": [{"name": "setuptools._vendor.inflect.UnknownClassicalModeError", "bases": ["Exception"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.inflect.BadNumValueError", "bases": ["Exception"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.inflect.BadChunkingOptionError", "bases": ["Exception"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.inflect.NumOutOfRangeError", "bases": ["Exception"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.inflect.BadUserDefinedPatternError", "bases": ["Exception"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.inflect.BadRcFileError", "bases": ["Exception"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.inflect.BadGenderError", "bases": ["Exception"], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.inflect.Words", "bases": ["str"], "methods": [{"name": "setuptools._vendor.inflect.Words.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "orig", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [{"name": "setuptools._vendor.inflect.Words.lowered", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.Words.split_", "type": {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.inflect.Words.first", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.Words.last", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.inflect._WordMeta", "bases": ["type"], "methods": [{"name": "setuptools._vendor.inflect._WordMeta.__instancecheck__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "instance", "type": {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": []}, {"name": "setuptools._vendor.inflect.Word", "bases": [], "methods": [], "class_variables": [], "instance_variables": [], "inner_classes": [], "documentation": ["String with at least 1 character"]}, {"name": "setuptools._vendor.inflect.engine", "bases": [], "methods": [{"name": "setuptools._vendor.inflect.engine.__init__", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine._number_args", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.inflect.engine._number_args", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "val", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.inflect.engine.defnoun", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "singular", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}]}, "default": null}, {"name": "plural", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["Set the noun plural of singular to plural."]}, {"name": "setuptools._vendor.inflect.engine.defverb", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "s1", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}]}, "default": null}, {"name": "p1", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}]}, "default": null}, {"name": "s2", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}]}, "default": null}, {"name": "p2", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}]}, "default": null}, {"name": "s3", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}]}, "default": null}, {"name": "p3", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["Set the verb plurals for s1, s2 and s3 to p1, p2 and p3 respectively.\n\nWhere 1, 2 and 3 represent the 1st, 2nd and 3rd person forms of the verb."]}, {"name": "setuptools._vendor.inflect.engine.defadj", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "singular", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}]}, "default": null}, {"name": "plural", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["Set the adjective plural of singular to plural."]}, {"name": "setuptools._vendor.inflect.engine.defa", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pattern", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["Define the indefinite article as 'a' for words matching pattern."]}, {"name": "setuptools._vendor.inflect.engine.defan", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pattern", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "documentation": ["Define the indefinite article as 'an' for words matching pattern."]}, {"name": "setuptools._vendor.inflect.engine.checkpat", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pattern", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["check for errors in a regex pattern"]}, {"name": "setuptools._vendor.inflect.engine.checkpatplural", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pattern", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["check for errors in a regex replace pattern"]}, {"name": "setuptools._vendor.inflect.engine.ud_match", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "word", "type": {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}, "default": null}, {"name": "wordlist", "type": {"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}]}]}, "default": null}], "returns": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine.classical", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "**kwargs", "type": null, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["turn classical mode on and off for various categories\n\nturn on all classical modes:\nclassical()\nclassical(all=True)\n\nturn on or off specific claassical modes:\ne.g.\nclassical(herd=True)\nclassical(names=False)\n\nBy default all classical modes are off except names.\n\nunknown value in args or key in kwargs raises\nexception: UnknownClasicalModeError"]}, {"name": "setuptools._vendor.inflect.engine.num", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "count", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "default": "..."}, {"name": "show", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Set the number to be used in other method calls.\n\nReturns count.\n\nSet show to False to return '' instead."]}, {"name": "setuptools._vendor.inflect.engine.gender", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "gender", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": ["set the gender for the singular of plural pronouns\n\ncan be one of:\n'neuter'                ('they' -> 'it')\n'feminine'              ('they' -> 'she')\n'masculine'             ('they' -> 'he')\n'gender-neutral'        ('they' -> 'they')\n'feminine or masculine' ('they' -> 'she or he')\n'masculine or feminine' ('they' -> 'he or she')"]}, {"name": "setuptools._vendor.inflect.engine._get_value_from_ast", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "obj", "type": null, "default": null}], "returns": null, "documentation": ["Return the value of the ast object."]}, {"name": "setuptools._vendor.inflect.engine._string_to_substitute", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "mo", "type": {"name": "Match", "xref": {"fqname": "typing.Match", "project": "--std--"}, "params": null}, "default": null}, {"name": "methods_dict", "type": {"name": "Dict", "xref": {"fqname": "typing.Dict", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Callable", "xref": {"fqname": "typing.Callable", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return the string to be substituted for the match."]}, {"name": "setuptools._vendor.inflect.engine.inflect", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "text", "type": {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Perform inflections in a string.\n\ne.g. inflect('The plural of cat is plural(cat)') returns\n'The plural of cat is cats'\n\ncan use plural, plural_noun, plural_verb, plural_adj,\nsingular_noun, a, an, no, ordinal, number_to_words,\nand prespart", "0. PERFORM GENERAL INFLECTIONS IN A STRING"]}, {"name": "setuptools._vendor.inflect.engine.postprocess", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "orig", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "inflected", "type": null, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["## PLURAL SUBROUTINES"]}, {"name": "setuptools._vendor.inflect.engine.partition_word", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "text", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Tuple", "xref": {"fqname": "typing.Tuple", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine.plural", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "text", "type": {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}, "default": null}, {"name": "count", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}]}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return the plural of text.\n\nIf count supplied, then return text if count is one of:\n    1, a, an, one, each, every, this, that\n\notherwise return the plural.\n\nWhitespace at the start and end is preserved."]}, {"name": "setuptools._vendor.inflect.engine.plural_noun", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "text", "type": {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}, "default": null}, {"name": "count", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}]}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return the plural of text, where text is a noun.\n\nIf count supplied, then return text if count is one of:\n    1, a, an, one, each, every, this, that\n\notherwise return the plural.\n\nWhitespace at the start and end is preserved."]}, {"name": "setuptools._vendor.inflect.engine.plural_verb", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "text", "type": {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}, "default": null}, {"name": "count", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}]}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return the plural of text, where text is a verb.\n\nIf count supplied, then return text if count is one of:\n    1, a, an, one, each, every, this, that\n\notherwise return the plural.\n\nWhitespace at the start and end is preserved."]}, {"name": "setuptools._vendor.inflect.engine.plural_adj", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "text", "type": {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}, "default": null}, {"name": "count", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}]}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return the plural of text, where text is an adjective.\n\nIf count supplied, then return text if count is one of:\n    1, a, an, one, each, every, this, that\n\notherwise return the plural.\n\nWhitespace at the start and end is preserved."]}, {"name": "setuptools._vendor.inflect.engine.compare", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "word1", "type": {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}, "default": null}, {"name": "word2", "type": {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}, "default": null}], "returns": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "documentation": ["compare word1 and word2 for equality regardless of plurality\n\nreturn values:\neq - the strings are equal\np:s - word1 is the plural of word2\ns:p - word2 is the plural of word1\np:p - word1 and word2 are two different plural forms of the one word\nFalse - otherwise\n\n```pycon\n>>> compare = engine().compare\n>>> compare(\"egg\", \"eggs\")\n's:p'\n>>> compare('egg', 'egg')\n'eq'\n```\n\nWords should not be empty.\n\n```pycon\n>>> compare('egg', '')\nTraceback (most recent call last):\n...\ntypeguard.TypeCheckError:...is not an instance of inflect.Word\n```\n"]}, {"name": "setuptools._vendor.inflect.engine.compare_nouns", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "word1", "type": {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}, "default": null}, {"name": "word2", "type": {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}, "default": null}], "returns": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "documentation": ["compare word1 and word2 for equality regardless of plurality\nword1 and word2 are to be treated as nouns\n\nreturn values:\neq - the strings are equal\np:s - word1 is the plural of word2\ns:p - word2 is the plural of word1\np:p - word1 and word2 are two different plural forms of the one word\nFalse - otherwise"]}, {"name": "setuptools._vendor.inflect.engine.compare_verbs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "word1", "type": {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}, "default": null}, {"name": "word2", "type": {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}, "default": null}], "returns": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "documentation": ["compare word1 and word2 for equality regardless of plurality\nword1 and word2 are to be treated as verbs\n\nreturn values:\neq - the strings are equal\np:s - word1 is the plural of word2\ns:p - word2 is the plural of word1\np:p - word1 and word2 are two different plural forms of the one word\nFalse - otherwise"]}, {"name": "setuptools._vendor.inflect.engine.compare_adjs", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "word1", "type": {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}, "default": null}, {"name": "word2", "type": {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}, "default": null}], "returns": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "documentation": ["compare word1 and word2 for equality regardless of plurality\nword1 and word2 are to be treated as adjectives\n\nreturn values:\neq - the strings are equal\np:s - word1 is the plural of word2\ns:p - word2 is the plural of word1\np:p - word1 and word2 are two different plural forms of the one word\nFalse - otherwise"]}, {"name": "setuptools._vendor.inflect.engine.singular_noun", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "text", "type": {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}, "default": null}, {"name": "count", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}]}, "default": "..."}, {"name": "gender", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Literal", "xref": {"fqname": "typing.Literal", "project": "--std--"}, "params": [{"name": "False", "xref": null, "params": null}]}]}, "documentation": ["Return the singular of text, where text is a plural noun.\n\nIf count supplied, then return the singular if count is one of:\n\n: 1, a, an, one, each, every, this, that or if count is None\n\notherwise return text unchanged.\n\nWhitespace at the start and end is preserved.\n\n```pycon\n>>> p = engine()\n>>> p.singular_noun('horses')\n'horse'\n>>> p.singular_noun('knights')\n'knight'\n```\n\nReturns False when a singular noun is passed.\n\n```pycon\n>>> p.singular_noun('horse')\nFalse\n>>> p.singular_noun('knight')\nFalse\n>>> p.singular_noun('soldier')\nFalse\n```\n"]}, {"name": "setuptools._vendor.inflect.engine._plequal", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "word1", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "word2", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "pl", "type": null, "default": null}], "returns": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine._pl_reg_plurals", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "pair", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "stems", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "end1", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "end2", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine._pl_check_plurals_N", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "word1", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "word2", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine._pl_check_plurals_adj", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "word1", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "word2", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine.get_count", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "count", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}]}, "default": "..."}], "returns": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine._plnoun", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "word", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "count", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}]}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["@profile"]}, {"name": "setuptools._vendor.inflect.engine._handle_prepositional_phrase", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "phrase", "type": null, "default": null}, {"name": "transform", "type": null, "default": null}, {"name": "sep", "type": null, "default": null}], "returns": null, "documentation": ["Given a word or phrase possibly separated by sep, parse out\nthe prepositional phrase and apply the transform to the word\npreceding the prepositional phrase.\n\nRaise ValueError if the pivot is not found or if at least two\nseparators are not found.\n\n```pycon\n>>> engine._handle_prepositional_phrase(\"man-of-war\", str.upper, '-')\n'MAN-of-war'\n>>> engine._handle_prepositional_phrase(\"man of war\", str.upper, ' ')\n'MAN of war'\n```\n"]}, {"name": "setuptools._vendor.inflect.engine._handle_long_compounds", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "word", "type": {"name": "Words", "xref": {"fqname": "setuptools._vendor.inflect.Words", "project": null}, "params": null}, "default": null}, {"name": "count", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}]}, "documentation": ["Handles the plural and singular for compound `Words` that\nhave three or more words, based on the given count.\n\n```pycon\n>>> engine()._handle_long_compounds(Words(\"pair of scissors\"), 2)\n'pairs of scissors'\n>>> engine()._handle_long_compounds(Words(\"men beyond hills\"), 1)\n'man beyond hills'\n```\n"]}, {"name": "setuptools._vendor.inflect.engine._find_pivot", "asynchronous": false, "params": [{"name": "words", "type": null, "default": null}, {"name": "candidates", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.inflect.engine._pl_special_verb", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "word", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "count", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}]}, "default": "..."}], "returns": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine._pl_general_verb", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "word", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "count", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}]}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine._pl_special_adjective", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "word", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "count", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}]}, "default": "..."}], "returns": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine._sinoun", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "word", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "count", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}]}, "default": "..."}, {"name": "gender", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}]}, "documentation": ["@profile"]}, {"name": "setuptools._vendor.inflect.engine.a", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "text", "type": {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}, "default": null}, {"name": "count", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}]}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return the appropriate indefinite article followed by text.\n\nThe indefinite article is either 'a' or 'an'.\n\nIf count is not one, then return count followed by text\ninstead of 'a' or 'an'.\n\nWhitespace at the start and end is preserved.", "ADJECTIVES"]}, {"name": "setuptools._vendor.inflect.engine._indef_article", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "word", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "count", "type": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "Any", "xref": {"fqname": "typing.Any", "project": "--std--"}, "params": null}]}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine.no", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "text", "type": {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}, "default": null}, {"name": "count", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["If count is 0, no, zero or nil, return 'no' followed by the plural\nof text.\n\nIf count is one of:\n    1, a, an, one, each, every, this, that\n    return count followed by text.\n\nOtherwise return count follow by the plural of text.\n\nIn the return value count is always followed by a space.\n\nWhitespace at the start and end is preserved.", "2. TRANSLATE ZERO-QUANTIFIED $word TO \"no plural($word)\""]}, {"name": "setuptools._vendor.inflect.engine.present_participle", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "word", "type": {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return the present participle for word.\n\nword is the 3rd person singular verb.", "PARTICIPLES"]}, {"name": "setuptools._vendor.inflect.engine.ordinal", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "num", "type": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "Number", "xref": {"fqname": "numbers.Number", "project": "--std--"}, "params": null}, {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}]}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Return the ordinal of num.\n\n```pycon\n>>> ordinal = engine().ordinal\n>>> ordinal(1)\n'1st'\n>>> ordinal('one')\n'first'\n```\n", "NUMERICAL INFLECTIONS"]}, {"name": "setuptools._vendor.inflect.engine.millfn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "ind", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine.unitfn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "units", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}, {"name": "mindex", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine.tenfn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "tens", "type": null, "default": null}, {"name": "units", "type": null, "default": null}, {"name": "mindex", "type": null, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine.hundfn", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "hundreds", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}, {"name": "tens", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}, {"name": "units", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}, {"name": "mindex", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine.group1sub", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "mo", "type": {"name": "Match", "xref": {"fqname": "typing.Match", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine.group1bsub", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "mo", "type": {"name": "Match", "xref": {"fqname": "typing.Match", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine.group2sub", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "mo", "type": {"name": "Match", "xref": {"fqname": "typing.Match", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine.group3sub", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "mo", "type": {"name": "Match", "xref": {"fqname": "typing.Match", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine.hundsub", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "mo", "type": {"name": "Match", "xref": {"fqname": "typing.Match", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine.tensub", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "mo", "type": {"name": "Match", "xref": {"fqname": "typing.Match", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine.unitsub", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "mo", "type": {"name": "Match", "xref": {"fqname": "typing.Match", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine.enword", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "num", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": null}, {"name": "group", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": null}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "setuptools._vendor.inflect.engine._sub_ord", "asynchronous": false, "params": [{"name": "val", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.inflect.engine._chunk_num", "asynchronous": false, "params": [{"name": "cls", "type": null, "default": null}, {"name": "num", "type": null, "default": null}, {"name": "decimal", "type": null, "default": null}, {"name": "group", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.inflect.engine._remove_last_blank", "asynchronous": false, "params": [{"name": "chunks", "type": null, "default": null}], "returns": null, "documentation": ["Remove the last item from chunks if it's a blank string.\n\nReturn the resultant chunks and whether the last item was removed."]}, {"name": "setuptools._vendor.inflect.engine._get_sign", "asynchronous": false, "params": [{"name": "num", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.inflect.engine.number_to_words", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "num", "type": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "Number", "xref": {"fqname": "numbers.Number", "project": "--std--"}, "params": null}, {"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}]}, "default": null}, {"name": "wantlist", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "group", "type": {"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "comma", "type": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "Falsish", "xref": {"fqname": "Falsish", "project": null}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}, {"name": "andword", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "zero", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "one", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "decimal", "type": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "Falsish", "xref": {"fqname": "Falsish", "project": null}, "params": null}, {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}, {"name": "threshold", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "int", "xref": {"fqname": "functions.int", "project": "--std--"}, "params": null}]}, "default": "..."}], "returns": {"name": "Union", "xref": {"fqname": "typing.Union", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, {"name": "List", "xref": {"fqname": "typing.List", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}]}, "documentation": ["Return a number in words.\n\ngroup = 1, 2 or 3 to group numbers before turning into words\ncomma: define comma\n\nandword:\n    word for 'and'. Can be set to ''.\n    e.g. \"one hundred and one\" vs \"one hundred one\"\n\nzero: word for '0'\none: word for '1'\ndecimal: word for decimal point\nthreshold: numbers above threshold not turned into words\n\nparameters not remembered from last call. Departure from Perl version."]}, {"name": "setuptools._vendor.inflect.engine._render", "asynchronous": false, "params": [{"name": "chunks", "type": null, "default": null}, {"name": "decimal", "type": null, "default": null}, {"name": "comma", "type": null, "default": null}], "returns": null, "documentation": []}, {"name": "setuptools._vendor.inflect.engine.join", "asynchronous": false, "params": [{"name": "self", "type": null, "default": null}, {"name": "words", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "Sequence", "xref": {"fqname": "typing.Sequence", "project": "--std--"}, "params": [{"name": "Word", "xref": {"fqname": "setuptools._vendor.inflect.Word", "project": null}, "params": null}]}]}, "default": null}, {"name": "sep", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}, {"name": "sep_spaced", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "final_sep", "type": {"name": "Optional", "xref": {"fqname": "typing.Optional", "project": "--std--"}, "params": [{"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}]}, "default": "..."}, {"name": "conj", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "conj_spaced", "type": {"name": "bool", "xref": {"fqname": "functions.bool", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["Join words into a list.\n\ne.g. join(['ant', 'bee', 'fly']) returns 'ant, bee, and fly'\n\noptions:\nconj: replacement for 'and'\nsep: separator. default ',', unless ',' is in the list then ';'\nfinal_sep: final separator. default ',', unless ',' is in the list then ';'\nconj_spaced: boolean. Should conj have spaces around it"]}], "class_variables": [{"name": "setuptools._vendor.inflect.engine.an", "type": null, "documentation": []}, {"name": "setuptools._vendor.inflect.engine._indef_article_cases", "type": null, "documentation": []}], "instance_variables": [], "inner_classes": [], "documentation": []}], "exports": [{"name": "setuptools._vendor.inflect.Annotated", "xref": {"fqname": "setuptools._vendor.inflect.compat.py38.Annotated", "project": null}}, {"name": "setuptools._vendor.inflect.annotations", "xref": {"fqname": "__future__.annotations", "project": null}}, {"name": "setuptools._vendor.inflect.Any", "xref": {"fqname": "typing.Any", "project": null}}, {"name": "setuptools._vendor.inflect.Callable", "xref": {"fqname": "typing.Callable", "project": null}}, {"name": "setuptools._vendor.inflect.cast", "xref": {"fqname": "typing.cast", "project": null}}, {"name": "setuptools._vendor.inflect.Dict", "xref": {"fqname": "typing.Dict", "project": null}}, {"name": "setuptools._vendor.inflect.Iterable", "xref": {"fqname": "typing.Iterable", "project": null}}, {"name": "setuptools._vendor.inflect.List", "xref": {"fqname": "typing.List", "project": null}}, {"name": "setuptools._vendor.inflect.Literal", "xref": {"fqname": "typing.Literal", "project": null}}, {"name": "setuptools._vendor.inflect.Match", "xref": {"fqname": "typing.Match", "project": null}}, {"name": "setuptools._vendor.inflect.Number", "xref": {"fqname": "numbers.Number", "project": null}}, {"name": "setuptools._vendor.inflect.Optional", "xref": {"fqname": "typing.Optional", "project": null}}, {"name": "setuptools._vendor.inflect.Sequence", "xref": {"fqname": "typing.Sequence", "project": null}}, {"name": "setuptools._vendor.inflect.Tuple", "xref": {"fqname": "typing.Tuple", "project": null}}, {"name": "setuptools._vendor.inflect.TYPE_CHECKING", "xref": {"fqname": "typing.TYPE_CHECKING", "project": null}}, {"name": "setuptools._vendor.inflect.typechecked", "xref": {"fqname": "typeguard.typechecked", "project": null}}, {"name": "setuptools._vendor.inflect.Union", "xref": {"fqname": "typing.Union", "project": null}}, {"name": "setuptools._vendor.inflect.windowed_complete", "xref": {"fqname": "more_itertools.windowed_complete", "project": null}}]}]}