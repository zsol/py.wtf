{"name": "certifi", "metadata": {"name": "certifi", "version": "2025.1.31", "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: 3.10", "Programming Language :: Python :: 3.11", "Programming Language :: Python :: 3.12", "Programming Language :: Python :: 3.13", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9"], "home_page": "https://github.com/certifi/python-certifi", "license": "MPL-2.0", "documentation_url": null, "dependencies": [], "summary": "Python package for providing Mozilla's CA Bundle.", "upload_time": 1738289805}, "documentation": ["# Certifi: Python SSL Certificates\n\nCertifi provides Mozilla's carefully curated collection of Root Certificates for\nvalidating the trustworthiness of SSL certificates while verifying the identity\nof TLS hosts. It has been extracted from the [Requests] project.\n\n## Installation\n\n`certifi` is available on PyPI. Simply install it with `pip`:\n\n```\n$ pip install certifi\n```\n\n## Usage\n\nTo reference the installed certificate authority (CA) bundle, you can use the\nbuilt-in function:\n\n```\n>>> import certifi\n\n>>> certifi.where()\n'/usr/local/lib/python3.7/site-packages/certifi/cacert.pem'\n```\n\nOr from the command line:\n\n```\n$ python -m certifi\n/usr/local/lib/python3.7/site-packages/certifi/cacert.pem\n```\n\nEnjoy!\n\n## Addition/Removal of Certificates\n\nCertifi does not support any addition/removal or other modification of the\nCA trust store content. This project is intended to provide a reliable and\nhighly portable root of trust to python deployments. Look to upstream projects\nfor methods to use alternate trust.\n\n[requests]: https://requests.readthedocs.io/en/master/\n"], "modules": [{"name": "certifi.__main__", "documentation": [], "functions": [], "variables": [{"name": "certifi.__main__.parser", "type": null, "documentation": []}, {"name": "certifi.__main__.args", "type": null, "documentation": []}], "classes": [], "exports": []}, {"name": "certifi", "documentation": [], "functions": [], "variables": [{"name": "certifi.__version__", "type": null, "documentation": []}], "classes": [], "exports": [{"name": "certifi.contents", "xref": {"fqname": "certifi.core.contents", "project": null}}, {"name": "certifi.where", "xref": {"fqname": "certifi.core.where", "project": null}}]}, {"name": "certifi.core", "documentation": ["certifi.py\n~~~~~~~~~~\n\nThis module returns the installation location of cacert.pem or its contents."], "functions": [{"name": "certifi.core.exit_cacert_ctx", "asynchronous": false, "params": [], "returns": {"name": "None", "xref": {"fqname": "constants.None", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "certifi.core.where", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "certifi.core.contents", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "certifi.core.where", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "certifi.core.contents", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}, {"name": "certifi.core.read_text", "asynchronous": false, "params": [{"name": "package", "type": {"name": "Package", "xref": {"fqname": "Package", "project": null}, "params": null}, "default": null}, {"name": "resource", "type": {"name": "Resource", "xref": {"fqname": "Resource", "project": null}, "params": null}, "default": null}, {"name": "encoding", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}, {"name": "errors", "type": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "default": "..."}], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["This fallback will work for Python versions prior to 3.7 that lack the", "importlib.resources module but relies on the existing `where` function", "so won't address issues with environments like PyOxidizer that don't set", "__file__ on modules."]}, {"name": "certifi.core.where", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": ["If we don't have importlib.resources, then we will just do the old logic", "of assuming we're on the filesystem and munge the path directly."]}, {"name": "certifi.core.contents", "asynchronous": false, "params": [], "returns": {"name": "str", "xref": {"fqname": "functions.str", "project": "--std--"}, "params": null}, "documentation": []}], "variables": [{"name": "certifi.core._CACERT_CTX", "type": null, "documentation": []}, {"name": "certifi.core._CACERT_PATH", "type": null, "documentation": []}, {"name": "certifi.core._CACERT_CTX", "type": null, "documentation": []}, {"name": "certifi.core._CACERT_PATH", "type": null, "documentation": []}, {"name": "certifi.core.Package", "type": null, "documentation": []}, {"name": "certifi.core.Resource", "type": null, "documentation": []}], "classes": [], "exports": []}]}